#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Input_Temple

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "sInputCommand_structs.hpp"


namespace SDK::Params
{

// Function BP_Input_Temple.BP_Input_Temple_C.攻击按下
// 0x0730 (0x0730 - 0x0000)
struct BP_Input_Temple_C_攻击按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_1;   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_2;   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable;                                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_3;   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0068(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0088(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_1;                                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_2;                                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_3;                                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_2;                    // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x00D8(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_1; // 0x00F8(0x0010)(ReferenceParm)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_4;   // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_5;   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_6;   // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0124(0x0014)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_7;   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0140(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_3;    // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0160(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x0174(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x018C(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x01A0(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_4;                                 // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_1;        // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_5;                                 // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_6;         // 0x01C0(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x01E8(0x0020)()
	int32                                         ___int_Variable_6;                                 // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_2; // 0x0210(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_7;                                 // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_7;         // 0x0228(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x0240(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_3; // 0x0260(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_8;         // 0x0274(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_8;                                 // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_3;                    // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x029A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x029B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4; // 0x02A0(0x0020)()
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_4; // 0x02C8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_9;         // 0x02E0(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_10;        // 0x02F4(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable_1;          // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0309(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x030A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30B[0x1];                                      // 0x030B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_9;                                 // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5; // 0x0310(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_5; // 0x0330(0x0010)(ReferenceParm)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x0340(0x000C)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0350(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0369(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36A[0x6];                                      // 0x036A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x0370(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2; // 0x0388(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_2;          // 0x0399(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39A[0x2];                                      // 0x039A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_11;        // 0x039C(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x03B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B2[0x6];                                      // 0x03B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_3; // 0x03B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_3;     // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x3];                                      // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_12;        // 0x03CC(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_4; // 0x03E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_4;     // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1[0x3];                                      // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_13;        // 0x03F4(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_1;                     // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x040C(0x000C)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue_1;           // 0x0419(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x041A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x041B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x041C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41D[0x3];                                      // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_14;        // 0x0420(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable_3;          // 0x0434(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0435(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_436[0x2];                                      // 0x0436(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_5; // 0x0438(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_5;     // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0449(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44A[0x2];                                      // 0x044A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_10;                                // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_15;        // 0x0450(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_16;        // 0x0464(0x0014)(NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0478(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_2;                     // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_2;                         // 0x048C(0x000C)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_6; // 0x0498(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_6;     // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A9[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_11;                                // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_17;        // 0x04B0(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_18;        // 0x04C4(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable_4;          // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_19;        // 0x04DC(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F1[0x7];                                      // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_7; // 0x04F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_7;     // 0x0508(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_8; // 0x0510(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_8;     // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_521[0x3];                                      // 0x0521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable_4;                    // 0x0524(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_20;        // 0x0528(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x053C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53D[0x3];                                      // 0x053D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0544(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_545[0x3];                                      // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable_5;                    // 0x0548(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x054C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D[0x3];                                      // 0x054D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0550(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_3;                     // 0x0554(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_3;                         // 0x0558(0x000C)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_564[0x4];                                      // 0x0564(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_9; // 0x0568(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_9;     // 0x0578(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_579[0x7];                                      // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0580(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_4;                         // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_10; // 0x0598(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_10;    // 0x05A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x05A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA[0x6];                                      // 0x05AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x05B0(0x0010)(ReferenceParm)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_11; // 0x05C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_11;    // 0x05D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D1[0x3];                                      // 0x05D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_5;                         // 0x05D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D9[0x7];                                      // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_12; // 0x05E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_12;    // 0x05F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_13; // 0x05F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_13;    // 0x0608(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_609[0x3];                                      // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable_4;                     // 0x060C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_6;                         // 0x0610(0x000C)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61C[0x4];                                      // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_14; // 0x0620(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_14;    // 0x0630(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_5;          // 0x0631(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_632[0x6];                                      // 0x0632(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_2;                          // 0x0638(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_7;                         // 0x0648(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_2;         // 0x064C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x064D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x064E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64F[0x1];                                      // 0x064F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_3;                          // 0x0650(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_8;                         // 0x0660(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_3;         // 0x0664(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_665[0x3];                                      // 0x0665(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_15; // 0x0668(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_15;    // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_679[0x7];                                      // 0x0679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_16; // 0x0680(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_16;    // 0x0690(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_691[0x7];                                      // 0x0691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_4;                          // 0x0698(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_9;                         // 0x06A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AC[0x4];                                      // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_17; // 0x06B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_17;    // 0x06C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_4;         // 0x06C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C2[0x6];                                      // 0x06C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_5;                          // 0x06C8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_10;                        // 0x06D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_5;         // 0x06DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DD[0x3];                                      // 0x06DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_18; // 0x06E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_18;    // 0x06F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F1[0x3];                                      // 0x06F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable_5;                     // 0x06F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_19; // 0x06F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_19;    // 0x0708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_709[0x3];                                      // 0x0709(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_Array_Get_Item_11;                        // 0x070C(0x000C)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_20; // 0x0718(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_20;    // 0x0728(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Temple_C_攻击按下) == 0x000008, "Wrong alignment on BP_Input_Temple_C_攻击按下");
static_assert(sizeof(BP_Input_Temple_C_攻击按下) == 0x000730, "Wrong size on BP_Input_Temple_C_攻击按下");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, time) == 0x000000, "Member 'BP_Input_Temple_C_攻击按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ReturnValue) == 0x000004, "Member 'BP_Input_Temple_C_攻击按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_Temple_C_攻击按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x00002C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GetAttributeCurrentValue_ReturnValue_1) == 0x000030, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GetAttributeCurrentValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GetAttributeCurrentValue_ReturnValue_2) == 0x000034, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GetAttributeCurrentValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_FTrunc_ReturnValue) == 0x000038, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_FTrunc_ReturnValue_1) == 0x00003C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Divide_IntInt_ReturnValue) == 0x000040, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000044, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CanResponseInput_ReturnValue) == 0x000048, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000049, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Array_Index_Variable) == 0x00004C, "Member 'BP_Input_Temple_C_攻击按下::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Variable) == 0x000050, "Member 'BP_Input_Temple_C_攻击按下::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___bool_True_if_break_was_hit_Variable) == 0x000054, "Member 'BP_Input_Temple_C_攻击按下::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GetAttributeCurrentValue_ReturnValue_3) == 0x000058, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GetAttributeCurrentValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Not_PreBool_ReturnValue) == 0x00005C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000064, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000068, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000088, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Loop_Counter_Variable) == 0x00009C, "Member 'BP_Input_Temple_C_攻击按下::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Variable_1) == 0x0000A0, "Member 'BP_Input_Temple_C_攻击按下::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Less_IntInt_ReturnValue) == 0x0000A4, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue) == 0x0000A8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Add_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Variable_2) == 0x0000BC, "Member 'BP_Input_Temple_C_攻击按下::___int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Loop_Counter_Variable_1) == 0x0000C0, "Member 'BP_Input_Temple_C_攻击按下::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000C4, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Variable_3) == 0x0000C8, "Member 'BP_Input_Temple_C_攻击按下::___int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Loop_Counter_Variable_2) == 0x0000CC, "Member 'BP_Input_Temple_C_攻击按下::___int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000D0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x0000D8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_1) == 0x0000F8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GetAttributeCurrentValue_ReturnValue_4) == 0x000108, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GetAttributeCurrentValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Length_ReturnValue_1) == 0x00010C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GetAttributeCurrentValue_ReturnValue_5) == 0x000110, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GetAttributeCurrentValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GetAttributeCurrentValue_ReturnValue_6) == 0x000114, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GetAttributeCurrentValue_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_FTrunc_ReturnValue_2) == 0x000118, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00011C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x000120, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000124, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GetAttributeCurrentValue_ReturnValue_7) == 0x000138, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GetAttributeCurrentValue_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_FTrunc_ReturnValue_3) == 0x00013C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000140, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Divide_IntInt_ReturnValue_1) == 0x000154, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000158, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue_3) == 0x00015C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000160, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x000174, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x000188, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x00018C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x0001A0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Variable_4) == 0x0001B4, "Member 'BP_Input_Temple_C_攻击按下::___int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue_1) == 0x0001B8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Variable_5) == 0x0001BC, "Member 'BP_Input_Temple_C_攻击按下::___int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_6) == 0x0001C0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0001D8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x0001E8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Variable_6) == 0x000208, "Member 'BP_Input_Temple_C_攻击按下::___int_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_2) == 0x000210, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Length_ReturnValue_2) == 0x000220, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Variable_7) == 0x000224, "Member 'BP_Input_Temple_C_攻击按下::___int_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_7) == 0x000228, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x000240, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_3) == 0x000260, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Length_ReturnValue_3) == 0x000270, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_8) == 0x000274, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Variable_8) == 0x000288, "Member 'BP_Input_Temple_C_攻击按下::___int_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Loop_Counter_Variable_3) == 0x00028C, "Member 'BP_Input_Temple_C_攻击按下::___int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_1) == 0x000290, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_3) == 0x000294, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000298, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x000299, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00029A, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BooleanAND_ReturnValue) == 0x00029B, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4) == 0x0002A0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BooleanOR_ReturnValue) == 0x0002C0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_4) == 0x0002C8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Length_ReturnValue_4) == 0x0002D8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_2) == 0x0002DC, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_9) == 0x0002E0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_10) == 0x0002F4, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___bool_True_if_break_was_hit_Variable_1) == 0x000308, "Member 'BP_Input_Temple_C_攻击按下::___bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_1) == 0x000309, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BooleanAND_ReturnValue_1) == 0x00030A, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Variable_9) == 0x00030C, "Member 'BP_Input_Temple_C_攻击按下::___int_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5) == 0x000310, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_5) == 0x000330, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Get_Item) == 0x000340, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000350, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000360, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Length_ReturnValue_5) == 0x000364, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_3) == 0x000368, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BooleanAND_ReturnValue_2) == 0x000369, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000370, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000380, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x000388, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x000398, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___bool_True_if_break_was_hit_Variable_2) == 0x000399, "Member 'BP_Input_Temple_C_攻击按下::___bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_11) == 0x00039C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_2) == 0x0003B0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BooleanAND_ReturnValue_3) == 0x0003B1, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_3) == 0x0003B8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_3) == 0x0003C8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_12) == 0x0003CC, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_4) == 0x0003E0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_4) == 0x0003F0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_13) == 0x0003F4, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Array_Index_Variable_1) == 0x000408, "Member 'BP_Input_Temple_C_攻击按下::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Get_Item_1) == 0x00040C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000418, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue_1) == 0x000419, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00041A, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BooleanAND_ReturnValue_4) == 0x00041B, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BooleanOR_ReturnValue_1) == 0x00041C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_14) == 0x000420, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___bool_True_if_break_was_hit_Variable_3) == 0x000434, "Member 'BP_Input_Temple_C_攻击按下::___bool_True_if_break_was_hit_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_3) == 0x000435, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_5) == 0x000438, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_5) == 0x000448, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BooleanAND_ReturnValue_5) == 0x000449, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Variable_10) == 0x00044C, "Member 'BP_Input_Temple_C_攻击按下::___int_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_15) == 0x000450, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_16) == 0x000464, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000478, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Array_Index_Variable_2) == 0x000488, "Member 'BP_Input_Temple_C_攻击按下::___int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Get_Item_2) == 0x00048C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_6) == 0x000498, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_6) == 0x0004A8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Variable_11) == 0x0004AC, "Member 'BP_Input_Temple_C_攻击按下::___int_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_17) == 0x0004B0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_18) == 0x0004C4, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___bool_True_if_break_was_hit_Variable_4) == 0x0004D8, "Member 'BP_Input_Temple_C_攻击按下::___bool_True_if_break_was_hit_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_19) == 0x0004DC, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_4) == 0x0004F0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_7) == 0x0004F8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_7) == 0x000508, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_8) == 0x000510, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_8) == 0x000520, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Loop_Counter_Variable_4) == 0x000524, "Member 'BP_Input_Temple_C_攻击按下::___int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_20) == 0x000528, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_4) == 0x00053C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_4) == 0x000540, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BooleanAND_ReturnValue_6) == 0x000544, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Loop_Counter_Variable_5) == 0x000548, "Member 'BP_Input_Temple_C_攻击按下::___int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_5) == 0x00054C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_5) == 0x000550, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Array_Index_Variable_3) == 0x000554, "Member 'BP_Input_Temple_C_攻击按下::___int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Get_Item_3) == 0x000558, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_9) == 0x000568, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_9) == 0x000578, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, K2Node_MakeArray_Array) == 0x000580, "Member 'BP_Input_Temple_C_攻击按下::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Get_Item_4) == 0x000590, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_10) == 0x000598, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_10) == 0x0005A8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0005A9, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, K2Node_MakeArray_Array_1) == 0x0005B0, "Member 'BP_Input_Temple_C_攻击按下::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_11) == 0x0005C0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_11) == 0x0005D0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Get_Item_5) == 0x0005D4, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x0005D8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_12) == 0x0005E0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_12' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_12) == 0x0005F0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_13) == 0x0005F8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_13' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_13) == 0x000608, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Array_Index_Variable_4) == 0x00060C, "Member 'BP_Input_Temple_C_攻击按下::___int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Get_Item_6) == 0x000610, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_14) == 0x000620, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_14' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_14) == 0x000630, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___bool_True_if_break_was_hit_Variable_5) == 0x000631, "Member 'BP_Input_Temple_C_攻击按下::___bool_True_if_break_was_hit_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, K2Node_MakeArray_Array_2) == 0x000638, "Member 'BP_Input_Temple_C_攻击按下::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Get_Item_7) == 0x000648, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_2) == 0x00064C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_5) == 0x00064D, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_BooleanAND_ReturnValue_7) == 0x00064E, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, K2Node_MakeArray_Array_3) == 0x000650, "Member 'BP_Input_Temple_C_攻击按下::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Get_Item_8) == 0x000660, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_3) == 0x000664, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_15) == 0x000668, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_15' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_15) == 0x000678, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_16) == 0x000680, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_16' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_16) == 0x000690, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, K2Node_MakeArray_Array_4) == 0x000698, "Member 'BP_Input_Temple_C_攻击按下::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Get_Item_9) == 0x0006A8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Get_Item_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_17) == 0x0006B0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_17' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_17) == 0x0006C0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_4) == 0x0006C1, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, K2Node_MakeArray_Array_5) == 0x0006C8, "Member 'BP_Input_Temple_C_攻击按下::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Get_Item_10) == 0x0006D8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Get_Item_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_5) == 0x0006DC, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_18) == 0x0006E0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_18' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_18) == 0x0006F0, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, ___int_Array_Index_Variable_5) == 0x0006F4, "Member 'BP_Input_Temple_C_攻击按下::___int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_19) == 0x0006F8, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_19' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_19) == 0x000708, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_Array_Get_Item_11) == 0x00070C, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_Array_Get_Item_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_20) == 0x000718, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_20' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_20) == 0x000728, "Member 'BP_Input_Temple_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_20' has a wrong offset!");

// Function BP_Input_Temple.BP_Input_Temple_C.攻击长按
// 0x04D8 (0x04D8 - 0x0000)
struct BP_Input_Temple_C_攻击长按 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x001C(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_1;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0034(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0050(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0070(0x0010)(ReferenceParm)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x008C(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_2;                                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x00A8(0x0020)()
	int32                                         ___int_Array_Index_Variable;                       // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_1; // 0x00D0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x00F8(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_1;                     // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x0110(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_3;                                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_4;                                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_5;                                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x0130(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x0150(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_2; // 0x0168(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x0180(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_3; // 0x01A0(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x01B4(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x01C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x01C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_1;          // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x01D0(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4; // 0x0200(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_4; // 0x0220(0x0010)(ReferenceParm)
	int32                                         ___int_Variable_6;                                 // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x0234(0x000C)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_6;         // 0x0240(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_1;        // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_7;         // 0x025C(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_2;                     // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_3;                     // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_2;                         // 0x0278(0x000C)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_3;                         // 0x0284(0x000C)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable_2;          // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x0298(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_3;          // 0x02A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AA[0x6];                                      // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2; // 0x02B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x02C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C2[0x2];                                      // 0x02C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_7;                                 // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_8;         // 0x02C8(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue_1;           // 0x02DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x02DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x02DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ___int_Variable_8;                                 // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_9;         // 0x02E8(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_2;        // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable_2;                    // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_10;        // 0x0304(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0319(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A[0x2];                                      // 0x031A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_3;        // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_3; // 0x0328(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_3;     // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_9;                                 // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_11;        // 0x0340(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_4; // 0x0358(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_4;     // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable_4;                     // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_4;                         // 0x0370(0x000C)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_5; // 0x0380(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_5;     // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_4;          // 0x0391(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0392(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393[0x1];                                      // 0x0393(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable_3;                    // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_6; // 0x0398(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_6;     // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x03A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AA[0x2];                                      // 0x03AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x03B8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_5;                         // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_7; // 0x03D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_7;     // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x03E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E2[0x2];                                      // 0x03E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable_4;                    // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_8; // 0x03E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_8;     // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x03F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x03FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FB[0x1];                                      // 0x03FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x0400(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_2;                          // 0x0410(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_6;                         // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_7;                         // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_2;         // 0x0429(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42A[0x6];                                      // 0x042A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_3;                          // 0x0430(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_8;                         // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_9; // 0x0448(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_9;     // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_3;         // 0x0459(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45A[0x6];                                      // 0x045A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_10; // 0x0460(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_10;    // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_471[0x7];                                      // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_11; // 0x0478(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_11;    // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_4;                          // 0x0490(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_9;                         // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_4;         // 0x04A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A5[0x3];                                      // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_12; // 0x04A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_12;    // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_13; // 0x04C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_13;    // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Temple_C_攻击长按) == 0x000008, "Wrong alignment on BP_Input_Temple_C_攻击长按");
static_assert(sizeof(BP_Input_Temple_C_攻击长按) == 0x0004D8, "Wrong size on BP_Input_Temple_C_攻击长按");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, time) == 0x000000, "Member 'BP_Input_Temple_C_攻击长按::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ReturnValue) == 0x000004, "Member 'BP_Input_Temple_C_攻击长按::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Variable) == 0x000018, "Member 'BP_Input_Temple_C_攻击长按::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc______ReturnValue) == 0x00001C, "Member 'BP_Input_Temple_C_攻击长按::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Variable_1) == 0x000030, "Member 'BP_Input_Temple_C_攻击长按::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue) == 0x000034, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___bool_True_if_break_was_hit_Variable) == 0x000048, "Member 'BP_Input_Temple_C_攻击长按::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Not_PreBool_ReturnValue) == 0x000049, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000050, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000070, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CanResponseInput_ReturnValue) == 0x000080, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x000088, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x00008C, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Variable_2) == 0x0000A0, "Member 'BP_Input_Temple_C_攻击长按::___int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x0000A8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Array_Index_Variable) == 0x0000C8, "Member 'BP_Input_Temple_C_攻击长按::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BreakGameplayTagContainer_GameplayTags_1) == 0x0000D0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BreakGameplayTagContainer_GameplayTags_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Length_ReturnValue_1) == 0x0000E0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Loop_Counter_Variable) == 0x0000E4, "Member 'BP_Input_Temple_C_攻击长按::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Add_IntInt_ReturnValue) == 0x0000E8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Loop_Counter_Variable_1) == 0x0000EC, "Member 'BP_Input_Temple_C_攻击长按::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Less_IntInt_ReturnValue) == 0x0000F0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000F4, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x0000F8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Array_Index_Variable_1) == 0x00010C, "Member 'BP_Input_Temple_C_攻击长按::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x000110, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Variable_3) == 0x000124, "Member 'BP_Input_Temple_C_攻击长按::___int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Variable_4) == 0x000128, "Member 'BP_Input_Temple_C_攻击长按::___int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Variable_5) == 0x00012C, "Member 'BP_Input_Temple_C_攻击长按::___int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x000130, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x000150, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BreakGameplayTagContainer_GameplayTags_2) == 0x000168, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BreakGameplayTagContainer_GameplayTags_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Length_ReturnValue_2) == 0x000178, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x000180, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BreakGameplayTagContainer_GameplayTags_3) == 0x0001A0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BreakGameplayTagContainer_GameplayTags_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001B0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Get_Item) == 0x0001B4, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Length_ReturnValue_3) == 0x0001C0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001C4, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0001C5, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BooleanAND_ReturnValue) == 0x0001C6, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BooleanAND_ReturnValue_1) == 0x0001C7, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_IsMovingOnGround_ReturnValue) == 0x0001C8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___bool_True_if_break_was_hit_Variable_1) == 0x0001C9, "Member 'BP_Input_Temple_C_攻击长按::___bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BooleanOR_ReturnValue) == 0x0001CA, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001CB, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BooleanAND_ReturnValue_2) == 0x0001CC, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x0001D0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x0001E8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x0001F8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4) == 0x000200, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BreakGameplayTagContainer_GameplayTags_4) == 0x000220, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BreakGameplayTagContainer_GameplayTags_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Variable_6) == 0x000230, "Member 'BP_Input_Temple_C_攻击长按::___int_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Get_Item_1) == 0x000234, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_6) == 0x000240, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Length_ReturnValue_4) == 0x000254, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_GetSkillAcceptInput_ReturnValue_1) == 0x000258, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_GetSkillAcceptInput_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_7) == 0x00025C, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Array_Index_Variable_2) == 0x000270, "Member 'BP_Input_Temple_C_攻击长按::___int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Array_Index_Variable_3) == 0x000274, "Member 'BP_Input_Temple_C_攻击长按::___int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Get_Item_2) == 0x000278, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Get_Item_3) == 0x000284, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___bool_True_if_break_was_hit_Variable_2) == 0x000290, "Member 'BP_Input_Temple_C_攻击长按::___bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Not_PreBool_ReturnValue_2) == 0x000291, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000298, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x0002A8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___bool_True_if_break_was_hit_Variable_3) == 0x0002A9, "Member 'BP_Input_Temple_C_攻击长按::___bool_True_if_break_was_hit_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x0002B0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x0002C0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Not_PreBool_ReturnValue_3) == 0x0002C1, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Variable_7) == 0x0002C4, "Member 'BP_Input_Temple_C_攻击长按::___int_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_8) == 0x0002C8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0002DC, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_IsMovingOnGround_ReturnValue_1) == 0x0002DD, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_IsMovingOnGround_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0002DE, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BooleanAND_ReturnValue_3) == 0x0002DF, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Variable_8) == 0x0002E0, "Member 'BP_Input_Temple_C_攻击长按::___int_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BooleanOR_ReturnValue_1) == 0x0002E4, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_9) == 0x0002E8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_GetSkillAcceptInput_ReturnValue_2) == 0x0002FC, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_GetSkillAcceptInput_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Loop_Counter_Variable_2) == 0x000300, "Member 'BP_Input_Temple_C_攻击长按::___int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_10) == 0x000304, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Less_IntInt_ReturnValue_2) == 0x000318, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BooleanAND_ReturnValue_4) == 0x000319, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Add_IntInt_ReturnValue_2) == 0x00031C, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_GetSkillAcceptInput_ReturnValue_3) == 0x000320, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_GetSkillAcceptInput_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_3) == 0x000328, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_3) == 0x000338, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Variable_9) == 0x00033C, "Member 'BP_Input_Temple_C_攻击长按::___int_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_11) == 0x000340, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_4) == 0x000358, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_4) == 0x000368, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Array_Index_Variable_4) == 0x00036C, "Member 'BP_Input_Temple_C_攻击长按::___int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Get_Item_4) == 0x000370, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_5) == 0x000380, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_5) == 0x000390, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___bool_True_if_break_was_hit_Variable_4) == 0x000391, "Member 'BP_Input_Temple_C_攻击长按::___bool_True_if_break_was_hit_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Not_PreBool_ReturnValue_4) == 0x000392, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Loop_Counter_Variable_3) == 0x000394, "Member 'BP_Input_Temple_C_攻击长按::___int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_6) == 0x000398, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_6) == 0x0003A8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Less_IntInt_ReturnValue_3) == 0x0003A9, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Add_IntInt_ReturnValue_3) == 0x0003AC, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BooleanAND_ReturnValue_5) == 0x0003B0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, K2Node_MakeArray_Array) == 0x0003B8, "Member 'BP_Input_Temple_C_攻击长按::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Get_Item_5) == 0x0003C8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_7) == 0x0003D0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_7) == 0x0003E0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0003E1, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, ___int_Loop_Counter_Variable_4) == 0x0003E4, "Member 'BP_Input_Temple_C_攻击长按::___int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_8) == 0x0003E8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_8) == 0x0003F8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Less_IntInt_ReturnValue_4) == 0x0003F9, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_BooleanAND_ReturnValue_6) == 0x0003FA, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Add_IntInt_ReturnValue_4) == 0x0003FC, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, K2Node_MakeArray_Array_1) == 0x000400, "Member 'BP_Input_Temple_C_攻击长按::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, K2Node_MakeArray_Array_2) == 0x000410, "Member 'BP_Input_Temple_C_攻击长按::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Get_Item_6) == 0x000420, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Get_Item_7) == 0x000424, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000428, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_IsValidIndex_ReturnValue_2) == 0x000429, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_IsValidIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, K2Node_MakeArray_Array_3) == 0x000430, "Member 'BP_Input_Temple_C_攻击长按::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Get_Item_8) == 0x000440, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_9) == 0x000448, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_9) == 0x000458, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_IsValidIndex_ReturnValue_3) == 0x000459, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_IsValidIndex_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_10) == 0x000460, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_10) == 0x000470, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_11) == 0x000478, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_11) == 0x000488, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, K2Node_MakeArray_Array_4) == 0x000490, "Member 'BP_Input_Temple_C_攻击长按::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_Get_Item_9) == 0x0004A0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_Get_Item_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_Array_IsValidIndex_ReturnValue_4) == 0x0004A4, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_Array_IsValidIndex_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_12) == 0x0004A8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_12' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_12) == 0x0004B8, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_13) == 0x0004C0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_13' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_13) == 0x0004D0, "Member 'BP_Input_Temple_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_13' has a wrong offset!");

// Function BP_Input_Temple.BP_Input_Temple_C.攻击抬起
// 0x0060 (0x0060 - 0x0000)
struct BP_Input_Temple_C_攻击抬起 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Temple_C_攻击抬起) == 0x000008, "Wrong alignment on BP_Input_Temple_C_攻击抬起");
static_assert(sizeof(BP_Input_Temple_C_攻击抬起) == 0x000060, "Wrong size on BP_Input_Temple_C_攻击抬起");
static_assert(offsetof(BP_Input_Temple_C_攻击抬起, time) == 0x000000, "Member 'BP_Input_Temple_C_攻击抬起::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击抬起, ReturnValue) == 0x000004, "Member 'BP_Input_Temple_C_攻击抬起::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击抬起, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_Temple_C_攻击抬起::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击抬起, CallFunc_CreateSkillCommand_ReturnValue) == 0x00002C, "Member 'BP_Input_Temple_C_攻击抬起::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击抬起, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x000040, "Member 'BP_Input_Temple_C_攻击抬起::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击抬起, CallFunc_CanResponseInput_ReturnValue) == 0x000041, "Member 'BP_Input_Temple_C_攻击抬起::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击抬起, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000048, "Member 'BP_Input_Temple_C_攻击抬起::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_攻击抬起, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000058, "Member 'BP_Input_Temple_C_攻击抬起::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function BP_Input_Temple.BP_Input_Temple_C.技能1按下
// 0x02C8 (0x02C8 - 0x0000)
struct BP_Input_Temple_C_技能1按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc___1___ReturnValue;                        // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_1;   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_2;   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_3;   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_4;   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_5;   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_1;        // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_6;   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_7;   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_3;    // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0088(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x009C(0x000C)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x00A8(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x00C0(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x00E0(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x00F4(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x0108(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x011C(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_2;        // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_6;         // 0x0134(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_7;         // 0x0148(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_8;         // 0x0160(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0177(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0178(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_9;         // 0x018C(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue_1;           // 0x01A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x01A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_10;        // 0x01A8(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_11;        // 0x01BC(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_12;        // 0x01E4(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2; // 0x01F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_3; // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_3;     // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_4; // 0x0228(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_4;     // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_5; // 0x0240(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_5;     // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_13;        // 0x0254(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_6; // 0x0268(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_6;     // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_7; // 0x0280(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_7;     // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_8; // 0x0298(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_8;     // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x02B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Temple_C_技能1按下) == 0x000008, "Wrong alignment on BP_Input_Temple_C_技能1按下");
static_assert(sizeof(BP_Input_Temple_C_技能1按下) == 0x0002C8, "Wrong size on BP_Input_Temple_C_技能1按下");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, time) == 0x000000, "Member 'BP_Input_Temple_C_技能1按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, ReturnValue) == 0x000004, "Member 'BP_Input_Temple_C_技能1按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc___1___ReturnValue) == 0x000018, "Member 'BP_Input_Temple_C_技能1按下::CallFunc___1___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x00002C, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GetAttributeCurrentValue_ReturnValue_1) == 0x000030, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GetAttributeCurrentValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x000034, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GetAttributeCurrentValue_ReturnValue_2) == 0x000040, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GetAttributeCurrentValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_FTrunc_ReturnValue) == 0x000044, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GetAttributeCurrentValue_ReturnValue_3) == 0x000048, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GetAttributeCurrentValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_FTrunc_ReturnValue_1) == 0x00004C, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GetAttributeCurrentValue_ReturnValue_4) == 0x000050, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GetAttributeCurrentValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_FTrunc_ReturnValue_2) == 0x000054, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GetAttributeCurrentValue_ReturnValue_5) == 0x000058, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GetAttributeCurrentValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_Divide_IntInt_ReturnValue) == 0x00005C, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_FTrunc_ReturnValue_3) == 0x000060, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000064, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_Divide_IntInt_ReturnValue_1) == 0x000068, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00006C, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000070, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x000074, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GetSkillAcceptInput_ReturnValue_1) == 0x000075, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GetSkillAcceptInput_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GetAttributeCurrentValue_ReturnValue_6) == 0x000078, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GetAttributeCurrentValue_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GetAttributeCurrentValue_ReturnValue_7) == 0x00007C, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GetAttributeCurrentValue_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000080, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue_3) == 0x000084, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000088, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x00009C, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x0000A8, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CanResponseInput_ReturnValue) == 0x0000BC, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x0000C0, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x0000E0, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x0000F4, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x000108, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x00011C, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_GetSkillAcceptInput_ReturnValue_2) == 0x000130, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_GetSkillAcceptInput_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_6) == 0x000134, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_7) == 0x000148, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00015C, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_8) == 0x000160, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000174, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x000175, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_BooleanAND_ReturnValue) == 0x000176, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_BooleanOR_ReturnValue) == 0x000177, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000178, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000188, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_9) == 0x00018C, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0001A0, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0001A1, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_IsMovingOnGround_ReturnValue_1) == 0x0001A2, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_IsMovingOnGround_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_BooleanAND_ReturnValue_1) == 0x0001A3, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_BooleanOR_ReturnValue_1) == 0x0001A4, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_10) == 0x0001A8, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_11) == 0x0001BC, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x0001D0, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x0001E0, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_12) == 0x0001E4, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x0001F8, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x000208, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput_3) == 0x000210, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue_3) == 0x000220, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput_4) == 0x000228, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue_4) == 0x000238, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput_5) == 0x000240, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue_5) == 0x000250, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_13) == 0x000254, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput_6) == 0x000268, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue_6) == 0x000278, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput_7) == 0x000280, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue_7) == 0x000290, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput_8) == 0x000298, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue_8) == 0x0002A8, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0002B0, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0002C0, "Member 'BP_Input_Temple_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");

// Function BP_Input_Temple.BP_Input_Temple_C.技能1长按
// 0x0030 (0x0030 - 0x0000)
struct BP_Input_Temple_C_技能1长按 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc___1___ReturnValue;                        // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Temple_C_技能1长按) == 0x000004, "Wrong alignment on BP_Input_Temple_C_技能1长按");
static_assert(sizeof(BP_Input_Temple_C_技能1长按) == 0x000030, "Wrong size on BP_Input_Temple_C_技能1长按");
static_assert(offsetof(BP_Input_Temple_C_技能1长按, time) == 0x000000, "Member 'BP_Input_Temple_C_技能1长按::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1长按, ReturnValue) == 0x000004, "Member 'BP_Input_Temple_C_技能1长按::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1长按, CallFunc___1___ReturnValue) == 0x000018, "Member 'BP_Input_Temple_C_技能1长按::CallFunc___1___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_技能1长按, CallFunc_CanResponseInput_ReturnValue) == 0x00002C, "Member 'BP_Input_Temple_C_技能1长按::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");

// Function BP_Input_Temple.BP_Input_Temple_C.瞄准按下
// 0x0030 (0x0030 - 0x0000)
struct BP_Input_Temple_C_瞄准按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Temple_C_瞄准按下) == 0x000004, "Wrong alignment on BP_Input_Temple_C_瞄准按下");
static_assert(sizeof(BP_Input_Temple_C_瞄准按下) == 0x000030, "Wrong size on BP_Input_Temple_C_瞄准按下");
static_assert(offsetof(BP_Input_Temple_C_瞄准按下, time) == 0x000000, "Member 'BP_Input_Temple_C_瞄准按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_瞄准按下, ReturnValue) == 0x000004, "Member 'BP_Input_Temple_C_瞄准按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_瞄准按下, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_Temple_C_瞄准按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_瞄准按下, CallFunc_CanResponseInput_ReturnValue) == 0x00002C, "Member 'BP_Input_Temple_C_瞄准按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");

// Function BP_Input_Temple.BP_Input_Temple_C.大招按下
// 0x0128 (0x0128 - 0x0000)
struct BP_Input_Temple_C_大招按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue;        // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0030(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVectorDouble_X;                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVectorDouble_Y;                      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVectorDouble_Z;                      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_MakeVectorDouble_ReturnValue;             // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_D_Subtract_FloatFloat_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_MakeVectorDouble_ReturnValue_1;           // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_TraceGround_ReturnValue;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_D_EqualEqual_VectorVector_ReturnValue;    // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x00B4(0x0014)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x00D0(0x0020)()
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_1;   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Temple_C_大招按下) == 0x000008, "Wrong alignment on BP_Input_Temple_C_大招按下");
static_assert(sizeof(BP_Input_Temple_C_大招按下) == 0x000128, "Wrong size on BP_Input_Temple_C_大招按下");
static_assert(offsetof(BP_Input_Temple_C_大招按下, time) == 0x000000, "Member 'BP_Input_Temple_C_大招按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, ReturnValue) == 0x000004, "Member 'BP_Input_Temple_C_大招按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_D_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Input_Temple_C_大招按下::CallFunc_D_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000030, "Member 'BP_Input_Temple_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_BreakVectorDouble_X) == 0x000048, "Member 'BP_Input_Temple_C_大招按下::CallFunc_BreakVectorDouble_X' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_BreakVectorDouble_Y) == 0x000050, "Member 'BP_Input_Temple_C_大招按下::CallFunc_BreakVectorDouble_Y' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_BreakVectorDouble_Z) == 0x000058, "Member 'BP_Input_Temple_C_大招按下::CallFunc_BreakVectorDouble_Z' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_MakeVectorDouble_ReturnValue) == 0x000060, "Member 'BP_Input_Temple_C_大招按下::CallFunc_MakeVectorDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_D_Subtract_FloatFloat_ReturnValue) == 0x000078, "Member 'BP_Input_Temple_C_大招按下::CallFunc_D_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_MakeVectorDouble_ReturnValue_1) == 0x000080, "Member 'BP_Input_Temple_C_大招按下::CallFunc_MakeVectorDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_TraceGround_ReturnValue) == 0x000098, "Member 'BP_Input_Temple_C_大招按下::CallFunc_TraceGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_CanResponseInput_ReturnValue) == 0x0000B0, "Member 'BP_Input_Temple_C_大招按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_D_EqualEqual_VectorVector_ReturnValue) == 0x0000B1, "Member 'BP_Input_Temple_C_大招按下::CallFunc_D_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x0000B4, "Member 'BP_Input_Temple_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x0000C8, "Member 'BP_Input_Temple_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x0000D0, "Member 'BP_Input_Temple_C_大招按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue_1) == 0x0000F0, "Member 'BP_Input_Temple_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0000F8, "Member 'BP_Input_Temple_C_大招按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000108, "Member 'BP_Input_Temple_C_大招按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000109, "Member 'BP_Input_Temple_C_大招按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000110, "Member 'BP_Input_Temple_C_大招按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Temple_C_大招按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000120, "Member 'BP_Input_Temple_C_大招按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

}

