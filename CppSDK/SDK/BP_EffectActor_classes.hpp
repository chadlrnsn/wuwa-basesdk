#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EffectActor

#include "Basic.hpp"

#include "SEffectVectorParameter_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"
#include "Engine_structs.hpp"
#include "EEffectPlay_structs.hpp"
#include "SEffectFloatParameter_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EEffectType_structs.hpp"
#include "SEffectColorParameter_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EffectActor.BP_EffectActor_C
// 0x00F8 (0x03E8 - 0x02F0)
class ABP_EffectActor_C final : public AKuroSceneEffectActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        EffectData;                                        // 0x0300(0x0020)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          DebugPrintOnConstruction;                          // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EditorTickWithoutSelected;                         // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_322[0x2];                                      // 0x0322(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectComponent;                                   // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEffectPlay                                   PlayType;                                          // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEffectType                                   EffectType;                                        // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstTick;                                         // 0x032A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          使用特效参数;                                      // 0x032B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         环境光影响强度覆盖;                                // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSEffectFloatParameter>         用户参数Float;                                     // 0x0330(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSEffectColorParameter>         用户参数Color;                                     // 0x0340(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSEffectVectorParameter>        用户参数Vector;                                    // 0x0350(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSEffectFloatParameter>         材质参数Float;                                     // 0x0360(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSEffectColorParameter>         材质参数Color;                                     // 0x0370(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSEffectFloatParameter>         材质参数Float_Temp;                                // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UsedInBossFight;                                   // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShouldBePlaying;                                   // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OpenVisibilityOptimize;                            // 0x0392(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForceStoppingTime;                                 // 0x0393(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreStoppingTime;                                // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MobileOnly;                                        // 0x0395(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_396[0x2];                                      // 0x0396(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomProcess;                                     // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSimulateFromSequence;                            // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsPublicToSequence;                                // 0x039D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39E[0x2];                                      // 0x039E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatParameter0;                                   // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         FloatParameter1;                                   // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         FloatParameter2;                                   // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FloatParameterName0;                               // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 FloatParameterName1;                               // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 FloatParameterName2;                               // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	EEffectPlay                                   EditorPlayType;                                    // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisibleInRaytracing;                               // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_EffectActor(int32 EntryPoint);
	void EditorDestroy();
	void OnReceiveShowSceneEffectActor();
	void OnReceiveHideSceneEffectActor();
	void DoHiddenInGame(bool bValue);
	void EditorTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void RemoveHandle();
	void SetHandle(int32 Handle);
	void UserConstructionScript();
	void Refresh();
	void CalculateLifeTime();
	void IsEditor(bool* IsEditor_0);
	bool Stop(const class FString& Reason, bool Immediately);
	void Play(const class FString& Reason);
	void PlayEffect();
	void StopEffect();
	void GetHandle(int32* Handle);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EffectActor_C">();
	}
	static class ABP_EffectActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EffectActor_C>();
	}
};
static_assert(alignof(ABP_EffectActor_C) == 0x000008, "Wrong alignment on ABP_EffectActor_C");
static_assert(sizeof(ABP_EffectActor_C) == 0x0003E8, "Wrong size on ABP_EffectActor_C");
static_assert(offsetof(ABP_EffectActor_C, UberGraphFrame) == 0x0002F0, "Member 'ABP_EffectActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, DefaultSceneRoot) == 0x0002F8, "Member 'ABP_EffectActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, EffectData) == 0x000300, "Member 'ABP_EffectActor_C::EffectData' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, DebugPrintOnConstruction) == 0x000320, "Member 'ABP_EffectActor_C::DebugPrintOnConstruction' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, EditorTickWithoutSelected) == 0x000321, "Member 'ABP_EffectActor_C::EditorTickWithoutSelected' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, EffectComponent) == 0x000324, "Member 'ABP_EffectActor_C::EffectComponent' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, PlayType) == 0x000328, "Member 'ABP_EffectActor_C::PlayType' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, EffectType) == 0x000329, "Member 'ABP_EffectActor_C::EffectType' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, FirstTick) == 0x00032A, "Member 'ABP_EffectActor_C::FirstTick' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, 使用特效参数) == 0x00032B, "Member 'ABP_EffectActor_C::使用特效参数' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, 环境光影响强度覆盖) == 0x00032C, "Member 'ABP_EffectActor_C::环境光影响强度覆盖' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, 用户参数Float) == 0x000330, "Member 'ABP_EffectActor_C::用户参数Float' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, 用户参数Color) == 0x000340, "Member 'ABP_EffectActor_C::用户参数Color' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, 用户参数Vector) == 0x000350, "Member 'ABP_EffectActor_C::用户参数Vector' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, 材质参数Float) == 0x000360, "Member 'ABP_EffectActor_C::材质参数Float' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, 材质参数Color) == 0x000370, "Member 'ABP_EffectActor_C::材质参数Color' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, 材质参数Float_Temp) == 0x000380, "Member 'ABP_EffectActor_C::材质参数Float_Temp' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, UsedInBossFight) == 0x000390, "Member 'ABP_EffectActor_C::UsedInBossFight' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, ShouldBePlaying) == 0x000391, "Member 'ABP_EffectActor_C::ShouldBePlaying' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, OpenVisibilityOptimize) == 0x000392, "Member 'ABP_EffectActor_C::OpenVisibilityOptimize' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, ForceStoppingTime) == 0x000393, "Member 'ABP_EffectActor_C::ForceStoppingTime' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, IgnoreStoppingTime) == 0x000394, "Member 'ABP_EffectActor_C::IgnoreStoppingTime' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, MobileOnly) == 0x000395, "Member 'ABP_EffectActor_C::MobileOnly' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, CustomProcess) == 0x000398, "Member 'ABP_EffectActor_C::CustomProcess' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, IsSimulateFromSequence) == 0x00039C, "Member 'ABP_EffectActor_C::IsSimulateFromSequence' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, IsPublicToSequence) == 0x00039D, "Member 'ABP_EffectActor_C::IsPublicToSequence' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, FloatParameter0) == 0x0003A0, "Member 'ABP_EffectActor_C::FloatParameter0' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, FloatParameter1) == 0x0003A4, "Member 'ABP_EffectActor_C::FloatParameter1' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, FloatParameter2) == 0x0003A8, "Member 'ABP_EffectActor_C::FloatParameter2' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, FloatParameterName0) == 0x0003B0, "Member 'ABP_EffectActor_C::FloatParameterName0' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, FloatParameterName1) == 0x0003C0, "Member 'ABP_EffectActor_C::FloatParameterName1' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, FloatParameterName2) == 0x0003D0, "Member 'ABP_EffectActor_C::FloatParameterName2' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, EditorPlayType) == 0x0003E0, "Member 'ABP_EffectActor_C::EditorPlayType' has a wrong offset!");
static_assert(offsetof(ABP_EffectActor_C, VisibleInRaytracing) == 0x0003E1, "Member 'ABP_EffectActor_C::VisibleInRaytracing' has a wrong offset!");

}

