#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABPC_Seq_Body_V2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABPC_Seq_Body_V2.ABPC_Seq_Body_V2_C.SetAnimDataVectorByOwner
// 0x0320 (0x0320 - 0x0000)
struct ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner final
{
public:
	TMap<class FName, struct FVector>             VectorMap;                                         // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FRotator                               NewLocalVar_0;                                     // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   ___name_Variable;                                  // 0x005C(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_1;                                // 0x0068(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Map_Find_Value;                           // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Map_Find_Value_1;                         // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   ___name_Variable_2;                                // 0x00C4(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_3;                                // 0x00D0(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Map_Find_Value_2;                         // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Map_Find_Value_3;                         // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_2;                          // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   ___name_Variable_4;                                // 0x012C(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_5;                                // 0x0138(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Map_Find_Value_4;                         // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_4;                   // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Map_Find_Value_5;                         // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_5;                   // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_4;                          // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_4;                // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_5;                // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   ___name_Variable_6;                                // 0x0194(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_7;                                // 0x01A0(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Map_Find_Value_6;                         // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_6;                   // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Map_Find_Value_7;                         // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_7;                   // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_6;                          // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_7;                          // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_7;                          // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_7;                          // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_6;                // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_7;                // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   ___name_Variable_8;                                // 0x01FC(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_9;                                // 0x0208(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Map_Find_Value_8;                         // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_8;                   // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Map_Find_Value_9;                         // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_9;                   // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_8;                          // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_8;                          // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_8;                          // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_8;                // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   ___name_Variable_10;                               // 0x024C(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_11;                               // 0x0258(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Map_Find_Value_10;                        // 0x0264(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_10;                  // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Map_Find_Value_11;                        // 0x0274(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_11;                  // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_9;                          // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_9;                          // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_9;                          // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_10;                         // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_10;                         // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_10;                         // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_9;                // 0x029C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_10;               // 0x02A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   ___name_Variable_12;                               // 0x02B4(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable_13;                               // 0x02C0(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Map_Find_Value_12;                        // 0x02CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_12;                  // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Map_Find_Value_13;                        // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_13;                  // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_11;                         // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_11;                         // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_11;                         // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_12;                         // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_12;                         // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_12;                         // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_11;               // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_12;               // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner) == 0x000008, "Wrong alignment on ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner");
static_assert(sizeof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner) == 0x000320, "Wrong size on ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, VectorMap) == 0x000000, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::VectorMap' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, NewLocalVar_0) == 0x000050, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable) == 0x00005C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_1) == 0x000068, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value) == 0x000074, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue) == 0x000080, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_1) == 0x000084, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_1) == 0x000090, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X) == 0x000094, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y) == 0x000098, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z) == 0x00009C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_1) == 0x0000A0, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_1) == 0x0000A4, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_1) == 0x0000A8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue) == 0x0000AC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_1) == 0x0000B8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_2) == 0x0000C4, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_3) == 0x0000D0, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_2) == 0x0000DC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_2) == 0x0000E8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_3) == 0x0000EC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_3) == 0x0000F8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_2) == 0x0000FC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_2) == 0x000100, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_2) == 0x000104, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_3) == 0x000108, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_3) == 0x00010C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_3) == 0x000110, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_2) == 0x000114, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_3) == 0x000120, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_4) == 0x00012C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_5) == 0x000138, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_5' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_4) == 0x000144, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_4) == 0x000150, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_5) == 0x000154, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_5' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_5) == 0x000160, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_4) == 0x000164, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_4) == 0x000168, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_4) == 0x00016C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_5) == 0x000170, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_5) == 0x000174, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_5) == 0x000178, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_4) == 0x00017C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_5) == 0x000188, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_6) == 0x000194, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_6' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_7) == 0x0001A0, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_7' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_6) == 0x0001AC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_6' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_6) == 0x0001B8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_7) == 0x0001BC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_7' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_7) == 0x0001C8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_6) == 0x0001CC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_6) == 0x0001D0, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_6) == 0x0001D4, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_7) == 0x0001D8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_7' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_7) == 0x0001DC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_7' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_7) == 0x0001E0, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_7' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_6) == 0x0001E4, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_7) == 0x0001F0, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_8) == 0x0001FC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_8' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_9) == 0x000208, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_9' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_8) == 0x000214, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_8' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_8) == 0x000220, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_9) == 0x000224, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_9' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_9) == 0x000230, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_8) == 0x000234, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_8' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_8) == 0x000238, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_8' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_8) == 0x00023C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_8' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_8) == 0x000240, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_10) == 0x00024C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_10' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_11) == 0x000258, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_11' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_10) == 0x000264, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_10' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_10) == 0x000270, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_11) == 0x000274, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_11' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_11) == 0x000280, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_9) == 0x000284, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_9' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_9) == 0x000288, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_9' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_9) == 0x00028C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_9' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_10) == 0x000290, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_10' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_10) == 0x000294, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_10' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_10) == 0x000298, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_10' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_9) == 0x00029C, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_10) == 0x0002A8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_12) == 0x0002B4, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_12' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, ___name_Variable_13) == 0x0002C0, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::___name_Variable_13' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_12) == 0x0002CC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_12' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_12) == 0x0002D8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_Value_13) == 0x0002DC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_Value_13' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_Map_Find_ReturnValue_13) == 0x0002E8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_Map_Find_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_11) == 0x0002EC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_11' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_11) == 0x0002F0, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_11' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_11) == 0x0002F4, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_11' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_X_12) == 0x0002F8, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_X_12' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Y_12) == 0x0002FC, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Y_12' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_BreakVector_Z_12) == 0x000300, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_BreakVector_Z_12' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_11) == 0x000304, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner, CallFunc_MakeRotator_ReturnValue_12) == 0x000310, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataVectorByOwner::CallFunc_MakeRotator_ReturnValue_12' has a wrong offset!");

// Function ABPC_Seq_Body_V2.ABPC_Seq_Body_V2_C.SetAnimDataFloatByOwner
// 0x0010 (0x0010 - 0x0000)
struct ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner final
{
public:
	TArray<struct FNamedCurveValue>               InCurves;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner) == 0x000008, "Wrong alignment on ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner");
static_assert(sizeof(ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner) == 0x000010, "Wrong size on ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner");
static_assert(offsetof(ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner, InCurves) == 0x000000, "Member 'ABPC_Seq_Body_V2_C_SetAnimDataFloatByOwner::InCurves' has a wrong offset!");

// Function ABPC_Seq_Body_V2.ABPC_Seq_Body_V2_C.ProcessEye
// 0x00DC (0x00DC - 0x0000)
struct ABPC_Seq_Body_V2_C_ProcessEye final
{
public:
	struct FVector                                EyeLookAt;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleScale;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue;                 // 0x001C(0x0010)(NoDestructor)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_1;               // 0x0040(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_2;               // 0x0058(0x0010)(NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_3;               // 0x006C(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_4;               // 0x0084(0x0010)(NoDestructor)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_5;               // 0x0094(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_6;               // 0x00B4(0x0010)(NoDestructor)
	struct FNamedCurveValue                       K2Node_MakeStruct_NamedCurveValue_7;               // 0x00C4(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_7;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPC_Seq_Body_V2_C_ProcessEye) == 0x000004, "Wrong alignment on ABPC_Seq_Body_V2_C_ProcessEye");
static_assert(sizeof(ABPC_Seq_Body_V2_C_ProcessEye) == 0x0000DC, "Wrong size on ABPC_Seq_Body_V2_C_ProcessEye");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, EyeLookAt) == 0x000000, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::EyeLookAt' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, AngleScale) == 0x00000C, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::AngleScale' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_BreakVector_X) == 0x000010, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_BreakVector_Y) == 0x000014, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_BreakVector_Z) == 0x000018, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue) == 0x00001C, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Abs_ReturnValue) == 0x00002C, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000030, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Abs_ReturnValue_1) == 0x000034, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000038, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue) == 0x00003C, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_1) == 0x000040, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_1) == 0x000050, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000054, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_2) == 0x000058, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_FClamp_ReturnValue) == 0x000068, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_3) == 0x00006C, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_2) == 0x00007C, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_3) == 0x000080, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_4) == 0x000084, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_5) == 0x000094, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_5' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_4) == 0x0000A4, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_5) == 0x0000A8, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000AC, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_FClamp_ReturnValue_1) == 0x0000B0, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_6) == 0x0000B4, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_6' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, K2Node_MakeStruct_NamedCurveValue_7) == 0x0000C4, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::K2Node_MakeStruct_NamedCurveValue_7' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_6) == 0x0000D4, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_ProcessEye, CallFunc_Array_Add_ReturnValue_7) == 0x0000D8, "Member 'ABPC_Seq_Body_V2_C_ProcessEye::CallFunc_Array_Add_ReturnValue_7' has a wrong offset!");

// Function ABPC_Seq_Body_V2.ABPC_Seq_Body_V2_C.GetCurveValue
// 0x0010 (0x0010 - 0x0000)
struct ABPC_Seq_Body_V2_C_GetCurveValue final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPC_Seq_Body_V2_C_GetCurveValue) == 0x000004, "Wrong alignment on ABPC_Seq_Body_V2_C_GetCurveValue");
static_assert(sizeof(ABPC_Seq_Body_V2_C_GetCurveValue) == 0x000010, "Wrong size on ABPC_Seq_Body_V2_C_GetCurveValue");
static_assert(offsetof(ABPC_Seq_Body_V2_C_GetCurveValue, CurveName) == 0x000000, "Member 'ABPC_Seq_Body_V2_C_GetCurveValue::CurveName' has a wrong offset!");
static_assert(offsetof(ABPC_Seq_Body_V2_C_GetCurveValue, ReturnValue) == 0x00000C, "Member 'ABPC_Seq_Body_V2_C_GetCurveValue::ReturnValue' has a wrong offset!");

// Function ABPC_Seq_Body_V2.ABPC_Seq_Body_V2_C.GetCurves
// 0x0010 (0x0010 - 0x0000)
struct ABPC_Seq_Body_V2_C_GetCurves final
{
public:
	TArray<struct FNamedCurveValue>               OutValues;                                         // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(ABPC_Seq_Body_V2_C_GetCurves) == 0x000008, "Wrong alignment on ABPC_Seq_Body_V2_C_GetCurves");
static_assert(sizeof(ABPC_Seq_Body_V2_C_GetCurves) == 0x000010, "Wrong size on ABPC_Seq_Body_V2_C_GetCurves");
static_assert(offsetof(ABPC_Seq_Body_V2_C_GetCurves, OutValues) == 0x000000, "Member 'ABPC_Seq_Body_V2_C_GetCurves::OutValues' has a wrong offset!");

// Function ABPC_Seq_Body_V2.ABPC_Seq_Body_V2_C.GetBindingName
// 0x000C (0x000C - 0x0000)
struct ABPC_Seq_Body_V2_C_GetBindingName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPC_Seq_Body_V2_C_GetBindingName) == 0x000004, "Wrong alignment on ABPC_Seq_Body_V2_C_GetBindingName");
static_assert(sizeof(ABPC_Seq_Body_V2_C_GetBindingName) == 0x00000C, "Wrong size on ABPC_Seq_Body_V2_C_GetBindingName");
static_assert(offsetof(ABPC_Seq_Body_V2_C_GetBindingName, ReturnValue) == 0x000000, "Member 'ABPC_Seq_Body_V2_C_GetBindingName::ReturnValue' has a wrong offset!");

}

