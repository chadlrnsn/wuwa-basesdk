#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpinePlugin

#include "Basic.hpp"

#include "SpinePlugin_classes.hpp"
#include "SpinePlugin_parameters.hpp"


namespace SDK
{

// Function SpinePlugin.SpineBoneDriverComponent.BeforeUpdateWorldTransform
// (Final, Native, Protected)
// Parameters:
// class USpineSkeletonComponent*          skeleton                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineBoneDriverComponent::BeforeUpdateWorldTransform(class USpineSkeletonComponent* skeleton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineBoneDriverComponent", "BeforeUpdateWorldTransform");

	Params::SpineBoneDriverComponent_BeforeUpdateWorldTransform Parms{};

	Parms.skeleton = skeleton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.GetAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetAlpha()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetAlpha");

	Params::TrackEntry_GetAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.getAnimationDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::getAnimationDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "getAnimationDuration");

	Params::TrackEntry_getAnimationDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetAnimationEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetAnimationEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetAnimationEnd");

	Params::TrackEntry_GetAnimationEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetAnimationLast
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetAnimationLast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetAnimationLast");

	Params::TrackEntry_GetAnimationLast Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.getAnimationName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTrackEntry::getAnimationName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "getAnimationName");

	Params::TrackEntry_getAnimationName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetAnimationStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetAnimationStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetAnimationStart");

	Params::TrackEntry_GetAnimationStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetAttachmentThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetAttachmentThreshold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetAttachmentThreshold");

	Params::TrackEntry_GetAttachmentThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetDelay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetDelay");

	Params::TrackEntry_GetDelay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetDrawOrderThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetDrawOrderThreshold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetDrawOrderThreshold");

	Params::TrackEntry_GetDrawOrderThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetEventThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetEventThreshold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetEventThreshold");

	Params::TrackEntry_GetEventThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTrackEntry::GetLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetLoop");

	Params::TrackEntry_GetLoop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetMixDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetMixDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetMixDuration");

	Params::TrackEntry_GetMixDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetMixTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetMixTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetMixTime");

	Params::TrackEntry_GetMixTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetTimeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetTimeScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetTimeScale");

	Params::TrackEntry_GetTimeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetTrackEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetTrackEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetTrackEnd");

	Params::TrackEntry_GetTrackEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetTrackIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTrackEntry::GetTrackIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetTrackIndex");

	Params::TrackEntry_GetTrackIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.GetTrackTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTrackEntry::GetTrackTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "GetTrackTime");

	Params::TrackEntry_GetTrackTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.isValidAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTrackEntry::isValidAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "isValidAnimation");

	Params::TrackEntry_isValidAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.TrackEntry.SetAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetAlpha(float alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetAlpha");

	Params::TrackEntry_SetAlpha Parms{};

	Parms.alpha = alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetAnimationEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   animationEnd                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetAnimationEnd(float animationEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetAnimationEnd");

	Params::TrackEntry_SetAnimationEnd Parms{};

	Parms.animationEnd = animationEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetAnimationLast
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   animationLast                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetAnimationLast(float animationLast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetAnimationLast");

	Params::TrackEntry_SetAnimationLast Parms{};

	Parms.animationLast = animationLast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetAnimationStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   animationStart                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetAnimationStart(float animationStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetAnimationStart");

	Params::TrackEntry_SetAnimationStart Parms{};

	Parms.animationStart = animationStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetAttachmentThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   attachmentThreshold                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetAttachmentThreshold(float attachmentThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetAttachmentThreshold");

	Params::TrackEntry_SetAttachmentThreshold Parms{};

	Parms.attachmentThreshold = attachmentThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetDelay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetDelay(float delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetDelay");

	Params::TrackEntry_SetDelay Parms{};

	Parms.delay = delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetDrawOrderThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   drawOrderThreshold                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetDrawOrderThreshold(float drawOrderThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetDrawOrderThreshold");

	Params::TrackEntry_SetDrawOrderThreshold Parms{};

	Parms.drawOrderThreshold = drawOrderThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetEventThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   eventThreshold                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetEventThreshold(float eventThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetEventThreshold");

	Params::TrackEntry_SetEventThreshold Parms{};

	Parms.eventThreshold = eventThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetLoop(bool loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetLoop");

	Params::TrackEntry_SetLoop Parms{};

	Parms.loop = loop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetMixDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   mixDuration                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetMixDuration(float mixDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetMixDuration");

	Params::TrackEntry_SetMixDuration Parms{};

	Parms.mixDuration = mixDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetMixTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   mixTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetMixTime(float mixTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetMixTime");

	Params::TrackEntry_SetMixTime Parms{};

	Parms.mixTime = mixTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetTimeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   timeScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetTimeScale(float timeScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetTimeScale");

	Params::TrackEntry_SetTimeScale Parms{};

	Parms.timeScale = timeScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetTrackEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   trackEnd                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetTrackEnd(float trackEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetTrackEnd");

	Params::TrackEntry_SetTrackEnd Parms{};

	Parms.trackEnd = trackEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.TrackEntry.SetTrackTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   trackTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrackEntry::SetTrackTime(float trackTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrackEntry", "SetTrackTime");

	Params::TrackEntry_SetTrackTime Parms{};

	Parms.trackTime = trackTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonComponent.GetAnimationDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AnimationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpineSkeletonComponent::GetAnimationDuration(const class FString& AnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "GetAnimationDuration");

	Params::SpineSkeletonComponent_GetAnimationDuration Parms{};

	Parms.AnimationName = std::move(AnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonComponent.GetAnimations
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>*                  Animations                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USpineSkeletonComponent::GetAnimations(TArray<class FString>* Animations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "GetAnimations");

	Params::SpineSkeletonComponent_GetAnimations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Animations != nullptr)
		*Animations = std::move(Parms.Animations);
}


// Function SpinePlugin.SpineSkeletonComponent.GetBones
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>*                  Bones                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USpineSkeletonComponent::GetBones(TArray<class FString>* Bones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "GetBones");

	Params::SpineSkeletonComponent_GetBones Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Bones != nullptr)
		*Bones = std::move(Parms.Bones);
}


// Function SpinePlugin.SpineSkeletonComponent.GetBoneWorldTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    BoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform USpineSkeletonComponent::GetBoneWorldTransform(const class FString& BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "GetBoneWorldTransform");

	Params::SpineSkeletonComponent_GetBoneWorldTransform Parms{};

	Parms.BoneName = std::move(BoneName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonComponent.GetScaleX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpineSkeletonComponent::GetScaleX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "GetScaleX");

	Params::SpineSkeletonComponent_GetScaleX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonComponent.GetScaleY
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpineSkeletonComponent::GetScaleY()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "GetScaleY");

	Params::SpineSkeletonComponent_GetScaleY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonComponent.GetSkins
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>*                  Skins                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USpineSkeletonComponent::GetSkins(TArray<class FString>* Skins)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "GetSkins");

	Params::SpineSkeletonComponent_GetSkins Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Skins != nullptr)
		*Skins = std::move(Parms.Skins);
}


// Function SpinePlugin.SpineSkeletonComponent.GetSlots
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>*                  Slots                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USpineSkeletonComponent::GetSlots(TArray<class FString>* Slots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "GetSlots");

	Params::SpineSkeletonComponent_GetSlots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Slots != nullptr)
		*Slots = std::move(Parms.Slots);
}


// Function SpinePlugin.SpineSkeletonComponent.HasAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AnimationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineSkeletonComponent::HasAnimation(const class FString& AnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "HasAnimation");

	Params::SpineSkeletonComponent_HasAnimation Parms{};

	Parms.AnimationName = std::move(AnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonComponent.HasBone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    BoneName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineSkeletonComponent::HasBone(const class FString& BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "HasBone");

	Params::SpineSkeletonComponent_HasBone Parms{};

	Parms.BoneName = std::move(BoneName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonComponent.HasSkin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SkinName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineSkeletonComponent::HasSkin(const class FString& SkinName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "HasSkin");

	Params::SpineSkeletonComponent_HasSkin Parms{};

	Parms.SkinName = std::move(SkinName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonComponent.HasSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SlotName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineSkeletonComponent::HasSlot(const class FString& SlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "HasSlot");

	Params::SpineSkeletonComponent_HasSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonComponent.SetAttachment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    slotName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    attachmentName                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineSkeletonComponent::SetAttachment(const class FString& slotName, const class FString& attachmentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "SetAttachment");

	Params::SpineSkeletonComponent_SetAttachment Parms{};

	Parms.slotName = std::move(slotName);
	Parms.attachmentName = std::move(attachmentName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonComponent.SetBonesToSetupPose
// (Final, Native, Public, BlueprintCallable)

void USpineSkeletonComponent::SetBonesToSetupPose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "SetBonesToSetupPose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonComponent.SetBoneWorldPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    BoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineSkeletonComponent::SetBoneWorldPosition(const class FString& BoneName, const struct FVector& position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "SetBoneWorldPosition");

	Params::SpineSkeletonComponent_SetBoneWorldPosition Parms{};

	Parms.BoneName = std::move(BoneName);
	Parms.position = std::move(position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonComponent.SetScaleX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   scaleX                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineSkeletonComponent::SetScaleX(float scaleX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "SetScaleX");

	Params::SpineSkeletonComponent_SetScaleX Parms{};

	Parms.scaleX = scaleX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonComponent.SetScaleY
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   scaleY                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineSkeletonComponent::SetScaleY(float scaleY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "SetScaleY");

	Params::SpineSkeletonComponent_SetScaleY Parms{};

	Parms.scaleY = scaleY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonComponent.SetSkin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SkinName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineSkeletonComponent::SetSkin(const class FString& SkinName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "SetSkin");

	Params::SpineSkeletonComponent_SetSkin Parms{};

	Parms.SkinName = std::move(SkinName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonComponent.SetSkins
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>&                  SkinNames                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineSkeletonComponent::SetSkins(TArray<class FString>& SkinNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "SetSkins");

	Params::SpineSkeletonComponent_SetSkins Parms{};

	Parms.SkinNames = std::move(SkinNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SkinNames = std::move(Parms.SkinNames);

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonComponent.SetSlotColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    SlotName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    color                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineSkeletonComponent::SetSlotColor(const class FString& SlotName, const struct FColor& color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "SetSlotColor");

	Params::SpineSkeletonComponent_SetSlotColor Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.color = std::move(color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonComponent.SetSlotsToSetupPose
// (Final, Native, Public, BlueprintCallable)

void USpineSkeletonComponent::SetSlotsToSetupPose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "SetSlotsToSetupPose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonComponent.SetToSetupPose
// (Final, Native, Public, BlueprintCallable)

void USpineSkeletonComponent::SetToSetupPose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "SetToSetupPose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonComponent.UpdateWorldTransform
// (Final, Native, Public, BlueprintCallable)

void USpineSkeletonComponent::UpdateWorldTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonComponent", "UpdateWorldTransform");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonAnimationComponent.AddAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   trackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTrackEntry*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTrackEntry* USpineSkeletonAnimationComponent::AddAnimation(int32 trackIndex, const class FString& animationName, bool loop, float delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationComponent", "AddAnimation");

	Params::SpineSkeletonAnimationComponent_AddAnimation Parms{};

	Parms.trackIndex = trackIndex;
	Parms.animationName = std::move(animationName);
	Parms.loop = loop;
	Parms.delay = delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonAnimationComponent.AddEmptyAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   trackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   mixDuration                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTrackEntry*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTrackEntry* USpineSkeletonAnimationComponent::AddEmptyAnimation(int32 trackIndex, float mixDuration, float delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationComponent", "AddEmptyAnimation");

	Params::SpineSkeletonAnimationComponent_AddEmptyAnimation Parms{};

	Parms.trackIndex = trackIndex;
	Parms.mixDuration = mixDuration;
	Parms.delay = delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonAnimationComponent.ClearTrack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   trackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineSkeletonAnimationComponent::ClearTrack(int32 trackIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationComponent", "ClearTrack");

	Params::SpineSkeletonAnimationComponent_ClearTrack Parms{};

	Parms.trackIndex = trackIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonAnimationComponent.ClearTracks
// (Final, Native, Public, BlueprintCallable)

void USpineSkeletonAnimationComponent::ClearTracks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationComponent", "ClearTracks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonAnimationComponent.GetCurrent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   trackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTrackEntry*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTrackEntry* USpineSkeletonAnimationComponent::GetCurrent(int32 trackIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationComponent", "GetCurrent");

	Params::SpineSkeletonAnimationComponent_GetCurrent Parms{};

	Parms.trackIndex = trackIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonAnimationComponent.GetTimeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpineSkeletonAnimationComponent::GetTimeScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationComponent", "GetTimeScale");

	Params::SpineSkeletonAnimationComponent_GetTimeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonAnimationComponent.SetAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   trackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTrackEntry*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTrackEntry* USpineSkeletonAnimationComponent::SetAnimation(int32 trackIndex, const class FString& animationName, bool loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationComponent", "SetAnimation");

	Params::SpineSkeletonAnimationComponent_SetAnimation Parms{};

	Parms.trackIndex = trackIndex;
	Parms.animationName = std::move(animationName);
	Parms.loop = loop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonAnimationComponent.SetAutoPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAutoPlays                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineSkeletonAnimationComponent::SetAutoPlay(bool bInAutoPlays)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationComponent", "SetAutoPlay");

	Params::SpineSkeletonAnimationComponent_SetAutoPlay Parms{};

	Parms.bInAutoPlays = bInAutoPlays;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonAnimationComponent.SetEmptyAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   trackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   mixDuration                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTrackEntry*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTrackEntry* USpineSkeletonAnimationComponent::SetEmptyAnimation(int32 trackIndex, float mixDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationComponent", "SetEmptyAnimation");

	Params::SpineSkeletonAnimationComponent_SetEmptyAnimation Parms{};

	Parms.trackIndex = trackIndex;
	Parms.mixDuration = mixDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineSkeletonAnimationComponent.SetPlaybackTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPlaybackTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCallDelegates                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineSkeletonAnimationComponent::SetPlaybackTime(float InPlaybackTime, bool bCallDelegates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationComponent", "SetPlaybackTime");

	Params::SpineSkeletonAnimationComponent_SetPlaybackTime Parms{};

	Parms.InPlaybackTime = InPlaybackTime;
	Parms.bCallDelegates = bCallDelegates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineSkeletonAnimationComponent.SetTimeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   timeScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineSkeletonAnimationComponent::SetTimeScale(float timeScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineSkeletonAnimationComponent", "SetTimeScale");

	Params::SpineSkeletonAnimationComponent_SetTimeScale Parms{};

	Parms.timeScale = timeScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineWidget.AddAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   trackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTrackEntry*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTrackEntry* USpineWidget::AddAnimation(int32 trackIndex, const class FString& animationName, bool loop, float delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "AddAnimation");

	Params::SpineWidget_AddAnimation Parms{};

	Parms.trackIndex = trackIndex;
	Parms.animationName = std::move(animationName);
	Parms.loop = loop;
	Parms.delay = delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.AddEmptyAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   trackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   mixDuration                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTrackEntry*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTrackEntry* USpineWidget::AddEmptyAnimation(int32 trackIndex, float mixDuration, float delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "AddEmptyAnimation");

	Params::SpineWidget_AddEmptyAnimation Parms{};

	Parms.trackIndex = trackIndex;
	Parms.mixDuration = mixDuration;
	Parms.delay = delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.ClearTrack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   trackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineWidget::ClearTrack(int32 trackIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "ClearTrack");

	Params::SpineWidget_ClearTrack Parms{};

	Parms.trackIndex = trackIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineWidget.ClearTracks
// (Final, Native, Public, BlueprintCallable)

void USpineWidget::ClearTracks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "ClearTracks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineWidget.GetAnimationDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AnimationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpineWidget::GetAnimationDuration(const class FString& AnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "GetAnimationDuration");

	Params::SpineWidget_GetAnimationDuration Parms{};

	Parms.AnimationName = std::move(AnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.GetAnimations
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>*                  Animations                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USpineWidget::GetAnimations(TArray<class FString>* Animations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "GetAnimations");

	Params::SpineWidget_GetAnimations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Animations != nullptr)
		*Animations = std::move(Parms.Animations);
}


// Function SpinePlugin.SpineWidget.GetBones
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>*                  Bones                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USpineWidget::GetBones(TArray<class FString>* Bones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "GetBones");

	Params::SpineWidget_GetBones Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Bones != nullptr)
		*Bones = std::move(Parms.Bones);
}


// Function SpinePlugin.SpineWidget.GetBoneTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    BoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform USpineWidget::GetBoneTransform(const class FString& BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "GetBoneTransform");

	Params::SpineWidget_GetBoneTransform Parms{};

	Parms.BoneName = std::move(BoneName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.GetCurrent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   trackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTrackEntry*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTrackEntry* USpineWidget::GetCurrent(int32 trackIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "GetCurrent");

	Params::SpineWidget_GetCurrent Parms{};

	Parms.trackIndex = trackIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.GetScaleX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpineWidget::GetScaleX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "GetScaleX");

	Params::SpineWidget_GetScaleX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.GetScaleY
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpineWidget::GetScaleY()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "GetScaleY");

	Params::SpineWidget_GetScaleY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.GetSkins
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>*                  Skins                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USpineWidget::GetSkins(TArray<class FString>* Skins)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "GetSkins");

	Params::SpineWidget_GetSkins Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Skins != nullptr)
		*Skins = std::move(Parms.Skins);
}


// Function SpinePlugin.SpineWidget.GetSlots
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>*                  Slots                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USpineWidget::GetSlots(TArray<class FString>* Slots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "GetSlots");

	Params::SpineWidget_GetSlots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Slots != nullptr)
		*Slots = std::move(Parms.Slots);
}


// Function SpinePlugin.SpineWidget.GetTimeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpineWidget::GetTimeScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "GetTimeScale");

	Params::SpineWidget_GetTimeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.HasAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AnimationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineWidget::HasAnimation(const class FString& AnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "HasAnimation");

	Params::SpineWidget_HasAnimation Parms{};

	Parms.AnimationName = std::move(AnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.HasBone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    BoneName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineWidget::HasBone(const class FString& BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "HasBone");

	Params::SpineWidget_HasBone Parms{};

	Parms.BoneName = std::move(BoneName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.HasSkin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SkinName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineWidget::HasSkin(const class FString& SkinName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "HasSkin");

	Params::SpineWidget_HasSkin Parms{};

	Parms.SkinName = std::move(SkinName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.HasSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SlotName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineWidget::HasSlot(const class FString& SlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "HasSlot");

	Params::SpineWidget_HasSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.SetAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   trackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    animationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTrackEntry*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTrackEntry* USpineWidget::SetAnimation(int32 trackIndex, const class FString& animationName, bool loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetAnimation");

	Params::SpineWidget_SetAnimation Parms{};

	Parms.trackIndex = trackIndex;
	Parms.animationName = std::move(animationName);
	Parms.loop = loop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.SetAttachment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    slotName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    attachmentName                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineWidget::SetAttachment(const class FString& slotName, const class FString& attachmentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetAttachment");

	Params::SpineWidget_SetAttachment Parms{};

	Parms.slotName = std::move(slotName);
	Parms.attachmentName = std::move(attachmentName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.SetAutoPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAutoPlays                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineWidget::SetAutoPlay(bool bInAutoPlays)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetAutoPlay");

	Params::SpineWidget_SetAutoPlay Parms{};

	Parms.bInAutoPlays = bInAutoPlays;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineWidget.SetBonesToSetupPose
// (Final, Native, Public, BlueprintCallable)

void USpineWidget::SetBonesToSetupPose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetBonesToSetupPose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineWidget.SetEmptyAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   trackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   mixDuration                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTrackEntry*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTrackEntry* USpineWidget::SetEmptyAnimation(int32 trackIndex, float mixDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetEmptyAnimation");

	Params::SpineWidget_SetEmptyAnimation Parms{};

	Parms.trackIndex = trackIndex;
	Parms.mixDuration = mixDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.SetPlaybackTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPlaybackTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCallDelegates                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineWidget::SetPlaybackTime(float InPlaybackTime, bool bCallDelegates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetPlaybackTime");

	Params::SpineWidget_SetPlaybackTime Parms{};

	Parms.InPlaybackTime = InPlaybackTime;
	Parms.bCallDelegates = bCallDelegates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineWidget.SetScaleX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   scaleX                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineWidget::SetScaleX(float scaleX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetScaleX");

	Params::SpineWidget_SetScaleX Parms{};

	Parms.scaleX = scaleX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineWidget.SetScaleY
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   scaleY                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineWidget::SetScaleY(float scaleY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetScaleY");

	Params::SpineWidget_SetScaleY Parms{};

	Parms.scaleY = scaleY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineWidget.SetSkin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SkinName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineWidget::SetSkin(const class FString& SkinName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetSkin");

	Params::SpineWidget_SetSkin Parms{};

	Parms.SkinName = std::move(SkinName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.SetSkins
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>&                  SkinNames                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineWidget::SetSkins(TArray<class FString>& SkinNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetSkins");

	Params::SpineWidget_SetSkins Parms{};

	Parms.SkinNames = std::move(SkinNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SkinNames = std::move(Parms.SkinNames);

	return Parms.ReturnValue;
}


// Function SpinePlugin.SpineWidget.SetSlotsToSetupPose
// (Final, Native, Public, BlueprintCallable)

void USpineWidget::SetSlotsToSetupPose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetSlotsToSetupPose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineWidget.SetTimeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   timeScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineWidget::SetTimeScale(float timeScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetTimeScale");

	Params::SpineWidget_SetTimeScale Parms{};

	Parms.timeScale = timeScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineWidget.SetToSetupPose
// (Final, Native, Public, BlueprintCallable)

void USpineWidget::SetToSetupPose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "SetToSetupPose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineWidget.Tick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CallDelegates                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineWidget::Tick(float DeltaTime, bool CallDelegates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "Tick");

	Params::SpineWidget_Tick Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.CallDelegates = CallDelegates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpinePlugin.SpineWidget.UpdateWorldTransform
// (Final, Native, Public, BlueprintCallable)

void USpineWidget::UpdateWorldTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineWidget", "UpdateWorldTransform");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

