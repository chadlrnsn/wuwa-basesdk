#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HHA_Ocean

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"


namespace SDK::Params
{

// Function BP_HHA_Ocean.BP_HHA_Ocean_C.WaterRipple
// 0x01B8 (0x01B8 - 0x0000)
struct BP_HHA_Ocean_C_WaterRipple final
{
public:
	TArray<class AActor*>                         ___object_Variable;                                // 0x0000(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetLevelEditorCameraLocationAndForward_Position; // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetLevelEditorCameraLocationAndForward_Rotation; // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetLevelEditorCameraLocationAndForward_ReturnValue; // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_Conv_VectorToVectorDouble_ReturnValue;    // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_GetForwardVector_ReturnValue;           // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Multiply_VectorInt_ReturnValue;         // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Add_VectorVector_ReturnValue;           // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_D_LineTraceSingle_OutHit;                 // 0x0090(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_D_LineTraceSingle_ReturnValue;            // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_127[0x1];                                      // 0x0127(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x01A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HHA_Ocean_C_WaterRipple) == 0x000008, "Wrong alignment on BP_HHA_Ocean_C_WaterRipple");
static_assert(sizeof(BP_HHA_Ocean_C_WaterRipple) == 0x0001B8, "Wrong size on BP_HHA_Ocean_C_WaterRipple");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, ___object_Variable) == 0x000000, "Member 'BP_HHA_Ocean_C_WaterRipple::___object_Variable' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_GetLevelEditorCameraLocationAndForward_Position) == 0x000010, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_GetLevelEditorCameraLocationAndForward_Position' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_GetLevelEditorCameraLocationAndForward_Rotation) == 0x00001C, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_GetLevelEditorCameraLocationAndForward_Rotation' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_GetLevelEditorCameraLocationAndForward_ReturnValue) == 0x000028, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_GetLevelEditorCameraLocationAndForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_Conv_VectorToVectorDouble_ReturnValue) == 0x000030, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_Conv_VectorToVectorDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_D_GetForwardVector_ReturnValue) == 0x000048, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_D_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_D_Multiply_VectorInt_ReturnValue) == 0x000060, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_D_Multiply_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_D_Add_VectorVector_ReturnValue) == 0x000078, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_D_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_D_LineTraceSingle_OutHit) == 0x000090, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_D_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_D_LineTraceSingle_ReturnValue) == 0x000124, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_D_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_bBlockingHit) == 0x000125, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_bInitialOverlap) == 0x000126, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_Time) == 0x000128, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_Distance) == 0x00012C, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_Location) == 0x000130, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_ImpactPoint) == 0x00013C, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_Normal) == 0x000148, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_ImpactNormal) == 0x000154, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_PhysMat) == 0x000160, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_HitActor) == 0x000168, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_HitComponent) == 0x000170, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_HitBoneName) == 0x000178, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_HitItem) == 0x000184, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_FaceIndex) == 0x000188, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_TraceStart) == 0x00018C, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_BreakHitResult_TraceEnd) == 0x000198, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_WaterRipple, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x0001A4, "Member 'BP_HHA_Ocean_C_WaterRipple::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");

// Function BP_HHA_Ocean.BP_HHA_Ocean_C.UserConstructionScript
// 0x0050 (0x0050 - 0x0000)
struct BP_HHA_Ocean_C_UserConstructionScript final
{
public:
	struct FTransform                             ___struct_Variable;                                // 0x0000(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	EKuroFeatureLevel                             CallFunc_GetWorldFeatureLevel_ReturnValue;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChildActorComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HHA_Ocean_C_UserConstructionScript) == 0x000010, "Wrong alignment on BP_HHA_Ocean_C_UserConstructionScript");
static_assert(sizeof(BP_HHA_Ocean_C_UserConstructionScript) == 0x000050, "Wrong size on BP_HHA_Ocean_C_UserConstructionScript");
static_assert(offsetof(BP_HHA_Ocean_C_UserConstructionScript, ___struct_Variable) == 0x000000, "Member 'BP_HHA_Ocean_C_UserConstructionScript::___struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_UserConstructionScript, CallFunc_GetWorldFeatureLevel_ReturnValue) == 0x000030, "Member 'BP_HHA_Ocean_C_UserConstructionScript::CallFunc_GetWorldFeatureLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_UserConstructionScript, CallFunc_AddComponent_ReturnValue) == 0x000038, "Member 'BP_HHA_Ocean_C_UserConstructionScript::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_UserConstructionScript, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000040, "Member 'BP_HHA_Ocean_C_UserConstructionScript::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_HHA_Ocean.BP_HHA_Ocean_C.CustomEvent_0
// 0x0010 (0x0010 - 0x0000)
struct BP_HHA_Ocean_C_CustomEvent_0 final
{
public:
	class AActor*                                 被控物;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 水面;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HHA_Ocean_C_CustomEvent_0) == 0x000008, "Wrong alignment on BP_HHA_Ocean_C_CustomEvent_0");
static_assert(sizeof(BP_HHA_Ocean_C_CustomEvent_0) == 0x000010, "Wrong size on BP_HHA_Ocean_C_CustomEvent_0");
static_assert(offsetof(BP_HHA_Ocean_C_CustomEvent_0, 被控物) == 0x000000, "Member 'BP_HHA_Ocean_C_CustomEvent_0::被控物' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_CustomEvent_0, 水面) == 0x000008, "Member 'BP_HHA_Ocean_C_CustomEvent_0::水面' has a wrong offset!");

// Function BP_HHA_Ocean.BP_HHA_Ocean_C.BndEvt__BP_HHA_Ocean_OceanMeshActor_3_K2Node_ComponentBoundEvent_3_ActorBeginOverlapSignature__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_3_K2Node_ComponentBoundEvent_3_ActorBeginOverlapSignature__DelegateSignature final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_3_K2Node_ComponentBoundEvent_3_ActorBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_3_K2Node_ComponentBoundEvent_3_ActorBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_3_K2Node_ComponentBoundEvent_3_ActorBeginOverlapSignature__DelegateSignature) == 0x000010, "Wrong size on BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_3_K2Node_ComponentBoundEvent_3_ActorBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_3_K2Node_ComponentBoundEvent_3_ActorBeginOverlapSignature__DelegateSignature, OverlappedActor) == 0x000000, "Member 'BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_3_K2Node_ComponentBoundEvent_3_ActorBeginOverlapSignature__DelegateSignature::OverlappedActor' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_3_K2Node_ComponentBoundEvent_3_ActorBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_3_K2Node_ComponentBoundEvent_3_ActorBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");

// Function BP_HHA_Ocean.BP_HHA_Ocean_C.BndEvt__BP_HHA_Ocean_OceanMeshActor_2_K2Node_ComponentBoundEvent_2_ActorBeginOverlapSignature__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_2_K2Node_ComponentBoundEvent_2_ActorBeginOverlapSignature__DelegateSignature final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_2_K2Node_ComponentBoundEvent_2_ActorBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_2_K2Node_ComponentBoundEvent_2_ActorBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_2_K2Node_ComponentBoundEvent_2_ActorBeginOverlapSignature__DelegateSignature) == 0x000010, "Wrong size on BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_2_K2Node_ComponentBoundEvent_2_ActorBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_2_K2Node_ComponentBoundEvent_2_ActorBeginOverlapSignature__DelegateSignature, OverlappedActor) == 0x000000, "Member 'BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_2_K2Node_ComponentBoundEvent_2_ActorBeginOverlapSignature__DelegateSignature::OverlappedActor' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_2_K2Node_ComponentBoundEvent_2_ActorBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_2_K2Node_ComponentBoundEvent_2_ActorBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");

// Function BP_HHA_Ocean.BP_HHA_Ocean_C.BndEvt__BP_HHA_Ocean_OceanMeshActor_1_K2Node_ComponentBoundEvent_1_ActorBeginOverlapSignature__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_1_K2Node_ComponentBoundEvent_1_ActorBeginOverlapSignature__DelegateSignature final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_1_K2Node_ComponentBoundEvent_1_ActorBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_1_K2Node_ComponentBoundEvent_1_ActorBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_1_K2Node_ComponentBoundEvent_1_ActorBeginOverlapSignature__DelegateSignature) == 0x000010, "Wrong size on BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_1_K2Node_ComponentBoundEvent_1_ActorBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_1_K2Node_ComponentBoundEvent_1_ActorBeginOverlapSignature__DelegateSignature, OverlappedActor) == 0x000000, "Member 'BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_1_K2Node_ComponentBoundEvent_1_ActorBeginOverlapSignature__DelegateSignature::OverlappedActor' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_1_K2Node_ComponentBoundEvent_1_ActorBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_1_K2Node_ComponentBoundEvent_1_ActorBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");

// Function BP_HHA_Ocean.BP_HHA_Ocean_C.BndEvt__BP_HHA_Ocean_OceanMeshActor_0_K2Node_ComponentBoundEvent_0_ActorBeginOverlapSignature__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_0_K2Node_ComponentBoundEvent_0_ActorBeginOverlapSignature__DelegateSignature final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_0_K2Node_ComponentBoundEvent_0_ActorBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_0_K2Node_ComponentBoundEvent_0_ActorBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_0_K2Node_ComponentBoundEvent_0_ActorBeginOverlapSignature__DelegateSignature) == 0x000010, "Wrong size on BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_0_K2Node_ComponentBoundEvent_0_ActorBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_0_K2Node_ComponentBoundEvent_0_ActorBeginOverlapSignature__DelegateSignature, OverlappedActor) == 0x000000, "Member 'BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_0_K2Node_ComponentBoundEvent_0_ActorBeginOverlapSignature__DelegateSignature::OverlappedActor' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_0_K2Node_ComponentBoundEvent_0_ActorBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_HHA_Ocean_C_BndEvt__BP_HHA_Ocean_OceanMeshActor_0_K2Node_ComponentBoundEvent_0_ActorBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");

// Function BP_HHA_Ocean.BP_HHA_Ocean_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_HHA_Ocean_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HHA_Ocean_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_HHA_Ocean_C_ReceiveTick");
static_assert(sizeof(BP_HHA_Ocean_C_ReceiveTick) == 0x000004, "Wrong size on BP_HHA_Ocean_C_ReceiveTick");
static_assert(offsetof(BP_HHA_Ocean_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_HHA_Ocean_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_HHA_Ocean.BP_HHA_Ocean_C.ExecuteUbergraph_BP_HHA_Ocean
// 0x0300 (0x0300 - 0x0000)
struct BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* 被控物, class AActor* 水面)> K2Node_CreateDelegate_OutputDelegate; // 0x0008(0x0028)(ZeroConstructor)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetGlobalGIActor_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GlobalGI_C*                         K2Node_DynamicCast_AsBP_Global_GI;                 // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGITime_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_2;            // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_3;            // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B[0x1];                                       // 0x009B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_4;            // 0x009C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_5;            // 0x00AC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent____;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent___;                             // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       K2Node_DynamicCast_As_____actor;                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_InteractedBox_C*                    K2Node_DynamicCast_AsBP_Interacted_Box;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue;        // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_VectorDoubleToVector_ReturnValue;    // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              CallFunc_GetBaseMaterial_ReturnValue;              // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_LeftS;                              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS;                             // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue;                        // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetBpEventManager_ReturnValue;            // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_6;            // 0x0178(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_EventManager_C*                     K2Node_DynamicCast_AsBP_Event_Manager;             // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_7;            // 0x0194(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_8;            // 0x01A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x01B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScalarParameterValue_ReturnValue;      // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Add_LinearColorLinearColor_ReturnValue;   // 0x01D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_3;                       // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColor_GetMin_ReturnValue;           // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_OverlappedActor_3;      // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_3;           // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OverlappedActor_2;      // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OverlappedActor_1;      // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OverlappedActor;        // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_4;                       // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_5;                       // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_9;            // 0x023C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_6;                       // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_10;           // 0x0250(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_7;                       // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_8;                       // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_9;                       // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_11;           // 0x0270(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_10;                      // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_12;           // 0x0284(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_11;                      // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_12;                      // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue_1;           // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x02AC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x02BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue_2;           // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue_3;           // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_2;                   // 0x02D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_3;                   // 0x02E4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_1;                 // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean) == 0x000008, "Wrong alignment on BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean");
static_assert(sizeof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean) == 0x000300, "Wrong size on BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, EntryPoint) == 0x000000, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue) == 0x000030, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue_1) == 0x000040, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_GetGlobalGIActor_ReturnValue) == 0x000050, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_GetGlobalGIActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_DynamicCast_AsBP_Global_GI) == 0x000058, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_DynamicCast_AsBP_Global_GI' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue) == 0x000064, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_GetGITime_ReturnValue) == 0x000068, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_GetGITime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_MapRangeClamped_ReturnValue) == 0x00006C, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000070, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_FMax_ReturnValue) == 0x000074, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue_2) == 0x000078, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue_3) == 0x000088, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Less_FloatFloat_ReturnValue) == 0x000098, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000099, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_BooleanAND_ReturnValue) == 0x00009A, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue_4) == 0x00009C, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue_5) == 0x0000AC, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_CustomEvent____) == 0x0000C0, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_CustomEvent____' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_CustomEvent___) == 0x0000C8, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_CustomEvent___' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_DynamicCast_As_____actor) == 0x0000D0, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_DynamicCast_As_____actor' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_DynamicCast_bSuccess_1) == 0x0000D8, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_DynamicCast_AsBP_Interacted_Box) == 0x0000E0, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_DynamicCast_AsBP_Interacted_Box' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_DynamicCast_bSuccess_2) == 0x0000E8, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_D_K2_GetActorLocation_ReturnValue) == 0x0000F0, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_D_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_GetMaterial_ReturnValue) == 0x000108, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Conv_VectorDoubleToVector_ReturnValue) == 0x000110, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Conv_VectorDoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_GetBaseMaterial_ReturnValue) == 0x000120, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_GetBaseMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000128, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_GetPathName_ReturnValue) == 0x000138, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_GetPathName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Split_LeftS) == 0x000148, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Split_LeftS' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Split_RightS) == 0x000158, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Split_RightS' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Split_ReturnValue) == 0x000168, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Split_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_GetBpEventManager_ReturnValue) == 0x000170, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_GetBpEventManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue_6) == 0x000178, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_DynamicCast_AsBP_Event_Manager) == 0x000188, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_DynamicCast_AsBP_Event_Manager' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_DynamicCast_bSuccess_3) == 0x000190, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue_7) == 0x000194, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue_8) == 0x0001A4, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_MakeColor_ReturnValue) == 0x0001B4, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue_1) == 0x0001C4, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_GetScalarParameterValue_ReturnValue) == 0x0001C8, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001CC, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue_2) == 0x0001D0, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Add_LinearColorLinearColor_ReturnValue) == 0x0001D4, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Add_LinearColorLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue_3) == 0x0001E4, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColor_GetMin_ReturnValue) == 0x0001E8, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColor_GetMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0001EC, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_ComponentBoundEvent_OverlappedActor_3) == 0x0001F0, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_ComponentBoundEvent_OverlappedActor_3' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_ComponentBoundEvent_OtherActor_3) == 0x0001F8, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_ComponentBoundEvent_OtherActor_3' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_ComponentBoundEvent_OverlappedActor_2) == 0x000200, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_ComponentBoundEvent_OverlappedActor_2' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_ComponentBoundEvent_OtherActor_2) == 0x000208, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_ComponentBoundEvent_OverlappedActor_1) == 0x000210, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_ComponentBoundEvent_OverlappedActor_1' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000218, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_ComponentBoundEvent_OverlappedActor) == 0x000220, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_ComponentBoundEvent_OverlappedActor' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_ComponentBoundEvent_OtherActor) == 0x000228, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_Event_DeltaSeconds) == 0x000230, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue_4) == 0x000234, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue_5) == 0x000238, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue_9) == 0x00023C, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue_6) == 0x00024C, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue_10) == 0x000250, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue_7) == 0x000260, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Add_IntInt_ReturnValue) == 0x000264, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue_8) == 0x000268, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue_9) == 0x00026C, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue_11) == 0x000270, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue_10) == 0x000280, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_LinearColorLerp_ReturnValue_12) == 0x000284, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_LinearColorLerp_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue_11) == 0x000294, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Lerp_ReturnValue_12) == 0x000298, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Lerp_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_SwitchInteger_CmpSuccess) == 0x00029C, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Add_IntInt_ReturnValue_1) == 0x0002A0, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_MakeLiteralFloat_ReturnValue) == 0x0002A4, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_MakeLiteralFloat_ReturnValue_1) == 0x0002A8, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_MakeLiteralFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_MakeStruct_LinearColor) == 0x0002AC, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_MakeStruct_LinearColor_1) == 0x0002BC, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_MakeLiteralFloat_ReturnValue_2) == 0x0002CC, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_MakeLiteralFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_MakeLiteralFloat_ReturnValue_3) == 0x0002D0, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_MakeLiteralFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_MakeStruct_LinearColor_2) == 0x0002D4, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_MakeStruct_LinearColor_2' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_MakeStruct_LinearColor_3) == 0x0002E4, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_MakeStruct_LinearColor_3' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Percent_IntInt_ReturnValue) == 0x0002F4, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, K2Node_SwitchInteger_CmpSuccess_1) == 0x0002F8, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::K2Node_SwitchInteger_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0002F9, "Member 'BP_HHA_Ocean_C_ExecuteUbergraph_BP_HHA_Ocean::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

}

