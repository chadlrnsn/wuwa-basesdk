#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroEditorRuntime

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class KuroEditorRuntime.CommandService
// 0x0040 (0x0070 - 0x0030)
class alignas(0x10) UCommandService final : public UObject
{
public:
	TMulticastInlineDelegate<void(const class FString& ReceiveData)> OnReceivedCommand;              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x30];                                      // 0x0040(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableRecvLog(bool isEnable);
	void Start(int32 Port);
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommandService">();
	}
	static class UCommandService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommandService>();
	}
};
static_assert(alignof(UCommandService) == 0x000010, "Wrong alignment on UCommandService");
static_assert(sizeof(UCommandService) == 0x000070, "Wrong size on UCommandService");
static_assert(offsetof(UCommandService, OnReceivedCommand) == 0x000030, "Member 'UCommandService::OnReceivedCommand' has a wrong offset!");

// Class KuroEditorRuntime.EditorRuntimeOperations
// 0x0000 (0x0030 - 0x0030)
class UEditorRuntimeOperations final : public UBlueprintFunctionLibrary
{
public:
	static bool IsPortInUse(int32 Port);
	static bool IsTcpPortInUse(int32 Port);
	static bool IsUdpPortInUse(int32 Port);
	static void ReadBatchFilesAsync(const TArray<class FString>& FilePaths, TDelegate<void(const TArray<struct FReadFileData>& LoadedFiles, const TArray<class FString>& ReadFailedFiles)> OnAllFilesRead);
	static void ReadFileAsync(const class FString& FilePath, TDelegate<void(bool IsSuccess, const class FString& FileContent)> OnFileRead);
	static void SendHttpRequest(const class FString& Method, const class FString& Url, const TMap<class FString, class FString>& HeaderParam, const class FString& Content, TDelegate<void(bool Success, int32 Code, const class FString& Data)> Handler);
	static bool SendMessage(const class FString& Msg, const class FString& Ip, int32 Port);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EditorRuntimeOperations">();
	}
	static class UEditorRuntimeOperations* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEditorRuntimeOperations>();
	}
};
static_assert(alignof(UEditorRuntimeOperations) == 0x000008, "Wrong alignment on UEditorRuntimeOperations");
static_assert(sizeof(UEditorRuntimeOperations) == 0x000030, "Wrong size on UEditorRuntimeOperations");

}

