#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RippleSwim

#include "Basic.hpp"

#include "BP_RippleSwim_classes.hpp"
#include "BP_RippleSwim_parameters.hpp"


namespace SDK
{

// Function BP_RippleSwim.BP_RippleSwim_C.ExecuteUbergraph_BP_RippleSwim
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::ExecuteUbergraph_BP_RippleSwim(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "ExecuteUbergraph_BP_RippleSwim");

	Params::BP_RippleSwim_C_ExecuteUbergraph_BP_RippleSwim Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.TestHitEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVectorDouble&             ImpactPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_SceneBattleInteract_C*        Config                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             OriginPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::TestHitEvent(const struct FVectorDouble& ImpactPoint, class UBP_SceneBattleInteract_C* Config, const struct FVectorDouble& OriginPoint, int32 Id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "TestHitEvent");

	Params::BP_RippleSwim_C_TestHitEvent Parms{};

	Parms.ImpactPoint = std::move(ImpactPoint);
	Parms.Config = Config;
	Parms.OriginPoint = std::move(OriginPoint);
	Parms.Id = Id;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.OnBulletHitPos
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVectorDouble&             ImpactPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_SceneBattleInteract_C*        Config                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             OriginPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::OnBulletHitPos(const struct FVectorDouble& ImpactPoint, class UBP_SceneBattleInteract_C* Config, const struct FVectorDouble& OriginPoint, int32 Id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "OnBulletHitPos");

	Params::BP_RippleSwim_C_OnBulletHitPos Parms{};

	Parms.ImpactPoint = std::move(ImpactPoint);
	Parms.Config = Config;
	Parms.OriginPoint = std::move(OriginPoint);
	Parms.Id = Id;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.BulletHitPos
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVectorDouble&             ImpactPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_SceneBattleInteract_C*        Config                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             OriginPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::BulletHitPos(const struct FVectorDouble& ImpactPoint, class UBP_SceneBattleInteract_C* Config, const struct FVectorDouble& OriginPoint, int32 Id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "BulletHitPos");

	Params::BP_RippleSwim_C_BulletHitPos Parms{};

	Parms.ImpactPoint = std::move(ImpactPoint);
	Parms.Config = Config;
	Parms.OriginPoint = std::move(OriginPoint);
	Parms.Id = Id;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.OnBulletHitWater
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVectorDouble&             ImpactPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_SceneBattleInteract_C*        Config                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             OriginPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::OnBulletHitWater(const struct FVectorDouble& ImpactPoint, class UBP_SceneBattleInteract_C* Config, const struct FVectorDouble& OriginPoint, int32 Id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "OnBulletHitWater");

	Params::BP_RippleSwim_C_OnBulletHitWater Parms{};

	Parms.ImpactPoint = std::move(ImpactPoint);
	Parms.Config = Config;
	Parms.OriginPoint = std::move(OriginPoint);
	Parms.Id = Id;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.BeforeCookForMobile
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_RippleSwim_C::BeforeCookForMobile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "BeforeCookForMobile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RippleSwim.BP_RippleSwim_C.Refresh
// (BlueprintCallable, BlueprintEvent)

void ABP_RippleSwim_C::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Refresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RippleSwim.BP_RippleSwim_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "ReceiveTick");

	Params::BP_RippleSwim_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_RippleSwim_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RippleSwim.BP_RippleSwim_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_RippleSwim_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RippleSwim.BP_RippleSwim_C.AboveWater
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bAboveWater                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RippleSwim_C::AboveWater(const struct FVector& Location, bool* bAboveWater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "AboveWater");

	Params::BP_RippleSwim_C_AboveWater Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (bAboveWater != nullptr)
		*bAboveWater = Parms.bAboveWater;
}


// Function BP_RippleSwim.BP_RippleSwim_C.SetWaterRippleData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_RippleWater_Data_C*           InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::SetWaterRippleData(class UBP_RippleWater_Data_C* InputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "SetWaterRippleData");

	Params::BP_RippleSwim_C_SetWaterRippleData Parms{};

	Parms.InputPin = InputPin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.Clear_RT
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RippleSwim_C::Clear_RT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Clear_RT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RippleSwim.BP_RippleSwim_C.CalcTexCoord
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVectorDouble&             RippleCenter                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             RipplePointLocation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CaptureSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         TexCoord                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::CalcTexCoord(const struct FVectorDouble& RippleCenter, const struct FVectorDouble& RipplePointLocation, float CaptureSize, struct FVector* TexCoord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "CalcTexCoord");

	Params::BP_RippleSwim_C_CalcTexCoord Parms{};

	Parms.RippleCenter = std::move(RippleCenter);
	Parms.RipplePointLocation = std::move(RipplePointLocation);
	Parms.CaptureSize = CaptureSize;

	UObject::ProcessEvent(Func, &Parms);

	if (TexCoord != nullptr)
		*TexCoord = std::move(Parms.TexCoord);
}


// Function BP_RippleSwim.BP_RippleSwim_C.Change Ripple Preset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_RippleWater_Data_C*           NewRippleState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::Change_Ripple_Preset(class UBP_RippleWater_Data_C* NewRippleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Change Ripple Preset");

	Params::BP_RippleSwim_C_Change_Ripple_Preset Parms{};

	Parms.NewRippleState = NewRippleState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.Choose Available Point
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVectorDouble&             CollisionPoint                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             WeaponPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_SceneBattleInteract_C*        ConfigDA                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble*                   AvailblePoint_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::Choose_Available_Point(const struct FVectorDouble& CollisionPoint, const struct FVectorDouble& WeaponPoint, class UBP_SceneBattleInteract_C* ConfigDA, struct FVectorDouble* AvailblePoint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Choose Available Point");

	Params::BP_RippleSwim_C_Choose_Available_Point Parms{};

	Parms.CollisionPoint = std::move(CollisionPoint);
	Parms.WeaponPoint = std::move(WeaponPoint);
	Parms.ConfigDA = ConfigDA;

	UObject::ProcessEvent(Func, &Parms);

	if (AvailblePoint_0 != nullptr)
		*AvailblePoint_0 = std::move(Parms.AvailblePoint_0);
}


// Function BP_RippleSwim.BP_RippleSwim_C.CalcDistance2D
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVectorDouble&             V1                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             V2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Distance_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::CalcDistance2D(const struct FVectorDouble& V1, const struct FVectorDouble& V2, double* Distance_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "CalcDistance2D");

	Params::BP_RippleSwim_C_CalcDistance2D Parms{};

	Parms.V1 = std::move(V1);
	Parms.V2 = std::move(V2);

	UObject::ProcessEvent(Func, &Parms);

	if (Distance_0 != nullptr)
		*Distance_0 = Parms.Distance_0;
}


// Function BP_RippleSwim.BP_RippleSwim_C.CatmullRom
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FVector2D>&               PointList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   StepCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Vaild                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FVector2D>*               CurveList                                              (Parm, OutParm)

void ABP_RippleSwim_C::CatmullRom(TArray<struct FVector2D>& PointList, int32 StepCount, bool* Vaild, TArray<struct FVector2D>* CurveList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "CatmullRom");

	Params::BP_RippleSwim_C_CatmullRom Parms{};

	Parms.PointList = std::move(PointList);
	Parms.StepCount = StepCount;

	UObject::ProcessEvent(Func, &Parms);

	PointList = std::move(Parms.PointList);

	if (Vaild != nullptr)
		*Vaild = Parms.Vaild;

	if (CurveList != nullptr)
		*CurveList = std::move(Parms.CurveList);
}


// Function BP_RippleSwim.BP_RippleSwim_C.GetPoints
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FVector2D>&               PointList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   Vaild                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector2D*                       P_0                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       P_1                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       P_2                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       P_3                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::GetPoints(TArray<struct FVector2D>& PointList, bool* Vaild, struct FVector2D* P_0, struct FVector2D* P_1, struct FVector2D* P_2, struct FVector2D* P_3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "GetPoints");

	Params::BP_RippleSwim_C_GetPoints Parms{};

	Parms.PointList = std::move(PointList);

	UObject::ProcessEvent(Func, &Parms);

	PointList = std::move(Parms.PointList);

	if (Vaild != nullptr)
		*Vaild = Parms.Vaild;

	if (P_0 != nullptr)
		*P_0 = std::move(Parms.P_0);

	if (P_1 != nullptr)
		*P_1 = std::move(Parms.P_1);

	if (P_2 != nullptr)
		*P_2 = std::move(Parms.P_2);

	if (P_3 != nullptr)
		*P_3 = std::move(Parms.P_3);
}


// Function BP_RippleSwim.BP_RippleSwim_C.GetPointsV3
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FVectorDouble>&           PointList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   Vaild                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector2D*                       P_0                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       P_1                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       P_2                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       P_3                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::GetPointsV3(TArray<struct FVectorDouble>& PointList, bool* Vaild, struct FVector2D* P_0, struct FVector2D* P_1, struct FVector2D* P_2, struct FVector2D* P_3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "GetPointsV3");

	Params::BP_RippleSwim_C_GetPointsV3 Parms{};

	Parms.PointList = std::move(PointList);

	UObject::ProcessEvent(Func, &Parms);

	PointList = std::move(Parms.PointList);

	if (Vaild != nullptr)
		*Vaild = Parms.Vaild;

	if (P_0 != nullptr)
		*P_0 = std::move(Parms.P_0);

	if (P_1 != nullptr)
		*P_1 = std::move(Parms.P_1);

	if (P_2 != nullptr)
		*P_2 = std::move(Parms.P_2);

	if (P_3 != nullptr)
		*P_3 = std::move(Parms.P_3);
}


// Function BP_RippleSwim.BP_RippleSwim_C.CalcTexCoord2D
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVectorDouble&             RippleCenter                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 RipplePointLocation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CaptureSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       TexCoord                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::CalcTexCoord2D(const struct FVectorDouble& RippleCenter, const struct FVector2D& RipplePointLocation, float CaptureSize, struct FVector2D* TexCoord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "CalcTexCoord2D");

	Params::BP_RippleSwim_C_CalcTexCoord2D Parms{};

	Parms.RippleCenter = std::move(RippleCenter);
	Parms.RipplePointLocation = std::move(RipplePointLocation);
	Parms.CaptureSize = CaptureSize;

	UObject::ProcessEvent(Func, &Parms);

	if (TexCoord != nullptr)
		*TexCoord = std::move(Parms.TexCoord);
}


// Function BP_RippleSwim.BP_RippleSwim_C.Calc Catmull Weapon 0
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SceneBattleInteract_C*        BulletConfig_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             AvailblePoint_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::Calc_Catmull_Weapon_0(class UBP_SceneBattleInteract_C* BulletConfig_0, const struct FVectorDouble& AvailblePoint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Calc Catmull Weapon 0");

	Params::BP_RippleSwim_C_Calc_Catmull_Weapon_0 Parms{};

	Parms.BulletConfig_0 = BulletConfig_0;
	Parms.AvailblePoint_0 = std::move(AvailblePoint_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.Compare New Point Weapon 0
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVectorDouble&             V2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Vaild                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RippleSwim_C::Compare_New_Point_Weapon_0(const struct FVectorDouble& V2, bool* Vaild)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Compare New Point Weapon 0");

	Params::BP_RippleSwim_C_Compare_New_Point_Weapon_0 Parms{};

	Parms.V2 = std::move(V2);

	UObject::ProcessEvent(Func, &Parms);

	if (Vaild != nullptr)
		*Vaild = Parms.Vaild;
}


// Function BP_RippleSwim.BP_RippleSwim_C.Calc Catmull Weapon 1
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SceneBattleInteract_C*        BulletConfig_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             AvailblePoint_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::Calc_Catmull_Weapon_1(class UBP_SceneBattleInteract_C* BulletConfig_0, const struct FVectorDouble& AvailblePoint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Calc Catmull Weapon 1");

	Params::BP_RippleSwim_C_Calc_Catmull_Weapon_1 Parms{};

	Parms.BulletConfig_0 = BulletConfig_0;
	Parms.AvailblePoint_0 = std::move(AvailblePoint_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.Compare New Point Weapon 1
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVectorDouble&             V2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Vaild                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RippleSwim_C::Compare_New_Point_Weapon_1(const struct FVectorDouble& V2, bool* Vaild)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Compare New Point Weapon 1");

	Params::BP_RippleSwim_C_Compare_New_Point_Weapon_1 Parms{};

	Parms.V2 = std::move(V2);

	UObject::ProcessEvent(Func, &Parms);

	if (Vaild != nullptr)
		*Vaild = Parms.Vaild;
}


// Function BP_RippleSwim.BP_RippleSwim_C.Calc Catmull Weapon 2
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SceneBattleInteract_C*        BulletConfig_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             AvailblePoint_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::Calc_Catmull_Weapon_2(class UBP_SceneBattleInteract_C* BulletConfig_0, const struct FVectorDouble& AvailblePoint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Calc Catmull Weapon 2");

	Params::BP_RippleSwim_C_Calc_Catmull_Weapon_2 Parms{};

	Parms.BulletConfig_0 = BulletConfig_0;
	Parms.AvailblePoint_0 = std::move(AvailblePoint_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.Compare New Point Weapon 2
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVectorDouble&             V2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Vaild                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RippleSwim_C::Compare_New_Point_Weapon_2(const struct FVectorDouble& V2, bool* Vaild)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Compare New Point Weapon 2");

	Params::BP_RippleSwim_C_Compare_New_Point_Weapon_2 Parms{};

	Parms.V2 = std::move(V2);

	UObject::ProcessEvent(Func, &Parms);

	if (Vaild != nullptr)
		*Vaild = Parms.Vaild;
}


// Function BP_RippleSwim.BP_RippleSwim_C.Calc Capsule Weapon 2
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SceneBattleInteract_C*        BulletConfig_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             AvailblePoint_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::Calc_Capsule_Weapon_2(class UBP_SceneBattleInteract_C* BulletConfig_0, const struct FVectorDouble& AvailblePoint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Calc Capsule Weapon 2");

	Params::BP_RippleSwim_C_Calc_Capsule_Weapon_2 Parms{};

	Parms.BulletConfig_0 = BulletConfig_0;
	Parms.AvailblePoint_0 = std::move(AvailblePoint_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.Calc Circle Weapon 2
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SceneBattleInteract_C*        BulletConfig_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             AvailblePoint_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::Calc_Circle_Weapon_2(class UBP_SceneBattleInteract_C* BulletConfig_0, const struct FVectorDouble& AvailblePoint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Calc Circle Weapon 2");

	Params::BP_RippleSwim_C_Calc_Circle_Weapon_2 Parms{};

	Parms.BulletConfig_0 = BulletConfig_0;
	Parms.AvailblePoint_0 = std::move(AvailblePoint_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.TexcoordToPosition
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVectorDouble&             RippleCenter                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 RippleUV                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CaptureSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       Position                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::TexcoordToPosition(const struct FVectorDouble& RippleCenter, const struct FVector2D& RippleUV, float CaptureSize, struct FVector2D* Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "TexcoordToPosition");

	Params::BP_RippleSwim_C_TexcoordToPosition Parms{};

	Parms.RippleCenter = std::move(RippleCenter);
	Parms.RippleUV = std::move(RippleUV);
	Parms.CaptureSize = CaptureSize;

	UObject::ProcessEvent(Func, &Parms);

	if (Position != nullptr)
		*Position = std::move(Parms.Position);
}


// Function BP_RippleSwim.BP_RippleSwim_C.SetOldRipple
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RippleSwim_C::SetOldRipple()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "SetOldRipple");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RippleSwim.BP_RippleSwim_C.SetNewRipple
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RippleSwim_C::SetNewRipple()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "SetNewRipple");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RippleSwim.BP_RippleSwim_C.Set Bullet Data
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SceneBattleInteract_C*        Config                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::Set_Bullet_Data(class UBP_SceneBattleInteract_C* Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Set Bullet Data");

	Params::BP_RippleSwim_C_Set_Bullet_Data Parms{};

	Parms.Config = Config;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RippleSwim.BP_RippleSwim_C.SetCloseSwimRipple
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RippleSwim_C::SetCloseSwimRipple()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "SetCloseSwimRipple");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RippleSwim.BP_RippleSwim_C.CheckAndSetPos
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  LastRippleTime                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RippleSwim_C::CheckAndSetPos(float DeltaSeconds, float* LastRippleTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "CheckAndSetPos");

	Params::BP_RippleSwim_C_CheckAndSetPos Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (LastRippleTime != nullptr)
		*LastRippleTime = Parms.LastRippleTime;
}


// Function BP_RippleSwim.BP_RippleSwim_C.Ripple Simulation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RippleSwim_C::Ripple_Simulation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Ripple Simulation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RippleSwim.BP_RippleSwim_C.Ripple Stamp
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RippleSwim_C::Ripple_Stamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RippleSwim_C", "Ripple Stamp");

	UObject::ProcessEvent(Func, nullptr);
}

}

