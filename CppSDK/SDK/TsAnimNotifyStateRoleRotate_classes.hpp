#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsAnimNotifyStateRoleRotate

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsAnimNotifyStateRoleRotate.TsAnimNotifyStateRoleRotate_C
// 0x0030 (0x0078 - 0x0048)
class UTsAnimNotifyStateRoleRotate_C final : public UKuroAnimNotifyState
{
public:
	bool                                          是否自动朝向目标;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0050(0x0020)(Edit, BlueprintVisible)
	float                                         旋转速度;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          在横板模式中禁用;                                  // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          只在横板模式中生效;                                // 0x0075(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	bool K2_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	bool K2_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	bool K2_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	void Init();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsAnimNotifyStateRoleRotate_C">();
	}
	static class UTsAnimNotifyStateRoleRotate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsAnimNotifyStateRoleRotate_C>();
	}
};
static_assert(alignof(UTsAnimNotifyStateRoleRotate_C) == 0x000008, "Wrong alignment on UTsAnimNotifyStateRoleRotate_C");
static_assert(sizeof(UTsAnimNotifyStateRoleRotate_C) == 0x000078, "Wrong size on UTsAnimNotifyStateRoleRotate_C");
static_assert(offsetof(UTsAnimNotifyStateRoleRotate_C, 是否自动朝向目标) == 0x000048, "Member 'UTsAnimNotifyStateRoleRotate_C::是否自动朝向目标' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRoleRotate_C, TagContainer) == 0x000050, "Member 'UTsAnimNotifyStateRoleRotate_C::TagContainer' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRoleRotate_C, 旋转速度) == 0x000070, "Member 'UTsAnimNotifyStateRoleRotate_C::旋转速度' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRoleRotate_C, 在横板模式中禁用) == 0x000074, "Member 'UTsAnimNotifyStateRoleRotate_C::在横板模式中禁用' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRoleRotate_C, 只在横板模式中生效) == 0x000075, "Member 'UTsAnimNotifyStateRoleRotate_C::只在横板模式中生效' has a wrong offset!");

}

