#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MagicLeapController

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MagicLeapController.EMagicLeapTouchpadGestureDirection
// NumValues: 0x000A
enum class EMagicLeapTouchpadGestureDirection : uint8
{
	None                                     = 0,
	Up                                       = 1,
	Down                                     = 2,
	Left                                     = 3,
	Right                                    = 4,
	In                                       = 5,
	Out                                      = 6,
	Clockwise                                = 7,
	CounterClockwise                         = 8,
	EMagicLeapTouchpadGestureDirection_MAX   = 9,
};

// Enum MagicLeapController.EMagicLeapTouchpadGestureType
// NumValues: 0x000C
enum class EMagicLeapTouchpadGestureType : uint8
{
	None                                     = 0,
	Tap                                      = 1,
	ForceTapDown                             = 2,
	ForceTapUp                               = 3,
	ForceDwell                               = 4,
	SecondForceDown                          = 5,
	LongHold                                 = 6,
	RadialScroll                             = 7,
	Swipe                                    = 8,
	Scroll                                   = 9,
	Pinch                                    = 10,
	EMagicLeapTouchpadGestureType_MAX        = 11,
};

// Enum MagicLeapController.EMagicLeapControllerTrackingMode
// NumValues: 0x0003
enum class EMagicLeapControllerTrackingMode : uint8
{
	InputService                             = 0,
	CoordinateFrameUID                       = 1,
	EMagicLeapControllerTrackingMode_MAX     = 2,
};

// Enum MagicLeapController.EMagicLeapControllerHapticIntensity
// NumValues: 0x0004
enum class EMagicLeapControllerHapticIntensity : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	EMagicLeapControllerHapticIntensity_MAX  = 3,
};

// Enum MagicLeapController.EMagicLeapControllerHapticPattern
// NumValues: 0x000B
enum class EMagicLeapControllerHapticPattern : uint8
{
	None                                     = 0,
	Click                                    = 1,
	Bump                                     = 2,
	DoubleClick                              = 3,
	Buzz                                     = 4,
	Tick                                     = 5,
	ForceDown                                = 6,
	ForceUp                                  = 7,
	ForceDwell                               = 8,
	SecondForceDown                          = 9,
	EMagicLeapControllerHapticPattern_MAX    = 10,
};

// Enum MagicLeapController.EMagicLeapControllerLEDSpeed
// NumValues: 0x0004
enum class EMagicLeapControllerLEDSpeed : uint8
{
	Slow                                     = 0,
	Medium                                   = 1,
	Fast                                     = 2,
	EMagicLeapControllerLEDSpeed_MAX         = 3,
};

// Enum MagicLeapController.EMagicLeapControllerLEDColor
// NumValues: 0x0011
enum class EMagicLeapControllerLEDColor : uint8
{
	BrightMissionRed                         = 0,
	PastelMissionRed                         = 1,
	BrightFloridaOrange                      = 2,
	PastelFloridaOrange                      = 3,
	BrightLunaYellow                         = 4,
	PastelLunaYellow                         = 5,
	BrightNebulaPink                         = 6,
	PastelNebulaPink                         = 7,
	BrightCosmicPurple                       = 8,
	PastelCosmicPurple                       = 9,
	BrightMysticBlue                         = 10,
	PastelMysticBlue                         = 11,
	BrightCelestialBlue                      = 12,
	PastelCelestialBlue                      = 13,
	BrightShaggleGreen                       = 14,
	PastelShaggleGreen                       = 15,
	EMagicLeapControllerLEDColor_MAX         = 16,
};

// Enum MagicLeapController.EMagicLeapControllerLEDEffect
// NumValues: 0x0007
enum class EMagicLeapControllerLEDEffect : uint8
{
	RotateCW                                 = 0,
	RotateCCW                                = 1,
	Pulse                                    = 2,
	PaintCW                                  = 3,
	PaintCCW                                 = 4,
	Blink                                    = 5,
	EMagicLeapControllerLEDEffect_MAX        = 6,
};

// Enum MagicLeapController.EMagicLeapControllerLEDPattern
// NumValues: 0x0014
enum class EMagicLeapControllerLEDPattern : uint8
{
	None                                     = 0,
	Clock01                                  = 1,
	Clock02                                  = 2,
	Clock03                                  = 3,
	Clock04                                  = 4,
	Clock05                                  = 5,
	Clock06                                  = 6,
	Clock07                                  = 7,
	Clock08                                  = 8,
	Clock09                                  = 9,
	Clock10                                  = 10,
	Clock11                                  = 11,
	Clock12                                  = 12,
	Clock01_07                               = 13,
	Clock02_08                               = 14,
	Clock03_09                               = 15,
	Clock04_10                               = 16,
	Clock05_11                               = 17,
	Clock06_12                               = 18,
	EMagicLeapControllerLEDPattern_MAX       = 19,
};

// Enum MagicLeapController.EMagicLeapControllerType
// NumValues: 0x0004
enum class EMagicLeapControllerType : uint8
{
	None                                     = 0,
	Device                                   = 1,
	MobileApp                                = 2,
	EMagicLeapControllerType_MAX             = 3,
};

// ScriptStruct MagicLeapController.MagicLeapTouchpadGesture
// 0x0034 (0x0034 - 0x0000)
struct FMagicLeapTouchpadGesture final
{
public:
	EControllerHand                               Hand;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MotionSource;                                      // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapTouchpadGestureType                 Type;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapTouchpadGestureDirection            Direction;                                         // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PositionAndForce;                                  // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FingerGap;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMagicLeapTouchpadGesture) == 0x000004, "Wrong alignment on FMagicLeapTouchpadGesture");
static_assert(sizeof(FMagicLeapTouchpadGesture) == 0x000034, "Wrong size on FMagicLeapTouchpadGesture");
static_assert(offsetof(FMagicLeapTouchpadGesture, Hand) == 0x000000, "Member 'FMagicLeapTouchpadGesture::Hand' has a wrong offset!");
static_assert(offsetof(FMagicLeapTouchpadGesture, MotionSource) == 0x000004, "Member 'FMagicLeapTouchpadGesture::MotionSource' has a wrong offset!");
static_assert(offsetof(FMagicLeapTouchpadGesture, Type) == 0x000010, "Member 'FMagicLeapTouchpadGesture::Type' has a wrong offset!");
static_assert(offsetof(FMagicLeapTouchpadGesture, Direction) == 0x000011, "Member 'FMagicLeapTouchpadGesture::Direction' has a wrong offset!");
static_assert(offsetof(FMagicLeapTouchpadGesture, PositionAndForce) == 0x000014, "Member 'FMagicLeapTouchpadGesture::PositionAndForce' has a wrong offset!");
static_assert(offsetof(FMagicLeapTouchpadGesture, Speed) == 0x000020, "Member 'FMagicLeapTouchpadGesture::Speed' has a wrong offset!");
static_assert(offsetof(FMagicLeapTouchpadGesture, Distance) == 0x000024, "Member 'FMagicLeapTouchpadGesture::Distance' has a wrong offset!");
static_assert(offsetof(FMagicLeapTouchpadGesture, FingerGap) == 0x000028, "Member 'FMagicLeapTouchpadGesture::FingerGap' has a wrong offset!");
static_assert(offsetof(FMagicLeapTouchpadGesture, Radius) == 0x00002C, "Member 'FMagicLeapTouchpadGesture::Radius' has a wrong offset!");
static_assert(offsetof(FMagicLeapTouchpadGesture, Angle) == 0x000030, "Member 'FMagicLeapTouchpadGesture::Angle' has a wrong offset!");

}

