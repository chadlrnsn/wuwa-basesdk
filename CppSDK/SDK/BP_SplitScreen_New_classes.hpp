#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplitScreen_New

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplitScreen_New.BP_SplitScreen_New_C
// 0x01D8 (0x0498 - 0x02C0)
class ABP_SplitScreen_New_C final : public AKuroEditorTickActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   CharacterActor_3;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Character3;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   CharacterActor_2;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Character2;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   CharacterActor_1;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Character1;                                        // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight3;                                       // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight2;                                       // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterCollection*           MPC;                                               // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Angle_LinePosition__LineDistance;                  // 0x0320(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         E_LinkPos_1;                                       // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         E_LinkPos_2;                                       // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         E_LinkPos_3;                                       // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightYaw1;                                         // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightYaw2;                                         // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightYaw3;                                         // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FaceLightYaw1;                                     // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FaceLightYaw2;                                     // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FaceLightYaw3;                                     // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PointLight1_Location;                              // 0x0350(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PointLight2_Location;                              // 0x035C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PointLight3_Location;                              // 0x0368(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PointLight1_ToonLightColor;                        // 0x0374(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PointLight2_ToonLightColor;                        // 0x0384(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PointLight3_ToonLightColor;                        // 0x0394(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_TongKong1;                      // 0x03A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_TongKong2;                      // 0x03B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_TongKong3;                      // 0x03C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_YanBai1;                        // 0x03D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_YanBai2;                        // 0x03E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_YanBai3;                        // 0x03F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_Color1;                         // 0x0404(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_Color2;                         // 0x0414(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EyeLightSimulation_Color3;                         // 0x0424(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         MeshPart;                                          // 0x0434(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Handle1;                                           // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Handle2;                                           // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Handle3;                                           // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UKuroMaterialControllerComponent*       KuroMaterialControllerComponent1;                  // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKuroMaterialControllerComponent*       KuroMaterialControllerComponent2;                  // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKuroMaterialControllerComponent*       KuroMaterialControllerComponent3;                  // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         textX;                                             // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         textY;                                             // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Width;                                             // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LinkCameraLocation;                                // 0x046C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LinkCameraRelativeLocation;                        // 0x0478(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsThree;                                           // 0x0484(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_485[0x3];                                      // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RoleId1;                                           // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoleId2;                                           // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoleId3;                                           // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SplitScreen_New(int32 EntryPoint);
	void EditorTick(float DeltaSeconds);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Start();
	void End();
	void InitKuroMaterialController(class UKuroMaterialControllerComponent* KuroMaterialControllerComponent, class UChildActorComponent* CharacterActorComponent, class UPointLightComponent* PointLightComponent, const struct FVector& PointLight_Location, const struct FLinearColor& PointLight_ToonLightColor, const struct FLinearColor& EyeLightSimulation_TongKong, const struct FLinearColor& EyeLightSimulation_YanBai, const struct FLinearColor& EyeLightSimulation_Color, float E_LinkPos, bool Channel0, bool Channel1, bool Channel2, float LightYaw, float FaceLightYaw, int32 RoleId, int32* returnHandle);
	void Reset();
	void SetPosByViewSize();
	struct FVector EulerToForward(float Pitch, float Yaw);
	void SetLightDirection(class USkeletalMeshComponent* Mesh, float LightYaw, float FaceLightYaw);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplitScreen_New_C">();
	}
	static class ABP_SplitScreen_New_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplitScreen_New_C>();
	}
};
static_assert(alignof(ABP_SplitScreen_New_C) == 0x000008, "Wrong alignment on ABP_SplitScreen_New_C");
static_assert(sizeof(ABP_SplitScreen_New_C) == 0x000498, "Wrong size on ABP_SplitScreen_New_C");
static_assert(offsetof(ABP_SplitScreen_New_C, UberGraphFrame) == 0x0002C0, "Member 'ABP_SplitScreen_New_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, CharacterActor_3) == 0x0002C8, "Member 'ABP_SplitScreen_New_C::CharacterActor_3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, Character3) == 0x0002D0, "Member 'ABP_SplitScreen_New_C::Character3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, CharacterActor_2) == 0x0002D8, "Member 'ABP_SplitScreen_New_C::CharacterActor_2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, Character2) == 0x0002E0, "Member 'ABP_SplitScreen_New_C::Character2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, CharacterActor_1) == 0x0002E8, "Member 'ABP_SplitScreen_New_C::CharacterActor_1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, Character1) == 0x0002F0, "Member 'ABP_SplitScreen_New_C::Character1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, PointLight3) == 0x0002F8, "Member 'ABP_SplitScreen_New_C::PointLight3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, PointLight2) == 0x000300, "Member 'ABP_SplitScreen_New_C::PointLight2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, PointLight1) == 0x000308, "Member 'ABP_SplitScreen_New_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, DefaultSceneRoot) == 0x000310, "Member 'ABP_SplitScreen_New_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, MPC) == 0x000318, "Member 'ABP_SplitScreen_New_C::MPC' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, Angle_LinePosition__LineDistance) == 0x000320, "Member 'ABP_SplitScreen_New_C::Angle_LinePosition__LineDistance' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, E_LinkPos_1) == 0x00032C, "Member 'ABP_SplitScreen_New_C::E_LinkPos_1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, E_LinkPos_2) == 0x000330, "Member 'ABP_SplitScreen_New_C::E_LinkPos_2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, E_LinkPos_3) == 0x000334, "Member 'ABP_SplitScreen_New_C::E_LinkPos_3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, LightYaw1) == 0x000338, "Member 'ABP_SplitScreen_New_C::LightYaw1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, LightYaw2) == 0x00033C, "Member 'ABP_SplitScreen_New_C::LightYaw2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, LightYaw3) == 0x000340, "Member 'ABP_SplitScreen_New_C::LightYaw3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, FaceLightYaw1) == 0x000344, "Member 'ABP_SplitScreen_New_C::FaceLightYaw1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, FaceLightYaw2) == 0x000348, "Member 'ABP_SplitScreen_New_C::FaceLightYaw2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, FaceLightYaw3) == 0x00034C, "Member 'ABP_SplitScreen_New_C::FaceLightYaw3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, PointLight1_Location) == 0x000350, "Member 'ABP_SplitScreen_New_C::PointLight1_Location' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, PointLight2_Location) == 0x00035C, "Member 'ABP_SplitScreen_New_C::PointLight2_Location' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, PointLight3_Location) == 0x000368, "Member 'ABP_SplitScreen_New_C::PointLight3_Location' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, PointLight1_ToonLightColor) == 0x000374, "Member 'ABP_SplitScreen_New_C::PointLight1_ToonLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, PointLight2_ToonLightColor) == 0x000384, "Member 'ABP_SplitScreen_New_C::PointLight2_ToonLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, PointLight3_ToonLightColor) == 0x000394, "Member 'ABP_SplitScreen_New_C::PointLight3_ToonLightColor' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, EyeLightSimulation_TongKong1) == 0x0003A4, "Member 'ABP_SplitScreen_New_C::EyeLightSimulation_TongKong1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, EyeLightSimulation_TongKong2) == 0x0003B4, "Member 'ABP_SplitScreen_New_C::EyeLightSimulation_TongKong2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, EyeLightSimulation_TongKong3) == 0x0003C4, "Member 'ABP_SplitScreen_New_C::EyeLightSimulation_TongKong3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, EyeLightSimulation_YanBai1) == 0x0003D4, "Member 'ABP_SplitScreen_New_C::EyeLightSimulation_YanBai1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, EyeLightSimulation_YanBai2) == 0x0003E4, "Member 'ABP_SplitScreen_New_C::EyeLightSimulation_YanBai2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, EyeLightSimulation_YanBai3) == 0x0003F4, "Member 'ABP_SplitScreen_New_C::EyeLightSimulation_YanBai3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, EyeLightSimulation_Color1) == 0x000404, "Member 'ABP_SplitScreen_New_C::EyeLightSimulation_Color1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, EyeLightSimulation_Color2) == 0x000414, "Member 'ABP_SplitScreen_New_C::EyeLightSimulation_Color2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, EyeLightSimulation_Color3) == 0x000424, "Member 'ABP_SplitScreen_New_C::EyeLightSimulation_Color3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, MeshPart) == 0x000434, "Member 'ABP_SplitScreen_New_C::MeshPart' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, Handle1) == 0x000438, "Member 'ABP_SplitScreen_New_C::Handle1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, Handle2) == 0x00043C, "Member 'ABP_SplitScreen_New_C::Handle2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, Handle3) == 0x000440, "Member 'ABP_SplitScreen_New_C::Handle3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, KuroMaterialControllerComponent1) == 0x000448, "Member 'ABP_SplitScreen_New_C::KuroMaterialControllerComponent1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, KuroMaterialControllerComponent2) == 0x000450, "Member 'ABP_SplitScreen_New_C::KuroMaterialControllerComponent2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, KuroMaterialControllerComponent3) == 0x000458, "Member 'ABP_SplitScreen_New_C::KuroMaterialControllerComponent3' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, textX) == 0x000460, "Member 'ABP_SplitScreen_New_C::textX' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, textY) == 0x000464, "Member 'ABP_SplitScreen_New_C::textY' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, Width) == 0x000468, "Member 'ABP_SplitScreen_New_C::Width' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, LinkCameraLocation) == 0x00046C, "Member 'ABP_SplitScreen_New_C::LinkCameraLocation' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, LinkCameraRelativeLocation) == 0x000478, "Member 'ABP_SplitScreen_New_C::LinkCameraRelativeLocation' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, IsThree) == 0x000484, "Member 'ABP_SplitScreen_New_C::IsThree' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, RoleId1) == 0x000488, "Member 'ABP_SplitScreen_New_C::RoleId1' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, RoleId2) == 0x00048C, "Member 'ABP_SplitScreen_New_C::RoleId2' has a wrong offset!");
static_assert(offsetof(ABP_SplitScreen_New_C, RoleId3) == 0x000490, "Member 'ABP_SplitScreen_New_C::RoleId3' has a wrong offset!");

}

