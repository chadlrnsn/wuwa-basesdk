#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Mascot

#include "Basic.hpp"

#include "BP_Mascot_classes.hpp"
#include "BP_Mascot_parameters.hpp"


namespace SDK
{

// Function BP_Mascot.BP_Mascot_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Mascot_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mascot_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mascot.BP_Mascot_C.GetFixValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   inValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FixValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Mascot_C::GetFixValue(float inValue, float* FixValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mascot_C", "GetFixValue");

	Params::BP_Mascot_C_GetFixValue Parms{};

	Parms.inValue = inValue;

	UObject::ProcessEvent(Func, &Parms);

	if (FixValue != nullptr)
		*FixValue = Parms.FixValue;
}


// Function BP_Mascot.BP_Mascot_C.HasFixCurve
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CheckName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             FixName                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Mascot_C::HasFixCurve(class FName CheckName, bool* Ret, class FName* FixName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mascot_C", "HasFixCurve");

	Params::BP_Mascot_C_HasFixCurve Parms{};

	Parms.CheckName = CheckName;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;

	if (FixName != nullptr)
		*FixName = Parms.FixName;
}


// Function BP_Mascot.BP_Mascot_C.CalcAllCurve
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FNamedCurveValue>         Ret                                                    (Parm, OutParm)

void ABP_Mascot_C::CalcAllCurve(TArray<struct FNamedCurveValue>* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mascot_C", "CalcAllCurve");

	Params::BP_Mascot_C_CalcAllCurve Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = std::move(Parms.Ret);
}


// Function BP_Mascot.BP_Mascot_C.CalcAllCurve_2
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FNamedCurveValue>         Ret                                                    (Parm, OutParm)

void ABP_Mascot_C::CalcAllCurve_2(TArray<struct FNamedCurveValue>* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mascot_C", "CalcAllCurve_2");

	Params::BP_Mascot_C_CalcAllCurve_2 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = std::move(Parms.Ret);
}


// Function BP_Mascot.BP_Mascot_C.SetAnimDataVector
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, struct FVector>       VectorCurveData                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_Mascot_C::SetAnimDataVector(const TMap<class FName, struct FVector>& VectorCurveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mascot_C", "SetAnimDataVector");

	Params::BP_Mascot_C_SetAnimDataVector Parms{};

	Parms.VectorCurveData = std::move(VectorCurveData);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Mascot.BP_Mascot_C.SetAnimDataFloat
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FNamedCurveValue>         FloatCurveData                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_Mascot_C::SetAnimDataFloat(const TArray<struct FNamedCurveValue>& FloatCurveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mascot_C", "SetAnimDataFloat");

	Params::BP_Mascot_C_SetAnimDataFloat Parms{};

	Parms.FloatCurveData = std::move(FloatCurveData);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Mascot.BP_Mascot_C.GetSupportGroupNames
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> ABP_Mascot_C::GetSupportGroupNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mascot_C", "GetSupportGroupNames");

	Params::BP_Mascot_C_GetSupportGroupNames Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Mascot.BP_Mascot_C.GetAnimDataVector
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, struct FVector>       VectorCurveData                                        (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_Mascot_C::GetAnimDataVector(TMap<class FName, struct FVector>* VectorCurveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mascot_C", "GetAnimDataVector");

	Params::BP_Mascot_C_GetAnimDataVector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (VectorCurveData != nullptr)
		*VectorCurveData = std::move(Parms.VectorCurveData);

	return Parms.ReturnValue;
}


// Function BP_Mascot.BP_Mascot_C.GetAnimDataFloat
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FNamedCurveValue>         FloatCurveData                                         (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_Mascot_C::GetAnimDataFloat(TArray<struct FNamedCurveValue>* FloatCurveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mascot_C", "GetAnimDataFloat");

	Params::BP_Mascot_C_GetAnimDataFloat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FloatCurveData != nullptr)
		*FloatCurveData = std::move(Parms.FloatCurveData);

	return Parms.ReturnValue;
}


// Function BP_Mascot.BP_Mascot_C.GetAddSpineValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         AddSpine                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Mascot_C::GetAddSpineValue(struct FRotator* AddSpine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mascot_C", "GetAddSpineValue");

	Params::BP_Mascot_C_GetAddSpineValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AddSpine != nullptr)
		*AddSpine = std::move(Parms.AddSpine);
}


// Function BP_Mascot.BP_Mascot_C.GetAddSpineHeadValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         AddSpineHead                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Mascot_C::GetAddSpineHeadValue(struct FRotator* AddSpineHead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mascot_C", "GetAddSpineHeadValue");

	Params::BP_Mascot_C_GetAddSpineHeadValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AddSpineHead != nullptr)
		*AddSpineHead = std::move(Parms.AddSpineHead);
}

}

