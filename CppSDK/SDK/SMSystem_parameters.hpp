#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SMSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SMSystem_structs.hpp"


namespace SDK::Params
{

// Function SMSystem.SMStateMachineNetworkedInterface.HasAuthority
// 0x0001 (0x0001 - 0x0000)
struct SMStateMachineNetworkedInterface_HasAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineNetworkedInterface_HasAuthority) == 0x000001, "Wrong alignment on SMStateMachineNetworkedInterface_HasAuthority");
static_assert(sizeof(SMStateMachineNetworkedInterface_HasAuthority) == 0x000001, "Wrong size on SMStateMachineNetworkedInterface_HasAuthority");
static_assert(offsetof(SMStateMachineNetworkedInterface_HasAuthority, ReturnValue) == 0x000000, "Member 'SMStateMachineNetworkedInterface_HasAuthority::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateMachineNetworkedInterface.IsConfiguredForNetworking
// 0x0001 (0x0001 - 0x0000)
struct SMStateMachineNetworkedInterface_IsConfiguredForNetworking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineNetworkedInterface_IsConfiguredForNetworking) == 0x000001, "Wrong alignment on SMStateMachineNetworkedInterface_IsConfiguredForNetworking");
static_assert(sizeof(SMStateMachineNetworkedInterface_IsConfiguredForNetworking) == 0x000001, "Wrong size on SMStateMachineNetworkedInterface_IsConfiguredForNetworking");
static_assert(offsetof(SMStateMachineNetworkedInterface_IsConfiguredForNetworking, ReturnValue) == 0x000000, "Member 'SMStateMachineNetworkedInterface_IsConfiguredForNetworking::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateMachineNetworkedInterface.IsSimulatedProxy
// 0x0001 (0x0001 - 0x0000)
struct SMStateMachineNetworkedInterface_IsSimulatedProxy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineNetworkedInterface_IsSimulatedProxy) == 0x000001, "Wrong alignment on SMStateMachineNetworkedInterface_IsSimulatedProxy");
static_assert(sizeof(SMStateMachineNetworkedInterface_IsSimulatedProxy) == 0x000001, "Wrong size on SMStateMachineNetworkedInterface_IsSimulatedProxy");
static_assert(offsetof(SMStateMachineNetworkedInterface_IsSimulatedProxy, ReturnValue) == 0x000000, "Member 'SMStateMachineNetworkedInterface_IsSimulatedProxy::ReturnValue' has a wrong offset!");

// Function SMSystem.SMNodeInstance.GetContext
// 0x0008 (0x0008 - 0x0000)
struct SMNodeInstance_GetContext final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMNodeInstance_GetContext) == 0x000008, "Wrong alignment on SMNodeInstance_GetContext");
static_assert(sizeof(SMNodeInstance_GetContext) == 0x000008, "Wrong size on SMNodeInstance_GetContext");
static_assert(offsetof(SMNodeInstance_GetContext, ReturnValue) == 0x000000, "Member 'SMNodeInstance_GetContext::ReturnValue' has a wrong offset!");

// Function SMSystem.SMNodeInstance.GetGuid
// 0x0010 (0x0010 - 0x0000)
struct SMNodeInstance_GetGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMNodeInstance_GetGuid) == 0x000004, "Wrong alignment on SMNodeInstance_GetGuid");
static_assert(sizeof(SMNodeInstance_GetGuid) == 0x000010, "Wrong size on SMNodeInstance_GetGuid");
static_assert(offsetof(SMNodeInstance_GetGuid, ReturnValue) == 0x000000, "Member 'SMNodeInstance_GetGuid::ReturnValue' has a wrong offset!");

// Function SMSystem.SMNodeInstance.GetNetworkInterface
// 0x0010 (0x0010 - 0x0000)
struct SMNodeInstance_GetNetworkInterface final
{
public:
	TScriptInterface<class ISMStateMachineNetworkedInterface> ReturnValue;                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMNodeInstance_GetNetworkInterface) == 0x000008, "Wrong alignment on SMNodeInstance_GetNetworkInterface");
static_assert(sizeof(SMNodeInstance_GetNetworkInterface) == 0x000010, "Wrong size on SMNodeInstance_GetNetworkInterface");
static_assert(offsetof(SMNodeInstance_GetNetworkInterface, ReturnValue) == 0x000000, "Member 'SMNodeInstance_GetNetworkInterface::ReturnValue' has a wrong offset!");

// Function SMSystem.SMNodeInstance.GetNodeName
// 0x0010 (0x0010 - 0x0000)
struct SMNodeInstance_GetNodeName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMNodeInstance_GetNodeName) == 0x000008, "Wrong alignment on SMNodeInstance_GetNodeName");
static_assert(sizeof(SMNodeInstance_GetNodeName) == 0x000010, "Wrong size on SMNodeInstance_GetNodeName");
static_assert(offsetof(SMNodeInstance_GetNodeName, ReturnValue) == 0x000000, "Member 'SMNodeInstance_GetNodeName::ReturnValue' has a wrong offset!");

// Function SMSystem.SMNodeInstance.GetOwningStateMachineNodeInstance
// 0x0008 (0x0008 - 0x0000)
struct SMNodeInstance_GetOwningStateMachineNodeInstance final
{
public:
	class USMStateMachineInstance*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMNodeInstance_GetOwningStateMachineNodeInstance) == 0x000008, "Wrong alignment on SMNodeInstance_GetOwningStateMachineNodeInstance");
static_assert(sizeof(SMNodeInstance_GetOwningStateMachineNodeInstance) == 0x000008, "Wrong size on SMNodeInstance_GetOwningStateMachineNodeInstance");
static_assert(offsetof(SMNodeInstance_GetOwningStateMachineNodeInstance, ReturnValue) == 0x000000, "Member 'SMNodeInstance_GetOwningStateMachineNodeInstance::ReturnValue' has a wrong offset!");

// Function SMSystem.SMNodeInstance.GetStateMachineInstance
// 0x0010 (0x0010 - 0x0000)
struct SMNodeInstance_GetStateMachineInstance final
{
public:
	bool                                          bTopMostInstance;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USMInstance*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMNodeInstance_GetStateMachineInstance) == 0x000008, "Wrong alignment on SMNodeInstance_GetStateMachineInstance");
static_assert(sizeof(SMNodeInstance_GetStateMachineInstance) == 0x000010, "Wrong size on SMNodeInstance_GetStateMachineInstance");
static_assert(offsetof(SMNodeInstance_GetStateMachineInstance, bTopMostInstance) == 0x000000, "Member 'SMNodeInstance_GetStateMachineInstance::bTopMostInstance' has a wrong offset!");
static_assert(offsetof(SMNodeInstance_GetStateMachineInstance, ReturnValue) == 0x000008, "Member 'SMNodeInstance_GetStateMachineInstance::ReturnValue' has a wrong offset!");

// Function SMSystem.SMNodeInstance.GetTimeInState
// 0x0004 (0x0004 - 0x0000)
struct SMNodeInstance_GetTimeInState final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMNodeInstance_GetTimeInState) == 0x000004, "Wrong alignment on SMNodeInstance_GetTimeInState");
static_assert(sizeof(SMNodeInstance_GetTimeInState) == 0x000004, "Wrong size on SMNodeInstance_GetTimeInState");
static_assert(offsetof(SMNodeInstance_GetTimeInState, ReturnValue) == 0x000000, "Member 'SMNodeInstance_GetTimeInState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMNodeInstance.HasUpdated
// 0x0001 (0x0001 - 0x0000)
struct SMNodeInstance_HasUpdated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMNodeInstance_HasUpdated) == 0x000001, "Wrong alignment on SMNodeInstance_HasUpdated");
static_assert(sizeof(SMNodeInstance_HasUpdated) == 0x000001, "Wrong size on SMNodeInstance_HasUpdated");
static_assert(offsetof(SMNodeInstance_HasUpdated, ReturnValue) == 0x000000, "Member 'SMNodeInstance_HasUpdated::ReturnValue' has a wrong offset!");

// Function SMSystem.SMNodeInstance.IsActive
// 0x0001 (0x0001 - 0x0000)
struct SMNodeInstance_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMNodeInstance_IsActive) == 0x000001, "Wrong alignment on SMNodeInstance_IsActive");
static_assert(sizeof(SMNodeInstance_IsActive) == 0x000001, "Wrong size on SMNodeInstance_IsActive");
static_assert(offsetof(SMNodeInstance_IsActive, ReturnValue) == 0x000000, "Member 'SMNodeInstance_IsActive::ReturnValue' has a wrong offset!");

// Function SMSystem.SMNodeInstance.IsInEndState
// 0x0001 (0x0001 - 0x0000)
struct SMNodeInstance_IsInEndState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMNodeInstance_IsInEndState) == 0x000001, "Wrong alignment on SMNodeInstance_IsInEndState");
static_assert(sizeof(SMNodeInstance_IsInEndState) == 0x000001, "Wrong size on SMNodeInstance_IsInEndState");
static_assert(offsetof(SMNodeInstance_IsInEndState, ReturnValue) == 0x000000, "Member 'SMNodeInstance_IsInEndState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.SetActive
// 0x0003 (0x0003 - 0x0000)
struct SMStateInstance_Base_SetActive final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetAllParents;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateNow;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_SetActive) == 0x000001, "Wrong alignment on SMStateInstance_Base_SetActive");
static_assert(sizeof(SMStateInstance_Base_SetActive) == 0x000003, "Wrong size on SMStateInstance_Base_SetActive");
static_assert(offsetof(SMStateInstance_Base_SetActive, bValue) == 0x000000, "Member 'SMStateInstance_Base_SetActive::bValue' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_SetActive, bSetAllParents) == 0x000001, "Member 'SMStateInstance_Base_SetActive::bSetAllParents' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_SetActive, bActivateNow) == 0x000002, "Member 'SMStateInstance_Base_SetActive::bActivateNow' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.SetAlwaysUpdate
// 0x0001 (0x0001 - 0x0000)
struct SMStateInstance_Base_SetAlwaysUpdate final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_SetAlwaysUpdate) == 0x000001, "Wrong alignment on SMStateInstance_Base_SetAlwaysUpdate");
static_assert(sizeof(SMStateInstance_Base_SetAlwaysUpdate) == 0x000001, "Wrong size on SMStateInstance_Base_SetAlwaysUpdate");
static_assert(offsetof(SMStateInstance_Base_SetAlwaysUpdate, bValue) == 0x000000, "Member 'SMStateInstance_Base_SetAlwaysUpdate::bValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.SetDisableTickTransitionEvaluation
// 0x0001 (0x0001 - 0x0000)
struct SMStateInstance_Base_SetDisableTickTransitionEvaluation final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_SetDisableTickTransitionEvaluation) == 0x000001, "Wrong alignment on SMStateInstance_Base_SetDisableTickTransitionEvaluation");
static_assert(sizeof(SMStateInstance_Base_SetDisableTickTransitionEvaluation) == 0x000001, "Wrong size on SMStateInstance_Base_SetDisableTickTransitionEvaluation");
static_assert(offsetof(SMStateInstance_Base_SetDisableTickTransitionEvaluation, bValue) == 0x000000, "Member 'SMStateInstance_Base_SetDisableTickTransitionEvaluation::bValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.SetEvalTransitionsOnStart
// 0x0001 (0x0001 - 0x0000)
struct SMStateInstance_Base_SetEvalTransitionsOnStart final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_SetEvalTransitionsOnStart) == 0x000001, "Wrong alignment on SMStateInstance_Base_SetEvalTransitionsOnStart");
static_assert(sizeof(SMStateInstance_Base_SetEvalTransitionsOnStart) == 0x000001, "Wrong size on SMStateInstance_Base_SetEvalTransitionsOnStart");
static_assert(offsetof(SMStateInstance_Base_SetEvalTransitionsOnStart, bValue) == 0x000000, "Member 'SMStateInstance_Base_SetEvalTransitionsOnStart::bValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.SetExcludeFromAnyState
// 0x0001 (0x0001 - 0x0000)
struct SMStateInstance_Base_SetExcludeFromAnyState final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_SetExcludeFromAnyState) == 0x000001, "Wrong alignment on SMStateInstance_Base_SetExcludeFromAnyState");
static_assert(sizeof(SMStateInstance_Base_SetExcludeFromAnyState) == 0x000001, "Wrong size on SMStateInstance_Base_SetExcludeFromAnyState");
static_assert(offsetof(SMStateInstance_Base_SetExcludeFromAnyState, bValue) == 0x000000, "Member 'SMStateInstance_Base_SetExcludeFromAnyState::bValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.SwitchToLinkedState
// 0x0010 (0x0010 - 0x0000)
struct SMStateInstance_Base_SwitchToLinkedState final
{
public:
	class USMStateInstance_Base*                  NextStateInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireTransitionToPass;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateNow;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMStateInstance_Base_SwitchToLinkedState) == 0x000008, "Wrong alignment on SMStateInstance_Base_SwitchToLinkedState");
static_assert(sizeof(SMStateInstance_Base_SwitchToLinkedState) == 0x000010, "Wrong size on SMStateInstance_Base_SwitchToLinkedState");
static_assert(offsetof(SMStateInstance_Base_SwitchToLinkedState, NextStateInstance) == 0x000000, "Member 'SMStateInstance_Base_SwitchToLinkedState::NextStateInstance' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_SwitchToLinkedState, bRequireTransitionToPass) == 0x000008, "Member 'SMStateInstance_Base_SwitchToLinkedState::bRequireTransitionToPass' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_SwitchToLinkedState, bActivateNow) == 0x000009, "Member 'SMStateInstance_Base_SwitchToLinkedState::bActivateNow' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_SwitchToLinkedState, ReturnValue) == 0x00000A, "Member 'SMStateInstance_Base_SwitchToLinkedState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.SwitchToLinkedStateByName
// 0x0018 (0x0018 - 0x0000)
struct SMStateInstance_Base_SwitchToLinkedStateByName final
{
public:
	class FString                                 NextStateName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireTransitionToPass;                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateNow;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMStateInstance_Base_SwitchToLinkedStateByName) == 0x000008, "Wrong alignment on SMStateInstance_Base_SwitchToLinkedStateByName");
static_assert(sizeof(SMStateInstance_Base_SwitchToLinkedStateByName) == 0x000018, "Wrong size on SMStateInstance_Base_SwitchToLinkedStateByName");
static_assert(offsetof(SMStateInstance_Base_SwitchToLinkedStateByName, NextStateName) == 0x000000, "Member 'SMStateInstance_Base_SwitchToLinkedStateByName::NextStateName' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_SwitchToLinkedStateByName, bRequireTransitionToPass) == 0x000010, "Member 'SMStateInstance_Base_SwitchToLinkedStateByName::bRequireTransitionToPass' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_SwitchToLinkedStateByName, bActivateNow) == 0x000011, "Member 'SMStateInstance_Base_SwitchToLinkedStateByName::bActivateNow' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_SwitchToLinkedStateByName, ReturnValue) == 0x000012, "Member 'SMStateInstance_Base_SwitchToLinkedStateByName::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.SwitchToLinkedStateByTransition
// 0x0010 (0x0010 - 0x0000)
struct SMStateInstance_Base_SwitchToLinkedStateByTransition final
{
public:
	class USMTransitionInstance*                  TransitionInstance;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireTransitionToPass;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateNow;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMStateInstance_Base_SwitchToLinkedStateByTransition) == 0x000008, "Wrong alignment on SMStateInstance_Base_SwitchToLinkedStateByTransition");
static_assert(sizeof(SMStateInstance_Base_SwitchToLinkedStateByTransition) == 0x000010, "Wrong size on SMStateInstance_Base_SwitchToLinkedStateByTransition");
static_assert(offsetof(SMStateInstance_Base_SwitchToLinkedStateByTransition, TransitionInstance) == 0x000000, "Member 'SMStateInstance_Base_SwitchToLinkedStateByTransition::TransitionInstance' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_SwitchToLinkedStateByTransition, bRequireTransitionToPass) == 0x000008, "Member 'SMStateInstance_Base_SwitchToLinkedStateByTransition::bRequireTransitionToPass' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_SwitchToLinkedStateByTransition, bActivateNow) == 0x000009, "Member 'SMStateInstance_Base_SwitchToLinkedStateByTransition::bActivateNow' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_SwitchToLinkedStateByTransition, ReturnValue) == 0x00000A, "Member 'SMStateInstance_Base_SwitchToLinkedStateByTransition::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.AreAllIncomingTransitionsFromAnAnyState
// 0x0001 (0x0001 - 0x0000)
struct SMStateInstance_Base_AreAllIncomingTransitionsFromAnAnyState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_AreAllIncomingTransitionsFromAnAnyState) == 0x000001, "Wrong alignment on SMStateInstance_Base_AreAllIncomingTransitionsFromAnAnyState");
static_assert(sizeof(SMStateInstance_Base_AreAllIncomingTransitionsFromAnAnyState) == 0x000001, "Wrong size on SMStateInstance_Base_AreAllIncomingTransitionsFromAnAnyState");
static_assert(offsetof(SMStateInstance_Base_AreAllIncomingTransitionsFromAnAnyState, ReturnValue) == 0x000000, "Member 'SMStateInstance_Base_AreAllIncomingTransitionsFromAnAnyState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.AreAllOutgoingTransitionsFromAnAnyState
// 0x0001 (0x0001 - 0x0000)
struct SMStateInstance_Base_AreAllOutgoingTransitionsFromAnAnyState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_AreAllOutgoingTransitionsFromAnAnyState) == 0x000001, "Wrong alignment on SMStateInstance_Base_AreAllOutgoingTransitionsFromAnAnyState");
static_assert(sizeof(SMStateInstance_Base_AreAllOutgoingTransitionsFromAnAnyState) == 0x000001, "Wrong size on SMStateInstance_Base_AreAllOutgoingTransitionsFromAnAnyState");
static_assert(offsetof(SMStateInstance_Base_AreAllOutgoingTransitionsFromAnAnyState, ReturnValue) == 0x000000, "Member 'SMStateInstance_Base_AreAllOutgoingTransitionsFromAnAnyState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetAlwaysUpdate
// 0x0001 (0x0001 - 0x0000)
struct SMStateInstance_Base_GetAlwaysUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetAlwaysUpdate) == 0x000001, "Wrong alignment on SMStateInstance_Base_GetAlwaysUpdate");
static_assert(sizeof(SMStateInstance_Base_GetAlwaysUpdate) == 0x000001, "Wrong size on SMStateInstance_Base_GetAlwaysUpdate");
static_assert(offsetof(SMStateInstance_Base_GetAlwaysUpdate, ReturnValue) == 0x000000, "Member 'SMStateInstance_Base_GetAlwaysUpdate::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetDisableTickTransitionEvaluation
// 0x0001 (0x0001 - 0x0000)
struct SMStateInstance_Base_GetDisableTickTransitionEvaluation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetDisableTickTransitionEvaluation) == 0x000001, "Wrong alignment on SMStateInstance_Base_GetDisableTickTransitionEvaluation");
static_assert(sizeof(SMStateInstance_Base_GetDisableTickTransitionEvaluation) == 0x000001, "Wrong size on SMStateInstance_Base_GetDisableTickTransitionEvaluation");
static_assert(offsetof(SMStateInstance_Base_GetDisableTickTransitionEvaluation, ReturnValue) == 0x000000, "Member 'SMStateInstance_Base_GetDisableTickTransitionEvaluation::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetEvalTransitionsOnStart
// 0x0001 (0x0001 - 0x0000)
struct SMStateInstance_Base_GetEvalTransitionsOnStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetEvalTransitionsOnStart) == 0x000001, "Wrong alignment on SMStateInstance_Base_GetEvalTransitionsOnStart");
static_assert(sizeof(SMStateInstance_Base_GetEvalTransitionsOnStart) == 0x000001, "Wrong size on SMStateInstance_Base_GetEvalTransitionsOnStart");
static_assert(offsetof(SMStateInstance_Base_GetEvalTransitionsOnStart, ReturnValue) == 0x000000, "Member 'SMStateInstance_Base_GetEvalTransitionsOnStart::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetExcludeFromAnyState
// 0x0001 (0x0001 - 0x0000)
struct SMStateInstance_Base_GetExcludeFromAnyState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetExcludeFromAnyState) == 0x000001, "Wrong alignment on SMStateInstance_Base_GetExcludeFromAnyState");
static_assert(sizeof(SMStateInstance_Base_GetExcludeFromAnyState) == 0x000001, "Wrong size on SMStateInstance_Base_GetExcludeFromAnyState");
static_assert(offsetof(SMStateInstance_Base_GetExcludeFromAnyState, ReturnValue) == 0x000000, "Member 'SMStateInstance_Base_GetExcludeFromAnyState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetIncomingTransitions
// 0x0018 (0x0018 - 0x0000)
struct SMStateInstance_Base_GetIncomingTransitions final
{
public:
	TArray<class USMTransitionInstance*>          Transitions;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bExcludeAlwaysFalse;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMStateInstance_Base_GetIncomingTransitions) == 0x000008, "Wrong alignment on SMStateInstance_Base_GetIncomingTransitions");
static_assert(sizeof(SMStateInstance_Base_GetIncomingTransitions) == 0x000018, "Wrong size on SMStateInstance_Base_GetIncomingTransitions");
static_assert(offsetof(SMStateInstance_Base_GetIncomingTransitions, Transitions) == 0x000000, "Member 'SMStateInstance_Base_GetIncomingTransitions::Transitions' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_GetIncomingTransitions, bExcludeAlwaysFalse) == 0x000010, "Member 'SMStateInstance_Base_GetIncomingTransitions::bExcludeAlwaysFalse' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_GetIncomingTransitions, ReturnValue) == 0x000011, "Member 'SMStateInstance_Base_GetIncomingTransitions::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetNextStateByName
// 0x0018 (0x0018 - 0x0000)
struct SMStateInstance_Base_GetNextStateByName final
{
public:
	class FString                                 StateName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetNextStateByName) == 0x000008, "Wrong alignment on SMStateInstance_Base_GetNextStateByName");
static_assert(sizeof(SMStateInstance_Base_GetNextStateByName) == 0x000018, "Wrong size on SMStateInstance_Base_GetNextStateByName");
static_assert(offsetof(SMStateInstance_Base_GetNextStateByName, StateName) == 0x000000, "Member 'SMStateInstance_Base_GetNextStateByName::StateName' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_GetNextStateByName, ReturnValue) == 0x000010, "Member 'SMStateInstance_Base_GetNextStateByName::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetNextStateByTransitionIndex
// 0x0010 (0x0010 - 0x0000)
struct SMStateInstance_Base_GetNextStateByTransitionIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetNextStateByTransitionIndex) == 0x000008, "Wrong alignment on SMStateInstance_Base_GetNextStateByTransitionIndex");
static_assert(sizeof(SMStateInstance_Base_GetNextStateByTransitionIndex) == 0x000010, "Wrong size on SMStateInstance_Base_GetNextStateByTransitionIndex");
static_assert(offsetof(SMStateInstance_Base_GetNextStateByTransitionIndex, Index_0) == 0x000000, "Member 'SMStateInstance_Base_GetNextStateByTransitionIndex::Index_0' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_GetNextStateByTransitionIndex, ReturnValue) == 0x000008, "Member 'SMStateInstance_Base_GetNextStateByTransitionIndex::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetOutgoingTransitions
// 0x0018 (0x0018 - 0x0000)
struct SMStateInstance_Base_GetOutgoingTransitions final
{
public:
	TArray<class USMTransitionInstance*>          Transitions;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bExcludeAlwaysFalse;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMStateInstance_Base_GetOutgoingTransitions) == 0x000008, "Wrong alignment on SMStateInstance_Base_GetOutgoingTransitions");
static_assert(sizeof(SMStateInstance_Base_GetOutgoingTransitions) == 0x000018, "Wrong size on SMStateInstance_Base_GetOutgoingTransitions");
static_assert(offsetof(SMStateInstance_Base_GetOutgoingTransitions, Transitions) == 0x000000, "Member 'SMStateInstance_Base_GetOutgoingTransitions::Transitions' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_GetOutgoingTransitions, bExcludeAlwaysFalse) == 0x000010, "Member 'SMStateInstance_Base_GetOutgoingTransitions::bExcludeAlwaysFalse' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_GetOutgoingTransitions, ReturnValue) == 0x000011, "Member 'SMStateInstance_Base_GetOutgoingTransitions::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetPreviousActiveState
// 0x0008 (0x0008 - 0x0000)
struct SMStateInstance_Base_GetPreviousActiveState final
{
public:
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetPreviousActiveState) == 0x000008, "Wrong alignment on SMStateInstance_Base_GetPreviousActiveState");
static_assert(sizeof(SMStateInstance_Base_GetPreviousActiveState) == 0x000008, "Wrong size on SMStateInstance_Base_GetPreviousActiveState");
static_assert(offsetof(SMStateInstance_Base_GetPreviousActiveState, ReturnValue) == 0x000000, "Member 'SMStateInstance_Base_GetPreviousActiveState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetPreviousActiveTransition
// 0x0008 (0x0008 - 0x0000)
struct SMStateInstance_Base_GetPreviousActiveTransition final
{
public:
	class USMTransitionInstance*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetPreviousActiveTransition) == 0x000008, "Wrong alignment on SMStateInstance_Base_GetPreviousActiveTransition");
static_assert(sizeof(SMStateInstance_Base_GetPreviousActiveTransition) == 0x000008, "Wrong size on SMStateInstance_Base_GetPreviousActiveTransition");
static_assert(offsetof(SMStateInstance_Base_GetPreviousActiveTransition, ReturnValue) == 0x000000, "Member 'SMStateInstance_Base_GetPreviousActiveTransition::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetPreviousStateByName
// 0x0018 (0x0018 - 0x0000)
struct SMStateInstance_Base_GetPreviousStateByName final
{
public:
	class FString                                 StateName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetPreviousStateByName) == 0x000008, "Wrong alignment on SMStateInstance_Base_GetPreviousStateByName");
static_assert(sizeof(SMStateInstance_Base_GetPreviousStateByName) == 0x000018, "Wrong size on SMStateInstance_Base_GetPreviousStateByName");
static_assert(offsetof(SMStateInstance_Base_GetPreviousStateByName, StateName) == 0x000000, "Member 'SMStateInstance_Base_GetPreviousStateByName::StateName' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_GetPreviousStateByName, ReturnValue) == 0x000010, "Member 'SMStateInstance_Base_GetPreviousStateByName::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetServerTimeInState
// 0x0008 (0x0008 - 0x0000)
struct SMStateInstance_Base_GetServerTimeInState final
{
public:
	bool                                          bOutUsedLocalTime;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetServerTimeInState) == 0x000004, "Wrong alignment on SMStateInstance_Base_GetServerTimeInState");
static_assert(sizeof(SMStateInstance_Base_GetServerTimeInState) == 0x000008, "Wrong size on SMStateInstance_Base_GetServerTimeInState");
static_assert(offsetof(SMStateInstance_Base_GetServerTimeInState, bOutUsedLocalTime) == 0x000000, "Member 'SMStateInstance_Base_GetServerTimeInState::bOutUsedLocalTime' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_GetServerTimeInState, ReturnValue) == 0x000004, "Member 'SMStateInstance_Base_GetServerTimeInState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetStartTime
// 0x0008 (0x0008 - 0x0000)
struct SMStateInstance_Base_GetStartTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetStartTime) == 0x000008, "Wrong alignment on SMStateInstance_Base_GetStartTime");
static_assert(sizeof(SMStateInstance_Base_GetStartTime) == 0x000008, "Wrong size on SMStateInstance_Base_GetStartTime");
static_assert(offsetof(SMStateInstance_Base_GetStartTime, ReturnValue) == 0x000000, "Member 'SMStateInstance_Base_GetStartTime::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetStateInfo
// 0x0080 (0x0080 - 0x0000)
struct SMStateInstance_Base_GetStateInfo final
{
public:
	struct FSMStateInfo                           State;                                             // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetStateInfo) == 0x000008, "Wrong alignment on SMStateInstance_Base_GetStateInfo");
static_assert(sizeof(SMStateInstance_Base_GetStateInfo) == 0x000080, "Wrong size on SMStateInstance_Base_GetStateInfo");
static_assert(offsetof(SMStateInstance_Base_GetStateInfo, State) == 0x000000, "Member 'SMStateInstance_Base_GetStateInfo::State' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetTransitionByIndex
// 0x0010 (0x0010 - 0x0000)
struct SMStateInstance_Base_GetTransitionByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USMTransitionInstance*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetTransitionByIndex) == 0x000008, "Wrong alignment on SMStateInstance_Base_GetTransitionByIndex");
static_assert(sizeof(SMStateInstance_Base_GetTransitionByIndex) == 0x000010, "Wrong size on SMStateInstance_Base_GetTransitionByIndex");
static_assert(offsetof(SMStateInstance_Base_GetTransitionByIndex, Index_0) == 0x000000, "Member 'SMStateInstance_Base_GetTransitionByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(SMStateInstance_Base_GetTransitionByIndex, ReturnValue) == 0x000008, "Member 'SMStateInstance_Base_GetTransitionByIndex::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.GetTransitionToTake
// 0x0008 (0x0008 - 0x0000)
struct SMStateInstance_Base_GetTransitionToTake final
{
public:
	class USMTransitionInstance*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_GetTransitionToTake) == 0x000008, "Wrong alignment on SMStateInstance_Base_GetTransitionToTake");
static_assert(sizeof(SMStateInstance_Base_GetTransitionToTake) == 0x000008, "Wrong size on SMStateInstance_Base_GetTransitionToTake");
static_assert(offsetof(SMStateInstance_Base_GetTransitionToTake, ReturnValue) == 0x000000, "Member 'SMStateInstance_Base_GetTransitionToTake::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.IsEntryState
// 0x0001 (0x0001 - 0x0000)
struct SMStateInstance_Base_IsEntryState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_IsEntryState) == 0x000001, "Wrong alignment on SMStateInstance_Base_IsEntryState");
static_assert(sizeof(SMStateInstance_Base_IsEntryState) == 0x000001, "Wrong size on SMStateInstance_Base_IsEntryState");
static_assert(offsetof(SMStateInstance_Base_IsEntryState, ReturnValue) == 0x000000, "Member 'SMStateInstance_Base_IsEntryState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateInstance_Base.IsStateMachine
// 0x0001 (0x0001 - 0x0000)
struct SMStateInstance_Base_IsStateMachine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateInstance_Base_IsStateMachine) == 0x000001, "Wrong alignment on SMStateInstance_Base_IsStateMachine");
static_assert(sizeof(SMStateInstance_Base_IsStateMachine) == 0x000001, "Wrong size on SMStateInstance_Base_IsStateMachine");
static_assert(offsetof(SMStateInstance_Base_IsStateMachine, ReturnValue) == 0x000000, "Member 'SMStateInstance_Base_IsStateMachine::ReturnValue' has a wrong offset!");

// Function SMSystem.SMConduitInstance.SetCanEvaluate
// 0x0001 (0x0001 - 0x0000)
struct SMConduitInstance_SetCanEvaluate final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMConduitInstance_SetCanEvaluate) == 0x000001, "Wrong alignment on SMConduitInstance_SetCanEvaluate");
static_assert(sizeof(SMConduitInstance_SetCanEvaluate) == 0x000001, "Wrong size on SMConduitInstance_SetCanEvaluate");
static_assert(offsetof(SMConduitInstance_SetCanEvaluate, bValue) == 0x000000, "Member 'SMConduitInstance_SetCanEvaluate::bValue' has a wrong offset!");

// Function SMSystem.SMConduitInstance.SetEvalWithTransitions
// 0x0001 (0x0001 - 0x0000)
struct SMConduitInstance_SetEvalWithTransitions final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMConduitInstance_SetEvalWithTransitions) == 0x000001, "Wrong alignment on SMConduitInstance_SetEvalWithTransitions");
static_assert(sizeof(SMConduitInstance_SetEvalWithTransitions) == 0x000001, "Wrong size on SMConduitInstance_SetEvalWithTransitions");
static_assert(offsetof(SMConduitInstance_SetEvalWithTransitions, bValue) == 0x000000, "Member 'SMConduitInstance_SetEvalWithTransitions::bValue' has a wrong offset!");

// Function SMSystem.SMConduitInstance.GetCanEvaluate
// 0x0001 (0x0001 - 0x0000)
struct SMConduitInstance_GetCanEvaluate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMConduitInstance_GetCanEvaluate) == 0x000001, "Wrong alignment on SMConduitInstance_GetCanEvaluate");
static_assert(sizeof(SMConduitInstance_GetCanEvaluate) == 0x000001, "Wrong size on SMConduitInstance_GetCanEvaluate");
static_assert(offsetof(SMConduitInstance_GetCanEvaluate, ReturnValue) == 0x000000, "Member 'SMConduitInstance_GetCanEvaluate::ReturnValue' has a wrong offset!");

// Function SMSystem.SMConduitInstance.GetEvalWithTransitions
// 0x0001 (0x0001 - 0x0000)
struct SMConduitInstance_GetEvalWithTransitions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMConduitInstance_GetEvalWithTransitions) == 0x000001, "Wrong alignment on SMConduitInstance_GetEvalWithTransitions");
static_assert(sizeof(SMConduitInstance_GetEvalWithTransitions) == 0x000001, "Wrong size on SMConduitInstance_GetEvalWithTransitions");
static_assert(offsetof(SMConduitInstance_GetEvalWithTransitions, ReturnValue) == 0x000000, "Member 'SMConduitInstance_GetEvalWithTransitions::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.EvaluateAndFindTransitionChain
// 0x0028 (0x0028 - 0x0000)
struct SMInstance_EvaluateAndFindTransitionChain final
{
public:
	class USMTransitionInstance*                  InFirstTransitionInstance;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USMTransitionInstance*>          OutTransitionChain;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USMStateInstance_Base*                  OutDestinationState;                               // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequirePreviousStateActive;                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMInstance_EvaluateAndFindTransitionChain) == 0x000008, "Wrong alignment on SMInstance_EvaluateAndFindTransitionChain");
static_assert(sizeof(SMInstance_EvaluateAndFindTransitionChain) == 0x000028, "Wrong size on SMInstance_EvaluateAndFindTransitionChain");
static_assert(offsetof(SMInstance_EvaluateAndFindTransitionChain, InFirstTransitionInstance) == 0x000000, "Member 'SMInstance_EvaluateAndFindTransitionChain::InFirstTransitionInstance' has a wrong offset!");
static_assert(offsetof(SMInstance_EvaluateAndFindTransitionChain, OutTransitionChain) == 0x000008, "Member 'SMInstance_EvaluateAndFindTransitionChain::OutTransitionChain' has a wrong offset!");
static_assert(offsetof(SMInstance_EvaluateAndFindTransitionChain, OutDestinationState) == 0x000018, "Member 'SMInstance_EvaluateAndFindTransitionChain::OutDestinationState' has a wrong offset!");
static_assert(offsetof(SMInstance_EvaluateAndFindTransitionChain, bRequirePreviousStateActive) == 0x000020, "Member 'SMInstance_EvaluateAndFindTransitionChain::bRequirePreviousStateActive' has a wrong offset!");
static_assert(offsetof(SMInstance_EvaluateAndFindTransitionChain, ReturnValue) == 0x000021, "Member 'SMInstance_EvaluateAndFindTransitionChain::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.EvaluateAndTakeTransitionChain
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_EvaluateAndTakeTransitionChain final
{
public:
	class USMTransitionInstance*                  InFirstTransitionInstance;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMInstance_EvaluateAndTakeTransitionChain) == 0x000008, "Wrong alignment on SMInstance_EvaluateAndTakeTransitionChain");
static_assert(sizeof(SMInstance_EvaluateAndTakeTransitionChain) == 0x000010, "Wrong size on SMInstance_EvaluateAndTakeTransitionChain");
static_assert(offsetof(SMInstance_EvaluateAndTakeTransitionChain, InFirstTransitionInstance) == 0x000000, "Member 'SMInstance_EvaluateAndTakeTransitionChain::InFirstTransitionInstance' has a wrong offset!");
static_assert(offsetof(SMInstance_EvaluateAndTakeTransitionChain, ReturnValue) == 0x000008, "Member 'SMInstance_EvaluateAndTakeTransitionChain::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetAllRootNodeInstance
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetAllRootNodeInstance final
{
public:
	TArray<class USMStateMachineInstance*>        Nodes;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetAllRootNodeInstance) == 0x000008, "Wrong alignment on SMInstance_GetAllRootNodeInstance");
static_assert(sizeof(SMInstance_GetAllRootNodeInstance) == 0x000010, "Wrong size on SMInstance_GetAllRootNodeInstance");
static_assert(offsetof(SMInstance_GetAllRootNodeInstance, Nodes) == 0x000000, "Member 'SMInstance_GetAllRootNodeInstance::Nodes' has a wrong offset!");

// Function SMSystem.SMInstance.GetGuidRedirectMap
// 0x0050 (0x0050 - 0x0000)
struct SMInstance_GetGuidRedirectMap final
{
public:
	TMap<struct FGuid, struct FGuid>              ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetGuidRedirectMap) == 0x000008, "Wrong alignment on SMInstance_GetGuidRedirectMap");
static_assert(sizeof(SMInstance_GetGuidRedirectMap) == 0x000050, "Wrong size on SMInstance_GetGuidRedirectMap");
static_assert(offsetof(SMInstance_GetGuidRedirectMap, ReturnValue) == 0x000000, "Member 'SMInstance_GetGuidRedirectMap::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetMasterReferenceOwner
// 0x0008 (0x0008 - 0x0000)
struct SMInstance_GetMasterReferenceOwner final
{
public:
	class USMInstance*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetMasterReferenceOwner) == 0x000008, "Wrong alignment on SMInstance_GetMasterReferenceOwner");
static_assert(sizeof(SMInstance_GetMasterReferenceOwner) == 0x000008, "Wrong size on SMInstance_GetMasterReferenceOwner");
static_assert(offsetof(SMInstance_GetMasterReferenceOwner, ReturnValue) == 0x000000, "Member 'SMInstance_GetMasterReferenceOwner::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetPrimaryReferenceOwner
// 0x0008 (0x0008 - 0x0000)
struct SMInstance_GetPrimaryReferenceOwner final
{
public:
	class USMInstance*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetPrimaryReferenceOwner) == 0x000008, "Wrong alignment on SMInstance_GetPrimaryReferenceOwner");
static_assert(sizeof(SMInstance_GetPrimaryReferenceOwner) == 0x000008, "Wrong size on SMInstance_GetPrimaryReferenceOwner");
static_assert(offsetof(SMInstance_GetPrimaryReferenceOwner, ReturnValue) == 0x000000, "Member 'SMInstance_GetPrimaryReferenceOwner::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.Initialize
// 0x0008 (0x0008 - 0x0000)
struct SMInstance_Initialize final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_Initialize) == 0x000008, "Wrong alignment on SMInstance_Initialize");
static_assert(sizeof(SMInstance_Initialize) == 0x000008, "Wrong size on SMInstance_Initialize");
static_assert(offsetof(SMInstance_Initialize, Context) == 0x000000, "Member 'SMInstance_Initialize::Context' has a wrong offset!");

// Function SMSystem.SMInstance.Internal_EvaluateAndTakeTransitionChainByGuid
// 0x0014 (0x0014 - 0x0000)
struct SMInstance_Internal_EvaluateAndTakeTransitionChainByGuid final
{
public:
	struct FGuid                                  PathGuid;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMInstance_Internal_EvaluateAndTakeTransitionChainByGuid) == 0x000004, "Wrong alignment on SMInstance_Internal_EvaluateAndTakeTransitionChainByGuid");
static_assert(sizeof(SMInstance_Internal_EvaluateAndTakeTransitionChainByGuid) == 0x000014, "Wrong size on SMInstance_Internal_EvaluateAndTakeTransitionChainByGuid");
static_assert(offsetof(SMInstance_Internal_EvaluateAndTakeTransitionChainByGuid, PathGuid) == 0x000000, "Member 'SMInstance_Internal_EvaluateAndTakeTransitionChainByGuid::PathGuid' has a wrong offset!");
static_assert(offsetof(SMInstance_Internal_EvaluateAndTakeTransitionChainByGuid, ReturnValue) == 0x000010, "Member 'SMInstance_Internal_EvaluateAndTakeTransitionChainByGuid::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.Internal_EventCleanup
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_Internal_EventCleanup final
{
public:
	struct FGuid                                  PathGuid;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_Internal_EventCleanup) == 0x000004, "Wrong alignment on SMInstance_Internal_EventCleanup");
static_assert(sizeof(SMInstance_Internal_EventCleanup) == 0x000010, "Wrong size on SMInstance_Internal_EventCleanup");
static_assert(offsetof(SMInstance_Internal_EventCleanup, PathGuid) == 0x000000, "Member 'SMInstance_Internal_EventCleanup::PathGuid' has a wrong offset!");

// Function SMSystem.SMInstance.Internal_Update
// 0x0004 (0x0004 - 0x0000)
struct SMInstance_Internal_Update final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_Internal_Update) == 0x000004, "Wrong alignment on SMInstance_Internal_Update");
static_assert(sizeof(SMInstance_Internal_Update) == 0x000004, "Wrong size on SMInstance_Internal_Update");
static_assert(offsetof(SMInstance_Internal_Update, DeltaSeconds) == 0x000000, "Member 'SMInstance_Internal_Update::DeltaSeconds' has a wrong offset!");

// Function SMSystem.SMInstance.K2_TryGetNetworkInterface
// 0x0018 (0x0018 - 0x0000)
struct SMInstance_K2_TryGetNetworkInterface final
{
public:
	TScriptInterface<class ISMStateMachineNetworkedInterface> Interface;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMInstance_K2_TryGetNetworkInterface) == 0x000008, "Wrong alignment on SMInstance_K2_TryGetNetworkInterface");
static_assert(sizeof(SMInstance_K2_TryGetNetworkInterface) == 0x000018, "Wrong size on SMInstance_K2_TryGetNetworkInterface");
static_assert(offsetof(SMInstance_K2_TryGetNetworkInterface, Interface) == 0x000000, "Member 'SMInstance_K2_TryGetNetworkInterface::Interface' has a wrong offset!");
static_assert(offsetof(SMInstance_K2_TryGetNetworkInterface, bIsValid) == 0x000010, "Member 'SMInstance_K2_TryGetNetworkInterface::bIsValid' has a wrong offset!");

// Function SMSystem.SMInstance.LoadFromMultipleStates
// 0x0018 (0x0018 - 0x0000)
struct SMInstance_LoadFromMultipleStates final
{
public:
	TArray<struct FGuid>                          FromGuids;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bNotify;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMInstance_LoadFromMultipleStates) == 0x000008, "Wrong alignment on SMInstance_LoadFromMultipleStates");
static_assert(sizeof(SMInstance_LoadFromMultipleStates) == 0x000018, "Wrong size on SMInstance_LoadFromMultipleStates");
static_assert(offsetof(SMInstance_LoadFromMultipleStates, FromGuids) == 0x000000, "Member 'SMInstance_LoadFromMultipleStates::FromGuids' has a wrong offset!");
static_assert(offsetof(SMInstance_LoadFromMultipleStates, bNotify) == 0x000010, "Member 'SMInstance_LoadFromMultipleStates::bNotify' has a wrong offset!");

// Function SMSystem.SMInstance.LoadFromState
// 0x0014 (0x0014 - 0x0000)
struct SMInstance_LoadFromState final
{
public:
	struct FGuid                                  FromGuid;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllParents;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotify;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMInstance_LoadFromState) == 0x000004, "Wrong alignment on SMInstance_LoadFromState");
static_assert(sizeof(SMInstance_LoadFromState) == 0x000014, "Wrong size on SMInstance_LoadFromState");
static_assert(offsetof(SMInstance_LoadFromState, FromGuid) == 0x000000, "Member 'SMInstance_LoadFromState::FromGuid' has a wrong offset!");
static_assert(offsetof(SMInstance_LoadFromState, bAllParents) == 0x000010, "Member 'SMInstance_LoadFromState::bAllParents' has a wrong offset!");
static_assert(offsetof(SMInstance_LoadFromState, bNotify) == 0x000011, "Member 'SMInstance_LoadFromState::bNotify' has a wrong offset!");

// Function SMSystem.SMInstance.OnStateMachineInitialStateLoaded
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_OnStateMachineInitialStateLoaded final
{
public:
	struct FGuid                                  StateGuid;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_OnStateMachineInitialStateLoaded) == 0x000004, "Wrong alignment on SMInstance_OnStateMachineInitialStateLoaded");
static_assert(sizeof(SMInstance_OnStateMachineInitialStateLoaded) == 0x000010, "Wrong size on SMInstance_OnStateMachineInitialStateLoaded");
static_assert(offsetof(SMInstance_OnStateMachineInitialStateLoaded, StateGuid) == 0x000000, "Member 'SMInstance_OnStateMachineInitialStateLoaded::StateGuid' has a wrong offset!");

// Function SMSystem.SMInstance.OnStateMachineStateChanged
// 0x0100 (0x0100 - 0x0000)
struct SMInstance_OnStateMachineStateChanged final
{
public:
	struct FSMStateInfo                           ToState;                                           // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSMStateInfo                           FromState;                                         // 0x0080(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_OnStateMachineStateChanged) == 0x000008, "Wrong alignment on SMInstance_OnStateMachineStateChanged");
static_assert(sizeof(SMInstance_OnStateMachineStateChanged) == 0x000100, "Wrong size on SMInstance_OnStateMachineStateChanged");
static_assert(offsetof(SMInstance_OnStateMachineStateChanged, ToState) == 0x000000, "Member 'SMInstance_OnStateMachineStateChanged::ToState' has a wrong offset!");
static_assert(offsetof(SMInstance_OnStateMachineStateChanged, FromState) == 0x000080, "Member 'SMInstance_OnStateMachineStateChanged::FromState' has a wrong offset!");

// Function SMSystem.SMInstance.OnStateMachineStateStarted
// 0x0080 (0x0080 - 0x0000)
struct SMInstance_OnStateMachineStateStarted final
{
public:
	struct FSMStateInfo                           State;                                             // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_OnStateMachineStateStarted) == 0x000008, "Wrong alignment on SMInstance_OnStateMachineStateStarted");
static_assert(sizeof(SMInstance_OnStateMachineStateStarted) == 0x000080, "Wrong size on SMInstance_OnStateMachineStateStarted");
static_assert(offsetof(SMInstance_OnStateMachineStateStarted, State) == 0x000000, "Member 'SMInstance_OnStateMachineStateStarted::State' has a wrong offset!");

// Function SMSystem.SMInstance.OnStateMachineTransitionTaken
// 0x0098 (0x0098 - 0x0000)
struct SMInstance_OnStateMachineTransitionTaken final
{
public:
	struct FSMTransitionInfo                      Transition;                                        // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_OnStateMachineTransitionTaken) == 0x000008, "Wrong alignment on SMInstance_OnStateMachineTransitionTaken");
static_assert(sizeof(SMInstance_OnStateMachineTransitionTaken) == 0x000098, "Wrong size on SMInstance_OnStateMachineTransitionTaken");
static_assert(offsetof(SMInstance_OnStateMachineTransitionTaken, Transition) == 0x000000, "Member 'SMInstance_OnStateMachineTransitionTaken::Transition' has a wrong offset!");

// Function SMSystem.SMInstance.OnStateMachineUpdate
// 0x0004 (0x0004 - 0x0000)
struct SMInstance_OnStateMachineUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_OnStateMachineUpdate) == 0x000004, "Wrong alignment on SMInstance_OnStateMachineUpdate");
static_assert(sizeof(SMInstance_OnStateMachineUpdate) == 0x000004, "Wrong size on SMInstance_OnStateMachineUpdate");
static_assert(offsetof(SMInstance_OnStateMachineUpdate, DeltaSeconds) == 0x000000, "Member 'SMInstance_OnStateMachineUpdate::DeltaSeconds' has a wrong offset!");

// Function SMSystem.SMInstance.RunUpdateAsReference
// 0x0004 (0x0004 - 0x0000)
struct SMInstance_RunUpdateAsReference final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_RunUpdateAsReference) == 0x000004, "Wrong alignment on SMInstance_RunUpdateAsReference");
static_assert(sizeof(SMInstance_RunUpdateAsReference) == 0x000004, "Wrong size on SMInstance_RunUpdateAsReference");
static_assert(offsetof(SMInstance_RunUpdateAsReference, DeltaSeconds) == 0x000000, "Member 'SMInstance_RunUpdateAsReference::DeltaSeconds' has a wrong offset!");

// Function SMSystem.SMInstance.SetAutoManageTime
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_SetAutoManageTime final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_SetAutoManageTime) == 0x000001, "Wrong alignment on SMInstance_SetAutoManageTime");
static_assert(sizeof(SMInstance_SetAutoManageTime) == 0x000001, "Wrong size on SMInstance_SetAutoManageTime");
static_assert(offsetof(SMInstance_SetAutoManageTime, Value) == 0x000000, "Member 'SMInstance_SetAutoManageTime::Value' has a wrong offset!");

// Function SMSystem.SMInstance.SetCanEverTick
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_SetCanEverTick final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_SetCanEverTick) == 0x000001, "Wrong alignment on SMInstance_SetCanEverTick");
static_assert(sizeof(SMInstance_SetCanEverTick) == 0x000001, "Wrong size on SMInstance_SetCanEverTick");
static_assert(offsetof(SMInstance_SetCanEverTick, Value) == 0x000000, "Member 'SMInstance_SetCanEverTick::Value' has a wrong offset!");

// Function SMSystem.SMInstance.SetCanTickWhenPaused
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_SetCanTickWhenPaused final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_SetCanTickWhenPaused) == 0x000001, "Wrong alignment on SMInstance_SetCanTickWhenPaused");
static_assert(sizeof(SMInstance_SetCanTickWhenPaused) == 0x000001, "Wrong size on SMInstance_SetCanTickWhenPaused");
static_assert(offsetof(SMInstance_SetCanTickWhenPaused, Value) == 0x000000, "Member 'SMInstance_SetCanTickWhenPaused::Value' has a wrong offset!");

// Function SMSystem.SMInstance.SetContext
// 0x0008 (0x0008 - 0x0000)
struct SMInstance_SetContext final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_SetContext) == 0x000008, "Wrong alignment on SMInstance_SetContext");
static_assert(sizeof(SMInstance_SetContext) == 0x000008, "Wrong size on SMInstance_SetContext");
static_assert(offsetof(SMInstance_SetContext, Context) == 0x000000, "Member 'SMInstance_SetContext::Context' has a wrong offset!");

// Function SMSystem.SMInstance.SetGuidRedirectMap
// 0x0050 (0x0050 - 0x0000)
struct SMInstance_SetGuidRedirectMap final
{
public:
	TMap<struct FGuid, struct FGuid>              InGuidMap;                                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_SetGuidRedirectMap) == 0x000008, "Wrong alignment on SMInstance_SetGuidRedirectMap");
static_assert(sizeof(SMInstance_SetGuidRedirectMap) == 0x000050, "Wrong size on SMInstance_SetGuidRedirectMap");
static_assert(offsetof(SMInstance_SetGuidRedirectMap, InGuidMap) == 0x000000, "Member 'SMInstance_SetGuidRedirectMap::InGuidMap' has a wrong offset!");

// Function SMSystem.SMInstance.SetStateHistoryMaxCount
// 0x0004 (0x0004 - 0x0000)
struct SMInstance_SetStateHistoryMaxCount final
{
public:
	int32                                         NewSize;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_SetStateHistoryMaxCount) == 0x000004, "Wrong alignment on SMInstance_SetStateHistoryMaxCount");
static_assert(sizeof(SMInstance_SetStateHistoryMaxCount) == 0x000004, "Wrong size on SMInstance_SetStateHistoryMaxCount");
static_assert(offsetof(SMInstance_SetStateHistoryMaxCount, NewSize) == 0x000000, "Member 'SMInstance_SetStateHistoryMaxCount::NewSize' has a wrong offset!");

// Function SMSystem.SMInstance.SetStateMachineClass
// 0x0008 (0x0008 - 0x0000)
struct SMInstance_SetStateMachineClass final
{
public:
	TSubclassOf<class USMStateMachineInstance>    NewStateMachineClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_SetStateMachineClass) == 0x000008, "Wrong alignment on SMInstance_SetStateMachineClass");
static_assert(sizeof(SMInstance_SetStateMachineClass) == 0x000008, "Wrong size on SMInstance_SetStateMachineClass");
static_assert(offsetof(SMInstance_SetStateMachineClass, NewStateMachineClass) == 0x000000, "Member 'SMInstance_SetStateMachineClass::NewStateMachineClass' has a wrong offset!");

// Function SMSystem.SMInstance.SetStopOnEndState
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_SetStopOnEndState final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_SetStopOnEndState) == 0x000001, "Wrong alignment on SMInstance_SetStopOnEndState");
static_assert(sizeof(SMInstance_SetStopOnEndState) == 0x000001, "Wrong size on SMInstance_SetStopOnEndState");
static_assert(offsetof(SMInstance_SetStopOnEndState, Value) == 0x000000, "Member 'SMInstance_SetStopOnEndState::Value' has a wrong offset!");

// Function SMSystem.SMInstance.SetTickBeforeBeginPlay
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_SetTickBeforeBeginPlay final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_SetTickBeforeBeginPlay) == 0x000001, "Wrong alignment on SMInstance_SetTickBeforeBeginPlay");
static_assert(sizeof(SMInstance_SetTickBeforeBeginPlay) == 0x000001, "Wrong size on SMInstance_SetTickBeforeBeginPlay");
static_assert(offsetof(SMInstance_SetTickBeforeBeginPlay, Value) == 0x000000, "Member 'SMInstance_SetTickBeforeBeginPlay::Value' has a wrong offset!");

// Function SMSystem.SMInstance.SetTickInterval
// 0x0004 (0x0004 - 0x0000)
struct SMInstance_SetTickInterval final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_SetTickInterval) == 0x000004, "Wrong alignment on SMInstance_SetTickInterval");
static_assert(sizeof(SMInstance_SetTickInterval) == 0x000004, "Wrong size on SMInstance_SetTickInterval");
static_assert(offsetof(SMInstance_SetTickInterval, Value) == 0x000000, "Member 'SMInstance_SetTickInterval::Value' has a wrong offset!");

// Function SMSystem.SMInstance.SetTickOnManualUpdate
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_SetTickOnManualUpdate final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_SetTickOnManualUpdate) == 0x000001, "Wrong alignment on SMInstance_SetTickOnManualUpdate");
static_assert(sizeof(SMInstance_SetTickOnManualUpdate) == 0x000001, "Wrong size on SMInstance_SetTickOnManualUpdate");
static_assert(offsetof(SMInstance_SetTickOnManualUpdate, Value) == 0x000000, "Member 'SMInstance_SetTickOnManualUpdate::Value' has a wrong offset!");

// Function SMSystem.SMInstance.StartWithNewContext
// 0x0008 (0x0008 - 0x0000)
struct SMInstance_StartWithNewContext final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_StartWithNewContext) == 0x000008, "Wrong alignment on SMInstance_StartWithNewContext");
static_assert(sizeof(SMInstance_StartWithNewContext) == 0x000008, "Wrong size on SMInstance_StartWithNewContext");
static_assert(offsetof(SMInstance_StartWithNewContext, Context) == 0x000000, "Member 'SMInstance_StartWithNewContext::Context' has a wrong offset!");

// Function SMSystem.SMInstance.SwitchActiveState
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_SwitchActiveState final
{
public:
	class USMStateInstance_Base*                  NewStateInstance;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivateOtherStates;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMInstance_SwitchActiveState) == 0x000008, "Wrong alignment on SMInstance_SwitchActiveState");
static_assert(sizeof(SMInstance_SwitchActiveState) == 0x000010, "Wrong size on SMInstance_SwitchActiveState");
static_assert(offsetof(SMInstance_SwitchActiveState, NewStateInstance) == 0x000000, "Member 'SMInstance_SwitchActiveState::NewStateInstance' has a wrong offset!");
static_assert(offsetof(SMInstance_SwitchActiveState, bDeactivateOtherStates) == 0x000008, "Member 'SMInstance_SwitchActiveState::bDeactivateOtherStates' has a wrong offset!");

// Function SMSystem.SMInstance.SwitchActiveStateByQualifiedName
// 0x0018 (0x0018 - 0x0000)
struct SMInstance_SwitchActiveStateByQualifiedName final
{
public:
	class FString                                 InFullPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivateOtherStates;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMInstance_SwitchActiveStateByQualifiedName) == 0x000008, "Wrong alignment on SMInstance_SwitchActiveStateByQualifiedName");
static_assert(sizeof(SMInstance_SwitchActiveStateByQualifiedName) == 0x000018, "Wrong size on SMInstance_SwitchActiveStateByQualifiedName");
static_assert(offsetof(SMInstance_SwitchActiveStateByQualifiedName, InFullPath) == 0x000000, "Member 'SMInstance_SwitchActiveStateByQualifiedName::InFullPath' has a wrong offset!");
static_assert(offsetof(SMInstance_SwitchActiveStateByQualifiedName, bDeactivateOtherStates) == 0x000010, "Member 'SMInstance_SwitchActiveStateByQualifiedName::bDeactivateOtherStates' has a wrong offset!");

// Function SMSystem.SMInstance.TakeTransitionChain
// 0x0018 (0x0018 - 0x0000)
struct SMInstance_TakeTransitionChain final
{
public:
	TArray<class USMTransitionInstance*>          InTransitionChain;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMInstance_TakeTransitionChain) == 0x000008, "Wrong alignment on SMInstance_TakeTransitionChain");
static_assert(sizeof(SMInstance_TakeTransitionChain) == 0x000018, "Wrong size on SMInstance_TakeTransitionChain");
static_assert(offsetof(SMInstance_TakeTransitionChain, InTransitionChain) == 0x000000, "Member 'SMInstance_TakeTransitionChain::InTransitionChain' has a wrong offset!");
static_assert(offsetof(SMInstance_TakeTransitionChain, ReturnValue) == 0x000010, "Member 'SMInstance_TakeTransitionChain::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.Tick
// 0x0004 (0x0004 - 0x0000)
struct SMInstance_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_Tick) == 0x000004, "Wrong alignment on SMInstance_Tick");
static_assert(sizeof(SMInstance_Tick) == 0x000004, "Wrong size on SMInstance_Tick");
static_assert(offsetof(SMInstance_Tick, DeltaTime) == 0x000000, "Member 'SMInstance_Tick::DeltaTime' has a wrong offset!");

// Function SMSystem.SMInstance.Update
// 0x0004 (0x0004 - 0x0000)
struct SMInstance_Update final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_Update) == 0x000004, "Wrong alignment on SMInstance_Update");
static_assert(sizeof(SMInstance_Update) == 0x000004, "Wrong size on SMInstance_Update");
static_assert(offsetof(SMInstance_Update, DeltaSeconds) == 0x000000, "Member 'SMInstance_Update::DeltaSeconds' has a wrong offset!");

// Function SMSystem.SMInstance.AreInitialStatesSetFromLoad
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_AreInitialStatesSetFromLoad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_AreInitialStatesSetFromLoad) == 0x000001, "Wrong alignment on SMInstance_AreInitialStatesSetFromLoad");
static_assert(sizeof(SMInstance_AreInitialStatesSetFromLoad) == 0x000001, "Wrong size on SMInstance_AreInitialStatesSetFromLoad");
static_assert(offsetof(SMInstance_AreInitialStatesSetFromLoad, ReturnValue) == 0x000000, "Member 'SMInstance_AreInitialStatesSetFromLoad::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.CanAutoManageTime
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_CanAutoManageTime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_CanAutoManageTime) == 0x000001, "Wrong alignment on SMInstance_CanAutoManageTime");
static_assert(sizeof(SMInstance_CanAutoManageTime) == 0x000001, "Wrong size on SMInstance_CanAutoManageTime");
static_assert(offsetof(SMInstance_CanAutoManageTime, ReturnValue) == 0x000000, "Member 'SMInstance_CanAutoManageTime::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.CanEverTick
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_CanEverTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_CanEverTick) == 0x000001, "Wrong alignment on SMInstance_CanEverTick");
static_assert(sizeof(SMInstance_CanEverTick) == 0x000001, "Wrong size on SMInstance_CanEverTick");
static_assert(offsetof(SMInstance_CanEverTick, ReturnValue) == 0x000000, "Member 'SMInstance_CanEverTick::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.CanTickOnManualUpdate
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_CanTickOnManualUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_CanTickOnManualUpdate) == 0x000001, "Wrong alignment on SMInstance_CanTickOnManualUpdate");
static_assert(sizeof(SMInstance_CanTickOnManualUpdate) == 0x000001, "Wrong size on SMInstance_CanTickOnManualUpdate");
static_assert(offsetof(SMInstance_CanTickOnManualUpdate, ReturnValue) == 0x000000, "Member 'SMInstance_CanTickOnManualUpdate::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetActiveStateGuid
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetActiveStateGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetActiveStateGuid) == 0x000004, "Wrong alignment on SMInstance_GetActiveStateGuid");
static_assert(sizeof(SMInstance_GetActiveStateGuid) == 0x000010, "Wrong size on SMInstance_GetActiveStateGuid");
static_assert(offsetof(SMInstance_GetActiveStateGuid, ReturnValue) == 0x000000, "Member 'SMInstance_GetActiveStateGuid::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetActiveStateInstance
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetActiveStateInstance final
{
public:
	bool                                          bCheckNested;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetActiveStateInstance) == 0x000008, "Wrong alignment on SMInstance_GetActiveStateInstance");
static_assert(sizeof(SMInstance_GetActiveStateInstance) == 0x000010, "Wrong size on SMInstance_GetActiveStateInstance");
static_assert(offsetof(SMInstance_GetActiveStateInstance, bCheckNested) == 0x000000, "Member 'SMInstance_GetActiveStateInstance::bCheckNested' has a wrong offset!");
static_assert(offsetof(SMInstance_GetActiveStateInstance, ReturnValue) == 0x000008, "Member 'SMInstance_GetActiveStateInstance::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetActiveStateName
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetActiveStateName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetActiveStateName) == 0x000008, "Wrong alignment on SMInstance_GetActiveStateName");
static_assert(sizeof(SMInstance_GetActiveStateName) == 0x000010, "Wrong size on SMInstance_GetActiveStateName");
static_assert(offsetof(SMInstance_GetActiveStateName, ReturnValue) == 0x000000, "Member 'SMInstance_GetActiveStateName::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetAllActiveStateGuids
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetAllActiveStateGuids final
{
public:
	TArray<struct FGuid>                          ActiveGuids;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetAllActiveStateGuids) == 0x000008, "Wrong alignment on SMInstance_GetAllActiveStateGuids");
static_assert(sizeof(SMInstance_GetAllActiveStateGuids) == 0x000010, "Wrong size on SMInstance_GetAllActiveStateGuids");
static_assert(offsetof(SMInstance_GetAllActiveStateGuids, ActiveGuids) == 0x000000, "Member 'SMInstance_GetAllActiveStateGuids::ActiveGuids' has a wrong offset!");

// Function SMSystem.SMInstance.GetAllActiveStateInstances
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetAllActiveStateInstances final
{
public:
	TArray<class USMStateInstance_Base*>          ActiveStateInstances;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetAllActiveStateInstances) == 0x000008, "Wrong alignment on SMInstance_GetAllActiveStateInstances");
static_assert(sizeof(SMInstance_GetAllActiveStateInstances) == 0x000010, "Wrong size on SMInstance_GetAllActiveStateInstances");
static_assert(offsetof(SMInstance_GetAllActiveStateInstances, ActiveStateInstances) == 0x000000, "Member 'SMInstance_GetAllActiveStateInstances::ActiveStateInstances' has a wrong offset!");

// Function SMSystem.SMInstance.GetAllCurrentStateGuids
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetAllCurrentStateGuids final
{
public:
	TArray<struct FGuid>                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetAllCurrentStateGuids) == 0x000008, "Wrong alignment on SMInstance_GetAllCurrentStateGuids");
static_assert(sizeof(SMInstance_GetAllCurrentStateGuids) == 0x000010, "Wrong size on SMInstance_GetAllCurrentStateGuids");
static_assert(offsetof(SMInstance_GetAllCurrentStateGuids, ReturnValue) == 0x000000, "Member 'SMInstance_GetAllCurrentStateGuids::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetAllReferencedInstances
// 0x0018 (0x0018 - 0x0000)
struct SMInstance_GetAllReferencedInstances final
{
public:
	bool                                          bIncludeChildren;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USMInstance*>                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetAllReferencedInstances) == 0x000008, "Wrong alignment on SMInstance_GetAllReferencedInstances");
static_assert(sizeof(SMInstance_GetAllReferencedInstances) == 0x000018, "Wrong size on SMInstance_GetAllReferencedInstances");
static_assert(offsetof(SMInstance_GetAllReferencedInstances, bIncludeChildren) == 0x000000, "Member 'SMInstance_GetAllReferencedInstances::bIncludeChildren' has a wrong offset!");
static_assert(offsetof(SMInstance_GetAllReferencedInstances, ReturnValue) == 0x000008, "Member 'SMInstance_GetAllReferencedInstances::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetAllStateInstances
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetAllStateInstances final
{
public:
	TArray<class USMStateInstance_Base*>          StateInstances;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetAllStateInstances) == 0x000008, "Wrong alignment on SMInstance_GetAllStateInstances");
static_assert(sizeof(SMInstance_GetAllStateInstances) == 0x000010, "Wrong size on SMInstance_GetAllStateInstances");
static_assert(offsetof(SMInstance_GetAllStateInstances, StateInstances) == 0x000000, "Member 'SMInstance_GetAllStateInstances::StateInstances' has a wrong offset!");

// Function SMSystem.SMInstance.GetAllTransitionInstances
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetAllTransitionInstances final
{
public:
	TArray<class USMTransitionInstance*>          TransitionInstances;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetAllTransitionInstances) == 0x000008, "Wrong alignment on SMInstance_GetAllTransitionInstances");
static_assert(sizeof(SMInstance_GetAllTransitionInstances) == 0x000010, "Wrong size on SMInstance_GetAllTransitionInstances");
static_assert(offsetof(SMInstance_GetAllTransitionInstances, TransitionInstances) == 0x000000, "Member 'SMInstance_GetAllTransitionInstances::TransitionInstances' has a wrong offset!");

// Function SMSystem.SMInstance.GetComponentOwner
// 0x0008 (0x0008 - 0x0000)
struct SMInstance_GetComponentOwner final
{
public:
	class USMStateMachineComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetComponentOwner) == 0x000008, "Wrong alignment on SMInstance_GetComponentOwner");
static_assert(sizeof(SMInstance_GetComponentOwner) == 0x000008, "Wrong size on SMInstance_GetComponentOwner");
static_assert(offsetof(SMInstance_GetComponentOwner, ReturnValue) == 0x000000, "Member 'SMInstance_GetComponentOwner::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetContext
// 0x0008 (0x0008 - 0x0000)
struct SMInstance_GetContext final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetContext) == 0x000008, "Wrong alignment on SMInstance_GetContext");
static_assert(sizeof(SMInstance_GetContext) == 0x000008, "Wrong size on SMInstance_GetContext");
static_assert(offsetof(SMInstance_GetContext, ReturnValue) == 0x000000, "Member 'SMInstance_GetContext::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetNestedActiveStateGuid
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetNestedActiveStateGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetNestedActiveStateGuid) == 0x000004, "Wrong alignment on SMInstance_GetNestedActiveStateGuid");
static_assert(sizeof(SMInstance_GetNestedActiveStateGuid) == 0x000010, "Wrong size on SMInstance_GetNestedActiveStateGuid");
static_assert(offsetof(SMInstance_GetNestedActiveStateGuid, ReturnValue) == 0x000000, "Member 'SMInstance_GetNestedActiveStateGuid::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetNestedActiveStateName
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetNestedActiveStateName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetNestedActiveStateName) == 0x000008, "Wrong alignment on SMInstance_GetNestedActiveStateName");
static_assert(sizeof(SMInstance_GetNestedActiveStateName) == 0x000010, "Wrong size on SMInstance_GetNestedActiveStateName");
static_assert(offsetof(SMInstance_GetNestedActiveStateName, ReturnValue) == 0x000000, "Member 'SMInstance_GetNestedActiveStateName::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetNetworkInterface
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetNetworkInterface final
{
public:
	TScriptInterface<class ISMStateMachineNetworkedInterface> ReturnValue;                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetNetworkInterface) == 0x000008, "Wrong alignment on SMInstance_GetNetworkInterface");
static_assert(sizeof(SMInstance_GetNetworkInterface) == 0x000010, "Wrong size on SMInstance_GetNetworkInterface");
static_assert(offsetof(SMInstance_GetNetworkInterface, ReturnValue) == 0x000000, "Member 'SMInstance_GetNetworkInterface::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetNodeInstanceByGuid
// 0x0018 (0x0018 - 0x0000)
struct SMInstance_GetNodeInstanceByGuid final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMNodeInstance*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetNodeInstanceByGuid) == 0x000008, "Wrong alignment on SMInstance_GetNodeInstanceByGuid");
static_assert(sizeof(SMInstance_GetNodeInstanceByGuid) == 0x000018, "Wrong size on SMInstance_GetNodeInstanceByGuid");
static_assert(offsetof(SMInstance_GetNodeInstanceByGuid, Guid) == 0x000000, "Member 'SMInstance_GetNodeInstanceByGuid::Guid' has a wrong offset!");
static_assert(offsetof(SMInstance_GetNodeInstanceByGuid, ReturnValue) == 0x000010, "Member 'SMInstance_GetNodeInstanceByGuid::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetReferencedInstanceByGuid
// 0x0018 (0x0018 - 0x0000)
struct SMInstance_GetReferencedInstanceByGuid final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMInstance*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetReferencedInstanceByGuid) == 0x000008, "Wrong alignment on SMInstance_GetReferencedInstanceByGuid");
static_assert(sizeof(SMInstance_GetReferencedInstanceByGuid) == 0x000018, "Wrong size on SMInstance_GetReferencedInstanceByGuid");
static_assert(offsetof(SMInstance_GetReferencedInstanceByGuid, Guid) == 0x000000, "Member 'SMInstance_GetReferencedInstanceByGuid::Guid' has a wrong offset!");
static_assert(offsetof(SMInstance_GetReferencedInstanceByGuid, ReturnValue) == 0x000010, "Member 'SMInstance_GetReferencedInstanceByGuid::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetReferenceOwner
// 0x0008 (0x0008 - 0x0000)
struct SMInstance_GetReferenceOwner final
{
public:
	class USMInstance*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetReferenceOwner) == 0x000008, "Wrong alignment on SMInstance_GetReferenceOwner");
static_assert(sizeof(SMInstance_GetReferenceOwner) == 0x000008, "Wrong size on SMInstance_GetReferenceOwner");
static_assert(offsetof(SMInstance_GetReferenceOwner, ReturnValue) == 0x000000, "Member 'SMInstance_GetReferenceOwner::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetRootStateMachineInstance
// 0x0008 (0x0008 - 0x0000)
struct SMInstance_GetRootStateMachineInstance final
{
public:
	class USMStateMachineInstance*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetRootStateMachineInstance) == 0x000008, "Wrong alignment on SMInstance_GetRootStateMachineInstance");
static_assert(sizeof(SMInstance_GetRootStateMachineInstance) == 0x000008, "Wrong size on SMInstance_GetRootStateMachineInstance");
static_assert(offsetof(SMInstance_GetRootStateMachineInstance, ReturnValue) == 0x000000, "Member 'SMInstance_GetRootStateMachineInstance::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetRootStateMachineNodeInstance
// 0x0008 (0x0008 - 0x0000)
struct SMInstance_GetRootStateMachineNodeInstance final
{
public:
	class USMStateMachineInstance*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetRootStateMachineNodeInstance) == 0x000008, "Wrong alignment on SMInstance_GetRootStateMachineNodeInstance");
static_assert(sizeof(SMInstance_GetRootStateMachineNodeInstance) == 0x000008, "Wrong size on SMInstance_GetRootStateMachineNodeInstance");
static_assert(offsetof(SMInstance_GetRootStateMachineNodeInstance, ReturnValue) == 0x000000, "Member 'SMInstance_GetRootStateMachineNodeInstance::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetSingleActiveStateGuid
// 0x0014 (0x0014 - 0x0000)
struct SMInstance_GetSingleActiveStateGuid final
{
public:
	bool                                          bCheckNested;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetSingleActiveStateGuid) == 0x000004, "Wrong alignment on SMInstance_GetSingleActiveStateGuid");
static_assert(sizeof(SMInstance_GetSingleActiveStateGuid) == 0x000014, "Wrong size on SMInstance_GetSingleActiveStateGuid");
static_assert(offsetof(SMInstance_GetSingleActiveStateGuid, bCheckNested) == 0x000000, "Member 'SMInstance_GetSingleActiveStateGuid::bCheckNested' has a wrong offset!");
static_assert(offsetof(SMInstance_GetSingleActiveStateGuid, ReturnValue) == 0x000004, "Member 'SMInstance_GetSingleActiveStateGuid::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetSingleActiveStateInstance
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetSingleActiveStateInstance final
{
public:
	bool                                          bCheckNested;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetSingleActiveStateInstance) == 0x000008, "Wrong alignment on SMInstance_GetSingleActiveStateInstance");
static_assert(sizeof(SMInstance_GetSingleActiveStateInstance) == 0x000010, "Wrong size on SMInstance_GetSingleActiveStateInstance");
static_assert(offsetof(SMInstance_GetSingleActiveStateInstance, bCheckNested) == 0x000000, "Member 'SMInstance_GetSingleActiveStateInstance::bCheckNested' has a wrong offset!");
static_assert(offsetof(SMInstance_GetSingleActiveStateInstance, ReturnValue) == 0x000008, "Member 'SMInstance_GetSingleActiveStateInstance::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetStateHistory
// 0x0010 (0x0010 - 0x0000)
struct SMInstance_GetStateHistory final
{
public:
	TArray<struct FSMStateHistory>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetStateHistory) == 0x000008, "Wrong alignment on SMInstance_GetStateHistory");
static_assert(sizeof(SMInstance_GetStateHistory) == 0x000010, "Wrong size on SMInstance_GetStateHistory");
static_assert(offsetof(SMInstance_GetStateHistory, ReturnValue) == 0x000000, "Member 'SMInstance_GetStateHistory::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetStateHistoryMaxCount
// 0x0004 (0x0004 - 0x0000)
struct SMInstance_GetStateHistoryMaxCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetStateHistoryMaxCount) == 0x000004, "Wrong alignment on SMInstance_GetStateHistoryMaxCount");
static_assert(sizeof(SMInstance_GetStateHistoryMaxCount) == 0x000004, "Wrong size on SMInstance_GetStateHistoryMaxCount");
static_assert(offsetof(SMInstance_GetStateHistoryMaxCount, ReturnValue) == 0x000000, "Member 'SMInstance_GetStateHistoryMaxCount::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetStateInstanceByGuid
// 0x0018 (0x0018 - 0x0000)
struct SMInstance_GetStateInstanceByGuid final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetStateInstanceByGuid) == 0x000008, "Wrong alignment on SMInstance_GetStateInstanceByGuid");
static_assert(sizeof(SMInstance_GetStateInstanceByGuid) == 0x000018, "Wrong size on SMInstance_GetStateInstanceByGuid");
static_assert(offsetof(SMInstance_GetStateInstanceByGuid, Guid) == 0x000000, "Member 'SMInstance_GetStateInstanceByGuid::Guid' has a wrong offset!");
static_assert(offsetof(SMInstance_GetStateInstanceByGuid, ReturnValue) == 0x000010, "Member 'SMInstance_GetStateInstanceByGuid::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetStateInstanceByQualifiedName
// 0x0018 (0x0018 - 0x0000)
struct SMInstance_GetStateInstanceByQualifiedName final
{
public:
	class FString                                 InFullPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetStateInstanceByQualifiedName) == 0x000008, "Wrong alignment on SMInstance_GetStateInstanceByQualifiedName");
static_assert(sizeof(SMInstance_GetStateInstanceByQualifiedName) == 0x000018, "Wrong size on SMInstance_GetStateInstanceByQualifiedName");
static_assert(offsetof(SMInstance_GetStateInstanceByQualifiedName, InFullPath) == 0x000000, "Member 'SMInstance_GetStateInstanceByQualifiedName::InFullPath' has a wrong offset!");
static_assert(offsetof(SMInstance_GetStateInstanceByQualifiedName, ReturnValue) == 0x000010, "Member 'SMInstance_GetStateInstanceByQualifiedName::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetStateMachineClass
// 0x0008 (0x0008 - 0x0000)
struct SMInstance_GetStateMachineClass final
{
public:
	TSubclassOf<class USMStateMachineInstance>    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetStateMachineClass) == 0x000008, "Wrong alignment on SMInstance_GetStateMachineClass");
static_assert(sizeof(SMInstance_GetStateMachineClass) == 0x000008, "Wrong size on SMInstance_GetStateMachineClass");
static_assert(offsetof(SMInstance_GetStateMachineClass, ReturnValue) == 0x000000, "Member 'SMInstance_GetStateMachineClass::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetStopOnEndState
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_GetStopOnEndState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetStopOnEndState) == 0x000001, "Wrong alignment on SMInstance_GetStopOnEndState");
static_assert(sizeof(SMInstance_GetStopOnEndState) == 0x000001, "Wrong size on SMInstance_GetStopOnEndState");
static_assert(offsetof(SMInstance_GetStopOnEndState, ReturnValue) == 0x000000, "Member 'SMInstance_GetStopOnEndState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetTickInterval
// 0x0004 (0x0004 - 0x0000)
struct SMInstance_GetTickInterval final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetTickInterval) == 0x000004, "Wrong alignment on SMInstance_GetTickInterval");
static_assert(sizeof(SMInstance_GetTickInterval) == 0x000004, "Wrong size on SMInstance_GetTickInterval");
static_assert(offsetof(SMInstance_GetTickInterval, ReturnValue) == 0x000000, "Member 'SMInstance_GetTickInterval::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.GetTransitionInstanceByGuid
// 0x0018 (0x0018 - 0x0000)
struct SMInstance_GetTransitionInstanceByGuid final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMTransitionInstance*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_GetTransitionInstanceByGuid) == 0x000008, "Wrong alignment on SMInstance_GetTransitionInstanceByGuid");
static_assert(sizeof(SMInstance_GetTransitionInstanceByGuid) == 0x000018, "Wrong size on SMInstance_GetTransitionInstanceByGuid");
static_assert(offsetof(SMInstance_GetTransitionInstanceByGuid, Guid) == 0x000000, "Member 'SMInstance_GetTransitionInstanceByGuid::Guid' has a wrong offset!");
static_assert(offsetof(SMInstance_GetTransitionInstanceByGuid, ReturnValue) == 0x000010, "Member 'SMInstance_GetTransitionInstanceByGuid::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.HasStarted
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_HasStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_HasStarted) == 0x000001, "Wrong alignment on SMInstance_HasStarted");
static_assert(sizeof(SMInstance_HasStarted) == 0x000001, "Wrong size on SMInstance_HasStarted");
static_assert(offsetof(SMInstance_HasStarted, ReturnValue) == 0x000000, "Member 'SMInstance_HasStarted::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.IsActive
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_IsActive) == 0x000001, "Wrong alignment on SMInstance_IsActive");
static_assert(sizeof(SMInstance_IsActive) == 0x000001, "Wrong size on SMInstance_IsActive");
static_assert(offsetof(SMInstance_IsActive, ReturnValue) == 0x000000, "Member 'SMInstance_IsActive::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.IsInEndState
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_IsInEndState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_IsInEndState) == 0x000001, "Wrong alignment on SMInstance_IsInEndState");
static_assert(sizeof(SMInstance_IsInEndState) == 0x000001, "Wrong size on SMInstance_IsInEndState");
static_assert(offsetof(SMInstance_IsInEndState, ReturnValue) == 0x000000, "Member 'SMInstance_IsInEndState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_IsInitialized) == 0x000001, "Wrong alignment on SMInstance_IsInitialized");
static_assert(sizeof(SMInstance_IsInitialized) == 0x000001, "Wrong size on SMInstance_IsInitialized");
static_assert(offsetof(SMInstance_IsInitialized, ReturnValue) == 0x000000, "Member 'SMInstance_IsInitialized::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.IsTickable
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_IsTickable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_IsTickable) == 0x000001, "Wrong alignment on SMInstance_IsTickable");
static_assert(sizeof(SMInstance_IsTickable) == 0x000001, "Wrong size on SMInstance_IsTickable");
static_assert(offsetof(SMInstance_IsTickable, ReturnValue) == 0x000000, "Member 'SMInstance_IsTickable::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.IsTickableWhenPaused
// 0x0001 (0x0001 - 0x0000)
struct SMInstance_IsTickableWhenPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMInstance_IsTickableWhenPaused) == 0x000001, "Wrong alignment on SMInstance_IsTickableWhenPaused");
static_assert(sizeof(SMInstance_IsTickableWhenPaused) == 0x000001, "Wrong size on SMInstance_IsTickableWhenPaused");
static_assert(offsetof(SMInstance_IsTickableWhenPaused, ReturnValue) == 0x000000, "Member 'SMInstance_IsTickableWhenPaused::ReturnValue' has a wrong offset!");

// Function SMSystem.SMInstance.TryGetNestedActiveState
// 0x0088 (0x0088 - 0x0000)
struct SMInstance_TryGetNestedActiveState final
{
public:
	struct FSMStateInfo                           FoundState;                                        // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMInstance_TryGetNestedActiveState) == 0x000008, "Wrong alignment on SMInstance_TryGetNestedActiveState");
static_assert(sizeof(SMInstance_TryGetNestedActiveState) == 0x000088, "Wrong size on SMInstance_TryGetNestedActiveState");
static_assert(offsetof(SMInstance_TryGetNestedActiveState, FoundState) == 0x000000, "Member 'SMInstance_TryGetNestedActiveState::FoundState' has a wrong offset!");
static_assert(offsetof(SMInstance_TryGetNestedActiveState, bSuccess) == 0x000080, "Member 'SMInstance_TryGetNestedActiveState::bSuccess' has a wrong offset!");

// Function SMSystem.SMInstance.TryGetStateInfo
// 0x0098 (0x0098 - 0x0000)
struct SMInstance_TryGetStateInfo final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSMStateInfo                           StateInfo;                                         // 0x0010(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMInstance_TryGetStateInfo) == 0x000008, "Wrong alignment on SMInstance_TryGetStateInfo");
static_assert(sizeof(SMInstance_TryGetStateInfo) == 0x000098, "Wrong size on SMInstance_TryGetStateInfo");
static_assert(offsetof(SMInstance_TryGetStateInfo, Guid) == 0x000000, "Member 'SMInstance_TryGetStateInfo::Guid' has a wrong offset!");
static_assert(offsetof(SMInstance_TryGetStateInfo, StateInfo) == 0x000010, "Member 'SMInstance_TryGetStateInfo::StateInfo' has a wrong offset!");
static_assert(offsetof(SMInstance_TryGetStateInfo, bSuccess) == 0x000090, "Member 'SMInstance_TryGetStateInfo::bSuccess' has a wrong offset!");

// Function SMSystem.SMInstance.TryGetTransitionInfo
// 0x00B0 (0x00B0 - 0x0000)
struct SMInstance_TryGetTransitionInfo final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSMTransitionInfo                      TransitionInfo;                                    // 0x0010(0x0098)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMInstance_TryGetTransitionInfo) == 0x000008, "Wrong alignment on SMInstance_TryGetTransitionInfo");
static_assert(sizeof(SMInstance_TryGetTransitionInfo) == 0x0000B0, "Wrong size on SMInstance_TryGetTransitionInfo");
static_assert(offsetof(SMInstance_TryGetTransitionInfo, Guid) == 0x000000, "Member 'SMInstance_TryGetTransitionInfo::Guid' has a wrong offset!");
static_assert(offsetof(SMInstance_TryGetTransitionInfo, TransitionInfo) == 0x000010, "Member 'SMInstance_TryGetTransitionInfo::TransitionInfo' has a wrong offset!");
static_assert(offsetof(SMInstance_TryGetTransitionInfo, bSuccess) == 0x0000A8, "Member 'SMInstance_TryGetTransitionInfo::bSuccess' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.CLIENT_ActivateStates
// 0x0010 (0x0010 - 0x0000)
struct SMStateMachineComponent_CLIENT_ActivateStates final
{
public:
	TArray<struct FSMActivateStateTransaction>    StateTransactions;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_CLIENT_ActivateStates) == 0x000008, "Wrong alignment on SMStateMachineComponent_CLIENT_ActivateStates");
static_assert(sizeof(SMStateMachineComponent_CLIENT_ActivateStates) == 0x000010, "Wrong size on SMStateMachineComponent_CLIENT_ActivateStates");
static_assert(offsetof(SMStateMachineComponent_CLIENT_ActivateStates, StateTransactions) == 0x000000, "Member 'SMStateMachineComponent_CLIENT_ActivateStates::StateTransactions' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.CLIENT_FullSync
// 0x0020 (0x0020 - 0x0000)
struct SMStateMachineComponent_CLIENT_FullSync final
{
public:
	struct FSMFullSyncTransaction                 FullSyncTransaction;                               // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_CLIENT_FullSync) == 0x000008, "Wrong alignment on SMStateMachineComponent_CLIENT_FullSync");
static_assert(sizeof(SMStateMachineComponent_CLIENT_FullSync) == 0x000020, "Wrong size on SMStateMachineComponent_CLIENT_FullSync");
static_assert(offsetof(SMStateMachineComponent_CLIENT_FullSync, FullSyncTransaction) == 0x000000, "Member 'SMStateMachineComponent_CLIENT_FullSync::FullSyncTransaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.CLIENT_Shutdown
// 0x0003 (0x0003 - 0x0000)
struct SMStateMachineComponent_CLIENT_Shutdown final
{
public:
	struct FSMTransaction_Base                    Transaction;                                       // 0x0000(0x0003)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_CLIENT_Shutdown) == 0x000001, "Wrong alignment on SMStateMachineComponent_CLIENT_Shutdown");
static_assert(sizeof(SMStateMachineComponent_CLIENT_Shutdown) == 0x000003, "Wrong size on SMStateMachineComponent_CLIENT_Shutdown");
static_assert(offsetof(SMStateMachineComponent_CLIENT_Shutdown, Transaction) == 0x000000, "Member 'SMStateMachineComponent_CLIENT_Shutdown::Transaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.CLIENT_Start
// 0x0003 (0x0003 - 0x0000)
struct SMStateMachineComponent_CLIENT_Start final
{
public:
	struct FSMTransaction_Base                    Transaction;                                       // 0x0000(0x0003)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_CLIENT_Start) == 0x000001, "Wrong alignment on SMStateMachineComponent_CLIENT_Start");
static_assert(sizeof(SMStateMachineComponent_CLIENT_Start) == 0x000003, "Wrong size on SMStateMachineComponent_CLIENT_Start");
static_assert(offsetof(SMStateMachineComponent_CLIENT_Start, Transaction) == 0x000000, "Member 'SMStateMachineComponent_CLIENT_Start::Transaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.CLIENT_Stop
// 0x0003 (0x0003 - 0x0000)
struct SMStateMachineComponent_CLIENT_Stop final
{
public:
	struct FSMTransaction_Base                    Transaction;                                       // 0x0000(0x0003)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_CLIENT_Stop) == 0x000001, "Wrong alignment on SMStateMachineComponent_CLIENT_Stop");
static_assert(sizeof(SMStateMachineComponent_CLIENT_Stop) == 0x000003, "Wrong size on SMStateMachineComponent_CLIENT_Stop");
static_assert(offsetof(SMStateMachineComponent_CLIENT_Stop, Transaction) == 0x000000, "Member 'SMStateMachineComponent_CLIENT_Stop::Transaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.CLIENT_TakeTransitions
// 0x0010 (0x0010 - 0x0000)
struct SMStateMachineComponent_CLIENT_TakeTransitions final
{
public:
	TArray<struct FSMTransitionTransaction>       Transactions;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_CLIENT_TakeTransitions) == 0x000008, "Wrong alignment on SMStateMachineComponent_CLIENT_TakeTransitions");
static_assert(sizeof(SMStateMachineComponent_CLIENT_TakeTransitions) == 0x000010, "Wrong size on SMStateMachineComponent_CLIENT_TakeTransitions");
static_assert(offsetof(SMStateMachineComponent_CLIENT_TakeTransitions, Transactions) == 0x000000, "Member 'SMStateMachineComponent_CLIENT_TakeTransitions::Transactions' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.CopySettingsFromOtherComponent
// 0x0008 (0x0008 - 0x0000)
struct SMStateMachineComponent_CopySettingsFromOtherComponent final
{
public:
	class USMStateMachineComponent*               OtherComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_CopySettingsFromOtherComponent) == 0x000008, "Wrong alignment on SMStateMachineComponent_CopySettingsFromOtherComponent");
static_assert(sizeof(SMStateMachineComponent_CopySettingsFromOtherComponent) == 0x000008, "Wrong size on SMStateMachineComponent_CopySettingsFromOtherComponent");
static_assert(offsetof(SMStateMachineComponent_CopySettingsFromOtherComponent, OtherComponent) == 0x000000, "Member 'SMStateMachineComponent_CopySettingsFromOtherComponent::OtherComponent' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.Initialize
// 0x0008 (0x0008 - 0x0000)
struct SMStateMachineComponent_Initialize final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_Initialize) == 0x000008, "Wrong alignment on SMStateMachineComponent_Initialize");
static_assert(sizeof(SMStateMachineComponent_Initialize) == 0x000008, "Wrong size on SMStateMachineComponent_Initialize");
static_assert(offsetof(SMStateMachineComponent_Initialize, Context) == 0x000000, "Member 'SMStateMachineComponent_Initialize::Context' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.Internal_OnReplicatedInstanceInitialized
// 0x0008 (0x0008 - 0x0000)
struct SMStateMachineComponent_Internal_OnReplicatedInstanceInitialized final
{
public:
	class USMInstance*                            Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_Internal_OnReplicatedInstanceInitialized) == 0x000008, "Wrong alignment on SMStateMachineComponent_Internal_OnReplicatedInstanceInitialized");
static_assert(sizeof(SMStateMachineComponent_Internal_OnReplicatedInstanceInitialized) == 0x000008, "Wrong size on SMStateMachineComponent_Internal_OnReplicatedInstanceInitialized");
static_assert(offsetof(SMStateMachineComponent_Internal_OnReplicatedInstanceInitialized, Instance) == 0x000000, "Member 'SMStateMachineComponent_Internal_OnReplicatedInstanceInitialized::Instance' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.Internal_OnStateMachineStarted
// 0x0008 (0x0008 - 0x0000)
struct SMStateMachineComponent_Internal_OnStateMachineStarted final
{
public:
	class USMInstance*                            Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_Internal_OnStateMachineStarted) == 0x000008, "Wrong alignment on SMStateMachineComponent_Internal_OnStateMachineStarted");
static_assert(sizeof(SMStateMachineComponent_Internal_OnStateMachineStarted) == 0x000008, "Wrong size on SMStateMachineComponent_Internal_OnStateMachineStarted");
static_assert(offsetof(SMStateMachineComponent_Internal_OnStateMachineStarted, Instance) == 0x000000, "Member 'SMStateMachineComponent_Internal_OnStateMachineStarted::Instance' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.Internal_OnStateMachineStateChanged
// 0x0108 (0x0108 - 0x0000)
struct SMStateMachineComponent_Internal_OnStateMachineStateChanged final
{
public:
	class USMInstance*                            Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSMStateInfo                           ToState;                                           // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FSMStateInfo                           FromState;                                         // 0x0088(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_Internal_OnStateMachineStateChanged) == 0x000008, "Wrong alignment on SMStateMachineComponent_Internal_OnStateMachineStateChanged");
static_assert(sizeof(SMStateMachineComponent_Internal_OnStateMachineStateChanged) == 0x000108, "Wrong size on SMStateMachineComponent_Internal_OnStateMachineStateChanged");
static_assert(offsetof(SMStateMachineComponent_Internal_OnStateMachineStateChanged, Instance) == 0x000000, "Member 'SMStateMachineComponent_Internal_OnStateMachineStateChanged::Instance' has a wrong offset!");
static_assert(offsetof(SMStateMachineComponent_Internal_OnStateMachineStateChanged, ToState) == 0x000008, "Member 'SMStateMachineComponent_Internal_OnStateMachineStateChanged::ToState' has a wrong offset!");
static_assert(offsetof(SMStateMachineComponent_Internal_OnStateMachineStateChanged, FromState) == 0x000088, "Member 'SMStateMachineComponent_Internal_OnStateMachineStateChanged::FromState' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.Internal_OnStateMachineStateStarted
// 0x0088 (0x0088 - 0x0000)
struct SMStateMachineComponent_Internal_OnStateMachineStateStarted final
{
public:
	class USMInstance*                            Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSMStateInfo                           State;                                             // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_Internal_OnStateMachineStateStarted) == 0x000008, "Wrong alignment on SMStateMachineComponent_Internal_OnStateMachineStateStarted");
static_assert(sizeof(SMStateMachineComponent_Internal_OnStateMachineStateStarted) == 0x000088, "Wrong size on SMStateMachineComponent_Internal_OnStateMachineStateStarted");
static_assert(offsetof(SMStateMachineComponent_Internal_OnStateMachineStateStarted, Instance) == 0x000000, "Member 'SMStateMachineComponent_Internal_OnStateMachineStateStarted::Instance' has a wrong offset!");
static_assert(offsetof(SMStateMachineComponent_Internal_OnStateMachineStateStarted, State) == 0x000008, "Member 'SMStateMachineComponent_Internal_OnStateMachineStateStarted::State' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.Internal_OnStateMachineStopped
// 0x0008 (0x0008 - 0x0000)
struct SMStateMachineComponent_Internal_OnStateMachineStopped final
{
public:
	class USMInstance*                            Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_Internal_OnStateMachineStopped) == 0x000008, "Wrong alignment on SMStateMachineComponent_Internal_OnStateMachineStopped");
static_assert(sizeof(SMStateMachineComponent_Internal_OnStateMachineStopped) == 0x000008, "Wrong size on SMStateMachineComponent_Internal_OnStateMachineStopped");
static_assert(offsetof(SMStateMachineComponent_Internal_OnStateMachineStopped, Instance) == 0x000000, "Member 'SMStateMachineComponent_Internal_OnStateMachineStopped::Instance' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.Internal_OnStateMachineTransitionTaken
// 0x00A0 (0x00A0 - 0x0000)
struct SMStateMachineComponent_Internal_OnStateMachineTransitionTaken final
{
public:
	class USMInstance*                            Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSMTransitionInfo                      Transition;                                        // 0x0008(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_Internal_OnStateMachineTransitionTaken) == 0x000008, "Wrong alignment on SMStateMachineComponent_Internal_OnStateMachineTransitionTaken");
static_assert(sizeof(SMStateMachineComponent_Internal_OnStateMachineTransitionTaken) == 0x0000A0, "Wrong size on SMStateMachineComponent_Internal_OnStateMachineTransitionTaken");
static_assert(offsetof(SMStateMachineComponent_Internal_OnStateMachineTransitionTaken, Instance) == 0x000000, "Member 'SMStateMachineComponent_Internal_OnStateMachineTransitionTaken::Instance' has a wrong offset!");
static_assert(offsetof(SMStateMachineComponent_Internal_OnStateMachineTransitionTaken, Transition) == 0x000008, "Member 'SMStateMachineComponent_Internal_OnStateMachineTransitionTaken::Transition' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.Internal_OnStateMachineUpdated
// 0x0010 (0x0010 - 0x0000)
struct SMStateMachineComponent_Internal_OnStateMachineUpdated final
{
public:
	class USMInstance*                            Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SMStateMachineComponent_Internal_OnStateMachineUpdated) == 0x000008, "Wrong alignment on SMStateMachineComponent_Internal_OnStateMachineUpdated");
static_assert(sizeof(SMStateMachineComponent_Internal_OnStateMachineUpdated) == 0x000010, "Wrong size on SMStateMachineComponent_Internal_OnStateMachineUpdated");
static_assert(offsetof(SMStateMachineComponent_Internal_OnStateMachineUpdated, Instance) == 0x000000, "Member 'SMStateMachineComponent_Internal_OnStateMachineUpdated::Instance' has a wrong offset!");
static_assert(offsetof(SMStateMachineComponent_Internal_OnStateMachineUpdated, DeltaSeconds) == 0x000008, "Member 'SMStateMachineComponent_Internal_OnStateMachineUpdated::DeltaSeconds' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.MULTICAST_ActivateStates
// 0x0010 (0x0010 - 0x0000)
struct SMStateMachineComponent_MULTICAST_ActivateStates final
{
public:
	TArray<struct FSMActivateStateTransaction>    StateTransactions;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_MULTICAST_ActivateStates) == 0x000008, "Wrong alignment on SMStateMachineComponent_MULTICAST_ActivateStates");
static_assert(sizeof(SMStateMachineComponent_MULTICAST_ActivateStates) == 0x000010, "Wrong size on SMStateMachineComponent_MULTICAST_ActivateStates");
static_assert(offsetof(SMStateMachineComponent_MULTICAST_ActivateStates, StateTransactions) == 0x000000, "Member 'SMStateMachineComponent_MULTICAST_ActivateStates::StateTransactions' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.MULTICAST_FullSync
// 0x0020 (0x0020 - 0x0000)
struct SMStateMachineComponent_MULTICAST_FullSync final
{
public:
	struct FSMFullSyncTransaction                 FullSyncTransaction;                               // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_MULTICAST_FullSync) == 0x000008, "Wrong alignment on SMStateMachineComponent_MULTICAST_FullSync");
static_assert(sizeof(SMStateMachineComponent_MULTICAST_FullSync) == 0x000020, "Wrong size on SMStateMachineComponent_MULTICAST_FullSync");
static_assert(offsetof(SMStateMachineComponent_MULTICAST_FullSync, FullSyncTransaction) == 0x000000, "Member 'SMStateMachineComponent_MULTICAST_FullSync::FullSyncTransaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.MULTICAST_Shutdown
// 0x0003 (0x0003 - 0x0000)
struct SMStateMachineComponent_MULTICAST_Shutdown final
{
public:
	struct FSMTransaction_Base                    Transaction;                                       // 0x0000(0x0003)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_MULTICAST_Shutdown) == 0x000001, "Wrong alignment on SMStateMachineComponent_MULTICAST_Shutdown");
static_assert(sizeof(SMStateMachineComponent_MULTICAST_Shutdown) == 0x000003, "Wrong size on SMStateMachineComponent_MULTICAST_Shutdown");
static_assert(offsetof(SMStateMachineComponent_MULTICAST_Shutdown, Transaction) == 0x000000, "Member 'SMStateMachineComponent_MULTICAST_Shutdown::Transaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.MULTICAST_Start
// 0x0003 (0x0003 - 0x0000)
struct SMStateMachineComponent_MULTICAST_Start final
{
public:
	struct FSMTransaction_Base                    Transaction;                                       // 0x0000(0x0003)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_MULTICAST_Start) == 0x000001, "Wrong alignment on SMStateMachineComponent_MULTICAST_Start");
static_assert(sizeof(SMStateMachineComponent_MULTICAST_Start) == 0x000003, "Wrong size on SMStateMachineComponent_MULTICAST_Start");
static_assert(offsetof(SMStateMachineComponent_MULTICAST_Start, Transaction) == 0x000000, "Member 'SMStateMachineComponent_MULTICAST_Start::Transaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.MULTICAST_Stop
// 0x0003 (0x0003 - 0x0000)
struct SMStateMachineComponent_MULTICAST_Stop final
{
public:
	struct FSMTransaction_Base                    Transaction;                                       // 0x0000(0x0003)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_MULTICAST_Stop) == 0x000001, "Wrong alignment on SMStateMachineComponent_MULTICAST_Stop");
static_assert(sizeof(SMStateMachineComponent_MULTICAST_Stop) == 0x000003, "Wrong size on SMStateMachineComponent_MULTICAST_Stop");
static_assert(offsetof(SMStateMachineComponent_MULTICAST_Stop, Transaction) == 0x000000, "Member 'SMStateMachineComponent_MULTICAST_Stop::Transaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.MULTICAST_TakeTransitions
// 0x0010 (0x0010 - 0x0000)
struct SMStateMachineComponent_MULTICAST_TakeTransitions final
{
public:
	TArray<struct FSMTransitionTransaction>       Transactions;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_MULTICAST_TakeTransitions) == 0x000008, "Wrong alignment on SMStateMachineComponent_MULTICAST_TakeTransitions");
static_assert(sizeof(SMStateMachineComponent_MULTICAST_TakeTransitions) == 0x000010, "Wrong size on SMStateMachineComponent_MULTICAST_TakeTransitions");
static_assert(offsetof(SMStateMachineComponent_MULTICAST_TakeTransitions, Transactions) == 0x000000, "Member 'SMStateMachineComponent_MULTICAST_TakeTransitions::Transactions' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.SERVER_ActivateStates
// 0x0010 (0x0010 - 0x0000)
struct SMStateMachineComponent_SERVER_ActivateStates final
{
public:
	TArray<struct FSMActivateStateTransaction>    StateTransactions;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_SERVER_ActivateStates) == 0x000008, "Wrong alignment on SMStateMachineComponent_SERVER_ActivateStates");
static_assert(sizeof(SMStateMachineComponent_SERVER_ActivateStates) == 0x000010, "Wrong size on SMStateMachineComponent_SERVER_ActivateStates");
static_assert(offsetof(SMStateMachineComponent_SERVER_ActivateStates, StateTransactions) == 0x000000, "Member 'SMStateMachineComponent_SERVER_ActivateStates::StateTransactions' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.SERVER_FullSync
// 0x0020 (0x0020 - 0x0000)
struct SMStateMachineComponent_SERVER_FullSync final
{
public:
	struct FSMFullSyncTransaction                 FullSyncTransaction;                               // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_SERVER_FullSync) == 0x000008, "Wrong alignment on SMStateMachineComponent_SERVER_FullSync");
static_assert(sizeof(SMStateMachineComponent_SERVER_FullSync) == 0x000020, "Wrong size on SMStateMachineComponent_SERVER_FullSync");
static_assert(offsetof(SMStateMachineComponent_SERVER_FullSync, FullSyncTransaction) == 0x000000, "Member 'SMStateMachineComponent_SERVER_FullSync::FullSyncTransaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.SERVER_Initialize
// 0x0010 (0x0010 - 0x0000)
struct SMStateMachineComponent_SERVER_Initialize final
{
public:
	struct FSMInitializeTransaction               Transaction;                                       // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_SERVER_Initialize) == 0x000008, "Wrong alignment on SMStateMachineComponent_SERVER_Initialize");
static_assert(sizeof(SMStateMachineComponent_SERVER_Initialize) == 0x000010, "Wrong size on SMStateMachineComponent_SERVER_Initialize");
static_assert(offsetof(SMStateMachineComponent_SERVER_Initialize, Transaction) == 0x000000, "Member 'SMStateMachineComponent_SERVER_Initialize::Transaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.SERVER_Shutdown
// 0x0003 (0x0003 - 0x0000)
struct SMStateMachineComponent_SERVER_Shutdown final
{
public:
	struct FSMTransaction_Base                    Transaction;                                       // 0x0000(0x0003)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_SERVER_Shutdown) == 0x000001, "Wrong alignment on SMStateMachineComponent_SERVER_Shutdown");
static_assert(sizeof(SMStateMachineComponent_SERVER_Shutdown) == 0x000003, "Wrong size on SMStateMachineComponent_SERVER_Shutdown");
static_assert(offsetof(SMStateMachineComponent_SERVER_Shutdown, Transaction) == 0x000000, "Member 'SMStateMachineComponent_SERVER_Shutdown::Transaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.SERVER_Start
// 0x0003 (0x0003 - 0x0000)
struct SMStateMachineComponent_SERVER_Start final
{
public:
	struct FSMTransaction_Base                    Transaction;                                       // 0x0000(0x0003)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_SERVER_Start) == 0x000001, "Wrong alignment on SMStateMachineComponent_SERVER_Start");
static_assert(sizeof(SMStateMachineComponent_SERVER_Start) == 0x000003, "Wrong size on SMStateMachineComponent_SERVER_Start");
static_assert(offsetof(SMStateMachineComponent_SERVER_Start, Transaction) == 0x000000, "Member 'SMStateMachineComponent_SERVER_Start::Transaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.SERVER_Stop
// 0x0003 (0x0003 - 0x0000)
struct SMStateMachineComponent_SERVER_Stop final
{
public:
	struct FSMTransaction_Base                    Transaction;                                       // 0x0000(0x0003)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_SERVER_Stop) == 0x000001, "Wrong alignment on SMStateMachineComponent_SERVER_Stop");
static_assert(sizeof(SMStateMachineComponent_SERVER_Stop) == 0x000003, "Wrong size on SMStateMachineComponent_SERVER_Stop");
static_assert(offsetof(SMStateMachineComponent_SERVER_Stop, Transaction) == 0x000000, "Member 'SMStateMachineComponent_SERVER_Stop::Transaction' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.SERVER_TakeTransitions
// 0x0010 (0x0010 - 0x0000)
struct SMStateMachineComponent_SERVER_TakeTransitions final
{
public:
	TArray<struct FSMTransitionTransaction>       TransitionTransactions;                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_SERVER_TakeTransitions) == 0x000008, "Wrong alignment on SMStateMachineComponent_SERVER_TakeTransitions");
static_assert(sizeof(SMStateMachineComponent_SERVER_TakeTransitions) == 0x000010, "Wrong size on SMStateMachineComponent_SERVER_TakeTransitions");
static_assert(offsetof(SMStateMachineComponent_SERVER_TakeTransitions, TransitionTransactions) == 0x000000, "Member 'SMStateMachineComponent_SERVER_TakeTransitions::TransitionTransactions' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.SERVER_Update
// 0x0004 (0x0004 - 0x0000)
struct SMStateMachineComponent_SERVER_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_SERVER_Update) == 0x000004, "Wrong alignment on SMStateMachineComponent_SERVER_Update");
static_assert(sizeof(SMStateMachineComponent_SERVER_Update) == 0x000004, "Wrong size on SMStateMachineComponent_SERVER_Update");
static_assert(offsetof(SMStateMachineComponent_SERVER_Update, DeltaTime) == 0x000000, "Member 'SMStateMachineComponent_SERVER_Update::DeltaTime' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.SetCanInstanceNetworkTick
// 0x0001 (0x0001 - 0x0000)
struct SMStateMachineComponent_SetCanInstanceNetworkTick final
{
public:
	bool                                          bCanEverTick_0;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_SetCanInstanceNetworkTick) == 0x000001, "Wrong alignment on SMStateMachineComponent_SetCanInstanceNetworkTick");
static_assert(sizeof(SMStateMachineComponent_SetCanInstanceNetworkTick) == 0x000001, "Wrong size on SMStateMachineComponent_SetCanInstanceNetworkTick");
static_assert(offsetof(SMStateMachineComponent_SetCanInstanceNetworkTick, bCanEverTick_0) == 0x000000, "Member 'SMStateMachineComponent_SetCanInstanceNetworkTick::bCanEverTick_0' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.Update
// 0x0004 (0x0004 - 0x0000)
struct SMStateMachineComponent_Update final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_Update) == 0x000004, "Wrong alignment on SMStateMachineComponent_Update");
static_assert(sizeof(SMStateMachineComponent_Update) == 0x000004, "Wrong size on SMStateMachineComponent_Update");
static_assert(offsetof(SMStateMachineComponent_Update, DeltaSeconds) == 0x000000, "Member 'SMStateMachineComponent_Update::DeltaSeconds' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.GetContextForInitialization
// 0x0008 (0x0008 - 0x0000)
struct SMStateMachineComponent_GetContextForInitialization final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_GetContextForInitialization) == 0x000008, "Wrong alignment on SMStateMachineComponent_GetContextForInitialization");
static_assert(sizeof(SMStateMachineComponent_GetContextForInitialization) == 0x000008, "Wrong size on SMStateMachineComponent_GetContextForInitialization");
static_assert(offsetof(SMStateMachineComponent_GetContextForInitialization, ReturnValue) == 0x000000, "Member 'SMStateMachineComponent_GetContextForInitialization::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct SMStateMachineComponent_GetInstance final
{
public:
	class USMInstance*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_GetInstance) == 0x000008, "Wrong alignment on SMStateMachineComponent_GetInstance");
static_assert(sizeof(SMStateMachineComponent_GetInstance) == 0x000008, "Wrong size on SMStateMachineComponent_GetInstance");
static_assert(offsetof(SMStateMachineComponent_GetInstance, ReturnValue) == 0x000000, "Member 'SMStateMachineComponent_GetInstance::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.GetTopMostParentActor
// 0x0008 (0x0008 - 0x0000)
struct SMStateMachineComponent_GetTopMostParentActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_GetTopMostParentActor) == 0x000008, "Wrong alignment on SMStateMachineComponent_GetTopMostParentActor");
static_assert(sizeof(SMStateMachineComponent_GetTopMostParentActor) == 0x000008, "Wrong size on SMStateMachineComponent_GetTopMostParentActor");
static_assert(offsetof(SMStateMachineComponent_GetTopMostParentActor, ReturnValue) == 0x000000, "Member 'SMStateMachineComponent_GetTopMostParentActor::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct SMStateMachineComponent_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_IsInitialized) == 0x000001, "Wrong alignment on SMStateMachineComponent_IsInitialized");
static_assert(sizeof(SMStateMachineComponent_IsInitialized) == 0x000001, "Wrong size on SMStateMachineComponent_IsInitialized");
static_assert(offsetof(SMStateMachineComponent_IsInitialized, ReturnValue) == 0x000000, "Member 'SMStateMachineComponent_IsInitialized::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateMachineComponent.IsStateMachineActive
// 0x0001 (0x0001 - 0x0000)
struct SMStateMachineComponent_IsStateMachineActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineComponent_IsStateMachineActive) == 0x000001, "Wrong alignment on SMStateMachineComponent_IsStateMachineActive");
static_assert(sizeof(SMStateMachineComponent_IsStateMachineActive) == 0x000001, "Wrong size on SMStateMachineComponent_IsStateMachineActive");
static_assert(offsetof(SMStateMachineComponent_IsStateMachineActive, ReturnValue) == 0x000000, "Member 'SMStateMachineComponent_IsStateMachineActive::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateMachineInstance.SetReuseCurrentState
// 0x0001 (0x0001 - 0x0000)
struct SMStateMachineInstance_SetReuseCurrentState final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineInstance_SetReuseCurrentState) == 0x000001, "Wrong alignment on SMStateMachineInstance_SetReuseCurrentState");
static_assert(sizeof(SMStateMachineInstance_SetReuseCurrentState) == 0x000001, "Wrong size on SMStateMachineInstance_SetReuseCurrentState");
static_assert(offsetof(SMStateMachineInstance_SetReuseCurrentState, bValue) == 0x000000, "Member 'SMStateMachineInstance_SetReuseCurrentState::bValue' has a wrong offset!");

// Function SMSystem.SMStateMachineInstance.SetReuseIfNotEndState
// 0x0001 (0x0001 - 0x0000)
struct SMStateMachineInstance_SetReuseIfNotEndState final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineInstance_SetReuseIfNotEndState) == 0x000001, "Wrong alignment on SMStateMachineInstance_SetReuseIfNotEndState");
static_assert(sizeof(SMStateMachineInstance_SetReuseIfNotEndState) == 0x000001, "Wrong size on SMStateMachineInstance_SetReuseIfNotEndState");
static_assert(offsetof(SMStateMachineInstance_SetReuseIfNotEndState, bValue) == 0x000000, "Member 'SMStateMachineInstance_SetReuseIfNotEndState::bValue' has a wrong offset!");

// Function SMSystem.SMStateMachineInstance.SetWaitForEndState
// 0x0001 (0x0001 - 0x0000)
struct SMStateMachineInstance_SetWaitForEndState final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineInstance_SetWaitForEndState) == 0x000001, "Wrong alignment on SMStateMachineInstance_SetWaitForEndState");
static_assert(sizeof(SMStateMachineInstance_SetWaitForEndState) == 0x000001, "Wrong size on SMStateMachineInstance_SetWaitForEndState");
static_assert(offsetof(SMStateMachineInstance_SetWaitForEndState, bValue) == 0x000000, "Member 'SMStateMachineInstance_SetWaitForEndState::bValue' has a wrong offset!");

// Function SMSystem.SMStateMachineInstance.GetActiveStates
// 0x0010 (0x0010 - 0x0000)
struct SMStateMachineInstance_GetActiveStates final
{
public:
	TArray<class USMStateInstance_Base*>          ActiveStates;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineInstance_GetActiveStates) == 0x000008, "Wrong alignment on SMStateMachineInstance_GetActiveStates");
static_assert(sizeof(SMStateMachineInstance_GetActiveStates) == 0x000010, "Wrong size on SMStateMachineInstance_GetActiveStates");
static_assert(offsetof(SMStateMachineInstance_GetActiveStates, ActiveStates) == 0x000000, "Member 'SMStateMachineInstance_GetActiveStates::ActiveStates' has a wrong offset!");

// Function SMSystem.SMStateMachineInstance.GetAllStateInstances
// 0x0010 (0x0010 - 0x0000)
struct SMStateMachineInstance_GetAllStateInstances final
{
public:
	TArray<class USMStateInstance_Base*>          StateInstances;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineInstance_GetAllStateInstances) == 0x000008, "Wrong alignment on SMStateMachineInstance_GetAllStateInstances");
static_assert(sizeof(SMStateMachineInstance_GetAllStateInstances) == 0x000010, "Wrong size on SMStateMachineInstance_GetAllStateInstances");
static_assert(offsetof(SMStateMachineInstance_GetAllStateInstances, StateInstances) == 0x000000, "Member 'SMStateMachineInstance_GetAllStateInstances::StateInstances' has a wrong offset!");

// Function SMSystem.SMStateMachineInstance.GetContainedStateByName
// 0x0018 (0x0018 - 0x0000)
struct SMStateMachineInstance_GetContainedStateByName final
{
public:
	class FString                                 StateName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineInstance_GetContainedStateByName) == 0x000008, "Wrong alignment on SMStateMachineInstance_GetContainedStateByName");
static_assert(sizeof(SMStateMachineInstance_GetContainedStateByName) == 0x000018, "Wrong size on SMStateMachineInstance_GetContainedStateByName");
static_assert(offsetof(SMStateMachineInstance_GetContainedStateByName, StateName) == 0x000000, "Member 'SMStateMachineInstance_GetContainedStateByName::StateName' has a wrong offset!");
static_assert(offsetof(SMStateMachineInstance_GetContainedStateByName, ReturnValue) == 0x000010, "Member 'SMStateMachineInstance_GetContainedStateByName::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateMachineInstance.GetEntryStates
// 0x0010 (0x0010 - 0x0000)
struct SMStateMachineInstance_GetEntryStates final
{
public:
	TArray<class USMStateInstance_Base*>          EntryStates;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineInstance_GetEntryStates) == 0x000008, "Wrong alignment on SMStateMachineInstance_GetEntryStates");
static_assert(sizeof(SMStateMachineInstance_GetEntryStates) == 0x000010, "Wrong size on SMStateMachineInstance_GetEntryStates");
static_assert(offsetof(SMStateMachineInstance_GetEntryStates, EntryStates) == 0x000000, "Member 'SMStateMachineInstance_GetEntryStates::EntryStates' has a wrong offset!");

// Function SMSystem.SMStateMachineInstance.GetReuseCurrentState
// 0x0001 (0x0001 - 0x0000)
struct SMStateMachineInstance_GetReuseCurrentState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineInstance_GetReuseCurrentState) == 0x000001, "Wrong alignment on SMStateMachineInstance_GetReuseCurrentState");
static_assert(sizeof(SMStateMachineInstance_GetReuseCurrentState) == 0x000001, "Wrong size on SMStateMachineInstance_GetReuseCurrentState");
static_assert(offsetof(SMStateMachineInstance_GetReuseCurrentState, ReturnValue) == 0x000000, "Member 'SMStateMachineInstance_GetReuseCurrentState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateMachineInstance.GetReuseIfNotEndState
// 0x0001 (0x0001 - 0x0000)
struct SMStateMachineInstance_GetReuseIfNotEndState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineInstance_GetReuseIfNotEndState) == 0x000001, "Wrong alignment on SMStateMachineInstance_GetReuseIfNotEndState");
static_assert(sizeof(SMStateMachineInstance_GetReuseIfNotEndState) == 0x000001, "Wrong size on SMStateMachineInstance_GetReuseIfNotEndState");
static_assert(offsetof(SMStateMachineInstance_GetReuseIfNotEndState, ReturnValue) == 0x000000, "Member 'SMStateMachineInstance_GetReuseIfNotEndState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateMachineInstance.GetStateMachineReference
// 0x0008 (0x0008 - 0x0000)
struct SMStateMachineInstance_GetStateMachineReference final
{
public:
	class USMInstance*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineInstance_GetStateMachineReference) == 0x000008, "Wrong alignment on SMStateMachineInstance_GetStateMachineReference");
static_assert(sizeof(SMStateMachineInstance_GetStateMachineReference) == 0x000008, "Wrong size on SMStateMachineInstance_GetStateMachineReference");
static_assert(offsetof(SMStateMachineInstance_GetStateMachineReference, ReturnValue) == 0x000000, "Member 'SMStateMachineInstance_GetStateMachineReference::ReturnValue' has a wrong offset!");

// Function SMSystem.SMStateMachineInstance.GetWaitForEndState
// 0x0001 (0x0001 - 0x0000)
struct SMStateMachineInstance_GetWaitForEndState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMStateMachineInstance_GetWaitForEndState) == 0x000001, "Wrong alignment on SMStateMachineInstance_GetWaitForEndState");
static_assert(sizeof(SMStateMachineInstance_GetWaitForEndState) == 0x000001, "Wrong size on SMStateMachineInstance_GetWaitForEndState");
static_assert(offsetof(SMStateMachineInstance_GetWaitForEndState, ReturnValue) == 0x000000, "Member 'SMStateMachineInstance_GetWaitForEndState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.SetCanEvaluate
// 0x0001 (0x0001 - 0x0000)
struct SMTransitionInstance_SetCanEvaluate final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_SetCanEvaluate) == 0x000001, "Wrong alignment on SMTransitionInstance_SetCanEvaluate");
static_assert(sizeof(SMTransitionInstance_SetCanEvaluate) == 0x000001, "Wrong size on SMTransitionInstance_SetCanEvaluate");
static_assert(offsetof(SMTransitionInstance_SetCanEvaluate, bValue) == 0x000000, "Member 'SMTransitionInstance_SetCanEvaluate::bValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.SetCanEvaluateFromEvent
// 0x0001 (0x0001 - 0x0000)
struct SMTransitionInstance_SetCanEvaluateFromEvent final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_SetCanEvaluateFromEvent) == 0x000001, "Wrong alignment on SMTransitionInstance_SetCanEvaluateFromEvent");
static_assert(sizeof(SMTransitionInstance_SetCanEvaluateFromEvent) == 0x000001, "Wrong size on SMTransitionInstance_SetCanEvaluateFromEvent");
static_assert(offsetof(SMTransitionInstance_SetCanEvaluateFromEvent, bValue) == 0x000000, "Member 'SMTransitionInstance_SetCanEvaluateFromEvent::bValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.SetCanEvalWithStartState
// 0x0001 (0x0001 - 0x0000)
struct SMTransitionInstance_SetCanEvalWithStartState final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_SetCanEvalWithStartState) == 0x000001, "Wrong alignment on SMTransitionInstance_SetCanEvalWithStartState");
static_assert(sizeof(SMTransitionInstance_SetCanEvalWithStartState) == 0x000001, "Wrong size on SMTransitionInstance_SetCanEvalWithStartState");
static_assert(offsetof(SMTransitionInstance_SetCanEvalWithStartState, bValue) == 0x000000, "Member 'SMTransitionInstance_SetCanEvalWithStartState::bValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.SetPriorityOrder
// 0x0004 (0x0004 - 0x0000)
struct SMTransitionInstance_SetPriorityOrder final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_SetPriorityOrder) == 0x000004, "Wrong alignment on SMTransitionInstance_SetPriorityOrder");
static_assert(sizeof(SMTransitionInstance_SetPriorityOrder) == 0x000004, "Wrong size on SMTransitionInstance_SetPriorityOrder");
static_assert(offsetof(SMTransitionInstance_SetPriorityOrder, Value) == 0x000000, "Member 'SMTransitionInstance_SetPriorityOrder::Value' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.DoesTransitionPass
// 0x0001 (0x0001 - 0x0000)
struct SMTransitionInstance_DoesTransitionPass final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_DoesTransitionPass) == 0x000001, "Wrong alignment on SMTransitionInstance_DoesTransitionPass");
static_assert(sizeof(SMTransitionInstance_DoesTransitionPass) == 0x000001, "Wrong size on SMTransitionInstance_DoesTransitionPass");
static_assert(offsetof(SMTransitionInstance_DoesTransitionPass, ReturnValue) == 0x000000, "Member 'SMTransitionInstance_DoesTransitionPass::ReturnValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.GetCanEvaluate
// 0x0001 (0x0001 - 0x0000)
struct SMTransitionInstance_GetCanEvaluate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_GetCanEvaluate) == 0x000001, "Wrong alignment on SMTransitionInstance_GetCanEvaluate");
static_assert(sizeof(SMTransitionInstance_GetCanEvaluate) == 0x000001, "Wrong size on SMTransitionInstance_GetCanEvaluate");
static_assert(offsetof(SMTransitionInstance_GetCanEvaluate, ReturnValue) == 0x000000, "Member 'SMTransitionInstance_GetCanEvaluate::ReturnValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.GetCanEvaluateFromEvent
// 0x0001 (0x0001 - 0x0000)
struct SMTransitionInstance_GetCanEvaluateFromEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_GetCanEvaluateFromEvent) == 0x000001, "Wrong alignment on SMTransitionInstance_GetCanEvaluateFromEvent");
static_assert(sizeof(SMTransitionInstance_GetCanEvaluateFromEvent) == 0x000001, "Wrong size on SMTransitionInstance_GetCanEvaluateFromEvent");
static_assert(offsetof(SMTransitionInstance_GetCanEvaluateFromEvent, ReturnValue) == 0x000000, "Member 'SMTransitionInstance_GetCanEvaluateFromEvent::ReturnValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.GetCanEvalWithStartState
// 0x0001 (0x0001 - 0x0000)
struct SMTransitionInstance_GetCanEvalWithStartState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_GetCanEvalWithStartState) == 0x000001, "Wrong alignment on SMTransitionInstance_GetCanEvalWithStartState");
static_assert(sizeof(SMTransitionInstance_GetCanEvalWithStartState) == 0x000001, "Wrong size on SMTransitionInstance_GetCanEvalWithStartState");
static_assert(offsetof(SMTransitionInstance_GetCanEvalWithStartState, ReturnValue) == 0x000000, "Member 'SMTransitionInstance_GetCanEvalWithStartState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.GetDestinationStateForActiveTransition
// 0x0008 (0x0008 - 0x0000)
struct SMTransitionInstance_GetDestinationStateForActiveTransition final
{
public:
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_GetDestinationStateForActiveTransition) == 0x000008, "Wrong alignment on SMTransitionInstance_GetDestinationStateForActiveTransition");
static_assert(sizeof(SMTransitionInstance_GetDestinationStateForActiveTransition) == 0x000008, "Wrong size on SMTransitionInstance_GetDestinationStateForActiveTransition");
static_assert(offsetof(SMTransitionInstance_GetDestinationStateForActiveTransition, ReturnValue) == 0x000000, "Member 'SMTransitionInstance_GetDestinationStateForActiveTransition::ReturnValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.GetNextStateInstance
// 0x0008 (0x0008 - 0x0000)
struct SMTransitionInstance_GetNextStateInstance final
{
public:
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_GetNextStateInstance) == 0x000008, "Wrong alignment on SMTransitionInstance_GetNextStateInstance");
static_assert(sizeof(SMTransitionInstance_GetNextStateInstance) == 0x000008, "Wrong size on SMTransitionInstance_GetNextStateInstance");
static_assert(offsetof(SMTransitionInstance_GetNextStateInstance, ReturnValue) == 0x000000, "Member 'SMTransitionInstance_GetNextStateInstance::ReturnValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.GetPreviousStateInstance
// 0x0008 (0x0008 - 0x0000)
struct SMTransitionInstance_GetPreviousStateInstance final
{
public:
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_GetPreviousStateInstance) == 0x000008, "Wrong alignment on SMTransitionInstance_GetPreviousStateInstance");
static_assert(sizeof(SMTransitionInstance_GetPreviousStateInstance) == 0x000008, "Wrong size on SMTransitionInstance_GetPreviousStateInstance");
static_assert(offsetof(SMTransitionInstance_GetPreviousStateInstance, ReturnValue) == 0x000000, "Member 'SMTransitionInstance_GetPreviousStateInstance::ReturnValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.GetPriorityOrder
// 0x0004 (0x0004 - 0x0000)
struct SMTransitionInstance_GetPriorityOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_GetPriorityOrder) == 0x000004, "Wrong alignment on SMTransitionInstance_GetPriorityOrder");
static_assert(sizeof(SMTransitionInstance_GetPriorityOrder) == 0x000004, "Wrong size on SMTransitionInstance_GetPriorityOrder");
static_assert(offsetof(SMTransitionInstance_GetPriorityOrder, ReturnValue) == 0x000000, "Member 'SMTransitionInstance_GetPriorityOrder::ReturnValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.GetServerTimestamp
// 0x0008 (0x0008 - 0x0000)
struct SMTransitionInstance_GetServerTimestamp final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_GetServerTimestamp) == 0x000008, "Wrong alignment on SMTransitionInstance_GetServerTimestamp");
static_assert(sizeof(SMTransitionInstance_GetServerTimestamp) == 0x000008, "Wrong size on SMTransitionInstance_GetServerTimestamp");
static_assert(offsetof(SMTransitionInstance_GetServerTimestamp, ReturnValue) == 0x000000, "Member 'SMTransitionInstance_GetServerTimestamp::ReturnValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.GetSourceStateForActiveTransition
// 0x0008 (0x0008 - 0x0000)
struct SMTransitionInstance_GetSourceStateForActiveTransition final
{
public:
	class USMStateInstance_Base*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_GetSourceStateForActiveTransition) == 0x000008, "Wrong alignment on SMTransitionInstance_GetSourceStateForActiveTransition");
static_assert(sizeof(SMTransitionInstance_GetSourceStateForActiveTransition) == 0x000008, "Wrong size on SMTransitionInstance_GetSourceStateForActiveTransition");
static_assert(offsetof(SMTransitionInstance_GetSourceStateForActiveTransition, ReturnValue) == 0x000000, "Member 'SMTransitionInstance_GetSourceStateForActiveTransition::ReturnValue' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.GetTransitionInfo
// 0x0098 (0x0098 - 0x0000)
struct SMTransitionInstance_GetTransitionInfo final
{
public:
	struct FSMTransitionInfo                      Transition;                                        // 0x0000(0x0098)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_GetTransitionInfo) == 0x000008, "Wrong alignment on SMTransitionInstance_GetTransitionInfo");
static_assert(sizeof(SMTransitionInstance_GetTransitionInfo) == 0x000098, "Wrong size on SMTransitionInstance_GetTransitionInfo");
static_assert(offsetof(SMTransitionInstance_GetTransitionInfo, Transition) == 0x000000, "Member 'SMTransitionInstance_GetTransitionInfo::Transition' has a wrong offset!");

// Function SMSystem.SMTransitionInstance.IsTransitionFromAnyState
// 0x0001 (0x0001 - 0x0000)
struct SMTransitionInstance_IsTransitionFromAnyState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMTransitionInstance_IsTransitionFromAnyState) == 0x000001, "Wrong alignment on SMTransitionInstance_IsTransitionFromAnyState");
static_assert(sizeof(SMTransitionInstance_IsTransitionFromAnyState) == 0x000001, "Wrong size on SMTransitionInstance_IsTransitionFromAnyState");
static_assert(offsetof(SMTransitionInstance_IsTransitionFromAnyState, ReturnValue) == 0x000000, "Member 'SMTransitionInstance_IsTransitionFromAnyState::ReturnValue' has a wrong offset!");

// Function SMSystem.SMBlueprintUtils.CreateStateMachineInstanceFromTemplate
// 0x0028 (0x0028 - 0x0000)
struct SMBlueprintUtils_CreateStateMachineInstanceFromTemplate final
{
public:
	TSubclassOf<class USMInstance>                StateMachineClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMInstance*                            Template;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitializeNow;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USMInstance*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMBlueprintUtils_CreateStateMachineInstanceFromTemplate) == 0x000008, "Wrong alignment on SMBlueprintUtils_CreateStateMachineInstanceFromTemplate");
static_assert(sizeof(SMBlueprintUtils_CreateStateMachineInstanceFromTemplate) == 0x000028, "Wrong size on SMBlueprintUtils_CreateStateMachineInstanceFromTemplate");
static_assert(offsetof(SMBlueprintUtils_CreateStateMachineInstanceFromTemplate, StateMachineClass) == 0x000000, "Member 'SMBlueprintUtils_CreateStateMachineInstanceFromTemplate::StateMachineClass' has a wrong offset!");
static_assert(offsetof(SMBlueprintUtils_CreateStateMachineInstanceFromTemplate, Context) == 0x000008, "Member 'SMBlueprintUtils_CreateStateMachineInstanceFromTemplate::Context' has a wrong offset!");
static_assert(offsetof(SMBlueprintUtils_CreateStateMachineInstanceFromTemplate, Template) == 0x000010, "Member 'SMBlueprintUtils_CreateStateMachineInstanceFromTemplate::Template' has a wrong offset!");
static_assert(offsetof(SMBlueprintUtils_CreateStateMachineInstanceFromTemplate, bInitializeNow) == 0x000018, "Member 'SMBlueprintUtils_CreateStateMachineInstanceFromTemplate::bInitializeNow' has a wrong offset!");
static_assert(offsetof(SMBlueprintUtils_CreateStateMachineInstanceFromTemplate, ReturnValue) == 0x000020, "Member 'SMBlueprintUtils_CreateStateMachineInstanceFromTemplate::ReturnValue' has a wrong offset!");

// Function SMSystem.SMBlueprintUtils.K2_CreateStateMachineInstance
// 0x0020 (0x0020 - 0x0000)
struct SMBlueprintUtils_K2_CreateStateMachineInstance final
{
public:
	TSubclassOf<class USMInstance>                StateMachineClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitializeNow;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USMInstance*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMBlueprintUtils_K2_CreateStateMachineInstance) == 0x000008, "Wrong alignment on SMBlueprintUtils_K2_CreateStateMachineInstance");
static_assert(sizeof(SMBlueprintUtils_K2_CreateStateMachineInstance) == 0x000020, "Wrong size on SMBlueprintUtils_K2_CreateStateMachineInstance");
static_assert(offsetof(SMBlueprintUtils_K2_CreateStateMachineInstance, StateMachineClass) == 0x000000, "Member 'SMBlueprintUtils_K2_CreateStateMachineInstance::StateMachineClass' has a wrong offset!");
static_assert(offsetof(SMBlueprintUtils_K2_CreateStateMachineInstance, Context) == 0x000008, "Member 'SMBlueprintUtils_K2_CreateStateMachineInstance::Context' has a wrong offset!");
static_assert(offsetof(SMBlueprintUtils_K2_CreateStateMachineInstance, bInitializeNow) == 0x000010, "Member 'SMBlueprintUtils_K2_CreateStateMachineInstance::bInitializeNow' has a wrong offset!");
static_assert(offsetof(SMBlueprintUtils_K2_CreateStateMachineInstance, ReturnValue) == 0x000018, "Member 'SMBlueprintUtils_K2_CreateStateMachineInstance::ReturnValue' has a wrong offset!");

// Function SMSystem.SMBlueprintUtils.K2_CreateStateMachineInstancePure
// 0x0020 (0x0020 - 0x0000)
struct SMBlueprintUtils_K2_CreateStateMachineInstancePure final
{
public:
	TSubclassOf<class USMInstance>                StateMachineClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitializeNow;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USMInstance*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SMBlueprintUtils_K2_CreateStateMachineInstancePure) == 0x000008, "Wrong alignment on SMBlueprintUtils_K2_CreateStateMachineInstancePure");
static_assert(sizeof(SMBlueprintUtils_K2_CreateStateMachineInstancePure) == 0x000020, "Wrong size on SMBlueprintUtils_K2_CreateStateMachineInstancePure");
static_assert(offsetof(SMBlueprintUtils_K2_CreateStateMachineInstancePure, StateMachineClass) == 0x000000, "Member 'SMBlueprintUtils_K2_CreateStateMachineInstancePure::StateMachineClass' has a wrong offset!");
static_assert(offsetof(SMBlueprintUtils_K2_CreateStateMachineInstancePure, Context) == 0x000008, "Member 'SMBlueprintUtils_K2_CreateStateMachineInstancePure::Context' has a wrong offset!");
static_assert(offsetof(SMBlueprintUtils_K2_CreateStateMachineInstancePure, bInitializeNow) == 0x000010, "Member 'SMBlueprintUtils_K2_CreateStateMachineInstancePure::bInitializeNow' has a wrong offset!");
static_assert(offsetof(SMBlueprintUtils_K2_CreateStateMachineInstancePure, ReturnValue) == 0x000018, "Member 'SMBlueprintUtils_K2_CreateStateMachineInstancePure::ReturnValue' has a wrong offset!");

}

