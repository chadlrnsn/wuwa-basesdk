#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroSeqEvent

#include "Basic.hpp"

#include "BP_KuroSeqEvent_classes.hpp"
#include "BP_KuroSeqEvent_parameters.hpp"


namespace SDK
{

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.ExecuteUbergraph_BP_KuroSeqEvent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::ExecuteUbergraph_BP_KuroSeqEvent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "ExecuteUbergraph_BP_KuroSeqEvent");

	Params::BP_KuroSeqEvent_C_ExecuteUbergraph_BP_KuroSeqEvent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_KuroSeqEvent_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "ReceiveTick");

	Params::BP_KuroSeqEvent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.时间轴_0__UpdateFunc
// (BlueprintEvent)

void ABP_KuroSeqEvent_C::时间轴_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "时间轴_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.时间轴_0__FinishedFunc
// (BlueprintEvent)

void ABP_KuroSeqEvent_C::时间轴_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "时间轴_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.Play Subtitle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSSubtitleSettings               inSubtitle                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::Play_Subtitle(const struct FSSubtitleSettings& inSubtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "Play Subtitle");

	Params::BP_KuroSeqEvent_C_Play_Subtitle Parms{};

	Parms.inSubtitle = std::move(inSubtitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.JumpToSequenceNode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             inSeqNodeID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::JumpToSequenceNode(class FName inSeqNodeID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "JumpToSequenceNode");

	Params::BP_KuroSeqEvent_C_JumpToSequenceNode Parms{};

	Parms.inSeqNodeID = inSeqNodeID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.PauseSequence
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_KuroSeqEvent_C::PauseSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "PauseSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.ResumeSequnece
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_KuroSeqEvent_C::ResumeSequnece()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "ResumeSequnece");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.EnableUIInput
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_KuroSeqEvent_C::EnableUIInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "EnableUIInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.JumpToSequenceNodeWithOption
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_KuroSeqEvent_C::JumpToSequenceNodeWithOption()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "JumpToSequenceNodeWithOption");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.JumpToOtherSeqNetwrok
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             inRowName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDataTable*                       inSeqNetworks                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::JumpToOtherSeqNetwrok(class FName inRowName, class UDataTable* inSeqNetworks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "JumpToOtherSeqNetwrok");

	Params::BP_KuroSeqEvent_C_JumpToOtherSeqNetwrok Parms{};

	Parms.inRowName = inRowName;
	Parms.inSeqNetworks = inSeqNetworks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.Interaction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSSubtitleSettings               inSubtitleSettings                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::Interaction(const struct FSSubtitleSettings& inSubtitleSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "Interaction");

	Params::BP_KuroSeqEvent_C_Interaction Parms{};

	Parms.inSubtitleSettings = std::move(inSubtitleSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.GeneralEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             inEventID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::GeneralEvent(class FName inEventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "GeneralEvent");

	Params::BP_KuroSeqEvent_C_GeneralEvent Parms{};

	Parms.inEventID = inEventID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.NPC Rotate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   角度                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::NPC_Rotate(float 角度)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "NPC Rotate");

	Params::BP_KuroSeqEvent_C_NPC_Rotate Parms{};

	Parms.角度 = 角度;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.PlayerUIMovie
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFileMediaSource*                 MediaSource                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMove                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          inlocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    isTotate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         inRotation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_KuroSeqEvent_C::PlayerUIMovie(class UFileMediaSource* MediaSource, bool IsMove, const struct FVector& inlocation, bool isTotate, const struct FRotator& inRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "PlayerUIMovie");

	Params::BP_KuroSeqEvent_C_PlayerUIMovie Parms{};

	Parms.MediaSource = MediaSource;
	Parms.IsMove = IsMove;
	Parms.inlocation = std::move(inlocation);
	Parms.isTotate = isTotate;
	Parms.inRotation = std::move(inRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.MoveAfterMoviePlay
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_KuroSeqEvent_C::MoveAfterMoviePlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "MoveAfterMoviePlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.DirectInteraction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InteractionID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::DirectInteraction(class FName InteractionID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "DirectInteraction");

	Params::BP_KuroSeqEvent_C_DirectInteraction Parms{};

	Parms.InteractionID = InteractionID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.SetCharacterBinding
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InTag                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::SetCharacterBinding(const class FString& InTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "SetCharacterBinding");

	Params::BP_KuroSeqEvent_C_SetCharacterBinding Parms{};

	Parms.InTag = std::move(InTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.BlendingCharacter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSSeqCharacterBlendGroup         inSettings                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::BlendingCharacter(const struct FSSeqCharacterBlendGroup& inSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "BlendingCharacter");

	Params::BP_KuroSeqEvent_C_BlendingCharacter Parms{};

	Parms.inSettings = std::move(inSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.BlendHelper
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_KuroSeqEvent_C::BlendHelper()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "BlendHelper");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.Set Motion Blur
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    启用                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_KuroSeqEvent_C::Set_Motion_Blur(bool 启用)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "Set Motion Blur");

	Params::BP_KuroSeqEvent_C_Set_Motion_Blur Parms{};

	Parms.启用 = 启用;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.ChangeWeather
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   天气Id                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    继承                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   过渡时间                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::ChangeWeather(int32 天气Id, bool 继承, float 过渡时间)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "ChangeWeather");

	Params::BP_KuroSeqEvent_C_ChangeWeather Parms{};

	Parms.天气Id = 天气Id;
	Parms.继承 = 继承;
	Parms.过渡时间 = 过渡时间;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.ChangeTimeOfDay
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    继承                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   小时                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   分钟                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   过渡帧数                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   最终小时                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   最终分钟                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KuroSeqEvent_C::ChangeTimeOfDay(bool 继承, int32 小时, int32 分钟, int32 过渡帧数, int32 最终小时, int32 最终分钟)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KuroSeqEvent_C", "ChangeTimeOfDay");

	Params::BP_KuroSeqEvent_C_ChangeTimeOfDay Parms{};

	Parms.继承 = 继承;
	Parms.小时 = 小时;
	Parms.分钟 = 分钟;
	Parms.过渡帧数 = 过渡帧数;
	Parms.最终小时 = 最终小时;
	Parms.最终分钟 = 最终分钟;

	UObject::ProcessEvent(Func, &Parms);
}

}

