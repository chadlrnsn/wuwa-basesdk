#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsAnimNotifySwitchSequenceCamera

#include "Basic.hpp"

#include "ESequenceCameraAnsEffectiveClientType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SSequenceCamera_Settings_structs.hpp"
#include "SSequenceCamera_SpecificConfig_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsAnimNotifySwitchSequenceCamera.TsAnimNotifySwitchSequenceCamera_C
// 0x0098 (0x00E0 - 0x0048)
class UTsAnimNotifySwitchSequenceCamera_C final : public UKuroAnimNotify
{
public:
	struct FSSequenceCamera_Settings              特写镜头配置;                                      // 0x0048(0x0038)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FRotator                               AdditiveRotation;                                  // 0x0080(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CameraAttachSocket;                                // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CameraDetectSocket;                                // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	float                                         ExtraDetectSphereRadius;                           // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ExtraSphereLocation;                               // 0x00B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShowExtraSphere;                                 // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bResetLockOnCamera;                                // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESequenceCameraAnsEffectiveClientType         生效客户端;                                        // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIgnoreCharacterCollision;                        // 0x00C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DisableMovementInput;                              // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DisableLookAtInput;                                // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DisableMotionBlur;                                 // 0x00C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          强制播放Sequence;                                  // 0x00C7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          启用特定功能下的镜头配置;                          // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSequenceCamera_SpecificConfig> 特定功能下的镜头配置;                              // 0x00D0(0x0010)(Edit, BlueprintVisible)

public:
	bool K2_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	struct FSSequenceCamera_SpecificConfig GetSpecificConfig();

	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsAnimNotifySwitchSequenceCamera_C">();
	}
	static class UTsAnimNotifySwitchSequenceCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsAnimNotifySwitchSequenceCamera_C>();
	}
};
static_assert(alignof(UTsAnimNotifySwitchSequenceCamera_C) == 0x000008, "Wrong alignment on UTsAnimNotifySwitchSequenceCamera_C");
static_assert(sizeof(UTsAnimNotifySwitchSequenceCamera_C) == 0x0000E0, "Wrong size on UTsAnimNotifySwitchSequenceCamera_C");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, 特写镜头配置) == 0x000048, "Member 'UTsAnimNotifySwitchSequenceCamera_C::特写镜头配置' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, AdditiveRotation) == 0x000080, "Member 'UTsAnimNotifySwitchSequenceCamera_C::AdditiveRotation' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, CameraAttachSocket) == 0x000090, "Member 'UTsAnimNotifySwitchSequenceCamera_C::CameraAttachSocket' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, CameraDetectSocket) == 0x0000A0, "Member 'UTsAnimNotifySwitchSequenceCamera_C::CameraDetectSocket' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, ExtraDetectSphereRadius) == 0x0000B0, "Member 'UTsAnimNotifySwitchSequenceCamera_C::ExtraDetectSphereRadius' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, ExtraSphereLocation) == 0x0000B4, "Member 'UTsAnimNotifySwitchSequenceCamera_C::ExtraSphereLocation' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, IsShowExtraSphere) == 0x0000C0, "Member 'UTsAnimNotifySwitchSequenceCamera_C::IsShowExtraSphere' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, bResetLockOnCamera) == 0x0000C1, "Member 'UTsAnimNotifySwitchSequenceCamera_C::bResetLockOnCamera' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, 生效客户端) == 0x0000C2, "Member 'UTsAnimNotifySwitchSequenceCamera_C::生效客户端' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, IsIgnoreCharacterCollision) == 0x0000C3, "Member 'UTsAnimNotifySwitchSequenceCamera_C::IsIgnoreCharacterCollision' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, DisableMovementInput) == 0x0000C4, "Member 'UTsAnimNotifySwitchSequenceCamera_C::DisableMovementInput' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, DisableLookAtInput) == 0x0000C5, "Member 'UTsAnimNotifySwitchSequenceCamera_C::DisableLookAtInput' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, DisableMotionBlur) == 0x0000C6, "Member 'UTsAnimNotifySwitchSequenceCamera_C::DisableMotionBlur' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, 强制播放Sequence) == 0x0000C7, "Member 'UTsAnimNotifySwitchSequenceCamera_C::强制播放Sequence' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, 启用特定功能下的镜头配置) == 0x0000C8, "Member 'UTsAnimNotifySwitchSequenceCamera_C::启用特定功能下的镜头配置' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifySwitchSequenceCamera_C, 特定功能下的镜头配置) == 0x0000D0, "Member 'UTsAnimNotifySwitchSequenceCamera_C::特定功能下的镜头配置' has a wrong offset!");

}

