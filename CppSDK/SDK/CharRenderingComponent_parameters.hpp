#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharRenderingComponent

#include "Basic.hpp"

#include "ECharacterDitherType_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "ECharacterRenderingType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ECharacterSlotSpecifiedType_structs.hpp"
#include "ECharacterControllerCaseType_structs.hpp"
#include "ECharacterBodySpecifiedType_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function CharRenderingComponent.CharRenderingComponent_C.ExecuteUbergraph_CharRenderingComponent
// 0x000C (0x000C - 0x0000)
struct CharRenderingComponent_C_ExecuteUbergraph_CharRenderingComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_ExecuteUbergraph_CharRenderingComponent) == 0x000004, "Wrong alignment on CharRenderingComponent_C_ExecuteUbergraph_CharRenderingComponent");
static_assert(sizeof(CharRenderingComponent_C_ExecuteUbergraph_CharRenderingComponent) == 0x00000C, "Wrong size on CharRenderingComponent_C_ExecuteUbergraph_CharRenderingComponent");
static_assert(offsetof(CharRenderingComponent_C_ExecuteUbergraph_CharRenderingComponent, EntryPoint) == 0x000000, "Member 'CharRenderingComponent_C_ExecuteUbergraph_CharRenderingComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_ExecuteUbergraph_CharRenderingComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'CharRenderingComponent_C_ExecuteUbergraph_CharRenderingComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_ExecuteUbergraph_CharRenderingComponent, K2Node_Event_EndPlayReason) == 0x000008, "Member 'CharRenderingComponent_C_ExecuteUbergraph_CharRenderingComponent::K2Node_Event_EndPlayReason' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct CharRenderingComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on CharRenderingComponent_C_ReceiveTick");
static_assert(sizeof(CharRenderingComponent_C_ReceiveTick) == 0x000004, "Wrong size on CharRenderingComponent_C_ReceiveTick");
static_assert(offsetof(CharRenderingComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'CharRenderingComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct CharRenderingComponent_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on CharRenderingComponent_C_ReceiveEndPlay");
static_assert(sizeof(CharRenderingComponent_C_ReceiveEndPlay) == 0x000001, "Wrong size on CharRenderingComponent_C_ReceiveEndPlay");
static_assert(offsetof(CharRenderingComponent_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'CharRenderingComponent_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.Init
// 0x0001 (0x0001 - 0x0000)
struct CharRenderingComponent_C_Init final
{
public:
	ECharacterRenderingType                       renderType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_Init) == 0x000001, "Wrong alignment on CharRenderingComponent_C_Init");
static_assert(sizeof(CharRenderingComponent_C_Init) == 0x000001, "Wrong size on CharRenderingComponent_C_Init");
static_assert(offsetof(CharRenderingComponent_C_Init, renderType) == 0x000000, "Member 'CharRenderingComponent_C_Init::renderType' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.RemoveMaterialControllerData
// 0x0004 (0x0004 - 0x0000)
struct CharRenderingComponent_C_RemoveMaterialControllerData final
{
public:
	int32                                         handle1;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_RemoveMaterialControllerData) == 0x000004, "Wrong alignment on CharRenderingComponent_C_RemoveMaterialControllerData");
static_assert(sizeof(CharRenderingComponent_C_RemoveMaterialControllerData) == 0x000004, "Wrong size on CharRenderingComponent_C_RemoveMaterialControllerData");
static_assert(offsetof(CharRenderingComponent_C_RemoveMaterialControllerData, handle1) == 0x000000, "Member 'CharRenderingComponent_C_RemoveMaterialControllerData::handle1' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.AddMaterialControllerData
// 0x0010 (0x0010 - 0x0000)
struct CharRenderingComponent_C_AddMaterialControllerData final
{
public:
	class UObject*                                data;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_AddMaterialControllerData) == 0x000008, "Wrong alignment on CharRenderingComponent_C_AddMaterialControllerData");
static_assert(sizeof(CharRenderingComponent_C_AddMaterialControllerData) == 0x000010, "Wrong size on CharRenderingComponent_C_AddMaterialControllerData");
static_assert(offsetof(CharRenderingComponent_C_AddMaterialControllerData, data) == 0x000000, "Member 'CharRenderingComponent_C_AddMaterialControllerData::data' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddMaterialControllerData, ReturnValue) == 0x000008, "Member 'CharRenderingComponent_C_AddMaterialControllerData::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.RemoveMaterialControllerDataWithEnding
// 0x0004 (0x0004 - 0x0000)
struct CharRenderingComponent_C_RemoveMaterialControllerDataWithEnding final
{
public:
	int32                                         handle;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_RemoveMaterialControllerDataWithEnding) == 0x000004, "Wrong alignment on CharRenderingComponent_C_RemoveMaterialControllerDataWithEnding");
static_assert(sizeof(CharRenderingComponent_C_RemoveMaterialControllerDataWithEnding) == 0x000004, "Wrong size on CharRenderingComponent_C_RemoveMaterialControllerDataWithEnding");
static_assert(offsetof(CharRenderingComponent_C_RemoveMaterialControllerDataWithEnding, handle) == 0x000000, "Member 'CharRenderingComponent_C_RemoveMaterialControllerDataWithEnding::handle' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.AddMaterialControllerDataGroup
// 0x0010 (0x0010 - 0x0000)
struct CharRenderingComponent_C_AddMaterialControllerDataGroup final
{
public:
	class UObject*                                data;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_AddMaterialControllerDataGroup) == 0x000008, "Wrong alignment on CharRenderingComponent_C_AddMaterialControllerDataGroup");
static_assert(sizeof(CharRenderingComponent_C_AddMaterialControllerDataGroup) == 0x000010, "Wrong size on CharRenderingComponent_C_AddMaterialControllerDataGroup");
static_assert(offsetof(CharRenderingComponent_C_AddMaterialControllerDataGroup, data) == 0x000000, "Member 'CharRenderingComponent_C_AddMaterialControllerDataGroup::data' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddMaterialControllerDataGroup, ReturnValue) == 0x000008, "Member 'CharRenderingComponent_C_AddMaterialControllerDataGroup::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.RemoveMaterialControllerDataGroup
// 0x0004 (0x0004 - 0x0000)
struct CharRenderingComponent_C_RemoveMaterialControllerDataGroup final
{
public:
	int32                                         handle;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_RemoveMaterialControllerDataGroup) == 0x000004, "Wrong alignment on CharRenderingComponent_C_RemoveMaterialControllerDataGroup");
static_assert(sizeof(CharRenderingComponent_C_RemoveMaterialControllerDataGroup) == 0x000004, "Wrong size on CharRenderingComponent_C_RemoveMaterialControllerDataGroup");
static_assert(offsetof(CharRenderingComponent_C_RemoveMaterialControllerDataGroup, handle) == 0x000000, "Member 'CharRenderingComponent_C_RemoveMaterialControllerDataGroup::handle' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.CheckInit
// 0x0001 (0x0001 - 0x0000)
struct CharRenderingComponent_C_CheckInit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharRenderingComponent_C_CheckInit) == 0x000001, "Wrong alignment on CharRenderingComponent_C_CheckInit");
static_assert(sizeof(CharRenderingComponent_C_CheckInit) == 0x000001, "Wrong size on CharRenderingComponent_C_CheckInit");
static_assert(offsetof(CharRenderingComponent_C_CheckInit, ReturnValue) == 0x000000, "Member 'CharRenderingComponent_C_CheckInit::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetDebug
// 0x0001 (0x0001 - 0x0000)
struct CharRenderingComponent_C_SetDebug final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharRenderingComponent_C_SetDebug) == 0x000001, "Wrong alignment on CharRenderingComponent_C_SetDebug");
static_assert(sizeof(CharRenderingComponent_C_SetDebug) == 0x000001, "Wrong size on CharRenderingComponent_C_SetDebug");
static_assert(offsetof(CharRenderingComponent_C_SetDebug, value) == 0x000000, "Member 'CharRenderingComponent_C_SetDebug::value' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.GetDebugInfo
// 0x0008 (0x0008 - 0x0000)
struct CharRenderingComponent_C_GetDebugInfo final
{
public:
	class UPD_MaterialDebug_C*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_GetDebugInfo) == 0x000008, "Wrong alignment on CharRenderingComponent_C_GetDebugInfo");
static_assert(sizeof(CharRenderingComponent_C_GetDebugInfo) == 0x000008, "Wrong size on CharRenderingComponent_C_GetDebugInfo");
static_assert(offsetof(CharRenderingComponent_C_GetDebugInfo, ReturnValue) == 0x000000, "Member 'CharRenderingComponent_C_GetDebugInfo::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.AddComponent
// 0x0018 (0x0018 - 0x0000)
struct CharRenderingComponent_C_AddComponent final
{
public:
	class FString                                 skelName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UMeshComponent*                         skeletalComp;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_AddComponent) == 0x000008, "Wrong alignment on CharRenderingComponent_C_AddComponent");
static_assert(sizeof(CharRenderingComponent_C_AddComponent) == 0x000018, "Wrong size on CharRenderingComponent_C_AddComponent");
static_assert(offsetof(CharRenderingComponent_C_AddComponent, skelName) == 0x000000, "Member 'CharRenderingComponent_C_AddComponent::skelName' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddComponent, skeletalComp) == 0x000010, "Member 'CharRenderingComponent_C_AddComponent::skeletalComp' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.RemoveComponent
// 0x0010 (0x0010 - 0x0000)
struct CharRenderingComponent_C_RemoveComponent final
{
public:
	class FString                                 skelName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_RemoveComponent) == 0x000008, "Wrong alignment on CharRenderingComponent_C_RemoveComponent");
static_assert(sizeof(CharRenderingComponent_C_RemoveComponent) == 0x000010, "Wrong size on CharRenderingComponent_C_RemoveComponent");
static_assert(offsetof(CharRenderingComponent_C_RemoveComponent, skelName) == 0x000000, "Member 'CharRenderingComponent_C_RemoveComponent::skelName' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetMaterialPropertyFloat
// 0x0028 (0x0028 - 0x0000)
struct CharRenderingComponent_C_SetMaterialPropertyFloat final
{
public:
	ECharacterBodySpecifiedType                   bodyType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         sectionIndex;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ECharacterSlotSpecifiedType                   slotType;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 propertyName;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         value;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetMaterialPropertyFloat) == 0x000008, "Wrong alignment on CharRenderingComponent_C_SetMaterialPropertyFloat");
static_assert(sizeof(CharRenderingComponent_C_SetMaterialPropertyFloat) == 0x000028, "Wrong size on CharRenderingComponent_C_SetMaterialPropertyFloat");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyFloat, bodyType) == 0x000000, "Member 'CharRenderingComponent_C_SetMaterialPropertyFloat::bodyType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyFloat, sectionIndex) == 0x000004, "Member 'CharRenderingComponent_C_SetMaterialPropertyFloat::sectionIndex' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyFloat, slotType) == 0x000008, "Member 'CharRenderingComponent_C_SetMaterialPropertyFloat::slotType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyFloat, propertyName) == 0x000010, "Member 'CharRenderingComponent_C_SetMaterialPropertyFloat::propertyName' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyFloat, value) == 0x000020, "Member 'CharRenderingComponent_C_SetMaterialPropertyFloat::value' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetMaterialPropertyColor
// 0x0030 (0x0030 - 0x0000)
struct CharRenderingComponent_C_SetMaterialPropertyColor final
{
public:
	ECharacterBodySpecifiedType                   bodyType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         sectionIndex;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ECharacterSlotSpecifiedType                   slotType;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 propertyName;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash)
	struct FLinearColor                           value;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetMaterialPropertyColor) == 0x000008, "Wrong alignment on CharRenderingComponent_C_SetMaterialPropertyColor");
static_assert(sizeof(CharRenderingComponent_C_SetMaterialPropertyColor) == 0x000030, "Wrong size on CharRenderingComponent_C_SetMaterialPropertyColor");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyColor, bodyType) == 0x000000, "Member 'CharRenderingComponent_C_SetMaterialPropertyColor::bodyType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyColor, sectionIndex) == 0x000004, "Member 'CharRenderingComponent_C_SetMaterialPropertyColor::sectionIndex' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyColor, slotType) == 0x000008, "Member 'CharRenderingComponent_C_SetMaterialPropertyColor::slotType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyColor, propertyName) == 0x000010, "Member 'CharRenderingComponent_C_SetMaterialPropertyColor::propertyName' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyColor, value) == 0x000020, "Member 'CharRenderingComponent_C_SetMaterialPropertyColor::value' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetCapsuleDither
// 0x0004 (0x0004 - 0x0000)
struct CharRenderingComponent_C_SetCapsuleDither final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetCapsuleDither) == 0x000004, "Wrong alignment on CharRenderingComponent_C_SetCapsuleDither");
static_assert(sizeof(CharRenderingComponent_C_SetCapsuleDither) == 0x000004, "Wrong size on CharRenderingComponent_C_SetCapsuleDither");
static_assert(offsetof(CharRenderingComponent_C_SetCapsuleDither, value) == 0x000000, "Member 'CharRenderingComponent_C_SetCapsuleDither::value' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetDitherEffect
// 0x0008 (0x0008 - 0x0000)
struct CharRenderingComponent_C_SetDitherEffect final
{
public:
	float                                         ditherRate;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ECharacterDitherType                          ditherType;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetDitherEffect) == 0x000004, "Wrong alignment on CharRenderingComponent_C_SetDitherEffect");
static_assert(sizeof(CharRenderingComponent_C_SetDitherEffect) == 0x000008, "Wrong size on CharRenderingComponent_C_SetDitherEffect");
static_assert(offsetof(CharRenderingComponent_C_SetDitherEffect, ditherRate) == 0x000000, "Member 'CharRenderingComponent_C_SetDitherEffect::ditherRate' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetDitherEffect, ditherType) == 0x000004, "Member 'CharRenderingComponent_C_SetDitherEffect::ditherType' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.RemoveMaterialControllerDataGroupWithEnding
// 0x0004 (0x0004 - 0x0000)
struct CharRenderingComponent_C_RemoveMaterialControllerDataGroupWithEnding final
{
public:
	int32                                         handle;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_RemoveMaterialControllerDataGroupWithEnding) == 0x000004, "Wrong alignment on CharRenderingComponent_C_RemoveMaterialControllerDataGroupWithEnding");
static_assert(sizeof(CharRenderingComponent_C_RemoveMaterialControllerDataGroupWithEnding) == 0x000004, "Wrong size on CharRenderingComponent_C_RemoveMaterialControllerDataGroupWithEnding");
static_assert(offsetof(CharRenderingComponent_C_RemoveMaterialControllerDataGroupWithEnding, handle) == 0x000000, "Member 'CharRenderingComponent_C_RemoveMaterialControllerDataGroupWithEnding::handle' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.QuickInitAndAddDataGroup
// 0x0018 (0x0018 - 0x0000)
struct CharRenderingComponent_C_QuickInitAndAddDataGroup final
{
public:
	class UObject*                                data;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ASkeletalMeshActor*                     meshActor;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_QuickInitAndAddDataGroup) == 0x000008, "Wrong alignment on CharRenderingComponent_C_QuickInitAndAddDataGroup");
static_assert(sizeof(CharRenderingComponent_C_QuickInitAndAddDataGroup) == 0x000018, "Wrong size on CharRenderingComponent_C_QuickInitAndAddDataGroup");
static_assert(offsetof(CharRenderingComponent_C_QuickInitAndAddDataGroup, data) == 0x000000, "Member 'CharRenderingComponent_C_QuickInitAndAddDataGroup::data' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_QuickInitAndAddDataGroup, meshActor) == 0x000008, "Member 'CharRenderingComponent_C_QuickInitAndAddDataGroup::meshActor' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_QuickInitAndAddDataGroup, ReturnValue) == 0x000010, "Member 'CharRenderingComponent_C_QuickInitAndAddDataGroup::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.AddComponentByCase
// 0x0010 (0x0010 - 0x0000)
struct CharRenderingComponent_C_AddComponentByCase final
{
public:
	ECharacterControllerCaseType                  caseType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         skeletalComp;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_AddComponentByCase) == 0x000008, "Wrong alignment on CharRenderingComponent_C_AddComponentByCase");
static_assert(sizeof(CharRenderingComponent_C_AddComponentByCase) == 0x000010, "Wrong size on CharRenderingComponent_C_AddComponentByCase");
static_assert(offsetof(CharRenderingComponent_C_AddComponentByCase, caseType) == 0x000000, "Member 'CharRenderingComponent_C_AddComponentByCase::caseType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddComponentByCase, skeletalComp) == 0x000008, "Member 'CharRenderingComponent_C_AddComponentByCase::skeletalComp' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.QuickInitAndAddDataWithMeshComponent
// 0x0018 (0x0018 - 0x0000)
struct CharRenderingComponent_C_QuickInitAndAddDataWithMeshComponent final
{
public:
	class UObject*                                data;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UMeshComponent*                         meshComponent;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_QuickInitAndAddDataWithMeshComponent) == 0x000008, "Wrong alignment on CharRenderingComponent_C_QuickInitAndAddDataWithMeshComponent");
static_assert(sizeof(CharRenderingComponent_C_QuickInitAndAddDataWithMeshComponent) == 0x000018, "Wrong size on CharRenderingComponent_C_QuickInitAndAddDataWithMeshComponent");
static_assert(offsetof(CharRenderingComponent_C_QuickInitAndAddDataWithMeshComponent, data) == 0x000000, "Member 'CharRenderingComponent_C_QuickInitAndAddDataWithMeshComponent::data' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_QuickInitAndAddDataWithMeshComponent, meshComponent) == 0x000008, "Member 'CharRenderingComponent_C_QuickInitAndAddDataWithMeshComponent::meshComponent' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_QuickInitAndAddDataWithMeshComponent, ReturnValue) == 0x000010, "Member 'CharRenderingComponent_C_QuickInitAndAddDataWithMeshComponent::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.GetInWater
// 0x0008 (0x0008 - 0x0000)
struct CharRenderingComponent_C_GetInWater final
{
public:
	float                                         depthThreshold;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper)
};
static_assert(alignof(CharRenderingComponent_C_GetInWater) == 0x000004, "Wrong alignment on CharRenderingComponent_C_GetInWater");
static_assert(sizeof(CharRenderingComponent_C_GetInWater) == 0x000008, "Wrong size on CharRenderingComponent_C_GetInWater");
static_assert(offsetof(CharRenderingComponent_C_GetInWater, depthThreshold) == 0x000000, "Member 'CharRenderingComponent_C_GetInWater::depthThreshold' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_GetInWater, ReturnValue) == 0x000004, "Member 'CharRenderingComponent_C_GetInWater::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetEffectProgress
// 0x0008 (0x0008 - 0x0000)
struct CharRenderingComponent_C_SetEffectProgress final
{
public:
	float                                         progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         handleId;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetEffectProgress) == 0x000004, "Wrong alignment on CharRenderingComponent_C_SetEffectProgress");
static_assert(sizeof(CharRenderingComponent_C_SetEffectProgress) == 0x000008, "Wrong size on CharRenderingComponent_C_SetEffectProgress");
static_assert(offsetof(CharRenderingComponent_C_SetEffectProgress, progress) == 0x000000, "Member 'CharRenderingComponent_C_SetEffectProgress::progress' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetEffectProgress, handleId) == 0x000004, "Member 'CharRenderingComponent_C_SetEffectProgress::handleId' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.RemoveComponentByCase
// 0x0001 (0x0001 - 0x0000)
struct CharRenderingComponent_C_RemoveComponentByCase final
{
public:
	ECharacterControllerCaseType                  caseType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_RemoveComponentByCase) == 0x000001, "Wrong alignment on CharRenderingComponent_C_RemoveComponentByCase");
static_assert(sizeof(CharRenderingComponent_C_RemoveComponentByCase) == 0x000001, "Wrong size on CharRenderingComponent_C_RemoveComponentByCase");
static_assert(offsetof(CharRenderingComponent_C_RemoveComponentByCase, caseType) == 0x000000, "Member 'CharRenderingComponent_C_RemoveComponentByCase::caseType' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetBodyEffectOpacity
// 0x0004 (0x0004 - 0x0000)
struct CharRenderingComponent_C_SetBodyEffectOpacity final
{
public:
	float                                         opacity;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetBodyEffectOpacity) == 0x000004, "Wrong alignment on CharRenderingComponent_C_SetBodyEffectOpacity");
static_assert(sizeof(CharRenderingComponent_C_SetBodyEffectOpacity) == 0x000004, "Wrong size on CharRenderingComponent_C_SetBodyEffectOpacity");
static_assert(offsetof(CharRenderingComponent_C_SetBodyEffectOpacity, opacity) == 0x000000, "Member 'CharRenderingComponent_C_SetBodyEffectOpacity::opacity' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.QuickInitAndAddDataGroupWithMeshComponent
// 0x0018 (0x0018 - 0x0000)
struct CharRenderingComponent_C_QuickInitAndAddDataGroupWithMeshComponent final
{
public:
	class UObject*                                data;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         meshComponent;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_QuickInitAndAddDataGroupWithMeshComponent) == 0x000008, "Wrong alignment on CharRenderingComponent_C_QuickInitAndAddDataGroupWithMeshComponent");
static_assert(sizeof(CharRenderingComponent_C_QuickInitAndAddDataGroupWithMeshComponent) == 0x000018, "Wrong size on CharRenderingComponent_C_QuickInitAndAddDataGroupWithMeshComponent");
static_assert(offsetof(CharRenderingComponent_C_QuickInitAndAddDataGroupWithMeshComponent, data) == 0x000000, "Member 'CharRenderingComponent_C_QuickInitAndAddDataGroupWithMeshComponent::data' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_QuickInitAndAddDataGroupWithMeshComponent, meshComponent) == 0x000008, "Member 'CharRenderingComponent_C_QuickInitAndAddDataGroupWithMeshComponent::meshComponent' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_QuickInitAndAddDataGroupWithMeshComponent, ReturnValue) == 0x000010, "Member 'CharRenderingComponent_C_QuickInitAndAddDataGroupWithMeshComponent::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetDecalShadowEnabled
// 0x0001 (0x0001 - 0x0000)
struct CharRenderingComponent_C_SetDecalShadowEnabled final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharRenderingComponent_C_SetDecalShadowEnabled) == 0x000001, "Wrong alignment on CharRenderingComponent_C_SetDecalShadowEnabled");
static_assert(sizeof(CharRenderingComponent_C_SetDecalShadowEnabled) == 0x000001, "Wrong size on CharRenderingComponent_C_SetDecalShadowEnabled");
static_assert(offsetof(CharRenderingComponent_C_SetDecalShadowEnabled, enable) == 0x000000, "Member 'CharRenderingComponent_C_SetDecalShadowEnabled::enable' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.AddComponentForDecalShadow
// 0x0018 (0x0018 - 0x0000)
struct CharRenderingComponent_C_AddComponentForDecalShadow final
{
public:
	class FString                                 name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    comp;                                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_AddComponentForDecalShadow) == 0x000008, "Wrong alignment on CharRenderingComponent_C_AddComponentForDecalShadow");
static_assert(sizeof(CharRenderingComponent_C_AddComponentForDecalShadow) == 0x000018, "Wrong size on CharRenderingComponent_C_AddComponentForDecalShadow");
static_assert(offsetof(CharRenderingComponent_C_AddComponentForDecalShadow, name) == 0x000000, "Member 'CharRenderingComponent_C_AddComponentForDecalShadow::name' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddComponentForDecalShadow, comp) == 0x000010, "Member 'CharRenderingComponent_C_AddComponentForDecalShadow::comp' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.RemoveComponentFromDecalShadow
// 0x0010 (0x0010 - 0x0000)
struct CharRenderingComponent_C_RemoveComponentFromDecalShadow final
{
public:
	class FString                                 name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_RemoveComponentFromDecalShadow) == 0x000008, "Wrong alignment on CharRenderingComponent_C_RemoveComponentFromDecalShadow");
static_assert(sizeof(CharRenderingComponent_C_RemoveComponentFromDecalShadow) == 0x000010, "Wrong size on CharRenderingComponent_C_RemoveComponentFromDecalShadow");
static_assert(offsetof(CharRenderingComponent_C_RemoveComponentFromDecalShadow, name) == 0x000000, "Member 'CharRenderingComponent_C_RemoveComponentFromDecalShadow::name' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.ReceiveSeqTick
// 0x0004 (0x0004 - 0x0000)
struct CharRenderingComponent_C_ReceiveSeqTick final
{
public:
	float                                         deltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_ReceiveSeqTick) == 0x000004, "Wrong alignment on CharRenderingComponent_C_ReceiveSeqTick");
static_assert(sizeof(CharRenderingComponent_C_ReceiveSeqTick) == 0x000004, "Wrong size on CharRenderingComponent_C_ReceiveSeqTick");
static_assert(offsetof(CharRenderingComponent_C_ReceiveSeqTick, deltaSeconds) == 0x000000, "Member 'CharRenderingComponent_C_ReceiveSeqTick::deltaSeconds' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetLogicOwner
// 0x0008 (0x0008 - 0x0000)
struct CharRenderingComponent_C_SetLogicOwner final
{
public:
	class AActor*                                 owner;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetLogicOwner) == 0x000008, "Wrong alignment on CharRenderingComponent_C_SetLogicOwner");
static_assert(sizeof(CharRenderingComponent_C_SetLogicOwner) == 0x000008, "Wrong size on CharRenderingComponent_C_SetLogicOwner");
static_assert(offsetof(CharRenderingComponent_C_SetLogicOwner, owner) == 0x000000, "Member 'CharRenderingComponent_C_SetLogicOwner::owner' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.GetTimeDilation
// 0x0004 (0x0004 - 0x0000)
struct CharRenderingComponent_C_GetTimeDilation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_GetTimeDilation) == 0x000004, "Wrong alignment on CharRenderingComponent_C_GetTimeDilation");
static_assert(sizeof(CharRenderingComponent_C_GetTimeDilation) == 0x000004, "Wrong size on CharRenderingComponent_C_GetTimeDilation");
static_assert(offsetof(CharRenderingComponent_C_GetTimeDilation, ReturnValue) == 0x000000, "Member 'CharRenderingComponent_C_GetTimeDilation::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetRealtimeShadowEnabled
// 0x0001 (0x0001 - 0x0000)
struct CharRenderingComponent_C_SetRealtimeShadowEnabled final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharRenderingComponent_C_SetRealtimeShadowEnabled) == 0x000001, "Wrong alignment on CharRenderingComponent_C_SetRealtimeShadowEnabled");
static_assert(sizeof(CharRenderingComponent_C_SetRealtimeShadowEnabled) == 0x000001, "Wrong size on CharRenderingComponent_C_SetRealtimeShadowEnabled");
static_assert(offsetof(CharRenderingComponent_C_SetRealtimeShadowEnabled, enable) == 0x000000, "Member 'CharRenderingComponent_C_SetRealtimeShadowEnabled::enable' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetDecalShadowOpacity
// 0x0004 (0x0004 - 0x0000)
struct CharRenderingComponent_C_SetDecalShadowOpacity final
{
public:
	float                                         opacity;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetDecalShadowOpacity) == 0x000004, "Wrong alignment on CharRenderingComponent_C_SetDecalShadowOpacity");
static_assert(sizeof(CharRenderingComponent_C_SetDecalShadowOpacity) == 0x000004, "Wrong size on CharRenderingComponent_C_SetDecalShadowOpacity");
static_assert(offsetof(CharRenderingComponent_C_SetDecalShadowOpacity, opacity) == 0x000000, "Member 'CharRenderingComponent_C_SetDecalShadowOpacity::opacity' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetRealtimeShadowOpacity
// 0x0004 (0x0004 - 0x0000)
struct CharRenderingComponent_C_SetRealtimeShadowOpacity final
{
public:
	float                                         opacity;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetRealtimeShadowOpacity) == 0x000004, "Wrong alignment on CharRenderingComponent_C_SetRealtimeShadowOpacity");
static_assert(sizeof(CharRenderingComponent_C_SetRealtimeShadowOpacity) == 0x000004, "Wrong size on CharRenderingComponent_C_SetRealtimeShadowOpacity");
static_assert(offsetof(CharRenderingComponent_C_SetRealtimeShadowOpacity, opacity) == 0x000000, "Member 'CharRenderingComponent_C_SetRealtimeShadowOpacity::opacity' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetDisableFightDither
// 0x0001 (0x0001 - 0x0000)
struct CharRenderingComponent_C_SetDisableFightDither final
{
public:
	bool                                          disable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharRenderingComponent_C_SetDisableFightDither) == 0x000001, "Wrong alignment on CharRenderingComponent_C_SetDisableFightDither");
static_assert(sizeof(CharRenderingComponent_C_SetDisableFightDither) == 0x000001, "Wrong size on CharRenderingComponent_C_SetDisableFightDither");
static_assert(offsetof(CharRenderingComponent_C_SetDisableFightDither, disable) == 0x000000, "Member 'CharRenderingComponent_C_SetDisableFightDither::disable' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.AddComponentInnerV2
// 0x0020 (0x0020 - 0x0000)
struct CharRenderingComponent_C_AddComponentInnerV2 final
{
public:
	class FString                                 skelName1;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UMeshComponent*                         skeletalComp1;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          useEmptyMaterial;                                  // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharRenderingComponent_C_AddComponentInnerV2) == 0x000008, "Wrong alignment on CharRenderingComponent_C_AddComponentInnerV2");
static_assert(sizeof(CharRenderingComponent_C_AddComponentInnerV2) == 0x000020, "Wrong size on CharRenderingComponent_C_AddComponentInnerV2");
static_assert(offsetof(CharRenderingComponent_C_AddComponentInnerV2, skelName1) == 0x000000, "Member 'CharRenderingComponent_C_AddComponentInnerV2::skelName1' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddComponentInnerV2, skeletalComp1) == 0x000010, "Member 'CharRenderingComponent_C_AddComponentInnerV2::skeletalComp1' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddComponentInnerV2, useEmptyMaterial) == 0x000018, "Member 'CharRenderingComponent_C_AddComponentInnerV2::useEmptyMaterial' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.RemoveComponentInnerV2
// 0x0010 (0x0010 - 0x0000)
struct CharRenderingComponent_C_RemoveComponentInnerV2 final
{
public:
	class FString                                 skelName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_RemoveComponentInnerV2) == 0x000008, "Wrong alignment on CharRenderingComponent_C_RemoveComponentInnerV2");
static_assert(sizeof(CharRenderingComponent_C_RemoveComponentInnerV2) == 0x000010, "Wrong size on CharRenderingComponent_C_RemoveComponentInnerV2");
static_assert(offsetof(CharRenderingComponent_C_RemoveComponentInnerV2, skelName) == 0x000000, "Member 'CharRenderingComponent_C_RemoveComponentInnerV2::skelName' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetEffectPause
// 0x0008 (0x0008 - 0x0000)
struct CharRenderingComponent_C_SetEffectPause final
{
public:
	int32                                         handle;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          paused;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharRenderingComponent_C_SetEffectPause) == 0x000004, "Wrong alignment on CharRenderingComponent_C_SetEffectPause");
static_assert(sizeof(CharRenderingComponent_C_SetEffectPause) == 0x000008, "Wrong size on CharRenderingComponent_C_SetEffectPause");
static_assert(offsetof(CharRenderingComponent_C_SetEffectPause, handle) == 0x000000, "Member 'CharRenderingComponent_C_SetEffectPause::handle' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetEffectPause, paused) == 0x000004, "Member 'CharRenderingComponent_C_SetEffectPause::paused' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.QuickInitAndAddData
// 0x0018 (0x0018 - 0x0000)
struct CharRenderingComponent_C_QuickInitAndAddData final
{
public:
	class UObject*                                data;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASkeletalMeshActor*                     meshActor;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_QuickInitAndAddData) == 0x000008, "Wrong alignment on CharRenderingComponent_C_QuickInitAndAddData");
static_assert(sizeof(CharRenderingComponent_C_QuickInitAndAddData) == 0x000018, "Wrong size on CharRenderingComponent_C_QuickInitAndAddData");
static_assert(offsetof(CharRenderingComponent_C_QuickInitAndAddData, data) == 0x000000, "Member 'CharRenderingComponent_C_QuickInitAndAddData::data' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_QuickInitAndAddData, meshActor) == 0x000008, "Member 'CharRenderingComponent_C_QuickInitAndAddData::meshActor' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_QuickInitAndAddData, ReturnValue) == 0x000010, "Member 'CharRenderingComponent_C_QuickInitAndAddData::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.GetSkeletalMeshComponent
// 0x0018 (0x0018 - 0x0000)
struct CharRenderingComponent_C_GetSkeletalMeshComponent final
{
public:
	class FString                                 skelName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_GetSkeletalMeshComponent) == 0x000008, "Wrong alignment on CharRenderingComponent_C_GetSkeletalMeshComponent");
static_assert(sizeof(CharRenderingComponent_C_GetSkeletalMeshComponent) == 0x000018, "Wrong size on CharRenderingComponent_C_GetSkeletalMeshComponent");
static_assert(offsetof(CharRenderingComponent_C_GetSkeletalMeshComponent, skelName) == 0x000000, "Member 'CharRenderingComponent_C_GetSkeletalMeshComponent::skelName' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_GetSkeletalMeshComponent, ReturnValue) == 0x000010, "Member 'CharRenderingComponent_C_GetSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.AddComponentWithEmptyMaterial
// 0x0018 (0x0018 - 0x0000)
struct CharRenderingComponent_C_AddComponentWithEmptyMaterial final
{
public:
	class FString                                 skelName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UMeshComponent*                         skeletalComp;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_AddComponentWithEmptyMaterial) == 0x000008, "Wrong alignment on CharRenderingComponent_C_AddComponentWithEmptyMaterial");
static_assert(sizeof(CharRenderingComponent_C_AddComponentWithEmptyMaterial) == 0x000018, "Wrong size on CharRenderingComponent_C_AddComponentWithEmptyMaterial");
static_assert(offsetof(CharRenderingComponent_C_AddComponentWithEmptyMaterial, skelName) == 0x000000, "Member 'CharRenderingComponent_C_AddComponentWithEmptyMaterial::skelName' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddComponentWithEmptyMaterial, skeletalComp) == 0x000010, "Member 'CharRenderingComponent_C_AddComponentWithEmptyMaterial::skeletalComp' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetStarScarEnergy
// 0x0004 (0x0004 - 0x0000)
struct CharRenderingComponent_C_SetStarScarEnergy final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetStarScarEnergy) == 0x000004, "Wrong alignment on CharRenderingComponent_C_SetStarScarEnergy");
static_assert(sizeof(CharRenderingComponent_C_SetStarScarEnergy) == 0x000004, "Wrong size on CharRenderingComponent_C_SetStarScarEnergy");
static_assert(offsetof(CharRenderingComponent_C_SetStarScarEnergy, value) == 0x000000, "Member 'CharRenderingComponent_C_SetStarScarEnergy::value' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.AddMaterialControllerDataWithAnimObject
// 0x0020 (0x0020 - 0x0000)
struct CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject final
{
public:
	class UObject*                                data1;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 animObject;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                userData;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject) == 0x000008, "Wrong alignment on CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject");
static_assert(sizeof(CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject) == 0x000020, "Wrong size on CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject");
static_assert(offsetof(CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject, data1) == 0x000000, "Member 'CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject::data1' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject, animObject) == 0x000008, "Member 'CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject::animObject' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject, userData) == 0x000010, "Member 'CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject::userData' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject, ReturnValue) == 0x000018, "Member 'CharRenderingComponent_C_AddMaterialControllerDataWithAnimObject::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.AddMaterialControllerDataGroupWithAnimObject
// 0x0018 (0x0018 - 0x0000)
struct CharRenderingComponent_C_AddMaterialControllerDataGroupWithAnimObject final
{
public:
	class UObject*                                data1;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 animObject;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_AddMaterialControllerDataGroupWithAnimObject) == 0x000008, "Wrong alignment on CharRenderingComponent_C_AddMaterialControllerDataGroupWithAnimObject");
static_assert(sizeof(CharRenderingComponent_C_AddMaterialControllerDataGroupWithAnimObject) == 0x000018, "Wrong size on CharRenderingComponent_C_AddMaterialControllerDataGroupWithAnimObject");
static_assert(offsetof(CharRenderingComponent_C_AddMaterialControllerDataGroupWithAnimObject, data1) == 0x000000, "Member 'CharRenderingComponent_C_AddMaterialControllerDataGroupWithAnimObject::data1' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddMaterialControllerDataGroupWithAnimObject, animObject) == 0x000008, "Member 'CharRenderingComponent_C_AddMaterialControllerDataGroupWithAnimObject::animObject' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_AddMaterialControllerDataGroupWithAnimObject, ReturnValue) == 0x000010, "Member 'CharRenderingComponent_C_AddMaterialControllerDataGroupWithAnimObject::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.ShouldTickAfterGoDown
// 0x0001 (0x0001 - 0x0000)
struct CharRenderingComponent_C_ShouldTickAfterGoDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharRenderingComponent_C_ShouldTickAfterGoDown) == 0x000001, "Wrong alignment on CharRenderingComponent_C_ShouldTickAfterGoDown");
static_assert(sizeof(CharRenderingComponent_C_ShouldTickAfterGoDown) == 0x000001, "Wrong size on CharRenderingComponent_C_ShouldTickAfterGoDown");
static_assert(offsetof(CharRenderingComponent_C_ShouldTickAfterGoDown, ReturnValue) == 0x000000, "Member 'CharRenderingComponent_C_ShouldTickAfterGoDown::ReturnValue' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetMaterialPropertyFloatV2
// 0x0014 (0x0014 - 0x0000)
struct CharRenderingComponent_C_SetMaterialPropertyFloatV2 final
{
public:
	class FName                                   name;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         value;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroCharBodySpecifiedType                    bodyType;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroCharSlotSpecifiedType                    slotType;                                          // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroCharMeshPart                             meshPart;                                          // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetMaterialPropertyFloatV2) == 0x000004, "Wrong alignment on CharRenderingComponent_C_SetMaterialPropertyFloatV2");
static_assert(sizeof(CharRenderingComponent_C_SetMaterialPropertyFloatV2) == 0x000014, "Wrong size on CharRenderingComponent_C_SetMaterialPropertyFloatV2");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyFloatV2, name) == 0x000000, "Member 'CharRenderingComponent_C_SetMaterialPropertyFloatV2::name' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyFloatV2, value) == 0x00000C, "Member 'CharRenderingComponent_C_SetMaterialPropertyFloatV2::value' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyFloatV2, bodyType) == 0x000010, "Member 'CharRenderingComponent_C_SetMaterialPropertyFloatV2::bodyType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyFloatV2, slotType) == 0x000011, "Member 'CharRenderingComponent_C_SetMaterialPropertyFloatV2::slotType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyFloatV2, meshPart) == 0x000012, "Member 'CharRenderingComponent_C_SetMaterialPropertyFloatV2::meshPart' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetMaterialPropertyColorV2
// 0x0020 (0x0020 - 0x0000)
struct CharRenderingComponent_C_SetMaterialPropertyColorV2 final
{
public:
	class FName                                   name;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           value;                                             // 0x000C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroCharBodySpecifiedType                    bodyType;                                          // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroCharSlotSpecifiedType                    slotType;                                          // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroCharMeshPart                             meshPart;                                          // 0x001E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetMaterialPropertyColorV2) == 0x000004, "Wrong alignment on CharRenderingComponent_C_SetMaterialPropertyColorV2");
static_assert(sizeof(CharRenderingComponent_C_SetMaterialPropertyColorV2) == 0x000020, "Wrong size on CharRenderingComponent_C_SetMaterialPropertyColorV2");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyColorV2, name) == 0x000000, "Member 'CharRenderingComponent_C_SetMaterialPropertyColorV2::name' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyColorV2, value) == 0x00000C, "Member 'CharRenderingComponent_C_SetMaterialPropertyColorV2::value' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyColorV2, bodyType) == 0x00001C, "Member 'CharRenderingComponent_C_SetMaterialPropertyColorV2::bodyType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyColorV2, slotType) == 0x00001D, "Member 'CharRenderingComponent_C_SetMaterialPropertyColorV2::slotType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialPropertyColorV2, meshPart) == 0x00001E, "Member 'CharRenderingComponent_C_SetMaterialPropertyColorV2::meshPart' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.SetMaterialReplaceV2
// 0x0010 (0x0010 - 0x0000)
struct CharRenderingComponent_C_SetMaterialReplaceV2 final
{
public:
	class UMaterialInterface*                     material;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroCharBodySpecifiedType                    bodyType;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroCharSlotSpecifiedType                    slotType;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroCharMeshPart                             meshPart;                                          // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_SetMaterialReplaceV2) == 0x000008, "Wrong alignment on CharRenderingComponent_C_SetMaterialReplaceV2");
static_assert(sizeof(CharRenderingComponent_C_SetMaterialReplaceV2) == 0x000010, "Wrong size on CharRenderingComponent_C_SetMaterialReplaceV2");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialReplaceV2, material) == 0x000000, "Member 'CharRenderingComponent_C_SetMaterialReplaceV2::material' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialReplaceV2, bodyType) == 0x000008, "Member 'CharRenderingComponent_C_SetMaterialReplaceV2::bodyType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialReplaceV2, slotType) == 0x000009, "Member 'CharRenderingComponent_C_SetMaterialReplaceV2::slotType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_SetMaterialReplaceV2, meshPart) == 0x00000A, "Member 'CharRenderingComponent_C_SetMaterialReplaceV2::meshPart' has a wrong offset!");

// Function CharRenderingComponent.CharRenderingComponent_C.RemoveExternalMaterialReplaceV2
// 0x0003 (0x0003 - 0x0000)
struct CharRenderingComponent_C_RemoveExternalMaterialReplaceV2 final
{
public:
	EKuroCharBodySpecifiedType                    bodyType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroCharSlotSpecifiedType                    slotType;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroCharMeshPart                             meshPart;                                          // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharRenderingComponent_C_RemoveExternalMaterialReplaceV2) == 0x000001, "Wrong alignment on CharRenderingComponent_C_RemoveExternalMaterialReplaceV2");
static_assert(sizeof(CharRenderingComponent_C_RemoveExternalMaterialReplaceV2) == 0x000003, "Wrong size on CharRenderingComponent_C_RemoveExternalMaterialReplaceV2");
static_assert(offsetof(CharRenderingComponent_C_RemoveExternalMaterialReplaceV2, bodyType) == 0x000000, "Member 'CharRenderingComponent_C_RemoveExternalMaterialReplaceV2::bodyType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_RemoveExternalMaterialReplaceV2, slotType) == 0x000001, "Member 'CharRenderingComponent_C_RemoveExternalMaterialReplaceV2::slotType' has a wrong offset!");
static_assert(offsetof(CharRenderingComponent_C_RemoveExternalMaterialReplaceV2, meshPart) == 0x000002, "Member 'CharRenderingComponent_C_RemoveExternalMaterialReplaceV2::meshPart' has a wrong offset!");

}

