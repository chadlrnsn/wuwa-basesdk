#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_Fight

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "KuroGAS_structs.hpp"
#include "SGEData_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPL_Fight.BPL_Fight_C.添加标签
// 0x0020 (0x0020 - 0x0000)
struct BPL_Fight_C_添加标签 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           标签;                                              // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_添加标签) == 0x000008, "Wrong alignment on BPL_Fight_C_添加标签");
static_assert(sizeof(BPL_Fight_C_添加标签) == 0x000020, "Wrong size on BPL_Fight_C_添加标签");
static_assert(offsetof(BPL_Fight_C_添加标签, 角色) == 0x000000, "Member 'BPL_Fight_C_添加标签::角色' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_添加标签, 标签) == 0x000008, "Member 'BPL_Fight_C_添加标签::标签' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_添加标签, __WorldContext) == 0x000018, "Member 'BPL_Fight_C_添加标签::__WorldContext' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.清除标签
// 0x0020 (0x0020 - 0x0000)
struct BPL_Fight_C_清除标签 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           标签;                                              // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_清除标签) == 0x000008, "Wrong alignment on BPL_Fight_C_清除标签");
static_assert(sizeof(BPL_Fight_C_清除标签) == 0x000020, "Wrong size on BPL_Fight_C_清除标签");
static_assert(offsetof(BPL_Fight_C_清除标签, 角色) == 0x000000, "Member 'BPL_Fight_C_清除标签::角色' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_清除标签, 标签) == 0x000008, "Member 'BPL_Fight_C_清除标签::标签' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_清除标签, __WorldContext) == 0x000018, "Member 'BPL_Fight_C_清除标签::__WorldContext' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.是否有标签
// 0x0040 (0x0040 - 0x0000)
struct BPL_Fight_C_是否有标签 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           标签;                                              // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Fight_C_是否有标签) == 0x000008, "Wrong alignment on BPL_Fight_C_是否有标签");
static_assert(sizeof(BPL_Fight_C_是否有标签) == 0x000040, "Wrong size on BPL_Fight_C_是否有标签");
static_assert(offsetof(BPL_Fight_C_是否有标签, 角色) == 0x000000, "Member 'BPL_Fight_C_是否有标签::角色' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_是否有标签, 标签) == 0x000008, "Member 'BPL_Fight_C_是否有标签::标签' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_是否有标签, __WorldContext) == 0x000018, "Member 'BPL_Fight_C_是否有标签::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_是否有标签, ReturnValue) == 0x000020, "Member 'BPL_Fight_C_是否有标签::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_是否有标签, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BPL_Fight_C_是否有标签::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_是否有标签, CallFunc_IsValid_ReturnValue_1) == 0x000022, "Member 'BPL_Fight_C_是否有标签::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_是否有标签, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000028, "Member 'BPL_Fight_C_是否有标签::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_是否有标签, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000038, "Member 'BPL_Fight_C_是否有标签::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.获取游戏实例
// 0x0028 (0x0028 - 0x0000)
struct BPL_Fight_C_获取游戏实例 final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MainGameInstance_C*                 AsBP_Main_Game_Instance;                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MainGameInstance_C*                 K2Node_DynamicCast_AsBP_Main_Game_Instance;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Fight_C_获取游戏实例) == 0x000008, "Wrong alignment on BPL_Fight_C_获取游戏实例");
static_assert(sizeof(BPL_Fight_C_获取游戏实例) == 0x000028, "Wrong size on BPL_Fight_C_获取游戏实例");
static_assert(offsetof(BPL_Fight_C_获取游戏实例, __WorldContext) == 0x000000, "Member 'BPL_Fight_C_获取游戏实例::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取游戏实例, AsBP_Main_Game_Instance) == 0x000008, "Member 'BPL_Fight_C_获取游戏实例::AsBP_Main_Game_Instance' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取游戏实例, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'BPL_Fight_C_获取游戏实例::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取游戏实例, K2Node_DynamicCast_AsBP_Main_Game_Instance) == 0x000018, "Member 'BPL_Fight_C_获取游戏实例::K2Node_DynamicCast_AsBP_Main_Game_Instance' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取游戏实例, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPL_Fight_C_获取游戏实例::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.获取Actor周围坐标点
// 0x00C0 (0x00C0 - 0x0000)
struct BPL_Fight_C_获取Actor周围坐标点 final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         旋转;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         仰角;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         长度;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          坐标点;                                            // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue;        // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_Conv_VectorToVectorDouble_ReturnValue;    // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Add_VectorVector_ReturnValue;           // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_获取Actor周围坐标点) == 0x000008, "Wrong alignment on BPL_Fight_C_获取Actor周围坐标点");
static_assert(sizeof(BPL_Fight_C_获取Actor周围坐标点) == 0x0000C0, "Wrong size on BPL_Fight_C_获取Actor周围坐标点");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, Actor) == 0x000000, "Member 'BPL_Fight_C_获取Actor周围坐标点::Actor' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, 旋转) == 0x000008, "Member 'BPL_Fight_C_获取Actor周围坐标点::旋转' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, 仰角) == 0x00000C, "Member 'BPL_Fight_C_获取Actor周围坐标点::仰角' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, 长度) == 0x000010, "Member 'BPL_Fight_C_获取Actor周围坐标点::长度' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, __WorldContext) == 0x000018, "Member 'BPL_Fight_C_获取Actor周围坐标点::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, 坐标点) == 0x000020, "Member 'BPL_Fight_C_获取Actor周围坐标点::坐标点' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, CallFunc_D_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'BPL_Fight_C_获取Actor周围坐标点::CallFunc_D_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000050, "Member 'BPL_Fight_C_获取Actor周围坐标点::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, CallFunc_MakeVector_ReturnValue) == 0x00005C, "Member 'BPL_Fight_C_获取Actor周围坐标点::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, CallFunc_RotateAngleAxis_ReturnValue) == 0x000068, "Member 'BPL_Fight_C_获取Actor周围坐标点::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x000074, "Member 'BPL_Fight_C_获取Actor周围坐标点::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000080, "Member 'BPL_Fight_C_获取Actor周围坐标点::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, CallFunc_Conv_VectorToVectorDouble_ReturnValue) == 0x000090, "Member 'BPL_Fight_C_获取Actor周围坐标点::CallFunc_Conv_VectorToVectorDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取Actor周围坐标点, CallFunc_D_Add_VectorVector_ReturnValue) == 0x0000A8, "Member 'BPL_Fight_C_获取Actor周围坐标点::CallFunc_D_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.射线检测
// 0x01A8 (0x01A8 - 0x0000)
struct BPL_Fight_C_射线检测 final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          Start;                                             // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          End;                                               // 0x0020(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTraceComplex;                                     // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreSelf;                                       // 0x003B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           TraceColor;                                        // 0x003C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x004C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DrawTime;                                          // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0068(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00FC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ___object_Variable;                                // 0x0100(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_D_LineTraceSingle_OutHit;                 // 0x0110(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_D_LineTraceSingle_ReturnValue;            // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Fight_C_射线检测) == 0x000008, "Wrong alignment on BPL_Fight_C_射线检测");
static_assert(sizeof(BPL_Fight_C_射线检测) == 0x0001A8, "Wrong size on BPL_Fight_C_射线检测");
static_assert(offsetof(BPL_Fight_C_射线检测, Context) == 0x000000, "Member 'BPL_Fight_C_射线检测::Context' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, Start) == 0x000008, "Member 'BPL_Fight_C_射线检测::Start' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, End) == 0x000020, "Member 'BPL_Fight_C_射线检测::End' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, TraceChannel) == 0x000038, "Member 'BPL_Fight_C_射线检测::TraceChannel' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, bTraceComplex) == 0x000039, "Member 'BPL_Fight_C_射线检测::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, DrawDebugType) == 0x00003A, "Member 'BPL_Fight_C_射线检测::DrawDebugType' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, bIgnoreSelf) == 0x00003B, "Member 'BPL_Fight_C_射线检测::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, TraceColor) == 0x00003C, "Member 'BPL_Fight_C_射线检测::TraceColor' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, TraceHitColor) == 0x00004C, "Member 'BPL_Fight_C_射线检测::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, DrawTime) == 0x00005C, "Member 'BPL_Fight_C_射线检测::DrawTime' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, __WorldContext) == 0x000060, "Member 'BPL_Fight_C_射线检测::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, OutHit) == 0x000068, "Member 'BPL_Fight_C_射线检测::OutHit' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, ReturnValue) == 0x0000FC, "Member 'BPL_Fight_C_射线检测::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, ___object_Variable) == 0x000100, "Member 'BPL_Fight_C_射线检测::___object_Variable' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, CallFunc_D_LineTraceSingle_OutHit) == 0x000110, "Member 'BPL_Fight_C_射线检测::CallFunc_D_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_射线检测, CallFunc_D_LineTraceSingle_ReturnValue) == 0x0001A4, "Member 'BPL_Fight_C_射线检测::CallFunc_D_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.角度转化
// 0x0028 (0x0028 - 0x0000)
struct BPL_Fight_C_角度转化 final
{
public:
	float                                         Input;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Output;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tmp;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Fight_C_角度转化) == 0x000008, "Wrong alignment on BPL_Fight_C_角度转化");
static_assert(sizeof(BPL_Fight_C_角度转化) == 0x000028, "Wrong size on BPL_Fight_C_角度转化");
static_assert(offsetof(BPL_Fight_C_角度转化, Input) == 0x000000, "Member 'BPL_Fight_C_角度转化::Input' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_角度转化, __WorldContext) == 0x000008, "Member 'BPL_Fight_C_角度转化::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_角度转化, Output) == 0x000010, "Member 'BPL_Fight_C_角度转化::Output' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_角度转化, Tmp) == 0x000014, "Member 'BPL_Fight_C_角度转化::Tmp' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_角度转化, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'BPL_Fight_C_角度转化::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_角度转化, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00001C, "Member 'BPL_Fight_C_角度转化::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_角度转化, CallFunc_Less_FloatFloat_ReturnValue) == 0x000020, "Member 'BPL_Fight_C_角度转化::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_角度转化, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000021, "Member 'BPL_Fight_C_角度转化::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.计算曲线值
// 0x0030 (0x0030 - 0x0000)
struct BPL_Fight_C_计算曲线值 final
{
public:
	float                                         已经过时间;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         总时间;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            曲线;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         百分比;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_计算曲线值) == 0x000008, "Wrong alignment on BPL_Fight_C_计算曲线值");
static_assert(sizeof(BPL_Fight_C_计算曲线值) == 0x000030, "Wrong size on BPL_Fight_C_计算曲线值");
static_assert(offsetof(BPL_Fight_C_计算曲线值, 已经过时间) == 0x000000, "Member 'BPL_Fight_C_计算曲线值::已经过时间' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算曲线值, 总时间) == 0x000004, "Member 'BPL_Fight_C_计算曲线值::总时间' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算曲线值, 曲线) == 0x000008, "Member 'BPL_Fight_C_计算曲线值::曲线' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算曲线值, __WorldContext) == 0x000010, "Member 'BPL_Fight_C_计算曲线值::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算曲线值, 百分比) == 0x000018, "Member 'BPL_Fight_C_计算曲线值::百分比' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算曲线值, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'BPL_Fight_C_计算曲线值::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算曲线值, CallFunc_GetTimeRange_MinTime) == 0x000020, "Member 'BPL_Fight_C_计算曲线值::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算曲线值, CallFunc_GetTimeRange_MaxTime) == 0x000024, "Member 'BPL_Fight_C_计算曲线值::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算曲线值, CallFunc_MapRangeClamped_ReturnValue) == 0x000028, "Member 'BPL_Fight_C_计算曲线值::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算曲线值, CallFunc_GetFloatValue_ReturnValue) == 0x00002C, "Member 'BPL_Fight_C_计算曲线值::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.计算向量曲线值
// 0x0040 (0x0040 - 0x0000)
struct BPL_Fight_C_计算向量曲线值 final
{
public:
	float                                         已经经过时间;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         总时间;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           向量曲线;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                向量值;                                            // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_计算向量曲线值) == 0x000008, "Wrong alignment on BPL_Fight_C_计算向量曲线值");
static_assert(sizeof(BPL_Fight_C_计算向量曲线值) == 0x000040, "Wrong size on BPL_Fight_C_计算向量曲线值");
static_assert(offsetof(BPL_Fight_C_计算向量曲线值, 已经经过时间) == 0x000000, "Member 'BPL_Fight_C_计算向量曲线值::已经经过时间' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算向量曲线值, 总时间) == 0x000004, "Member 'BPL_Fight_C_计算向量曲线值::总时间' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算向量曲线值, 向量曲线) == 0x000008, "Member 'BPL_Fight_C_计算向量曲线值::向量曲线' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算向量曲线值, __WorldContext) == 0x000010, "Member 'BPL_Fight_C_计算向量曲线值::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算向量曲线值, 向量值) == 0x000018, "Member 'BPL_Fight_C_计算向量曲线值::向量值' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算向量曲线值, CallFunc_GetTimeRange_MinTime) == 0x000024, "Member 'BPL_Fight_C_计算向量曲线值::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算向量曲线值, CallFunc_GetTimeRange_MaxTime) == 0x000028, "Member 'BPL_Fight_C_计算向量曲线值::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算向量曲线值, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00002C, "Member 'BPL_Fight_C_计算向量曲线值::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算向量曲线值, CallFunc_MapRangeClamped_ReturnValue) == 0x000030, "Member 'BPL_Fight_C_计算向量曲线值::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_计算向量曲线值, CallFunc_GetVectorValue_ReturnValue) == 0x000034, "Member 'BPL_Fight_C_计算向量曲线值::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.获取目标周围坐标点
// 0x00C0 (0x00C0 - 0x0000)
struct BPL_Fight_C_获取目标周围坐标点 final
{
public:
	struct FRotator                               目标旋转;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          目标坐标;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         旋转;                                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         仰角;                                              // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         长度;                                              // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          坐标点;                                            // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         旋转1;                                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         长度2;                                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_Conv_VectorToVectorDouble_ReturnValue;    // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Add_VectorVector_ReturnValue;           // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_获取目标周围坐标点) == 0x000008, "Wrong alignment on BPL_Fight_C_获取目标周围坐标点");
static_assert(sizeof(BPL_Fight_C_获取目标周围坐标点) == 0x0000C0, "Wrong size on BPL_Fight_C_获取目标周围坐标点");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, 目标旋转) == 0x000000, "Member 'BPL_Fight_C_获取目标周围坐标点::目标旋转' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, 目标坐标) == 0x000010, "Member 'BPL_Fight_C_获取目标周围坐标点::目标坐标' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, 旋转) == 0x000028, "Member 'BPL_Fight_C_获取目标周围坐标点::旋转' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, 仰角) == 0x00002C, "Member 'BPL_Fight_C_获取目标周围坐标点::仰角' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, 长度) == 0x000030, "Member 'BPL_Fight_C_获取目标周围坐标点::长度' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, __WorldContext) == 0x000038, "Member 'BPL_Fight_C_获取目标周围坐标点::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, 坐标点) == 0x000040, "Member 'BPL_Fight_C_获取目标周围坐标点::坐标点' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, 旋转1) == 0x000058, "Member 'BPL_Fight_C_获取目标周围坐标点::旋转1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, 长度2) == 0x00005C, "Member 'BPL_Fight_C_获取目标周围坐标点::长度2' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'BPL_Fight_C_获取目标周围坐标点::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, CallFunc_RotateAngleAxis_ReturnValue) == 0x00006C, "Member 'BPL_Fight_C_获取目标周围坐标点::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x000078, "Member 'BPL_Fight_C_获取目标周围坐标点::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000084, "Member 'BPL_Fight_C_获取目标周围坐标点::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, CallFunc_Conv_VectorToVectorDouble_ReturnValue) == 0x000090, "Member 'BPL_Fight_C_获取目标周围坐标点::CallFunc_Conv_VectorToVectorDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_获取目标周围坐标点, CallFunc_D_Add_VectorVector_ReturnValue) == 0x0000A8, "Member 'BPL_Fight_C_获取目标周围坐标点::CallFunc_D_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.设置材质效果
// 0x0020 (0x0020 - 0x0000)
struct BPL_Fight_C_设置材质效果 final
{
public:
	class ATsBaseCharacter_C*                     设置对象;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPD_CharacterControllerData_C*          材质配置;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Handle;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddMaterialControllerData_ReturnValue;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_设置材质效果) == 0x000008, "Wrong alignment on BPL_Fight_C_设置材质效果");
static_assert(sizeof(BPL_Fight_C_设置材质效果) == 0x000020, "Wrong size on BPL_Fight_C_设置材质效果");
static_assert(offsetof(BPL_Fight_C_设置材质效果, 设置对象) == 0x000000, "Member 'BPL_Fight_C_设置材质效果::设置对象' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_设置材质效果, 材质配置) == 0x000008, "Member 'BPL_Fight_C_设置材质效果::材质配置' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_设置材质效果, __WorldContext) == 0x000010, "Member 'BPL_Fight_C_设置材质效果::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_设置材质效果, Handle) == 0x000018, "Member 'BPL_Fight_C_设置材质效果::Handle' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_设置材质效果, CallFunc_AddMaterialControllerData_ReturnValue) == 0x00001C, "Member 'BPL_Fight_C_设置材质效果::CallFunc_AddMaterialControllerData_ReturnValue' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.删除材质效果
// 0x0018 (0x0018 - 0x0000)
struct BPL_Fight_C_删除材质效果 final
{
public:
	class ATsBaseCharacter_C*                     设置对象_;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Handle_;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_删除材质效果) == 0x000008, "Wrong alignment on BPL_Fight_C_删除材质效果");
static_assert(sizeof(BPL_Fight_C_删除材质效果) == 0x000018, "Wrong size on BPL_Fight_C_删除材质效果");
static_assert(offsetof(BPL_Fight_C_删除材质效果, 设置对象_) == 0x000000, "Member 'BPL_Fight_C_删除材质效果::设置对象_' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_删除材质效果, Handle_) == 0x000008, "Member 'BPL_Fight_C_删除材质效果::Handle_' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_删除材质效果, __WorldContext) == 0x000010, "Member 'BPL_Fight_C_删除材质效果::__WorldContext' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.反应伤害倍率计算
// 0x0040 (0x0040 - 0x0000)
struct BPL_Fight_C_反应伤害倍率计算 final
{
public:
	float                                         角色1反应精通;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         角色2反应精通;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DAMAGE_CONSTANT7_0;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DAMAGE_CONSTANT8_0;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DAMAGE_CONSTANT9_0;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_反应伤害倍率计算) == 0x000008, "Wrong alignment on BPL_Fight_C_反应伤害倍率计算");
static_assert(sizeof(BPL_Fight_C_反应伤害倍率计算) == 0x000040, "Wrong size on BPL_Fight_C_反应伤害倍率计算");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, 角色1反应精通) == 0x000000, "Member 'BPL_Fight_C_反应伤害倍率计算::角色1反应精通' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, 角色2反应精通) == 0x000004, "Member 'BPL_Fight_C_反应伤害倍率计算::角色2反应精通' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, __WorldContext) == 0x000008, "Member 'BPL_Fight_C_反应伤害倍率计算::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, Result) == 0x000010, "Member 'BPL_Fight_C_反应伤害倍率计算::Result' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, DAMAGE_CONSTANT7_0) == 0x000014, "Member 'BPL_Fight_C_反应伤害倍率计算::DAMAGE_CONSTANT7_0' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, DAMAGE_CONSTANT8_0) == 0x000018, "Member 'BPL_Fight_C_反应伤害倍率计算::DAMAGE_CONSTANT8_0' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, DAMAGE_CONSTANT9_0) == 0x00001C, "Member 'BPL_Fight_C_反应伤害倍率计算::DAMAGE_CONSTANT9_0' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'BPL_Fight_C_反应伤害倍率计算::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000024, "Member 'BPL_Fight_C_反应伤害倍率计算::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'BPL_Fight_C_反应伤害倍率计算::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00002C, "Member 'BPL_Fight_C_反应伤害倍率计算::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000030, "Member 'BPL_Fight_C_反应伤害倍率计算::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000034, "Member 'BPL_Fight_C_反应伤害倍率计算::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x000038, "Member 'BPL_Fight_C_反应伤害倍率计算::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_反应伤害倍率计算, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x00003C, "Member 'BPL_Fight_C_反应伤害倍率计算::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");

// Function BPL_Fight.BPL_Fight_C.使用GE
// 0x01D0 (0x01D0 - 0x0000)
struct BPL_Fight_C_使用GE final
{
public:
	class ATsBaseCharacter_C*                     使用者;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     目标;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GE的等级;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  添加AssetTags;                                     // 0x0018(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FGameplayTagContainer                  添加GrantedTags;                                   // 0x0038(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         层数;                                              // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE的类型;                                          // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKuroGameplayParameterContainer        GE的参数;                                          // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0080(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              OutgoingSpec;                                      // 0x0088(0x0010)(Edit, BlueprintVisible)
	struct FSGEData                               执行GE数据;                                        // 0x0098(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroGameplayParameter                 CallFunc_Array_Get_Item;                           // 0x00E4(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue; // 0x00F8(0x0010)()
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_1;  // 0x0118(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue;             // 0x0128(0x0010)()
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_2;  // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_3;  // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue_1;           // 0x0148(0x0010)()
	struct FGameplayEffectSpecHandle              CallFunc_SetDuration_ReturnValue;                  // 0x0158(0x0010)()
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable;                      // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_AddAssetTags_ReturnValue;                 // 0x0170(0x0010)()
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              CallFunc_AddGrantedTags_ReturnValue;               // 0x0188(0x0010)()
	struct FGameplayEffectSpecHandle              CallFunc_SetStackCount_ReturnValue;                // 0x0198(0x0010)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           CallFunc_GetEffectContext_ReturnValue;             // 0x01B0(0x0018)()
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectSpecToTarget_ReturnValue; // 0x01C8(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Fight_C_使用GE) == 0x000008, "Wrong alignment on BPL_Fight_C_使用GE");
static_assert(sizeof(BPL_Fight_C_使用GE) == 0x0001D0, "Wrong size on BPL_Fight_C_使用GE");
static_assert(offsetof(BPL_Fight_C_使用GE, 使用者) == 0x000000, "Member 'BPL_Fight_C_使用GE::使用者' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, 目标) == 0x000008, "Member 'BPL_Fight_C_使用GE::目标' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, GE的等级) == 0x000010, "Member 'BPL_Fight_C_使用GE::GE的等级' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, 添加AssetTags) == 0x000018, "Member 'BPL_Fight_C_使用GE::添加AssetTags' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, 添加GrantedTags) == 0x000038, "Member 'BPL_Fight_C_使用GE::添加GrantedTags' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, 层数) == 0x000058, "Member 'BPL_Fight_C_使用GE::层数' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, Duration) == 0x00005C, "Member 'BPL_Fight_C_使用GE::Duration' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, GE的类型) == 0x000060, "Member 'BPL_Fight_C_使用GE::GE的类型' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, GE的参数) == 0x000068, "Member 'BPL_Fight_C_使用GE::GE的参数' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, __WorldContext) == 0x000078, "Member 'BPL_Fight_C_使用GE::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, ActiveHandle) == 0x000080, "Member 'BPL_Fight_C_使用GE::ActiveHandle' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, OutgoingSpec) == 0x000088, "Member 'BPL_Fight_C_使用GE::OutgoingSpec' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, 执行GE数据) == 0x000098, "Member 'BPL_Fight_C_使用GE::执行GE数据' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, ___int_Array_Index_Variable) == 0x0000D8, "Member 'BPL_Fight_C_使用GE::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_IsValid_ReturnValue) == 0x0000DC, "Member 'BPL_Fight_C_使用GE::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_IsValid_ReturnValue_1) == 0x0000DD, "Member 'BPL_Fight_C_使用GE::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_Not_PreBool_ReturnValue) == 0x0000DE, "Member 'BPL_Fight_C_使用GE::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000DF, "Member 'BPL_Fight_C_使用GE::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_BooleanOR_ReturnValue) == 0x0000E0, "Member 'BPL_Fight_C_使用GE::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_Array_Get_Item) == 0x0000E4, "Member 'BPL_Fight_C_使用GE::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_Array_Length_ReturnValue) == 0x0000F4, "Member 'BPL_Fight_C_使用GE::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue) == 0x0000F8, "Member 'BPL_Fight_C_使用GE::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000108, "Member 'BPL_Fight_C_使用GE::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000110, "Member 'BPL_Fight_C_使用GE::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_GetAbilitySystemComponent_ReturnValue_1) == 0x000118, "Member 'BPL_Fight_C_使用GE::CallFunc_GetAbilitySystemComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000120, "Member 'BPL_Fight_C_使用GE::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_MakeOutgoingSpec_ReturnValue) == 0x000128, "Member 'BPL_Fight_C_使用GE::CallFunc_MakeOutgoingSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_GetAbilitySystemComponent_ReturnValue_2) == 0x000138, "Member 'BPL_Fight_C_使用GE::CallFunc_GetAbilitySystemComponent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_GetAbilitySystemComponent_ReturnValue_3) == 0x000140, "Member 'BPL_Fight_C_使用GE::CallFunc_GetAbilitySystemComponent_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_MakeOutgoingSpec_ReturnValue_1) == 0x000148, "Member 'BPL_Fight_C_使用GE::CallFunc_MakeOutgoingSpec_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_SetDuration_ReturnValue) == 0x000158, "Member 'BPL_Fight_C_使用GE::CallFunc_SetDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000168, "Member 'BPL_Fight_C_使用GE::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, ___int_Loop_Counter_Variable) == 0x00016C, "Member 'BPL_Fight_C_使用GE::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_AddAssetTags_ReturnValue) == 0x000170, "Member 'BPL_Fight_C_使用GE::CallFunc_AddAssetTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_Less_IntInt_ReturnValue) == 0x000180, "Member 'BPL_Fight_C_使用GE::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_AddGrantedTags_ReturnValue) == 0x000188, "Member 'BPL_Fight_C_使用GE::CallFunc_AddGrantedTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_SetStackCount_ReturnValue) == 0x000198, "Member 'BPL_Fight_C_使用GE::CallFunc_SetStackCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_Add_IntInt_ReturnValue) == 0x0001A8, "Member 'BPL_Fight_C_使用GE::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_GetEffectContext_ReturnValue) == 0x0001B0, "Member 'BPL_Fight_C_使用GE::CallFunc_GetEffectContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Fight_C_使用GE, CallFunc_BP_ApplyGameplayEffectSpecToTarget_ReturnValue) == 0x0001C8, "Member 'BPL_Fight_C_使用GE::CallFunc_BP_ApplyGameplayEffectSpecToTarget_ReturnValue' has a wrong offset!");

}

