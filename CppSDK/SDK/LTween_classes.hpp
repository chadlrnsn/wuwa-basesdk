#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LTween

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "LTween_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class LTween.LTweenActor
// 0x0058 (0x0308 - 0x02B0)
class ALTweenActor final : public AActor
{
public:
	TArray<class ULTweener*>                      tweenerList;                                       // 0x02B0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C0[0x38];                                     // 0x02C0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULTweener*>                      reserveTweenerList;                                // 0x02F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class ALTweenActor* GetLTweenInstance(class UObject* WorldContextObject);

	void CustomTick(float DeltaTime);
	void DisableTick();
	void EnableTick();
	void KillAllTweens(bool callComplete);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenActor">();
	}
	static class ALTweenActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALTweenActor>();
	}
};
static_assert(alignof(ALTweenActor) == 0x000008, "Wrong alignment on ALTweenActor");
static_assert(sizeof(ALTweenActor) == 0x000308, "Wrong size on ALTweenActor");
static_assert(offsetof(ALTweenActor, tweenerList) == 0x0002B0, "Member 'ALTweenActor::tweenerList' has a wrong offset!");
static_assert(offsetof(ALTweenActor, reserveTweenerList) == 0x0002F8, "Member 'ALTweenActor::reserveTweenerList' has a wrong offset!");

// Class LTween.LTweenBPLibrary
// 0x0000 (0x0030 - 0x0030)
class ULTweenBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ArrayKillIfIsTweening(class UObject* WorldContextObject, const TArray<class ULTweener*>& inTweenerArray, bool callComplete);
	static class ULTweener* ColorTo(class UObject* WorldContextObject, TDelegate<void(const struct FColor& value)> setter, const struct FColor& startValue, const struct FColor& endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* DelayCall(class UObject* WorldContextObject, float delayTime, TDelegate<void()> delayComplete);
	static class ULTweener* DelayFrameCall(class UObject* WorldContextObject, int32 frameCount, TDelegate<void()> delayComplete);
	static class ULTweener* FloatTo(class UObject* WorldContextObject, TDelegate<void(float value)> setter, float startValue, float endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* IntTo(class UObject* WorldContextObject, TDelegate<void(int32 value)> setter, int32 startValue, int32 endValue, float duration, float delay, ELTweenEase ease);
	static bool IsTweening(class UObject* WorldContextObject, class ULTweener* inTweener);
	static void KillIfIsTweening(class UObject* WorldContextObject, class ULTweener* inTweener, bool callComplete);
	static class ULTweener* LinearColorTo(class UObject* WorldContextObject, TDelegate<void(const struct FLinearColor& value)> setter, const struct FLinearColor& startValue, const struct FLinearColor& endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalPositionTo(class USceneComponent* target, const struct FVector& endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalPositionTo_Sweep(class USceneComponent* target, const struct FVector& endValue, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalPositionXTo(class USceneComponent* target, float endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalPositionXTo_Sweep(class USceneComponent* target, float endValue, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalPositionYTo(class USceneComponent* target, float endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalPositionYTo_Sweep(class USceneComponent* target, float endValue, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalPositionZTo(class USceneComponent* target, float endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalPositionZTo_Sweep(class USceneComponent* target, float endValue, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalRotateEulerAngleTo(class USceneComponent* target, const struct FVector& eulerAngle, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalRotateEulerAngleTo_Sweep(class USceneComponent* target, const struct FVector& eulerAngle, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalRotationQuaternionTo(class USceneComponent* target, const struct FQuat& endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalRotationQuaternionTo_Sweep(class USceneComponent* target, const struct FQuat& endValue, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalRotatorTo(class USceneComponent* target, const struct FRotator& endValue, bool shortestPath, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalRotatorTo_Sweep(class USceneComponent* target, const struct FRotator& endValue, bool shortestPath, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* LocalScaleTo(class USceneComponent* target, const struct FVector& endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* MaterialScalarParameterTo(class UMaterialInstanceDynamic* target, class FName parameterName, float endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* MaterialVectorParameterTo(class UMaterialInstanceDynamic* target, class FName parameterName, const struct FLinearColor& endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* MeshMaterialScalarParameterTo(class UMeshComponent* target, int32 materialIndex, class FName parameterName, float endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* MeshMaterialVectorParameterTo(class UMeshComponent* target, int32 materialIndex, class FName parameterName, const struct FLinearColor& endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* QuaternionTo(class UObject* WorldContextObject, TDelegate<void(const struct FQuat& value)> setter, const struct FQuat& startValue, const struct FQuat& endValue, float duration, float delay, ELTweenEase ease);
	static struct FLTweenDelegateHandleWrapper RegisterUpdateEvent(class UObject* WorldContextObject, const TDelegate<void(float InProgress)>& update);
	static class ULTweener* RotatorTo(class UObject* WorldContextObject, TDelegate<void(const struct FRotator& value)> setter, const struct FRotator& startValue, const struct FRotator& endValue, float duration, float delay, ELTweenEase ease);
	static void UnregisterUpdateEvent(class UObject* WorldContextObject, const struct FLTweenDelegateHandleWrapper& delegateHandle);
	static class ULTweener* Vector2To(class UObject* WorldContextObject, TDelegate<void(const struct FVector2D& value)> setter, const struct FVector2D& startValue, const struct FVector2D& endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* Vector3To(class UObject* WorldContextObject, TDelegate<void(const struct FVector& value)> setter, const struct FVector& startValue, const struct FVector& endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* Vector4To(class UObject* WorldContextObject, TDelegate<void(const struct FVector4& value)> setter, const struct FVector4& startValue, const struct FVector4& endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* VirtualCall(class UObject* WorldContextObject, float duration, float delay, TDelegate<void()> start, TDelegate<void(float InProgress)> update, TDelegate<void()> complete);
	static class ULTweener* WorldPositionTo(class USceneComponent* target, const struct FVector& endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldPositionTo_Sweep(class USceneComponent* target, const struct FVector& endValue, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldPositionXTo(class USceneComponent* target, float endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldPositionXTo_Sweep(class USceneComponent* target, float endValue, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldPositionYTo(class USceneComponent* target, float endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldPositionYTo_Sweep(class USceneComponent* target, float endValue, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldPositionZTo(class USceneComponent* target, float endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldPositionZTo_Sweep(class USceneComponent* target, float endValue, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldRotateEulerAngleTo(class USceneComponent* target, const struct FVector& eulerAngle, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldRotateEulerAngleTo_Sweep(class USceneComponent* target, const struct FVector& eulerAngle, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldRotationQuaternionTo(class USceneComponent* target, const struct FQuat& endValue, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldRotationQuaternionTo_Sweep(class USceneComponent* target, const struct FQuat& endValue, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldRotatorTo(class USceneComponent* target, const struct FRotator& endValue, bool shortestPath, float duration, float delay, ELTweenEase ease);
	static class ULTweener* WorldRotatorTo_Sweep(class USceneComponent* target, const struct FRotator& endValue, bool shortestPath, struct FHitResult* sweepHitResult, bool sweep, bool teleport, float duration, float delay, ELTweenEase ease);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenBPLibrary">();
	}
	static class ULTweenBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenBPLibrary>();
	}
};
static_assert(alignof(ULTweenBPLibrary) == 0x000008, "Wrong alignment on ULTweenBPLibrary");
static_assert(sizeof(ULTweenBPLibrary) == 0x000030, "Wrong size on ULTweenBPLibrary");

// Class LTween.LTweener
// 0x0108 (0x0138 - 0x0030)
class ULTweener : public UObject
{
public:
	uint8                                         Pad_30[0x78];                                      // 0x0030(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnStartCallBack;                                   // 0x00A8(0x0028)(Edit, ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TDelegate<void()>                             OnUpdateCallBack;                                  // 0x00D0(0x0028)(Edit, ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TDelegate<void()>                             OnCompleteCallBack;                                // 0x00F8(0x0028)(Edit, ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x18];                                     // 0x0120(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceComplete();
	int32 GetLoopCount();
	void Kill(bool callComplete);
	class ULTweener* OnComplete(const TDelegate<void()>& newComplete);
	class ULTweener* OnCycleComplete(const TDelegate<void()>& newCycleComplete);
	class ULTweener* OnStart(const TDelegate<void()>& newStart);
	class ULTweener* OnUpdate(const TDelegate<void(float InProgress)>& newUpdate);
	void Pause();
	void Resume();
	class ULTweener* SetCurveFloat(class UCurveFloat* newCurveFloat);
	class ULTweener* SetDelay(float newDelay);
	void SetDuration(float newDuration);
	class ULTweener* SetEase(ELTweenEase easetype);
	class ULTweener* SetEaseCurve(class UCurveFloat* newCurve);
	class ULTweener* SetLoop(ELTweenLoop newLoopType, int32 newLoopCount);
	class ULTweener* SetLoopType(ELTweenLoop newLoopType);
	class ULTweener* SetSpeed(float newSpeed);

	int32 GetLoopCycleCount() const;
	float GetSpeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweener">();
	}
	static class ULTweener* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweener>();
	}
};
static_assert(alignof(ULTweener) == 0x000008, "Wrong alignment on ULTweener");
static_assert(sizeof(ULTweener) == 0x000138, "Wrong size on ULTweener");
static_assert(offsetof(ULTweener, OnStartCallBack) == 0x0000A8, "Member 'ULTweener::OnStartCallBack' has a wrong offset!");
static_assert(offsetof(ULTweener, OnUpdateCallBack) == 0x0000D0, "Member 'ULTweener::OnUpdateCallBack' has a wrong offset!");
static_assert(offsetof(ULTweener, OnCompleteCallBack) == 0x0000F8, "Member 'ULTweener::OnCompleteCallBack' has a wrong offset!");

// Class LTween.LTweenerColor
// 0x0030 (0x0168 - 0x0138)
class ULTweenerColor final : public ULTweener
{
public:
	uint8                                         Pad_138[0x30];                                     // 0x0138(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerColor">();
	}
	static class ULTweenerColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerColor>();
	}
};
static_assert(alignof(ULTweenerColor) == 0x000008, "Wrong alignment on ULTweenerColor");
static_assert(sizeof(ULTweenerColor) == 0x000168, "Wrong size on ULTweenerColor");

// Class LTween.LTweenerFloat
// 0x0030 (0x0168 - 0x0138)
class ULTweenerFloat final : public ULTweener
{
public:
	uint8                                         Pad_138[0x30];                                     // 0x0138(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerFloat">();
	}
	static class ULTweenerFloat* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerFloat>();
	}
};
static_assert(alignof(ULTweenerFloat) == 0x000008, "Wrong alignment on ULTweenerFloat");
static_assert(sizeof(ULTweenerFloat) == 0x000168, "Wrong size on ULTweenerFloat");

// Class LTween.LTweenerFrame
// 0x0008 (0x0140 - 0x0138)
class ULTweenerFrame final : public ULTweener
{
public:
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerFrame">();
	}
	static class ULTweenerFrame* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerFrame>();
	}
};
static_assert(alignof(ULTweenerFrame) == 0x000008, "Wrong alignment on ULTweenerFrame");
static_assert(sizeof(ULTweenerFrame) == 0x000140, "Wrong size on ULTweenerFrame");

// Class LTween.LTweenerInteger
// 0x0030 (0x0168 - 0x0138)
class ULTweenerInteger final : public ULTweener
{
public:
	uint8                                         Pad_138[0x30];                                     // 0x0138(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerInteger">();
	}
	static class ULTweenerInteger* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerInteger>();
	}
};
static_assert(alignof(ULTweenerInteger) == 0x000008, "Wrong alignment on ULTweenerInteger");
static_assert(sizeof(ULTweenerInteger) == 0x000168, "Wrong size on ULTweenerInteger");

// Class LTween.LTweenerLinearColor
// 0x0048 (0x0180 - 0x0138)
class ULTweenerLinearColor final : public ULTweener
{
public:
	uint8                                         Pad_138[0x48];                                     // 0x0138(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerLinearColor">();
	}
	static class ULTweenerLinearColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerLinearColor>();
	}
};
static_assert(alignof(ULTweenerLinearColor) == 0x000008, "Wrong alignment on ULTweenerLinearColor");
static_assert(sizeof(ULTweenerLinearColor) == 0x000180, "Wrong size on ULTweenerLinearColor");

// Class LTween.LTweenerMaterialScalar
// 0x0030 (0x0168 - 0x0138)
class ULTweenerMaterialScalar final : public ULTweener
{
public:
	uint8                                         Pad_138[0x30];                                     // 0x0138(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerMaterialScalar">();
	}
	static class ULTweenerMaterialScalar* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerMaterialScalar>();
	}
};
static_assert(alignof(ULTweenerMaterialScalar) == 0x000008, "Wrong alignment on ULTweenerMaterialScalar");
static_assert(sizeof(ULTweenerMaterialScalar) == 0x000168, "Wrong size on ULTweenerMaterialScalar");

// Class LTween.LTweenerMaterialVector
// 0x0050 (0x0188 - 0x0138)
class ULTweenerMaterialVector final : public ULTweener
{
public:
	uint8                                         Pad_138[0x50];                                     // 0x0138(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerMaterialVector">();
	}
	static class ULTweenerMaterialVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerMaterialVector>();
	}
};
static_assert(alignof(ULTweenerMaterialVector) == 0x000008, "Wrong alignment on ULTweenerMaterialVector");
static_assert(sizeof(ULTweenerMaterialVector) == 0x000188, "Wrong size on ULTweenerMaterialVector");

// Class LTween.LTweenerPosition
// 0x0058 (0x0190 - 0x0138)
class ULTweenerPosition final : public ULTweener
{
public:
	uint8                                         Pad_138[0x58];                                     // 0x0138(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerPosition">();
	}
	static class ULTweenerPosition* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerPosition>();
	}
};
static_assert(alignof(ULTweenerPosition) == 0x000008, "Wrong alignment on ULTweenerPosition");
static_assert(sizeof(ULTweenerPosition) == 0x000190, "Wrong size on ULTweenerPosition");

// Class LTween.LTweenerQuaternion
// 0x0048 (0x0180 - 0x0138)
class ULTweenerQuaternion final : public ULTweener
{
public:
	uint8                                         Pad_138[0x48];                                     // 0x0138(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerQuaternion">();
	}
	static class ULTweenerQuaternion* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerQuaternion>();
	}
};
static_assert(alignof(ULTweenerQuaternion) == 0x000008, "Wrong alignment on ULTweenerQuaternion");
static_assert(sizeof(ULTweenerQuaternion) == 0x000180, "Wrong size on ULTweenerQuaternion");

// Class LTween.LTweenerRotationEuler
// 0x0058 (0x0190 - 0x0138)
class ULTweenerRotationEuler final : public ULTweener
{
public:
	uint8                                         Pad_138[0x58];                                     // 0x0138(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerRotationEuler">();
	}
	static class ULTweenerRotationEuler* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerRotationEuler>();
	}
};
static_assert(alignof(ULTweenerRotationEuler) == 0x000008, "Wrong alignment on ULTweenerRotationEuler");
static_assert(sizeof(ULTweenerRotationEuler) == 0x000190, "Wrong size on ULTweenerRotationEuler");

// Class LTween.LTweenerRotationQuat
// 0x0068 (0x01A0 - 0x0138)
class ULTweenerRotationQuat final : public ULTweener
{
public:
	uint8                                         Pad_138[0x68];                                     // 0x0138(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerRotationQuat">();
	}
	static class ULTweenerRotationQuat* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerRotationQuat>();
	}
};
static_assert(alignof(ULTweenerRotationQuat) == 0x000008, "Wrong alignment on ULTweenerRotationQuat");
static_assert(sizeof(ULTweenerRotationQuat) == 0x0001A0, "Wrong size on ULTweenerRotationQuat");

// Class LTween.LTweenerRotator
// 0x0040 (0x0178 - 0x0138)
class ULTweenerRotator final : public ULTweener
{
public:
	uint8                                         Pad_138[0x40];                                     // 0x0138(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerRotator">();
	}
	static class ULTweenerRotator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerRotator>();
	}
};
static_assert(alignof(ULTweenerRotator) == 0x000008, "Wrong alignment on ULTweenerRotator");
static_assert(sizeof(ULTweenerRotator) == 0x000178, "Wrong size on ULTweenerRotator");

// Class LTween.LTweenerScale
// 0x0040 (0x0178 - 0x0138)
class ULTweenerScale final : public ULTweener
{
public:
	uint8                                         Pad_138[0x40];                                     // 0x0138(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerScale">();
	}
	static class ULTweenerScale* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerScale>();
	}
};
static_assert(alignof(ULTweenerScale) == 0x000008, "Wrong alignment on ULTweenerScale");
static_assert(sizeof(ULTweenerScale) == 0x000178, "Wrong size on ULTweenerScale");

// Class LTween.LTweenerVector
// 0x0040 (0x0178 - 0x0138)
class ULTweenerVector final : public ULTweener
{
public:
	uint8                                         Pad_138[0x40];                                     // 0x0138(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerVector">();
	}
	static class ULTweenerVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerVector>();
	}
};
static_assert(alignof(ULTweenerVector) == 0x000008, "Wrong alignment on ULTweenerVector");
static_assert(sizeof(ULTweenerVector) == 0x000178, "Wrong size on ULTweenerVector");

// Class LTween.LTweenerVector2D
// 0x0038 (0x0170 - 0x0138)
class ULTweenerVector2D final : public ULTweener
{
public:
	uint8                                         Pad_138[0x38];                                     // 0x0138(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerVector2D">();
	}
	static class ULTweenerVector2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerVector2D>();
	}
};
static_assert(alignof(ULTweenerVector2D) == 0x000008, "Wrong alignment on ULTweenerVector2D");
static_assert(sizeof(ULTweenerVector2D) == 0x000170, "Wrong size on ULTweenerVector2D");

// Class LTween.LTweenerVector4
// 0x0048 (0x0180 - 0x0138)
class ULTweenerVector4 final : public ULTweener
{
public:
	uint8                                         Pad_138[0x48];                                     // 0x0138(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerVector4">();
	}
	static class ULTweenerVector4* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerVector4>();
	}
};
static_assert(alignof(ULTweenerVector4) == 0x000008, "Wrong alignment on ULTweenerVector4");
static_assert(sizeof(ULTweenerVector4) == 0x000180, "Wrong size on ULTweenerVector4");

// Class LTween.LTweenerVirtual
// 0x0000 (0x0138 - 0x0138)
class ULTweenerVirtual final : public ULTweener
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerVirtual">();
	}
	static class ULTweenerVirtual* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerVirtual>();
	}
};
static_assert(alignof(ULTweenerVirtual) == 0x000008, "Wrong alignment on ULTweenerVirtual");
static_assert(sizeof(ULTweenerVirtual) == 0x000138, "Wrong size on ULTweenerVirtual");

}

