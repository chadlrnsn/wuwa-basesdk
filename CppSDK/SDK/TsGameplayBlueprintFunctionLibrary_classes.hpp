#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsGameplayBlueprintFunctionLibrary

#include "Basic.hpp"

#include "ESkillTargetDirection_structs.hpp"
#include "Engine_classes.hpp"
#include "EHookInteractTypeBp_structs.hpp"
#include "EHitAnim_structs.hpp"
#include "EVisionType_structs.hpp"
#include "ECharacterLoadType_structs.hpp"
#include "EMorphType_structs.hpp"
#include "EFishingSkillType_structs.hpp"
#include "EAimViewState_structs.hpp"
#include "ECharViewDirectionState_structs.hpp"
#include "ECharParentMoveState_structs.hpp"
#include "ECharState_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsGameplayBlueprintFunctionLibrary.TsGameplayBlueprintFunctionLibrary_C
// 0x0000 (0x0030 - 0x0030)
class UTsGameplayBlueprintFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static bool ContainsTag(int32 entityId, const struct FGameplayTag& tag, class UObject* __WorldContext);
	static void AddTag(int32 entityId, const struct FGameplayTag& tag, class UObject* __WorldContext);
	static void AddTagWithDuration(int32 entityId, float duration, const struct FGameplayTag& tag, class UObject* __WorldContext);
	static void AddTagByName(int32 entityId, const class FString& tagName, class UObject* __WorldContext);
	static void RemoveTag(int32 entityId, const struct FGameplayTag& tag, class UObject* __WorldContext);
	static void RemoveTagByName(int32 entityId, const class FString& tagName, class UObject* __WorldContext);
	static bool IsLogicAutonomousProxy(int32 entityId, class UObject* __WorldContext);
	static bool RemoveActiveGameplayEffect(int32 entityId, const struct FActiveGameplayEffectHandle& handle, float stacksToRemove, class UObject* __WorldContext);
	static void RemoveBuffByTag(int32 entityId, const struct FGameplayTag& tag, class UObject* __WorldContext);
	static void AddPassiveSkill(int32 entityId, int64 passiveSkillId, class UObject* __WorldContext);
	static void RemovePassiveSkill(int32 entityId, int64 passiveSkillId, class UObject* __WorldContext);
	static void AddBuffForDebug(int32 instigatorEntityId, int32 targetEntityId, int64 buffId, class UObject* __WorldContext);
	static void RemoveBuffById(int32 entityId, int64 buffId, int32 stackCount, class UObject* __WorldContext);
	static int32 GetBuffCountById(int32 entityId, int64 buffId, bool enforceOnGoingCheck, class UObject* __WorldContext);
	static void AddGameplayCueLocal(int32 entityId, float duration, int64 cueId, class UObject* __WorldContext);
	static class FString GetGeDebugString(int32 entityId, class UObject* __WorldContext);
	static class FString GetTagDebugStrings(int32 entityId, class UObject* __WorldContext);
	static class FString GetBuffDebugStrings(int32 entityId, const class FString& buffStr, class UObject* __WorldContext);
	static class FString GetShieldDebugString(int32 entityId, class UObject* __WorldContext);
	static class FString GetPassiveSkillDebugString(int32 entityId, class UObject* __WorldContext);
	static float GetShieldValue(int32 entityId, int32 shieldCid, class UObject* __WorldContext);
	static class FString GetAttributeDebugString(int32 entityId, class UObject* __WorldContext);
	static class FString GetAllAttributeDebugStrings(int32 entityId, class UObject* __WorldContext);
	static class FString GetServerBuffString(int32 entityId, class UObject* __WorldContext);
	static class FString GetServerTagString(int32 entityId, class UObject* __WorldContext);
	static class FString GetServerAttributeString(int32 entityId, class UObject* __WorldContext);
	static class FString GetServerPartString(int32 entityId, class UObject* __WorldContext);
	static class FString GetServerHateString(int32 entityId, class UObject* __WorldContext);
	static class FString GetServerShieldString(int32 entityId, class UObject* __WorldContext);
	static void ServerDebugInfoRequest(int32 entityId, class UObject* __WorldContext);
	static bool GetServerDebugInfoDirty(int32 entityId, class UObject* __WorldContext);
	static void SetServerDebugInfoDirty(int32 entityId, bool val, class UObject* __WorldContext);
	static void DebugResetBaseVal(int32 entityId, float id, float val, class UObject* __WorldContext);
	static void DebugResetFormationValue(int32 id, float val, class UObject* __WorldContext);
	static class FString Record(int32 entityId, bool record, class UObject* __WorldContext);
	static void RefreshEntityListView(class UListView* listView, class UObject* __WorldContext);
	static void RefreshEntityComboBox(class UComboBoxString* comboBox, class UObject* __WorldContext);
	static void SetEntityComboBox(class UComboBoxString* comboBox, int32 entityId, class UObject* __WorldContext);
	static void SetDebugEntityId(int32 entityId, class UObject* __WorldContext);
	static int32 GetDebugEntityId(class UObject* __WorldContext);
	static void RefreshBuffListView(int32 entityId, class UListView* listView, const class FString& filterStr, class UObject* __WorldContext);
	static int64 GetBuffIdByHandle(int32 entityId, int32 handle, class UObject* __WorldContext);
	static int32 GetBuffServerIdByHandle(int32 entityId, int32 handle, class UObject* __WorldContext);
	static class FString GetBuffDescByHandle(int32 entityId, int32 handle, class UObject* __WorldContext);
	static bool GetBuffActivateByHandle(int32 entityId, int32 handle, class UObject* __WorldContext);
	static class FString GetBuffInstigatorStringByHandle(int32 entityId, int32 handle, class UObject* __WorldContext);
	static class FString GetBuffPeriodStringByHandle(int32 entityId, int32 handle, class UObject* __WorldContext);
	static class FString GetBuffDurationStringByHandle(int32 entityId, int32 handle, class UObject* __WorldContext);
	static float GetBuffDurationProgress(int32 entityId, int32 handle, class UObject* __WorldContext);
	static class FString GetBuffLivingStatusStringByHandle(int32 entityId, int32 handle, class UObject* __WorldContext);
	static class FString GetBuffLevelStringByHandle(int32 entityId, int32 handle, class UObject* __WorldContext);
	static class FString GetBuffStackStringByHandle(int32 entityId, int32 handle, class UObject* __WorldContext);
	static class FString GetBuffDebugStringByHandle(int32 entityId, int32 handle, class UObject* __WorldContext);
	static void SetDistance(int32 entityId, float max_0, class UObject* __WorldContext);
	static class FString GetAllMovementHistory(int32 entityId, class UObject* __WorldContext);
	static float GetAttributeCurrentValue(int32 entityId, int32 attributeId, class UObject* __WorldContext);
	static float GetAttributeBaseValue(int32 entityId, int32 attributeId, class UObject* __WorldContext);
	static void SetRageModeId(int32 entityId, int32 id, class UObject* __WorldContext);
	static void SetHardnessModeId(int32 entityId, int32 id, class UObject* __WorldContext);
	static void OnHit(int32 entityId, const struct FSHitInformation& hitData, class UObject* __WorldContext);
	static void SetBeHitIgnoreRotate(int32 entityId, bool ignoreRotate, class UObject* __WorldContext);
	static bool CheckHasPart(int32 entityId, class UObject* __WorldContext);
	static float GetPartRemainedLife(int32 entityId, const struct FGameplayTag& tag, class UObject* __WorldContext);
	static void ResetPartLife(int32 entityId, const struct FGameplayTag& tag, class UObject* __WorldContext);
	static void ActiveStiff(int32 entityId, class UObject* __WorldContext);
	static void DeActiveStiff(int32 entityId, class UObject* __WorldContext);
	static bool GetAcceptedNewBeHitAndReset(int32 entityId, class UObject* __WorldContext);
	static bool GetEnterFkAndReset(int32 entityId, class UObject* __WorldContext);
	static bool IsStiff(int32 entityId, class UObject* __WorldContext);
	static float GetRageModeId(int32 entityId, class UObject* __WorldContext);
	static float GetHardnessModeId(int32 entityId, class UObject* __WorldContext);
	static class FName GetBeHitBone(int32 entityId, class UObject* __WorldContext);
	static float GetToughDecreaseValue(int32 entityId, class UObject* __WorldContext);
	static struct FSCounterAttack GetCounterAttackInfoInternal(int32 entityId, class UObject* __WorldContext);
	static float GetBeHitTime(int32 entityId, class UObject* __WorldContext);
	static EHitAnim GetBeHitAnim(int32 entityId, class UObject* __WorldContext);
	static bool GetEnterFk(int32 entityId, class UObject* __WorldContext);
	static struct FVectorDouble GetBeHitDirect(int32 entityId, class UObject* __WorldContext);
	static struct FVectorDouble GetBeHitLocation(int32 entityId, class UObject* __WorldContext);
	static void AddCheckBuffList(int32 entityId, const struct FSCounterAttackBuff& addValue, class UObject* __WorldContext);
	static void ClearCheckBuffList(int32 entityId, class UObject* __WorldContext);
	static void CounterAttackEnd(int32 entityId, class UObject* __WorldContext);
	static void VisionCounterAttackEnd(int32 entityId, class UObject* __WorldContext);
	static void SetCounterAttackEndTime(int32 entityId, float baseTime, class UObject* __WorldContext);
	static bool IsTriggerCounterAttack(int32 entityId, class UObject* __WorldContext);
	static void ResetTarget(int32 entityId, class UObject* __WorldContext);
	static void SetShowTarget(int32 entityId, class AActor* actor, class UObject* __WorldContext);
	static void ExitLockDirection(int32 entityId, class UObject* __WorldContext);
	static void EnterLockDirection(int32 entityId, class UObject* __WorldContext);
	static class ATsBaseCharacter_C* GetCurrentTarget(int32 entityId, class UObject* __WorldContext);
	static void SetLockOnDebugLine(int32 entityId, bool isShow, class UObject* __WorldContext);
	static bool ManipulateValid(int32 entityId, class UObject* __WorldContext);
	static class AActor* ManipulateGetDrawTarget(int32 entityId, class UObject* __WorldContext);
	static class AActor* ManipulateGetCastTarget(int32 entityId, class UObject* __WorldContext);
	static float ManipulateGetDrawTargetChantTime(int32 entityId, class UObject* __WorldContext);
	static bool ManipulateChant(int32 entityId, class UKuroBooleanEventBinder* eventBinder, class UObject* __WorldContext);
	static bool ManipulateDraw(int32 entityId, class UObject* __WorldContext);
	static bool ManipulateCast(int32 entityId, float direction, class UObject* __WorldContext);
	static void ManipulateReset(int32 entityId, class UObject* __WorldContext);
	static bool ManipulateChangeToProjectileState(int32 entityId, class UObject* __WorldContext);
	static bool ManipulateChangeToNormalState(int32 entityId, class UObject* __WorldContext);
	static class AActor* GetHoldingActor(int32 entityId, class UObject* __WorldContext);
	static void SetDebugDraw(int32 entityId, bool isActive, class UObject* __WorldContext);
	static void ExtraAction(int32 entityId, class UObject* __WorldContext);
	static void SetQtePosition(int32 entityId, float rotate, float length, float height, bool referenceTarget, bool adjustWithMonster, float addHeight, int32 qteType, class UObject* __WorldContext);
	static class UDataTable* GetDtSkillInfo(int32 entityId, class UObject* __WorldContext);
	static float GetLastActivateSkillTime(int32 entityId, class UObject* __WorldContext);
	static void SetLastActivateSkillTime(int32 entityId, float time, class UObject* __WorldContext);
	static float GetSkillElevationAngle(int32 entityId, class UObject* __WorldContext);
	static void SetSkillElevationAngle(int32 entityId, float angle, class UObject* __WorldContext);
	static class FString CurrentSkillId(int32 entityId, class UObject* __WorldContext);
	static int32 CurrentPriority(int32 entityId, class UObject* __WorldContext);
	static void SetCurrentPriority(int32 entityId, int32 priority, class UObject* __WorldContext);
	static bool HasAbility(int32 entityId, const class FString& skillId, class UObject* __WorldContext);
	static struct FSSkillInfo GetSkillInfo(int32 entityId, const class FString& skillId, class UObject* __WorldContext);
	static void SetSkillPriority(int32 entityId, const class FString& skillId, float priority, class UObject* __WorldContext);
	static void EndSkill(int32 entityId, const class FString& skillId, bool isSyn, bool isNotEnd, class UObject* __WorldContext);
	static bool BeginSkill(int32 entityId, class FName skillId, bool isSyn, class AActor* target, class FName socketName, class UObject* __WorldContext);
	static class AActor* GetSkillTarget(int32 entityId, class UObject* __WorldContext);
	static void SetSkillTarget(int32 entityId, class AActor* target, class UObject* __WorldContext);
	static bool IsHasInputDir(int32 entityId, class UObject* __WorldContext);
	static class FString GetSkillIdWithGroupId(int32 entityId, int32 groupId, class UObject* __WorldContext);
	static bool GetSkillAcceptInput(int32 entityId, class UObject* __WorldContext);
	static void SetSkillAcceptInput(int32 entityId, bool skillAcceptInput, class UObject* __WorldContext);
	static void SetCommonSkillCanBeInterrupt(int32 entityId, bool canBeInterrupt, class UObject* __WorldContext);
	static bool GetCommonSkillCanBeInterrupt(int32 entityId, class UObject* __WorldContext);
	static float OnActivateAbility(int32 entityId, class UGameplayAbility* ga, bool isCommitSuccess, class UObject* __WorldContext);
	static void OnEndAbility(int32 entityId, class UGameplayAbility* ga, bool wasCancelled, class UObject* __WorldContext);
	static float GetPriority(int32 entityId, const class FString& skillId, class UObject* __WorldContext);
	static float GetActivePriority(int32 entityId, const class FString& skillId, class UObject* __WorldContext);
	static class UAnimMontage* GetSkillMontageInstance(int32 entityId, const class FString& skillId, int32 index, class UObject* __WorldContext);
	static void SetSkillRotateLocation(int32 entityId, const struct FVectorDouble& location, class UObject* __WorldContext);
	static void SetSkillRotateDirect(int32 entityId, const struct FVectorDouble& direct, class UObject* __WorldContext);
	static void CallAnimBreakPoint(int32 entityId, class UObject* __WorldContext);
	static void RollingGround(int32 entityId, class UObject* __WorldContext);
	static TArray<int32> GetVisionIdList(int32 entityId, class UObject* __WorldContext);
	static void ExitMultiSkillStateOfMorphVision(int32 entityId, class UObject* __WorldContext);
	static void SetKeepMultiSkillState(int32 entityId, bool keepOnMorphEnd, bool keepOnGoDown, class UObject* __WorldContext);
	static TArray<int32> GetVisionLevelList(int32 entityId, class UObject* __WorldContext);
	static int32 GetVisionSkillId(int32 entityId, float visionId, float level, class UObject* __WorldContext);
	static void InterruptSkill(int32 entityId, const class FString& skillId, bool isSyn, class UObject* __WorldContext);
	static void DeleteSkills(int32 entityId, class UObject* __WorldContext);
	static class FString GetCurrentMontageCorrespondingSkillId(int32 entityId, class UObject* __WorldContext);
	static void SetSocketName(int32 entityId, const class FString& socketName, class UObject* __WorldContext);
	static class FString GetSocketName(int32 entityId, class UObject* __WorldContext);
	static struct FTransformDouble GetPointTransform(int32 entityId, const class FString& boneName, class UObject* __WorldContext);
	static void PlaySkillMontage2Server(int32 entityId, const class FString& skillId, float montageIndex, float rate, const class FString& startSection, float startTimeSeconds, class UObject* __WorldContext);
	static void EndSkillMontage(int32 entityId, const class FString& skillId, float montageIndex, class UObject* __WorldContext);
	static bool CanActivateFixHook(int32 entityId, class UObject* __WorldContext);
	static struct FVectorDouble FixHookTargetLocation(int32 entityId, class UObject* __WorldContext);
	static struct FVectorDouble FixHookTargetForward(int32 entityId, class UObject* __WorldContext);
	static struct FVectorDouble NextFixHookTargetLocation(int32 entityId, class UObject* __WorldContext);
	static bool FixHookTargetInheritSpeed(int32 entityId, class UObject* __WorldContext);
	static bool FixHookTargetIsClimb(int32 entityId, class UObject* __WorldContext);
	static void SetIgnoreSocketName(int32 entityId, const class FString& socketName, class UObject* __WorldContext);
	static void DeleteIgnoreSocketName(int32 entityId, const class FString& socketName, class UObject* __WorldContext);
	static float GetToTargetSocketDistance(int32 entityId, class UObject* __WorldContext);
	static void SetPredictProjectileInfo(int32 entityId, bool returnValue, TArray<struct FVector>& outPathPosition, const struct FVector& outLastTraceDestination, const struct FHitResult& outHit, class UObject* __WorldContext);
	static void SetVisible(int32 entityId, bool isShow, class UObject* __WorldContext);
	static ECharState GetCharUnifiedMoveState(int32 entityId, class UObject* __WorldContext);
	static ECharParentMoveState GetCharUnifiedPositionState(int32 entityId, class UObject* __WorldContext);
	static void ExitHitState(int32 entityId, class UObject* __WorldContext);
	static void SetDirectionState(int32 entityId, ECharViewDirectionState newViewState, class UObject* __WorldContext);
	static ECharViewDirectionState GetDirectionState(int32 entityId, class UObject* __WorldContext);
	static bool GetIsInGame(int32 entityId, class UObject* __WorldContext);
	static void SprintPress(int32 entityId, class UObject* __WorldContext);
	static void SprintRelease(int32 entityId, class UObject* __WorldContext);
	static void StandPress(int32 entityId, class UObject* __WorldContext);
	static void SwingPress(int32 entityId, class UObject* __WorldContext);
	static void SwingRelease(int32 entityId, class UObject* __WorldContext);
	static void CustomSetWalkOrRun(int32 entityId, bool isWalk, class UObject* __WorldContext);
	static void EnterAimStatus(int32 entityId, EAimViewState aimViewState, class UObject* __WorldContext);
	static void ExitAimStatus(int32 entityId, class UObject* __WorldContext);
	static void EnableEntity(int32 entityId, bool isEnable, class UObject* __WorldContext);
	static void UpdateAnimInfoHit(int32 entityId, class UBP_ABPLogicParams_C* animLogicParams, class UObject* __WorldContext);
	static void UpdateAnimInfoFk(int32 entityId, class UBP_ABPLogicParams_C* animLogicParams, class UObject* __WorldContext);
	static void UpdateAnimInfoUnifiedState(int32 entityId, class UBP_ABPLogicParams_C* animLogicParams, class UObject* __WorldContext);
	static void UpdateAnimInfoUnifiedStateRoleNpc(int32 entityId, class UBP_ABPLogicParams_C* animLogicParams, class UObject* __WorldContext);
	static bool GetIsCharRotateWithCameraWhenManipulate(int32 entityId, class UObject* __WorldContext);
	static bool GetIsUseCatapultUpAnim(int32 entityId, class UObject* __WorldContext);
	static float GetNextMultiSkillId(int32 entityId, int32 skillId, class UObject* __WorldContext);
	static bool StartManipulateInteract(int32 entityId, class UObject* __WorldContext);
	static void EndManipulateInteract(int32 entityId, class UObject* __WorldContext);
	static struct FVectorDouble GetManipulateInteractLocation(int32 entityId, class UObject* __WorldContext);
	static void EnvironmentInfoDetect(int32 entityId, const struct FVectorDouble& location, class UObject* __WorldContext);
	static void LockOnSpecifyTarget(int32 entityId, int32 targetEntityId, class UObject* __WorldContext);
	static bool IsSkillInCd(int32 entityId, int32 skillId, class UObject* __WorldContext);
	static void SendHookSkillUseLogData(int32 entityId, bool hasTarget, class UObject* __WorldContext);
	static void SendManipulateSkillUseLogData(int32 entityId, bool hasTarget, class UObject* __WorldContext);
	static void SendScanSkillUseLogData(int32 entityId, bool hasTarget, class UObject* __WorldContext);
	static void DynamicAttachEntityToActor(int32 entityId, int32 targetEntityId, class FName socketName, class UObject* __WorldContext);
	static struct FSVisionCounterAttack GetVisionCounterAttackInfoInternal(int32 entityId, class UObject* __WorldContext);
	static bool ActivateAbilityVision(int32 entityId, EVisionType visionType, class UObject* __WorldContext);
	static bool EndAbilityVision(int32 entityId, EVisionType visionType, class UObject* __WorldContext);
	static void ResetBaseValueLocal(int32 entityId, int32 id, float val, class UObject* __WorldContext);
	static void SetEntityEnable(int32 entityId, bool enable, class UObject* callObject, const class FString& reason, class UObject* __WorldContext);
	static void SetPassiveGaSkillId(int32 entityId, class UObject* callObject, class UObject* __WorldContext);
	static void SetEnableAttackInputActionOfMorphVision(int32 entityId, bool bEnable, class UObject* __WorldContext);
	static class FString GetSpecialBuffToSkillId(float buffId1, const class FString& skillId1, class UObject* __WorldContext);
	static class AActor* FixHookTargetActor(int32 entityId, class UObject* __WorldContext);
	static TArray<struct FVectorDouble> FixHookTargetPathways(int32 entityId, class UObject* __WorldContext);
	static class AActor* FixHookTargetEnterPortalCapture(int32 entityId, class UObject* __WorldContext);
	static void SetSkillTargetDirection(int32 entityId, ESkillTargetDirection direction, class UObject* __WorldContext);
	static void ChangeAiControllerDebugDraw(int32 entityId, bool debug, class UObject* __WorldContext);
	static class UKuroDebugMovementComponent* TryGetDebugMovementComp(const class FString& pbDataId, class UObject* __WorldContext);
	static EHitAnim GetBeHitAnimType(int32 typeId, class UObject* __WorldContext);
	static void SkillBehaviorBegin(int32 entityId, class UGA_Base_C* ga, const struct FSSkillBehaviorAction& action, class UObject* __WorldContext);
	static bool SkillBehaviorSatisfy(int32 entityId, class UGA_Base_C* ga, const struct FSSkillBehaviorCondition& condition, class UObject* __WorldContext);
	static class UObject* ChangeBlueprintVariablesRef(class UObject* object, class UObject* base, class UObject* __WorldContext);
	static void ActivateAbilityVisionPlayAudio(int32 entityId, EVisionType visionType, class UObject* __WorldContext);
	static void AddCue(int32 instigatorEntityId, int32 targetEntityId, int64 cueId, class UObject* __WorldContext);
	static void RemoveCue(int32 entityId, int64 cueId, class UObject* __WorldContext);
	static void TryPlayLinkAnim(class UObject* __WorldContext);
	static EHookInteractTypeBp GetHookTargetType(int32 entityId, class UObject* __WorldContext);
	static bool FixHookTargetIsSuiGuangType(int32 entityId, class UObject* __WorldContext);
	static TMap<ECharacterLoadType, class UDataTable*> GetDtSkillInfoMapForDebug(int32 entityId, class UObject* __WorldContext);
	static void StopInhalation(int32 entityId, class UObject* __WorldContext);
	static void SetIsHookEndByInterrupt(int32 entityId, bool isInterrupt, class UObject* __WorldContext);
	static struct FVectorDouble TraceGround(int32 entityId, const struct FVectorDouble& start, const struct FVectorDouble& end, bool draw, class UObject* __WorldContext);
	static bool StartStatueInteract(int32 entityId, class UObject* __WorldContext);
	static void EndStatueInteract(int32 entityId, class UObject* __WorldContext);
	static void StartInhalation(int32 entityId, float strength, float distance, bool isPowerfulMode, float checkAngle, TArray<struct FGameplayTag>& tag, class UObject* __WorldContext);
	static class ATsBaseCharacter_C* GetGoBattleActor(int32 entityId, class UObject* __WorldContext);
	static bool StartCustomInteract(int32 entityId, class UObject* __WorldContext);
	static void EndCustomInteract(int32 entityId, class UObject* __WorldContext);
	static void ChangePhantomTeam(int32 phantomFormationId, TArray<struct FGameplayTag>& skillTriggerTags, class UObject* __WorldContext);
	static void RevertPhantomTeam(class UObject* __WorldContext);
	static float GetFormationAttribute(int32 type, class UObject* __WorldContext);
	static bool FixHookIsSummitPoint(int32 entityId, class UObject* __WorldContext);
	static bool GetManipulateInteractTargetCanInteract(int32 entityId, class UObject* __WorldContext);
	static bool GetHookInteractTargetCanInteract(int32 entityId, class UObject* __WorldContext);
	static float GetEntityDeltaMillisecond(int32 entityId, class UObject* __WorldContext);
	static void AddBuffFromGA(int32 entityId, class ATsBaseCharacter_C* target, int64 buffId, const class FString& skillId, int32 addCount, class UObject* __WorldContext);
	static void SyncTwoEntityLocationAndRotation(int32 fromEntityId, int32 toEntityId, class UObject* __WorldContext);
	static void SetActorVisible(int32 entityId, bool visible, bool collision, bool movable, const class FString& reason, bool sync, class UObject* __WorldContext);
	static class AActor* GetFishingBoat(class UObject* __WorldContext);
	static void FishingBoatSprint(int32 entityId, float maxSpeedRatio, int32 exceedLimitDuration, int32 duration, class UObject* __WorldContext);
	static bool GetHookInteractTargetIsIgnorePlayerCollision(int32 entityId, class UObject* __WorldContext);
	static bool FixHookIsNormalPoint(int32 entityId, class UObject* __WorldContext);
	static void FishingBoatSkill(EFishingSkillType type, class UObject* __WorldContext);
	static EMorphType GetCharacterMorphType(int32 entityId, class UObject* __WorldContext);
	static void SetCharacterMorphType(int32 entityId, EMorphType morphType, class UObject* __WorldContext);
	static int32 GetNextMultiSkillIdNew(int32 entityId, int32 skillId, class UObject* __WorldContext);
	static void SetSpecialEnergyAttrValue(int32 entityId, int32 attrId, int32 value, class UObject* __WorldContext);
	static void BeginAddMoveByInputDirect(int32 entityId, float maxSpeed, float accelerationTime, float decelerationTime, float delayTime, class UObject* __WorldContext);
	static void EndAddMoveByInputDirect(int32 entityId, class UObject* __WorldContext);
	static void StartBattleQte(int32 entityId, int32 skillId, int32 battleQteId, class UObject* __WorldContext);
	static void StopGroup1Skill(int32 entityId, const class FString& reason, class UObject* __WorldContext);
	static struct FVectorDouble GetLocationByAction(int32 entityId, class UGA_Base_C* ga, const struct FSSkillBehaviorAction& action, class UObject* __WorldContext);
	static struct FRotator GetRotationByAction(int32 entityId, class UGA_Base_C* ga, const struct FSSkillBehaviorAction& action, class UObject* __WorldContext);
	static struct FVectorDouble SlashHookPointCharacterLookAtPoint(int32 entityId, class UObject* __WorldContext);
	static bool SlashHookPointHasLookAtConfig(int32 entityId, class UObject* __WorldContext);
	static bool SlashHookPointIsTakeOverCamera(int32 entityId, class UObject* __WorldContext);
	static bool IsSlashGameplayIsSuccess(class UObject* __WorldContext);
	static struct FSCharacterLocationsAndRadius GetCharactersLocationNearBy(const struct FVectorDouble& center, float distance, int32 maxCount, class UObject* __WorldContext);
	static void StartChargeSlash(int32 entityId, class UObject* __WorldContext);
	static void StopChargeSlash(int32 entityId, class UObject* __WorldContext);
	static void BeginSkillAsync(int32 entityId, class FName skillId, class AActor* target, class FName socketName, class UKuroBooleanEventBinder* eventBinder, class UObject* __WorldContext);
	static struct FVectorDouble SlashHookPointSafePointLoc(int32 entityId, class UObject* __WorldContext);
	static struct FRotator SlashHookPointSafePointRot(int32 entityId, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsGameplayBlueprintFunctionLibrary_C">();
	}
	static class UTsGameplayBlueprintFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsGameplayBlueprintFunctionLibrary_C>();
	}
};
static_assert(alignof(UTsGameplayBlueprintFunctionLibrary_C) == 0x000008, "Wrong alignment on UTsGameplayBlueprintFunctionLibrary_C");
static_assert(sizeof(UTsGameplayBlueprintFunctionLibrary_C) == 0x000030, "Wrong size on UTsGameplayBlueprintFunctionLibrary_C");

}

