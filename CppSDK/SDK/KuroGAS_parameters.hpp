#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroGAS

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "KuroGAS_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function KuroGAS.AsyncTaskAnyAttributeChanged.ListenForAnyAttributeChange
// 0x0010 (0x0010 - 0x0000)
struct AsyncTaskAnyAttributeChanged_ListenForAnyAttributeChange final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskAnyAttributeChanged*          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskAnyAttributeChanged_ListenForAnyAttributeChange) == 0x000008, "Wrong alignment on AsyncTaskAnyAttributeChanged_ListenForAnyAttributeChange");
static_assert(sizeof(AsyncTaskAnyAttributeChanged_ListenForAnyAttributeChange) == 0x000010, "Wrong size on AsyncTaskAnyAttributeChanged_ListenForAnyAttributeChange");
static_assert(offsetof(AsyncTaskAnyAttributeChanged_ListenForAnyAttributeChange, AbilitySystemComponent) == 0x000000, "Member 'AsyncTaskAnyAttributeChanged_ListenForAnyAttributeChange::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AsyncTaskAnyAttributeChanged_ListenForAnyAttributeChange, ReturnValue) == 0x000008, "Member 'AsyncTaskAnyAttributeChanged_ListenForAnyAttributeChange::ReturnValue' has a wrong offset!");

// Function KuroGAS.AsyncTaskAnyEffectInhibitionChanged.ListenForAnyEffectInhibitionChanged
// 0x0010 (0x0010 - 0x0000)
struct AsyncTaskAnyEffectInhibitionChanged_ListenForAnyEffectInhibitionChanged final
{
public:
	class UAbilitySystemComponent*                AbilityComp_0;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskAnyEffectInhibitionChanged*   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskAnyEffectInhibitionChanged_ListenForAnyEffectInhibitionChanged) == 0x000008, "Wrong alignment on AsyncTaskAnyEffectInhibitionChanged_ListenForAnyEffectInhibitionChanged");
static_assert(sizeof(AsyncTaskAnyEffectInhibitionChanged_ListenForAnyEffectInhibitionChanged) == 0x000010, "Wrong size on AsyncTaskAnyEffectInhibitionChanged_ListenForAnyEffectInhibitionChanged");
static_assert(offsetof(AsyncTaskAnyEffectInhibitionChanged_ListenForAnyEffectInhibitionChanged, AbilityComp_0) == 0x000000, "Member 'AsyncTaskAnyEffectInhibitionChanged_ListenForAnyEffectInhibitionChanged::AbilityComp_0' has a wrong offset!");
static_assert(offsetof(AsyncTaskAnyEffectInhibitionChanged_ListenForAnyEffectInhibitionChanged, ReturnValue) == 0x000008, "Member 'AsyncTaskAnyEffectInhibitionChanged_ListenForAnyEffectInhibitionChanged::ReturnValue' has a wrong offset!");

// Function KuroGAS.AsyncTaskAnyEffectRemoved.ListenForAnyEffectRemoved
// 0x0010 (0x0010 - 0x0000)
struct AsyncTaskAnyEffectRemoved_ListenForAnyEffectRemoved final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskAnyEffectRemoved*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskAnyEffectRemoved_ListenForAnyEffectRemoved) == 0x000008, "Wrong alignment on AsyncTaskAnyEffectRemoved_ListenForAnyEffectRemoved");
static_assert(sizeof(AsyncTaskAnyEffectRemoved_ListenForAnyEffectRemoved) == 0x000010, "Wrong size on AsyncTaskAnyEffectRemoved_ListenForAnyEffectRemoved");
static_assert(offsetof(AsyncTaskAnyEffectRemoved_ListenForAnyEffectRemoved, AbilitySystemComponent) == 0x000000, "Member 'AsyncTaskAnyEffectRemoved_ListenForAnyEffectRemoved::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AsyncTaskAnyEffectRemoved_ListenForAnyEffectRemoved, ReturnValue) == 0x000008, "Member 'AsyncTaskAnyEffectRemoved_ListenForAnyEffectRemoved::ReturnValue' has a wrong offset!");

// Function KuroGAS.AsyncTaskAnyEffectStackChanged.ListenForAnyEffectStackChanged
// 0x0010 (0x0010 - 0x0000)
struct AsyncTaskAnyEffectStackChanged_ListenForAnyEffectStackChanged final
{
public:
	class UAbilitySystemComponent*                AbilityComp_0;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskAnyEffectStackChanged*        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskAnyEffectStackChanged_ListenForAnyEffectStackChanged) == 0x000008, "Wrong alignment on AsyncTaskAnyEffectStackChanged_ListenForAnyEffectStackChanged");
static_assert(sizeof(AsyncTaskAnyEffectStackChanged_ListenForAnyEffectStackChanged) == 0x000010, "Wrong size on AsyncTaskAnyEffectStackChanged_ListenForAnyEffectStackChanged");
static_assert(offsetof(AsyncTaskAnyEffectStackChanged_ListenForAnyEffectStackChanged, AbilityComp_0) == 0x000000, "Member 'AsyncTaskAnyEffectStackChanged_ListenForAnyEffectStackChanged::AbilityComp_0' has a wrong offset!");
static_assert(offsetof(AsyncTaskAnyEffectStackChanged_ListenForAnyEffectStackChanged, ReturnValue) == 0x000008, "Member 'AsyncTaskAnyEffectStackChanged_ListenForAnyEffectStackChanged::ReturnValue' has a wrong offset!");

// Function KuroGAS.AsyncTaskEffectApplied.ListenForEffectApplied
// 0x0028 (0x0028 - 0x0000)
struct AsyncTaskEffectApplied_ListenForEffectApplied final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EffectGameplayTag;                                 // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IgnoreGameplayTag;                                 // 0x0014(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskEffectApplied*                ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskEffectApplied_ListenForEffectApplied) == 0x000008, "Wrong alignment on AsyncTaskEffectApplied_ListenForEffectApplied");
static_assert(sizeof(AsyncTaskEffectApplied_ListenForEffectApplied) == 0x000028, "Wrong size on AsyncTaskEffectApplied_ListenForEffectApplied");
static_assert(offsetof(AsyncTaskEffectApplied_ListenForEffectApplied, AbilitySystemComponent) == 0x000000, "Member 'AsyncTaskEffectApplied_ListenForEffectApplied::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AsyncTaskEffectApplied_ListenForEffectApplied, EffectGameplayTag) == 0x000008, "Member 'AsyncTaskEffectApplied_ListenForEffectApplied::EffectGameplayTag' has a wrong offset!");
static_assert(offsetof(AsyncTaskEffectApplied_ListenForEffectApplied, IgnoreGameplayTag) == 0x000014, "Member 'AsyncTaskEffectApplied_ListenForEffectApplied::IgnoreGameplayTag' has a wrong offset!");
static_assert(offsetof(AsyncTaskEffectApplied_ListenForEffectApplied, ReturnValue) == 0x000020, "Member 'AsyncTaskEffectApplied_ListenForEffectApplied::ReturnValue' has a wrong offset!");

// Function KuroGAS.AsyncTaskEffectDebugString.ListenForGameplayEffectExecutedDebugString
// 0x0010 (0x0010 - 0x0000)
struct AsyncTaskEffectDebugString_ListenForGameplayEffectExecutedDebugString final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskEffectDebugString*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskEffectDebugString_ListenForGameplayEffectExecutedDebugString) == 0x000008, "Wrong alignment on AsyncTaskEffectDebugString_ListenForGameplayEffectExecutedDebugString");
static_assert(sizeof(AsyncTaskEffectDebugString_ListenForGameplayEffectExecutedDebugString) == 0x000010, "Wrong size on AsyncTaskEffectDebugString_ListenForGameplayEffectExecutedDebugString");
static_assert(offsetof(AsyncTaskEffectDebugString_ListenForGameplayEffectExecutedDebugString, AbilitySystemComponent) == 0x000000, "Member 'AsyncTaskEffectDebugString_ListenForGameplayEffectExecutedDebugString::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AsyncTaskEffectDebugString_ListenForGameplayEffectExecutedDebugString, ReturnValue) == 0x000008, "Member 'AsyncTaskEffectDebugString_ListenForGameplayEffectExecutedDebugString::ReturnValue' has a wrong offset!");

// Function KuroGAS.AsyncTaskEffectInhibitionChanged.ListenForInhibitionChanged
// 0x0010 (0x0010 - 0x0000)
struct AsyncTaskEffectInhibitionChanged_ListenForInhibitionChanged final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskEffectInhibitionChanged*      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskEffectInhibitionChanged_ListenForInhibitionChanged) == 0x000008, "Wrong alignment on AsyncTaskEffectInhibitionChanged_ListenForInhibitionChanged");
static_assert(sizeof(AsyncTaskEffectInhibitionChanged_ListenForInhibitionChanged) == 0x000010, "Wrong size on AsyncTaskEffectInhibitionChanged_ListenForInhibitionChanged");
static_assert(offsetof(AsyncTaskEffectInhibitionChanged_ListenForInhibitionChanged, Handle) == 0x000000, "Member 'AsyncTaskEffectInhibitionChanged_ListenForInhibitionChanged::Handle' has a wrong offset!");
static_assert(offsetof(AsyncTaskEffectInhibitionChanged_ListenForInhibitionChanged, ReturnValue) == 0x000008, "Member 'AsyncTaskEffectInhibitionChanged_ListenForInhibitionChanged::ReturnValue' has a wrong offset!");

// Function KuroGAS.AsyncTaskEffectStackChanged.ListenForStackChanged
// 0x0010 (0x0010 - 0x0000)
struct AsyncTaskEffectStackChanged_ListenForStackChanged final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskEffectStackChanged*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskEffectStackChanged_ListenForStackChanged) == 0x000008, "Wrong alignment on AsyncTaskEffectStackChanged_ListenForStackChanged");
static_assert(sizeof(AsyncTaskEffectStackChanged_ListenForStackChanged) == 0x000010, "Wrong size on AsyncTaskEffectStackChanged_ListenForStackChanged");
static_assert(offsetof(AsyncTaskEffectStackChanged_ListenForStackChanged, Handle) == 0x000000, "Member 'AsyncTaskEffectStackChanged_ListenForStackChanged::Handle' has a wrong offset!");
static_assert(offsetof(AsyncTaskEffectStackChanged_ListenForStackChanged, ReturnValue) == 0x000008, "Member 'AsyncTaskEffectStackChanged_ListenForStackChanged::ReturnValue' has a wrong offset!");

// Function KuroGAS.AsyncTaskGameplayCueNotify.ListenForGameplayCueNotify
// 0x0010 (0x0010 - 0x0000)
struct AsyncTaskGameplayCueNotify_ListenForGameplayCueNotify final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskGameplayCueNotify*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskGameplayCueNotify_ListenForGameplayCueNotify) == 0x000008, "Wrong alignment on AsyncTaskGameplayCueNotify_ListenForGameplayCueNotify");
static_assert(sizeof(AsyncTaskGameplayCueNotify_ListenForGameplayCueNotify) == 0x000010, "Wrong size on AsyncTaskGameplayCueNotify_ListenForGameplayCueNotify");
static_assert(offsetof(AsyncTaskGameplayCueNotify_ListenForGameplayCueNotify, AbilitySystemComponent) == 0x000000, "Member 'AsyncTaskGameplayCueNotify_ListenForGameplayCueNotify::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AsyncTaskGameplayCueNotify_ListenForGameplayCueNotify, ReturnValue) == 0x000008, "Member 'AsyncTaskGameplayCueNotify_ListenForGameplayCueNotify::ReturnValue' has a wrong offset!");

// Function KuroGAS.AsyncTaskPlayMontageAndWait.ListenForPlayMontage
// 0x0030 (0x0030 - 0x0000)
struct AsyncTaskPlayMontageAndWait_ListenForPlayMontage final
{
public:
	class UAnimInstance*                          AnimInstance_0;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay_0;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingPosition;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartingSection;                                   // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncTaskPlayMontageAndWait*           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskPlayMontageAndWait_ListenForPlayMontage) == 0x000008, "Wrong alignment on AsyncTaskPlayMontageAndWait_ListenForPlayMontage");
static_assert(sizeof(AsyncTaskPlayMontageAndWait_ListenForPlayMontage) == 0x000030, "Wrong size on AsyncTaskPlayMontageAndWait_ListenForPlayMontage");
static_assert(offsetof(AsyncTaskPlayMontageAndWait_ListenForPlayMontage, AnimInstance_0) == 0x000000, "Member 'AsyncTaskPlayMontageAndWait_ListenForPlayMontage::AnimInstance_0' has a wrong offset!");
static_assert(offsetof(AsyncTaskPlayMontageAndWait_ListenForPlayMontage, MontageToPlay_0) == 0x000008, "Member 'AsyncTaskPlayMontageAndWait_ListenForPlayMontage::MontageToPlay_0' has a wrong offset!");
static_assert(offsetof(AsyncTaskPlayMontageAndWait_ListenForPlayMontage, PlayRate) == 0x000010, "Member 'AsyncTaskPlayMontageAndWait_ListenForPlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(AsyncTaskPlayMontageAndWait_ListenForPlayMontage, StartingPosition) == 0x000014, "Member 'AsyncTaskPlayMontageAndWait_ListenForPlayMontage::StartingPosition' has a wrong offset!");
static_assert(offsetof(AsyncTaskPlayMontageAndWait_ListenForPlayMontage, StartingSection) == 0x000018, "Member 'AsyncTaskPlayMontageAndWait_ListenForPlayMontage::StartingSection' has a wrong offset!");
static_assert(offsetof(AsyncTaskPlayMontageAndWait_ListenForPlayMontage, ReturnValue) == 0x000028, "Member 'AsyncTaskPlayMontageAndWait_ListenForPlayMontage::ReturnValue' has a wrong offset!");

// Function KuroGAS.AsyncTaskTagCountChanged.ListenForTagCountChanged
// 0x0020 (0x0020 - 0x0000)
struct AsyncTaskTagCountChanged_ListenForTagCountChanged final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncTaskTagCountChanged*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskTagCountChanged_ListenForTagCountChanged) == 0x000008, "Wrong alignment on AsyncTaskTagCountChanged_ListenForTagCountChanged");
static_assert(sizeof(AsyncTaskTagCountChanged_ListenForTagCountChanged) == 0x000020, "Wrong size on AsyncTaskTagCountChanged_ListenForTagCountChanged");
static_assert(offsetof(AsyncTaskTagCountChanged_ListenForTagCountChanged, AbilitySystemComponent) == 0x000000, "Member 'AsyncTaskTagCountChanged_ListenForTagCountChanged::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AsyncTaskTagCountChanged_ListenForTagCountChanged, Tag) == 0x000008, "Member 'AsyncTaskTagCountChanged_ListenForTagCountChanged::Tag' has a wrong offset!");
static_assert(offsetof(AsyncTaskTagCountChanged_ListenForTagCountChanged, ReturnValue) == 0x000018, "Member 'AsyncTaskTagCountChanged_ListenForTagCountChanged::ReturnValue' has a wrong offset!");

// Function KuroGAS.AsyncTaskTagSignificantChanged.ListenForTagSignificantChanged
// 0x0020 (0x0020 - 0x0000)
struct AsyncTaskTagSignificantChanged_ListenForTagSignificantChanged final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncTaskTagSignificantChanged*        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskTagSignificantChanged_ListenForTagSignificantChanged) == 0x000008, "Wrong alignment on AsyncTaskTagSignificantChanged_ListenForTagSignificantChanged");
static_assert(sizeof(AsyncTaskTagSignificantChanged_ListenForTagSignificantChanged) == 0x000020, "Wrong size on AsyncTaskTagSignificantChanged_ListenForTagSignificantChanged");
static_assert(offsetof(AsyncTaskTagSignificantChanged_ListenForTagSignificantChanged, AbilitySystemComponent) == 0x000000, "Member 'AsyncTaskTagSignificantChanged_ListenForTagSignificantChanged::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AsyncTaskTagSignificantChanged_ListenForTagSignificantChanged, Tag) == 0x000008, "Member 'AsyncTaskTagSignificantChanged_ListenForTagSignificantChanged::Tag' has a wrong offset!");
static_assert(offsetof(AsyncTaskTagSignificantChanged_ListenForTagSignificantChanged, ReturnValue) == 0x000018, "Member 'AsyncTaskTagSignificantChanged_ListenForTagSignificantChanged::ReturnValue' has a wrong offset!");

// Function KuroGAS.AsyncTaskWaitGameplayEvent.ListenForGameplayEvent
// 0x0010 (0x0010 - 0x0000)
struct AsyncTaskWaitGameplayEvent_ListenForGameplayEvent final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent_0;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskWaitGameplayEvent*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskWaitGameplayEvent_ListenForGameplayEvent) == 0x000008, "Wrong alignment on AsyncTaskWaitGameplayEvent_ListenForGameplayEvent");
static_assert(sizeof(AsyncTaskWaitGameplayEvent_ListenForGameplayEvent) == 0x000010, "Wrong size on AsyncTaskWaitGameplayEvent_ListenForGameplayEvent");
static_assert(offsetof(AsyncTaskWaitGameplayEvent_ListenForGameplayEvent, AbilitySystemComponent_0) == 0x000000, "Member 'AsyncTaskWaitGameplayEvent_ListenForGameplayEvent::AbilitySystemComponent_0' has a wrong offset!");
static_assert(offsetof(AsyncTaskWaitGameplayEvent_ListenForGameplayEvent, ReturnValue) == 0x000008, "Member 'AsyncTaskWaitGameplayEvent_ListenForGameplayEvent::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.ApplyGeToSelfById
// 0x0030 (0x0030 - 0x0000)
struct BaseAbilitySystemComponent_ApplyGeToSelfById final
{
public:
	int64                                         GameplayEffectId;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           Context;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerId;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_ApplyGeToSelfById) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_ApplyGeToSelfById");
static_assert(sizeof(BaseAbilitySystemComponent_ApplyGeToSelfById) == 0x000030, "Wrong size on BaseAbilitySystemComponent_ApplyGeToSelfById");
static_assert(offsetof(BaseAbilitySystemComponent_ApplyGeToSelfById, GameplayEffectId) == 0x000000, "Member 'BaseAbilitySystemComponent_ApplyGeToSelfById::GameplayEffectId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_ApplyGeToSelfById, Context) == 0x000008, "Member 'BaseAbilitySystemComponent_ApplyGeToSelfById::Context' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_ApplyGeToSelfById, Level) == 0x000020, "Member 'BaseAbilitySystemComponent_ApplyGeToSelfById::Level' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_ApplyGeToSelfById, ServerId) == 0x000024, "Member 'BaseAbilitySystemComponent_ApplyGeToSelfById::ServerId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_ApplyGeToSelfById, ReturnValue) == 0x000028, "Member 'BaseAbilitySystemComponent_ApplyGeToSelfById::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.BP_InitAbilityActorInfo
// 0x000C (0x000C - 0x0000)
struct BaseAbilitySystemComponent_BP_InitAbilityActorInfo final
{
public:
	class FName                                   AnimInstanceTag;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_BP_InitAbilityActorInfo) == 0x000004, "Wrong alignment on BaseAbilitySystemComponent_BP_InitAbilityActorInfo");
static_assert(sizeof(BaseAbilitySystemComponent_BP_InitAbilityActorInfo) == 0x00000C, "Wrong size on BaseAbilitySystemComponent_BP_InitAbilityActorInfo");
static_assert(offsetof(BaseAbilitySystemComponent_BP_InitAbilityActorInfo, AnimInstanceTag) == 0x000000, "Member 'BaseAbilitySystemComponent_BP_InitAbilityActorInfo::AnimInstanceTag' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.DestroyDynamicGameplayEffect
// 0x0008 (0x0008 - 0x0000)
struct BaseAbilitySystemComponent_DestroyDynamicGameplayEffect final
{
public:
	class UGameplayEffect*                        Ge;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_DestroyDynamicGameplayEffect) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_DestroyDynamicGameplayEffect");
static_assert(sizeof(BaseAbilitySystemComponent_DestroyDynamicGameplayEffect) == 0x000008, "Wrong size on BaseAbilitySystemComponent_DestroyDynamicGameplayEffect");
static_assert(offsetof(BaseAbilitySystemComponent_DestroyDynamicGameplayEffect, Ge) == 0x000000, "Member 'BaseAbilitySystemComponent_DestroyDynamicGameplayEffect::Ge' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.GetAbility
// 0x0010 (0x0010 - 0x0000)
struct BaseAbilitySystemComponent_GetAbility final
{
public:
	TSubclassOf<class UGameplayAbility>           Ability;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_GetAbility) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_GetAbility");
static_assert(sizeof(BaseAbilitySystemComponent_GetAbility) == 0x000010, "Wrong size on BaseAbilitySystemComponent_GetAbility");
static_assert(offsetof(BaseAbilitySystemComponent_GetAbility, Ability) == 0x000000, "Member 'BaseAbilitySystemComponent_GetAbility::Ability' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_GetAbility, ReturnValue) == 0x000008, "Member 'BaseAbilitySystemComponent_GetAbility::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.GetActiveEffectsByGrantedTags
// 0x0020 (0x0020 - 0x0000)
struct BaseAbilitySystemComponent_GetActiveEffectsByGrantedTags final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveGameplayEffectHandle>    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_GetActiveEffectsByGrantedTags) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_GetActiveEffectsByGrantedTags");
static_assert(sizeof(BaseAbilitySystemComponent_GetActiveEffectsByGrantedTags) == 0x000020, "Wrong size on BaseAbilitySystemComponent_GetActiveEffectsByGrantedTags");
static_assert(offsetof(BaseAbilitySystemComponent_GetActiveEffectsByGrantedTags, Tag) == 0x000000, "Member 'BaseAbilitySystemComponent_GetActiveEffectsByGrantedTags::Tag' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_GetActiveEffectsByGrantedTags, ReturnValue) == 0x000010, "Member 'BaseAbilitySystemComponent_GetActiveEffectsByGrantedTags::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.GetActiveEffectsById
// 0x0018 (0x0018 - 0x0000)
struct BaseAbilitySystemComponent_GetActiveEffectsById final
{
public:
	int64                                         GeId;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_GetActiveEffectsById) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_GetActiveEffectsById");
static_assert(sizeof(BaseAbilitySystemComponent_GetActiveEffectsById) == 0x000018, "Wrong size on BaseAbilitySystemComponent_GetActiveEffectsById");
static_assert(offsetof(BaseAbilitySystemComponent_GetActiveEffectsById, GeId) == 0x000000, "Member 'BaseAbilitySystemComponent_GetActiveEffectsById::GeId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_GetActiveEffectsById, ReturnValue) == 0x000008, "Member 'BaseAbilitySystemComponent_GetActiveEffectsById::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.GetGameplayEffectCountById
// 0x0018 (0x0018 - 0x0000)
struct BaseAbilitySystemComponent_GetGameplayEffectCountById final
{
public:
	int64                                         GameplayEffectId;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                OptionalInstigatorFilterComponent;                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforceOnGoingCheck;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_GetGameplayEffectCountById) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_GetGameplayEffectCountById");
static_assert(sizeof(BaseAbilitySystemComponent_GetGameplayEffectCountById) == 0x000018, "Wrong size on BaseAbilitySystemComponent_GetGameplayEffectCountById");
static_assert(offsetof(BaseAbilitySystemComponent_GetGameplayEffectCountById, GameplayEffectId) == 0x000000, "Member 'BaseAbilitySystemComponent_GetGameplayEffectCountById::GameplayEffectId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_GetGameplayEffectCountById, OptionalInstigatorFilterComponent) == 0x000008, "Member 'BaseAbilitySystemComponent_GetGameplayEffectCountById::OptionalInstigatorFilterComponent' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_GetGameplayEffectCountById, bEnforceOnGoingCheck) == 0x000010, "Member 'BaseAbilitySystemComponent_GetGameplayEffectCountById::bEnforceOnGoingCheck' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_GetGameplayEffectCountById, ReturnValue) == 0x000014, "Member 'BaseAbilitySystemComponent_GetGameplayEffectCountById::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.InternalApplyModToAttribute
// 0x000C (0x000C - 0x0000)
struct BaseAbilitySystemComponent_InternalApplyModToAttribute final
{
public:
	int32                                         AttributeId;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModifierOp;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModifierMagnitude;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_InternalApplyModToAttribute) == 0x000004, "Wrong alignment on BaseAbilitySystemComponent_InternalApplyModToAttribute");
static_assert(sizeof(BaseAbilitySystemComponent_InternalApplyModToAttribute) == 0x00000C, "Wrong size on BaseAbilitySystemComponent_InternalApplyModToAttribute");
static_assert(offsetof(BaseAbilitySystemComponent_InternalApplyModToAttribute, AttributeId) == 0x000000, "Member 'BaseAbilitySystemComponent_InternalApplyModToAttribute::AttributeId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_InternalApplyModToAttribute, ModifierOp) == 0x000004, "Member 'BaseAbilitySystemComponent_InternalApplyModToAttribute::ModifierOp' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_InternalApplyModToAttribute, ModifierMagnitude) == 0x000008, "Member 'BaseAbilitySystemComponent_InternalApplyModToAttribute::ModifierMagnitude' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.MakeDynamicGameplayEffect
// 0x0020 (0x0020 - 0x0000)
struct BaseAbilitySystemComponent_MakeDynamicGameplayEffect final
{
public:
	class FName                                   GeName;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         GeId;                                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayEffect*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_MakeDynamicGameplayEffect) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_MakeDynamicGameplayEffect");
static_assert(sizeof(BaseAbilitySystemComponent_MakeDynamicGameplayEffect) == 0x000020, "Wrong size on BaseAbilitySystemComponent_MakeDynamicGameplayEffect");
static_assert(offsetof(BaseAbilitySystemComponent_MakeDynamicGameplayEffect, GeName) == 0x000000, "Member 'BaseAbilitySystemComponent_MakeDynamicGameplayEffect::GeName' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_MakeDynamicGameplayEffect, GeId) == 0x000010, "Member 'BaseAbilitySystemComponent_MakeDynamicGameplayEffect::GeId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_MakeDynamicGameplayEffect, ReturnValue) == 0x000018, "Member 'BaseAbilitySystemComponent_MakeDynamicGameplayEffect::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.OnAnyTagChangeInternal
// 0x0014 (0x0014 - 0x0000)
struct BaseAbilitySystemComponent_OnAnyTagChangeInternal final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTagCount;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_OnAnyTagChangeInternal) == 0x000004, "Wrong alignment on BaseAbilitySystemComponent_OnAnyTagChangeInternal");
static_assert(sizeof(BaseAbilitySystemComponent_OnAnyTagChangeInternal) == 0x000014, "Wrong size on BaseAbilitySystemComponent_OnAnyTagChangeInternal");
static_assert(offsetof(BaseAbilitySystemComponent_OnAnyTagChangeInternal, GameplayTag) == 0x000000, "Member 'BaseAbilitySystemComponent_OnAnyTagChangeInternal::GameplayTag' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_OnAnyTagChangeInternal, NewTagCount) == 0x00000C, "Member 'BaseAbilitySystemComponent_OnAnyTagChangeInternal::NewTagCount' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_OnAnyTagChangeInternal, ReturnValue) == 0x000010, "Member 'BaseAbilitySystemComponent_OnAnyTagChangeInternal::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.PauseActiveGameplayEffect
// 0x000C (0x000C - 0x0000)
struct BaseAbilitySystemComponent_PauseActiveGameplayEffect final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_PauseActiveGameplayEffect) == 0x000004, "Wrong alignment on BaseAbilitySystemComponent_PauseActiveGameplayEffect");
static_assert(sizeof(BaseAbilitySystemComponent_PauseActiveGameplayEffect) == 0x00000C, "Wrong size on BaseAbilitySystemComponent_PauseActiveGameplayEffect");
static_assert(offsetof(BaseAbilitySystemComponent_PauseActiveGameplayEffect, Handle) == 0x000000, "Member 'BaseAbilitySystemComponent_PauseActiveGameplayEffect::Handle' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_PauseActiveGameplayEffect, bPause) == 0x000008, "Member 'BaseAbilitySystemComponent_PauseActiveGameplayEffect::bPause' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.PauseAllActiveGameplayEffects
// 0x0001 (0x0001 - 0x0000)
struct BaseAbilitySystemComponent_PauseAllActiveGameplayEffects final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_PauseAllActiveGameplayEffects) == 0x000001, "Wrong alignment on BaseAbilitySystemComponent_PauseAllActiveGameplayEffects");
static_assert(sizeof(BaseAbilitySystemComponent_PauseAllActiveGameplayEffects) == 0x000001, "Wrong size on BaseAbilitySystemComponent_PauseAllActiveGameplayEffects");
static_assert(offsetof(BaseAbilitySystemComponent_PauseAllActiveGameplayEffects, bPause) == 0x000000, "Member 'BaseAbilitySystemComponent_PauseAllActiveGameplayEffects::bPause' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.RemoveAbility
// 0x0004 (0x0004 - 0x0000)
struct BaseAbilitySystemComponent_RemoveAbility final
{
public:
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_RemoveAbility) == 0x000004, "Wrong alignment on BaseAbilitySystemComponent_RemoveAbility");
static_assert(sizeof(BaseAbilitySystemComponent_RemoveAbility) == 0x000004, "Wrong size on BaseAbilitySystemComponent_RemoveAbility");
static_assert(offsetof(BaseAbilitySystemComponent_RemoveAbility, Handle) == 0x000000, "Member 'BaseAbilitySystemComponent_RemoveAbility::Handle' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.RemoveActiveEffectsById
// 0x0010 (0x0010 - 0x0000)
struct BaseAbilitySystemComponent_RemoveActiveEffectsById final
{
public:
	int64                                         GeId;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_RemoveActiveEffectsById) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_RemoveActiveEffectsById");
static_assert(sizeof(BaseAbilitySystemComponent_RemoveActiveEffectsById) == 0x000010, "Wrong size on BaseAbilitySystemComponent_RemoveActiveEffectsById");
static_assert(offsetof(BaseAbilitySystemComponent_RemoveActiveEffectsById, GeId) == 0x000000, "Member 'BaseAbilitySystemComponent_RemoveActiveEffectsById::GeId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_RemoveActiveEffectsById, StackCount) == 0x000008, "Member 'BaseAbilitySystemComponent_RemoveActiveEffectsById::StackCount' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_RemoveActiveEffectsById, ReturnValue) == 0x00000C, "Member 'BaseAbilitySystemComponent_RemoveActiveEffectsById::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.RemoveActiveEffectsByUniqueServerId
// 0x0004 (0x0004 - 0x0000)
struct BaseAbilitySystemComponent_RemoveActiveEffectsByUniqueServerId final
{
public:
	int32                                         GameplayEffectSpecServerId;                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_RemoveActiveEffectsByUniqueServerId) == 0x000004, "Wrong alignment on BaseAbilitySystemComponent_RemoveActiveEffectsByUniqueServerId");
static_assert(sizeof(BaseAbilitySystemComponent_RemoveActiveEffectsByUniqueServerId) == 0x000004, "Wrong size on BaseAbilitySystemComponent_RemoveActiveEffectsByUniqueServerId");
static_assert(offsetof(BaseAbilitySystemComponent_RemoveActiveEffectsByUniqueServerId, GameplayEffectSpecServerId) == 0x000000, "Member 'BaseAbilitySystemComponent_RemoveActiveEffectsByUniqueServerId::GameplayEffectSpecServerId' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.ResetDilationForActiveEffects
// 0x0004 (0x0004 - 0x0000)
struct BaseAbilitySystemComponent_ResetDilationForActiveEffects final
{
public:
	float                                         TimeDilation;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_ResetDilationForActiveEffects) == 0x000004, "Wrong alignment on BaseAbilitySystemComponent_ResetDilationForActiveEffects");
static_assert(sizeof(BaseAbilitySystemComponent_ResetDilationForActiveEffects) == 0x000004, "Wrong size on BaseAbilitySystemComponent_ResetDilationForActiveEffects");
static_assert(offsetof(BaseAbilitySystemComponent_ResetDilationForActiveEffects, TimeDilation) == 0x000000, "Member 'BaseAbilitySystemComponent_ResetDilationForActiveEffects::TimeDilation' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.UpdateActiveGameplayEffectDurationHandle
// 0x0010 (0x0010 - 0x0000)
struct BaseAbilitySystemComponent_UpdateActiveGameplayEffectDurationHandle final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationModifyValue;                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_UpdateActiveGameplayEffectDurationHandle) == 0x000004, "Wrong alignment on BaseAbilitySystemComponent_UpdateActiveGameplayEffectDurationHandle");
static_assert(sizeof(BaseAbilitySystemComponent_UpdateActiveGameplayEffectDurationHandle) == 0x000010, "Wrong size on BaseAbilitySystemComponent_UpdateActiveGameplayEffectDurationHandle");
static_assert(offsetof(BaseAbilitySystemComponent_UpdateActiveGameplayEffectDurationHandle, Handle) == 0x000000, "Member 'BaseAbilitySystemComponent_UpdateActiveGameplayEffectDurationHandle::Handle' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_UpdateActiveGameplayEffectDurationHandle, DurationModifyValue) == 0x000008, "Member 'BaseAbilitySystemComponent_UpdateActiveGameplayEffectDurationHandle::DurationModifyValue' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_UpdateActiveGameplayEffectDurationHandle, ReturnValue) == 0x00000C, "Member 'BaseAbilitySystemComponent_UpdateActiveGameplayEffectDurationHandle::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.AddGeGrantGa
// 0x0018 (0x0018 - 0x0000)
struct BaseAbilitySystemComponent_AddGeGrantGa final
{
public:
	class UGameplayEffect*                        Ge;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayAbility>           Ability;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayEffectGrantedAbilityRemovePolicy     RemovalPolicy;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_AddGeGrantGa) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_AddGeGrantGa");
static_assert(sizeof(BaseAbilitySystemComponent_AddGeGrantGa) == 0x000018, "Wrong size on BaseAbilitySystemComponent_AddGeGrantGa");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeGrantGa, Ge) == 0x000000, "Member 'BaseAbilitySystemComponent_AddGeGrantGa::Ge' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeGrantGa, Ability) == 0x000008, "Member 'BaseAbilitySystemComponent_AddGeGrantGa::Ability' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeGrantGa, level) == 0x000010, "Member 'BaseAbilitySystemComponent_AddGeGrantGa::level' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeGrantGa, RemovalPolicy) == 0x000014, "Member 'BaseAbilitySystemComponent_AddGeGrantGa::RemovalPolicy' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.AddGeModifierByAttributeId
// 0x0030 (0x0030 - 0x0000)
struct BaseAbilitySystemComponent_AddGeModifierByAttributeId final
{
public:
	class UGameplayEffect*                        Ge;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifiedAttributeId;                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttributeBasedFloatCalculationType           CalculationType;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModOp;                                             // 0x000D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttributeId;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DataTag;                                           // 0x0014(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DataTag2;                                          // 0x0020(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayEffectAttributeCaptureSource         InSource;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSnapShot;                                        // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_AddGeModifierByAttributeId) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_AddGeModifierByAttributeId");
static_assert(sizeof(BaseAbilitySystemComponent_AddGeModifierByAttributeId) == 0x000030, "Wrong size on BaseAbilitySystemComponent_AddGeModifierByAttributeId");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByAttributeId, Ge) == 0x000000, "Member 'BaseAbilitySystemComponent_AddGeModifierByAttributeId::Ge' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByAttributeId, ModifiedAttributeId) == 0x000008, "Member 'BaseAbilitySystemComponent_AddGeModifierByAttributeId::ModifiedAttributeId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByAttributeId, CalculationType) == 0x00000C, "Member 'BaseAbilitySystemComponent_AddGeModifierByAttributeId::CalculationType' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByAttributeId, ModOp) == 0x00000D, "Member 'BaseAbilitySystemComponent_AddGeModifierByAttributeId::ModOp' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByAttributeId, AttributeId) == 0x000010, "Member 'BaseAbilitySystemComponent_AddGeModifierByAttributeId::AttributeId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByAttributeId, DataTag) == 0x000014, "Member 'BaseAbilitySystemComponent_AddGeModifierByAttributeId::DataTag' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByAttributeId, DataTag2) == 0x000020, "Member 'BaseAbilitySystemComponent_AddGeModifierByAttributeId::DataTag2' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByAttributeId, InSource) == 0x00002C, "Member 'BaseAbilitySystemComponent_AddGeModifierByAttributeId::InSource' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByAttributeId, InSnapShot) == 0x00002D, "Member 'BaseAbilitySystemComponent_AddGeModifierByAttributeId::InSnapShot' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.AddGeModifierByKey
// 0x0018 (0x0018 - 0x0000)
struct BaseAbilitySystemComponent_AddGeModifierByKey final
{
public:
	class UGameplayEffect*                        Ge;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifiedAttributeId;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModOp;                                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ModifierKey;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_AddGeModifierByKey) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_AddGeModifierByKey");
static_assert(sizeof(BaseAbilitySystemComponent_AddGeModifierByKey) == 0x000018, "Wrong size on BaseAbilitySystemComponent_AddGeModifierByKey");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByKey, Ge) == 0x000000, "Member 'BaseAbilitySystemComponent_AddGeModifierByKey::Ge' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByKey, ModifiedAttributeId) == 0x000008, "Member 'BaseAbilitySystemComponent_AddGeModifierByKey::ModifiedAttributeId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByKey, ModOp) == 0x00000C, "Member 'BaseAbilitySystemComponent_AddGeModifierByKey::ModOp' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByKey, ModifierKey) == 0x000010, "Member 'BaseAbilitySystemComponent_AddGeModifierByKey::ModifierKey' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.AddGeModifierByMMC
// 0x0018 (0x0018 - 0x0000)
struct BaseAbilitySystemComponent_AddGeModifierByMMC final
{
public:
	class UGameplayEffect*                        Ge;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifiedAttributeId;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModOp;                                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayModMagnitudeCalculation> CalculationClassMagnitude;                         // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_AddGeModifierByMMC) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_AddGeModifierByMMC");
static_assert(sizeof(BaseAbilitySystemComponent_AddGeModifierByMMC) == 0x000018, "Wrong size on BaseAbilitySystemComponent_AddGeModifierByMMC");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByMMC, Ge) == 0x000000, "Member 'BaseAbilitySystemComponent_AddGeModifierByMMC::Ge' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByMMC, ModifiedAttributeId) == 0x000008, "Member 'BaseAbilitySystemComponent_AddGeModifierByMMC::ModifiedAttributeId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByMMC, ModOp) == 0x00000C, "Member 'BaseAbilitySystemComponent_AddGeModifierByMMC::ModOp' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByMMC, CalculationClassMagnitude) == 0x000010, "Member 'BaseAbilitySystemComponent_AddGeModifierByMMC::CalculationClassMagnitude' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.AddGeModifierByTag
// 0x0020 (0x0020 - 0x0000)
struct BaseAbilitySystemComponent_AddGeModifierByTag final
{
public:
	class UGameplayEffect*                        Ge;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifiedAttributeId;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModOp;                                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ModifierTag;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_AddGeModifierByTag) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_AddGeModifierByTag");
static_assert(sizeof(BaseAbilitySystemComponent_AddGeModifierByTag) == 0x000020, "Wrong size on BaseAbilitySystemComponent_AddGeModifierByTag");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByTag, Ge) == 0x000000, "Member 'BaseAbilitySystemComponent_AddGeModifierByTag::Ge' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByTag, ModifiedAttributeId) == 0x000008, "Member 'BaseAbilitySystemComponent_AddGeModifierByTag::ModifiedAttributeId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByTag, ModOp) == 0x00000C, "Member 'BaseAbilitySystemComponent_AddGeModifierByTag::ModOp' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_AddGeModifierByTag, ModifierTag) == 0x000010, "Member 'BaseAbilitySystemComponent_AddGeModifierByTag::ModifierTag' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.HasAllGameplayTag
// 0x0028 (0x0028 - 0x0000)
struct BaseAbilitySystemComponent_HasAllGameplayTag final
{
public:
	struct FGameplayTagContainer                  GameplayTagContainer;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_HasAllGameplayTag) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_HasAllGameplayTag");
static_assert(sizeof(BaseAbilitySystemComponent_HasAllGameplayTag) == 0x000028, "Wrong size on BaseAbilitySystemComponent_HasAllGameplayTag");
static_assert(offsetof(BaseAbilitySystemComponent_HasAllGameplayTag, GameplayTagContainer) == 0x000000, "Member 'BaseAbilitySystemComponent_HasAllGameplayTag::GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_HasAllGameplayTag, ReturnValue) == 0x000020, "Member 'BaseAbilitySystemComponent_HasAllGameplayTag::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.HasAnyGameplayTag
// 0x0028 (0x0028 - 0x0000)
struct BaseAbilitySystemComponent_HasAnyGameplayTag final
{
public:
	struct FGameplayTagContainer                  GameplayTagContainer;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_HasAnyGameplayTag) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_HasAnyGameplayTag");
static_assert(sizeof(BaseAbilitySystemComponent_HasAnyGameplayTag) == 0x000028, "Wrong size on BaseAbilitySystemComponent_HasAnyGameplayTag");
static_assert(offsetof(BaseAbilitySystemComponent_HasAnyGameplayTag, GameplayTagContainer) == 0x000000, "Member 'BaseAbilitySystemComponent_HasAnyGameplayTag::GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_HasAnyGameplayTag, ReturnValue) == 0x000020, "Member 'BaseAbilitySystemComponent_HasAnyGameplayTag::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.HasGameplayTag
// 0x0010 (0x0010 - 0x0000)
struct BaseAbilitySystemComponent_HasGameplayTag final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_HasGameplayTag) == 0x000004, "Wrong alignment on BaseAbilitySystemComponent_HasGameplayTag");
static_assert(sizeof(BaseAbilitySystemComponent_HasGameplayTag) == 0x000010, "Wrong size on BaseAbilitySystemComponent_HasGameplayTag");
static_assert(offsetof(BaseAbilitySystemComponent_HasGameplayTag, GameplayTag) == 0x000000, "Member 'BaseAbilitySystemComponent_HasGameplayTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_HasGameplayTag, ReturnValue) == 0x00000C, "Member 'BaseAbilitySystemComponent_HasGameplayTag::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.MakeDynamicOutgoingSpec
// 0x0040 (0x0040 - 0x0000)
struct BaseAbilitySystemComponent_MakeDynamicOutgoingSpec final
{
public:
	class UGameplayEffect*                        GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           Context;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectServerId;                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_MakeDynamicOutgoingSpec) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_MakeDynamicOutgoingSpec");
static_assert(sizeof(BaseAbilitySystemComponent_MakeDynamicOutgoingSpec) == 0x000040, "Wrong size on BaseAbilitySystemComponent_MakeDynamicOutgoingSpec");
static_assert(offsetof(BaseAbilitySystemComponent_MakeDynamicOutgoingSpec, GameplayEffect) == 0x000000, "Member 'BaseAbilitySystemComponent_MakeDynamicOutgoingSpec::GameplayEffect' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_MakeDynamicOutgoingSpec, Level) == 0x000008, "Member 'BaseAbilitySystemComponent_MakeDynamicOutgoingSpec::Level' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_MakeDynamicOutgoingSpec, Context) == 0x000010, "Member 'BaseAbilitySystemComponent_MakeDynamicOutgoingSpec::Context' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_MakeDynamicOutgoingSpec, GameplayEffectServerId) == 0x000028, "Member 'BaseAbilitySystemComponent_MakeDynamicOutgoingSpec::GameplayEffectServerId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_MakeDynamicOutgoingSpec, ReturnValue) == 0x000030, "Member 'BaseAbilitySystemComponent_MakeDynamicOutgoingSpec::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.MakeRemoteDynamicOutgoingSpec
// 0x0040 (0x0040 - 0x0000)
struct BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec final
{
public:
	class UGameplayEffect*                        GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           Context;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectServerId;                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGeHandleId;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec");
static_assert(sizeof(BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec) == 0x000040, "Wrong size on BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec");
static_assert(offsetof(BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec, GameplayEffect) == 0x000000, "Member 'BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec::GameplayEffect' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec, Level) == 0x000008, "Member 'BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec::Level' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec, Context) == 0x000010, "Member 'BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec::Context' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec, GameplayEffectServerId) == 0x000028, "Member 'BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec::GameplayEffectServerId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec, InGeHandleId) == 0x00002C, "Member 'BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec::InGeHandleId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec, ReturnValue) == 0x000030, "Member 'BaseAbilitySystemComponent_MakeRemoteDynamicOutgoingSpec::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.SetDurationMagnitudeByAttributeId
// 0x0030 (0x0030 - 0x0000)
struct BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId final
{
public:
	class UGameplayEffect*                        Ge;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttributeBasedFloatCalculationType           CalculationType;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttributeId;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DataTag;                                           // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DataTag2;                                          // 0x001C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayEffectAttributeCaptureSource         InSource;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSnapShot;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId");
static_assert(sizeof(BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId) == 0x000030, "Wrong size on BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId");
static_assert(offsetof(BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId, Ge) == 0x000000, "Member 'BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId::Ge' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId, CalculationType) == 0x000008, "Member 'BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId::CalculationType' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId, AttributeId) == 0x00000C, "Member 'BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId::AttributeId' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId, DataTag) == 0x000010, "Member 'BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId::DataTag' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId, DataTag2) == 0x00001C, "Member 'BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId::DataTag2' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId, InSource) == 0x000028, "Member 'BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId::InSource' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId, InSnapShot) == 0x000029, "Member 'BaseAbilitySystemComponent_SetDurationMagnitudeByAttributeId::InSnapShot' has a wrong offset!");

// Function KuroGAS.BaseAbilitySystemComponent.SetDurationMagnitudeByTag
// 0x0018 (0x0018 - 0x0000)
struct BaseAbilitySystemComponent_SetDurationMagnitudeByTag final
{
public:
	class UGameplayEffect*                        Ge;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ModifierTag;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAbilitySystemComponent_SetDurationMagnitudeByTag) == 0x000008, "Wrong alignment on BaseAbilitySystemComponent_SetDurationMagnitudeByTag");
static_assert(sizeof(BaseAbilitySystemComponent_SetDurationMagnitudeByTag) == 0x000018, "Wrong size on BaseAbilitySystemComponent_SetDurationMagnitudeByTag");
static_assert(offsetof(BaseAbilitySystemComponent_SetDurationMagnitudeByTag, Ge) == 0x000000, "Member 'BaseAbilitySystemComponent_SetDurationMagnitudeByTag::Ge' has a wrong offset!");
static_assert(offsetof(BaseAbilitySystemComponent_SetDurationMagnitudeByTag, ModifierTag) == 0x000008, "Member 'BaseAbilitySystemComponent_SetDurationMagnitudeByTag::ModifierTag' has a wrong offset!");

// Function KuroGAS.BaseAttributeSet.SetAttackSpeedMax
// 0x0004 (0x0004 - 0x0000)
struct BaseAttributeSet_SetAttackSpeedMax final
{
public:
	float                                         InMaxSpeed;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAttributeSet_SetAttackSpeedMax) == 0x000004, "Wrong alignment on BaseAttributeSet_SetAttackSpeedMax");
static_assert(sizeof(BaseAttributeSet_SetAttackSpeedMax) == 0x000004, "Wrong size on BaseAttributeSet_SetAttackSpeedMax");
static_assert(offsetof(BaseAttributeSet_SetAttackSpeedMax, InMaxSpeed) == 0x000000, "Member 'BaseAttributeSet_SetAttackSpeedMax::InMaxSpeed' has a wrong offset!");

// Function KuroGAS.BaseAttributeSet.SetElementPowerMax
// 0x0004 (0x0004 - 0x0000)
struct BaseAttributeSet_SetElementPowerMax final
{
public:
	float                                         InElementPowerMax;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAttributeSet_SetElementPowerMax) == 0x000004, "Wrong alignment on BaseAttributeSet_SetElementPowerMax");
static_assert(sizeof(BaseAttributeSet_SetElementPowerMax) == 0x000004, "Wrong size on BaseAttributeSet_SetElementPowerMax");
static_assert(offsetof(BaseAttributeSet_SetElementPowerMax, InElementPowerMax) == 0x000000, "Member 'BaseAttributeSet_SetElementPowerMax::InElementPowerMax' has a wrong offset!");

// Function KuroGAS.BaseAttributeSet.SetReduceMax
// 0x0004 (0x0004 - 0x0000)
struct BaseAttributeSet_SetReduceMax final
{
public:
	float                                         InReduceMax;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAttributeSet_SetReduceMax) == 0x000004, "Wrong alignment on BaseAttributeSet_SetReduceMax");
static_assert(sizeof(BaseAttributeSet_SetReduceMax) == 0x000004, "Wrong size on BaseAttributeSet_SetReduceMax");
static_assert(offsetof(BaseAttributeSet_SetReduceMax, InReduceMax) == 0x000000, "Member 'BaseAttributeSet_SetReduceMax::InReduceMax' has a wrong offset!");

// Function KuroGAS.BaseAttributeSet.CopyAllAttribute
// 0x0010 (0x0010 - 0x0000)
struct BaseAttributeSet_CopyAllAttribute final
{
public:
	class UBaseAttributeSet*                      AttributeSet;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAttributeSet_CopyAllAttribute) == 0x000008, "Wrong alignment on BaseAttributeSet_CopyAllAttribute");
static_assert(sizeof(BaseAttributeSet_CopyAllAttribute) == 0x000010, "Wrong size on BaseAttributeSet_CopyAllAttribute");
static_assert(offsetof(BaseAttributeSet_CopyAllAttribute, AttributeSet) == 0x000000, "Member 'BaseAttributeSet_CopyAllAttribute::AttributeSet' has a wrong offset!");
static_assert(offsetof(BaseAttributeSet_CopyAllAttribute, ReturnValue) == 0x000008, "Member 'BaseAttributeSet_CopyAllAttribute::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAttributeSet.GetAttributeBaseValueById
// 0x0008 (0x0008 - 0x0000)
struct BaseAttributeSet_GetAttributeBaseValueById final
{
public:
	int32                                         AttributeType;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAttributeSet_GetAttributeBaseValueById) == 0x000004, "Wrong alignment on BaseAttributeSet_GetAttributeBaseValueById");
static_assert(sizeof(BaseAttributeSet_GetAttributeBaseValueById) == 0x000008, "Wrong size on BaseAttributeSet_GetAttributeBaseValueById");
static_assert(offsetof(BaseAttributeSet_GetAttributeBaseValueById, AttributeType) == 0x000000, "Member 'BaseAttributeSet_GetAttributeBaseValueById::AttributeType' has a wrong offset!");
static_assert(offsetof(BaseAttributeSet_GetAttributeBaseValueById, ReturnValue) == 0x000004, "Member 'BaseAttributeSet_GetAttributeBaseValueById::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAttributeSet.GetAttributeCurrentValueById
// 0x0008 (0x0008 - 0x0000)
struct BaseAttributeSet_GetAttributeCurrentValueById final
{
public:
	int32                                         AttributeType;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAttributeSet_GetAttributeCurrentValueById) == 0x000004, "Wrong alignment on BaseAttributeSet_GetAttributeCurrentValueById");
static_assert(sizeof(BaseAttributeSet_GetAttributeCurrentValueById) == 0x000008, "Wrong size on BaseAttributeSet_GetAttributeCurrentValueById");
static_assert(offsetof(BaseAttributeSet_GetAttributeCurrentValueById, AttributeType) == 0x000000, "Member 'BaseAttributeSet_GetAttributeCurrentValueById::AttributeType' has a wrong offset!");
static_assert(offsetof(BaseAttributeSet_GetAttributeCurrentValueById, ReturnValue) == 0x000004, "Member 'BaseAttributeSet_GetAttributeCurrentValueById::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAttributeSet.GetAttributeData
// 0x0028 (0x0028 - 0x0000)
struct BaseAttributeSet_GetAttributeData final
{
public:
	int32                                         AttributeType;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttributeData                 AttributeData;                                     // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseAttributeSet_GetAttributeData) == 0x000008, "Wrong alignment on BaseAttributeSet_GetAttributeData");
static_assert(sizeof(BaseAttributeSet_GetAttributeData) == 0x000028, "Wrong size on BaseAttributeSet_GetAttributeData");
static_assert(offsetof(BaseAttributeSet_GetAttributeData, AttributeType) == 0x000000, "Member 'BaseAttributeSet_GetAttributeData::AttributeType' has a wrong offset!");
static_assert(offsetof(BaseAttributeSet_GetAttributeData, AttributeData) == 0x000008, "Member 'BaseAttributeSet_GetAttributeData::AttributeData' has a wrong offset!");
static_assert(offsetof(BaseAttributeSet_GetAttributeData, ReturnValue) == 0x000020, "Member 'BaseAttributeSet_GetAttributeData::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseAttributeSet.SetAttributeIntervalLock
// 0x0018 (0x0018 - 0x0000)
struct BaseAttributeSet_SetAttributeIntervalLock final
{
public:
	int32                                         AttributeId;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIntervalLockType                             LockType;                                          // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpperBoundPercentage;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBoundOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerBoundPercentage;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerBoundOffset;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAttributeSet_SetAttributeIntervalLock) == 0x000004, "Wrong alignment on BaseAttributeSet_SetAttributeIntervalLock");
static_assert(sizeof(BaseAttributeSet_SetAttributeIntervalLock) == 0x000018, "Wrong size on BaseAttributeSet_SetAttributeIntervalLock");
static_assert(offsetof(BaseAttributeSet_SetAttributeIntervalLock, AttributeId) == 0x000000, "Member 'BaseAttributeSet_SetAttributeIntervalLock::AttributeId' has a wrong offset!");
static_assert(offsetof(BaseAttributeSet_SetAttributeIntervalLock, LockType) == 0x000004, "Member 'BaseAttributeSet_SetAttributeIntervalLock::LockType' has a wrong offset!");
static_assert(offsetof(BaseAttributeSet_SetAttributeIntervalLock, UpperBoundPercentage) == 0x000008, "Member 'BaseAttributeSet_SetAttributeIntervalLock::UpperBoundPercentage' has a wrong offset!");
static_assert(offsetof(BaseAttributeSet_SetAttributeIntervalLock, UpperBoundOffset) == 0x00000C, "Member 'BaseAttributeSet_SetAttributeIntervalLock::UpperBoundOffset' has a wrong offset!");
static_assert(offsetof(BaseAttributeSet_SetAttributeIntervalLock, LowerBoundPercentage) == 0x000010, "Member 'BaseAttributeSet_SetAttributeIntervalLock::LowerBoundPercentage' has a wrong offset!");
static_assert(offsetof(BaseAttributeSet_SetAttributeIntervalLock, LowerBoundOffset) == 0x000014, "Member 'BaseAttributeSet_SetAttributeIntervalLock::LowerBoundOffset' has a wrong offset!");

// Function KuroGAS.BaseAttributeSet.SetAttributeValue
// 0x000C (0x000C - 0x0000)
struct BaseAttributeSet_SetAttributeValue final
{
public:
	int32                                         AttributeType;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseValue;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAttributeSet_SetAttributeValue) == 0x000004, "Wrong alignment on BaseAttributeSet_SetAttributeValue");
static_assert(sizeof(BaseAttributeSet_SetAttributeValue) == 0x00000C, "Wrong size on BaseAttributeSet_SetAttributeValue");
static_assert(offsetof(BaseAttributeSet_SetAttributeValue, AttributeType) == 0x000000, "Member 'BaseAttributeSet_SetAttributeValue::AttributeType' has a wrong offset!");
static_assert(offsetof(BaseAttributeSet_SetAttributeValue, BaseValue) == 0x000004, "Member 'BaseAttributeSet_SetAttributeValue::BaseValue' has a wrong offset!");
static_assert(offsetof(BaseAttributeSet_SetAttributeValue, CurrentValue) == 0x000008, "Member 'BaseAttributeSet_SetAttributeValue::CurrentValue' has a wrong offset!");

// Function KuroGAS.BaseCharacter.SetActorLocationAndRotationExceptSkelMesh
// 0x00C0 (0x00C0 - 0x0000)
struct BaseCharacter_SetActorLocationAndRotationExceptSkelMesh final
{
public:
	struct FVectorDouble                          NewLocation;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0028(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bTeleport;                                         // 0x00BC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreOverlap;                                    // 0x00BD(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00BE(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BF[0x1];                                       // 0x00BF(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseCharacter_SetActorLocationAndRotationExceptSkelMesh) == 0x000008, "Wrong alignment on BaseCharacter_SetActorLocationAndRotationExceptSkelMesh");
static_assert(sizeof(BaseCharacter_SetActorLocationAndRotationExceptSkelMesh) == 0x0000C0, "Wrong size on BaseCharacter_SetActorLocationAndRotationExceptSkelMesh");
static_assert(offsetof(BaseCharacter_SetActorLocationAndRotationExceptSkelMesh, NewLocation) == 0x000000, "Member 'BaseCharacter_SetActorLocationAndRotationExceptSkelMesh::NewLocation' has a wrong offset!");
static_assert(offsetof(BaseCharacter_SetActorLocationAndRotationExceptSkelMesh, NewRotation) == 0x000018, "Member 'BaseCharacter_SetActorLocationAndRotationExceptSkelMesh::NewRotation' has a wrong offset!");
static_assert(offsetof(BaseCharacter_SetActorLocationAndRotationExceptSkelMesh, bSweep) == 0x000024, "Member 'BaseCharacter_SetActorLocationAndRotationExceptSkelMesh::bSweep' has a wrong offset!");
static_assert(offsetof(BaseCharacter_SetActorLocationAndRotationExceptSkelMesh, SweepHitResult) == 0x000028, "Member 'BaseCharacter_SetActorLocationAndRotationExceptSkelMesh::SweepHitResult' has a wrong offset!");
static_assert(offsetof(BaseCharacter_SetActorLocationAndRotationExceptSkelMesh, bTeleport) == 0x0000BC, "Member 'BaseCharacter_SetActorLocationAndRotationExceptSkelMesh::bTeleport' has a wrong offset!");
static_assert(offsetof(BaseCharacter_SetActorLocationAndRotationExceptSkelMesh, bIgnoreOverlap) == 0x0000BD, "Member 'BaseCharacter_SetActorLocationAndRotationExceptSkelMesh::bIgnoreOverlap' has a wrong offset!");
static_assert(offsetof(BaseCharacter_SetActorLocationAndRotationExceptSkelMesh, ReturnValue) == 0x0000BE, "Member 'BaseCharacter_SetActorLocationAndRotationExceptSkelMesh::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseCharacter.SetActorTransformExceptSkelMesh
// 0x00E0 (0x00E0 - 0x0000)
struct BaseCharacter_SetActorTransformExceptSkelMesh final
{
public:
	struct FTransformDouble                       NewTransform;                                      // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0044(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bTeleport;                                         // 0x00D8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreOverlap;                                    // 0x00D9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00DA(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB[0x5];                                       // 0x00DB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseCharacter_SetActorTransformExceptSkelMesh) == 0x000010, "Wrong alignment on BaseCharacter_SetActorTransformExceptSkelMesh");
static_assert(sizeof(BaseCharacter_SetActorTransformExceptSkelMesh) == 0x0000E0, "Wrong size on BaseCharacter_SetActorTransformExceptSkelMesh");
static_assert(offsetof(BaseCharacter_SetActorTransformExceptSkelMesh, NewTransform) == 0x000000, "Member 'BaseCharacter_SetActorTransformExceptSkelMesh::NewTransform' has a wrong offset!");
static_assert(offsetof(BaseCharacter_SetActorTransformExceptSkelMesh, bSweep) == 0x000040, "Member 'BaseCharacter_SetActorTransformExceptSkelMesh::bSweep' has a wrong offset!");
static_assert(offsetof(BaseCharacter_SetActorTransformExceptSkelMesh, SweepHitResult) == 0x000044, "Member 'BaseCharacter_SetActorTransformExceptSkelMesh::SweepHitResult' has a wrong offset!");
static_assert(offsetof(BaseCharacter_SetActorTransformExceptSkelMesh, bTeleport) == 0x0000D8, "Member 'BaseCharacter_SetActorTransformExceptSkelMesh::bTeleport' has a wrong offset!");
static_assert(offsetof(BaseCharacter_SetActorTransformExceptSkelMesh, bIgnoreOverlap) == 0x0000D9, "Member 'BaseCharacter_SetActorTransformExceptSkelMesh::bIgnoreOverlap' has a wrong offset!");
static_assert(offsetof(BaseCharacter_SetActorTransformExceptSkelMesh, ReturnValue) == 0x0000DA, "Member 'BaseCharacter_SetActorTransformExceptSkelMesh::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseCharacter.ContainsAllTag
// 0x0028 (0x0028 - 0x0000)
struct BaseCharacter_ContainsAllTag final
{
public:
	struct FGameplayTagContainer                  TagToCheck;                                        // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseCharacter_ContainsAllTag) == 0x000008, "Wrong alignment on BaseCharacter_ContainsAllTag");
static_assert(sizeof(BaseCharacter_ContainsAllTag) == 0x000028, "Wrong size on BaseCharacter_ContainsAllTag");
static_assert(offsetof(BaseCharacter_ContainsAllTag, TagToCheck) == 0x000000, "Member 'BaseCharacter_ContainsAllTag::TagToCheck' has a wrong offset!");
static_assert(offsetof(BaseCharacter_ContainsAllTag, ReturnValue) == 0x000020, "Member 'BaseCharacter_ContainsAllTag::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseCharacter.ContainsAnyTag
// 0x0028 (0x0028 - 0x0000)
struct BaseCharacter_ContainsAnyTag final
{
public:
	struct FGameplayTagContainer                  TagToCheck;                                        // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseCharacter_ContainsAnyTag) == 0x000008, "Wrong alignment on BaseCharacter_ContainsAnyTag");
static_assert(sizeof(BaseCharacter_ContainsAnyTag) == 0x000028, "Wrong size on BaseCharacter_ContainsAnyTag");
static_assert(offsetof(BaseCharacter_ContainsAnyTag, TagToCheck) == 0x000000, "Member 'BaseCharacter_ContainsAnyTag::TagToCheck' has a wrong offset!");
static_assert(offsetof(BaseCharacter_ContainsAnyTag, ReturnValue) == 0x000020, "Member 'BaseCharacter_ContainsAnyTag::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseCharacter.ContainsTag
// 0x0010 (0x0010 - 0x0000)
struct BaseCharacter_ContainsTag final
{
public:
	struct FGameplayTag                           TagToCheck;                                        // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseCharacter_ContainsTag) == 0x000004, "Wrong alignment on BaseCharacter_ContainsTag");
static_assert(sizeof(BaseCharacter_ContainsTag) == 0x000010, "Wrong size on BaseCharacter_ContainsTag");
static_assert(offsetof(BaseCharacter_ContainsTag, TagToCheck) == 0x000000, "Member 'BaseCharacter_ContainsTag::TagToCheck' has a wrong offset!");
static_assert(offsetof(BaseCharacter_ContainsTag, ReturnValue) == 0x00000C, "Member 'BaseCharacter_ContainsTag::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseGameplayAbility.GetCallerMagnitudeByTag
// 0x0010 (0x0010 - 0x0000)
struct BaseGameplayAbility_GetCallerMagnitudeByTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseGameplayAbility_GetCallerMagnitudeByTag) == 0x000004, "Wrong alignment on BaseGameplayAbility_GetCallerMagnitudeByTag");
static_assert(sizeof(BaseGameplayAbility_GetCallerMagnitudeByTag) == 0x000010, "Wrong size on BaseGameplayAbility_GetCallerMagnitudeByTag");
static_assert(offsetof(BaseGameplayAbility_GetCallerMagnitudeByTag, Tag) == 0x000000, "Member 'BaseGameplayAbility_GetCallerMagnitudeByTag::Tag' has a wrong offset!");
static_assert(offsetof(BaseGameplayAbility_GetCallerMagnitudeByTag, ReturnValue) == 0x00000C, "Member 'BaseGameplayAbility_GetCallerMagnitudeByTag::ReturnValue' has a wrong offset!");

// Function KuroGAS.BaseGameplayEffectExecutionCalculation.ExecuteImplementation
// 0x0038 (0x0038 - 0x0000)
struct BaseGameplayEffectExecutionCalculation_ExecuteImplementation final
{
public:
	int64                                         GameplayEffectId;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackNum;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           Context;                                           // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseGameplayEffectExecutionCalculation_ExecuteImplementation) == 0x000008, "Wrong alignment on BaseGameplayEffectExecutionCalculation_ExecuteImplementation");
static_assert(sizeof(BaseGameplayEffectExecutionCalculation_ExecuteImplementation) == 0x000038, "Wrong size on BaseGameplayEffectExecutionCalculation_ExecuteImplementation");
static_assert(offsetof(BaseGameplayEffectExecutionCalculation_ExecuteImplementation, GameplayEffectId) == 0x000000, "Member 'BaseGameplayEffectExecutionCalculation_ExecuteImplementation::GameplayEffectId' has a wrong offset!");
static_assert(offsetof(BaseGameplayEffectExecutionCalculation_ExecuteImplementation, Level) == 0x000008, "Member 'BaseGameplayEffectExecutionCalculation_ExecuteImplementation::Level' has a wrong offset!");
static_assert(offsetof(BaseGameplayEffectExecutionCalculation_ExecuteImplementation, StackNum) == 0x00000C, "Member 'BaseGameplayEffectExecutionCalculation_ExecuteImplementation::StackNum' has a wrong offset!");
static_assert(offsetof(BaseGameplayEffectExecutionCalculation_ExecuteImplementation, Context) == 0x000010, "Member 'BaseGameplayEffectExecutionCalculation_ExecuteImplementation::Context' has a wrong offset!");
static_assert(offsetof(BaseGameplayEffectExecutionCalculation_ExecuteImplementation, Instigator) == 0x000028, "Member 'BaseGameplayEffectExecutionCalculation_ExecuteImplementation::Instigator' has a wrong offset!");
static_assert(offsetof(BaseGameplayEffectExecutionCalculation_ExecuteImplementation, Target) == 0x000030, "Member 'BaseGameplayEffectExecutionCalculation_ExecuteImplementation::Target' has a wrong offset!");

// Function KuroGAS.BaseGameplayModMagnitudeCalculation.CalculationImplementation
// 0x0028 (0x0028 - 0x0000)
struct BaseGameplayModMagnitudeCalculation_CalculationImplementation final
{
public:
	int64                                         GameplayEffectId;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         stackNum;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseGameplayModMagnitudeCalculation_CalculationImplementation) == 0x000008, "Wrong alignment on BaseGameplayModMagnitudeCalculation_CalculationImplementation");
static_assert(sizeof(BaseGameplayModMagnitudeCalculation_CalculationImplementation) == 0x000028, "Wrong size on BaseGameplayModMagnitudeCalculation_CalculationImplementation");
static_assert(offsetof(BaseGameplayModMagnitudeCalculation_CalculationImplementation, GameplayEffectId) == 0x000000, "Member 'BaseGameplayModMagnitudeCalculation_CalculationImplementation::GameplayEffectId' has a wrong offset!");
static_assert(offsetof(BaseGameplayModMagnitudeCalculation_CalculationImplementation, Level) == 0x000008, "Member 'BaseGameplayModMagnitudeCalculation_CalculationImplementation::Level' has a wrong offset!");
static_assert(offsetof(BaseGameplayModMagnitudeCalculation_CalculationImplementation, stackNum) == 0x00000C, "Member 'BaseGameplayModMagnitudeCalculation_CalculationImplementation::stackNum' has a wrong offset!");
static_assert(offsetof(BaseGameplayModMagnitudeCalculation_CalculationImplementation, Instigator) == 0x000010, "Member 'BaseGameplayModMagnitudeCalculation_CalculationImplementation::Instigator' has a wrong offset!");
static_assert(offsetof(BaseGameplayModMagnitudeCalculation_CalculationImplementation, Target) == 0x000018, "Member 'BaseGameplayModMagnitudeCalculation_CalculationImplementation::Target' has a wrong offset!");
static_assert(offsetof(BaseGameplayModMagnitudeCalculation_CalculationImplementation, ReturnValue) == 0x000020, "Member 'BaseGameplayModMagnitudeCalculation_CalculationImplementation::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.AddDataTableRowByName_EditorOnly
// 0x0028 (0x0028 - 0x0000)
struct GASBPLibrary_AddDataTableRowByName_EditorOnly final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStruct*                                Data;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GASBPLibrary_AddDataTableRowByName_EditorOnly) == 0x000008, "Wrong alignment on GASBPLibrary_AddDataTableRowByName_EditorOnly");
static_assert(sizeof(GASBPLibrary_AddDataTableRowByName_EditorOnly) == 0x000028, "Wrong size on GASBPLibrary_AddDataTableRowByName_EditorOnly");
static_assert(offsetof(GASBPLibrary_AddDataTableRowByName_EditorOnly, DataTable) == 0x000000, "Member 'GASBPLibrary_AddDataTableRowByName_EditorOnly::DataTable' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_AddDataTableRowByName_EditorOnly, Name_0) == 0x000008, "Member 'GASBPLibrary_AddDataTableRowByName_EditorOnly::Name_0' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_AddDataTableRowByName_EditorOnly, Data) == 0x000018, "Member 'GASBPLibrary_AddDataTableRowByName_EditorOnly::Data' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_AddDataTableRowByName_EditorOnly, ReturnValue) == 0x000020, "Member 'GASBPLibrary_AddDataTableRowByName_EditorOnly::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.AddEffectContextTarget
// 0x0020 (0x0020 - 0x0000)
struct GASBPLibrary_AddEffectContextTarget final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_AddEffectContextTarget) == 0x000008, "Wrong alignment on GASBPLibrary_AddEffectContextTarget");
static_assert(sizeof(GASBPLibrary_AddEffectContextTarget) == 0x000020, "Wrong size on GASBPLibrary_AddEffectContextTarget");
static_assert(offsetof(GASBPLibrary_AddEffectContextTarget, EffectContext) == 0x000000, "Member 'GASBPLibrary_AddEffectContextTarget::EffectContext' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_AddEffectContextTarget, Actor) == 0x000018, "Member 'GASBPLibrary_AddEffectContextTarget::Actor' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.AddGameplayTag
// 0x0028 (0x0028 - 0x0000)
struct GASBPLibrary_AddGameplayTag final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         TagHash;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GASBPLibrary_AddGameplayTag) == 0x000008, "Wrong alignment on GASBPLibrary_AddGameplayTag");
static_assert(sizeof(GASBPLibrary_AddGameplayTag) == 0x000028, "Wrong size on GASBPLibrary_AddGameplayTag");
static_assert(offsetof(GASBPLibrary_AddGameplayTag, TagContainer) == 0x000000, "Member 'GASBPLibrary_AddGameplayTag::TagContainer' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_AddGameplayTag, TagHash) == 0x000020, "Member 'GASBPLibrary_AddGameplayTag::TagHash' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.AddGrantedTag
// 0x0028 (0x0028 - 0x0000)
struct GASBPLibrary_AddGrantedTag final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         TagHash;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_AddGrantedTag) == 0x000008, "Wrong alignment on GASBPLibrary_AddGrantedTag");
static_assert(sizeof(GASBPLibrary_AddGrantedTag) == 0x000028, "Wrong size on GASBPLibrary_AddGrantedTag");
static_assert(offsetof(GASBPLibrary_AddGrantedTag, SpecHandle) == 0x000000, "Member 'GASBPLibrary_AddGrantedTag::SpecHandle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_AddGrantedTag, TagHash) == 0x000010, "Member 'GASBPLibrary_AddGrantedTag::TagHash' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_AddGrantedTag, ReturnValue) == 0x000018, "Member 'GASBPLibrary_AddGrantedTag::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.AddTagToActor
// 0x0018 (0x0018 - 0x0000)
struct GASBPLibrary_AddTagToActor final
{
public:
	class UAbilitySystemComponent*                Asc;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTagHash;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarkTagHash;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GASBPLibrary_AddTagToActor) == 0x000008, "Wrong alignment on GASBPLibrary_AddTagToActor");
static_assert(sizeof(GASBPLibrary_AddTagToActor) == 0x000018, "Wrong size on GASBPLibrary_AddTagToActor");
static_assert(offsetof(GASBPLibrary_AddTagToActor, Asc) == 0x000000, "Member 'GASBPLibrary_AddTagToActor::Asc' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_AddTagToActor, InTagHash) == 0x000008, "Member 'GASBPLibrary_AddTagToActor::InTagHash' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_AddTagToActor, MarkTagHash) == 0x00000C, "Member 'GASBPLibrary_AddTagToActor::MarkTagHash' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_AddTagToActor, ReturnValue) == 0x000010, "Member 'GASBPLibrary_AddTagToActor::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.FindAllBlueprintAsset
// 0x0030 (0x0030 - 0x0000)
struct GASBPLibrary_FindAllBlueprintAsset final
{
public:
	class FName                                   BaseClassName;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetData>                     ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_FindAllBlueprintAsset) == 0x000008, "Wrong alignment on GASBPLibrary_FindAllBlueprintAsset");
static_assert(sizeof(GASBPLibrary_FindAllBlueprintAsset) == 0x000030, "Wrong size on GASBPLibrary_FindAllBlueprintAsset");
static_assert(offsetof(GASBPLibrary_FindAllBlueprintAsset, BaseClassName) == 0x000000, "Member 'GASBPLibrary_FindAllBlueprintAsset::BaseClassName' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_FindAllBlueprintAsset, Path) == 0x000010, "Member 'GASBPLibrary_FindAllBlueprintAsset::Path' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_FindAllBlueprintAsset, ReturnValue) == 0x000020, "Member 'GASBPLibrary_FindAllBlueprintAsset::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.FnvHash
// 0x0018 (0x0018 - 0x0000)
struct GASBPLibrary_FnvHash final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GASBPLibrary_FnvHash) == 0x000008, "Wrong alignment on GASBPLibrary_FnvHash");
static_assert(sizeof(GASBPLibrary_FnvHash) == 0x000018, "Wrong size on GASBPLibrary_FnvHash");
static_assert(offsetof(GASBPLibrary_FnvHash, Str) == 0x000000, "Member 'GASBPLibrary_FnvHash::Str' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_FnvHash, ReturnValue) == 0x000010, "Member 'GASBPLibrary_FnvHash::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffAssetTags
// 0x0028 (0x0028 - 0x0000)
struct GASBPLibrary_GetActiveBuffAssetTags final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffAssetTags) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveBuffAssetTags");
static_assert(sizeof(GASBPLibrary_GetActiveBuffAssetTags) == 0x000028, "Wrong size on GASBPLibrary_GetActiveBuffAssetTags");
static_assert(offsetof(GASBPLibrary_GetActiveBuffAssetTags, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffAssetTags::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffAssetTags, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveBuffAssetTags::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffContextHandle
// 0x0020 (0x0020 - 0x0000)
struct GASBPLibrary_GetActiveBuffContextHandle final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffContextHandle) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveBuffContextHandle");
static_assert(sizeof(GASBPLibrary_GetActiveBuffContextHandle) == 0x000020, "Wrong size on GASBPLibrary_GetActiveBuffContextHandle");
static_assert(offsetof(GASBPLibrary_GetActiveBuffContextHandle, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffContextHandle::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffContextHandle, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveBuffContextHandle::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffDebugAttributeString
// 0x0018 (0x0018 - 0x0000)
struct GASBPLibrary_GetActiveBuffDebugAttributeString final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffDebugAttributeString) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveBuffDebugAttributeString");
static_assert(sizeof(GASBPLibrary_GetActiveBuffDebugAttributeString) == 0x000018, "Wrong size on GASBPLibrary_GetActiveBuffDebugAttributeString");
static_assert(offsetof(GASBPLibrary_GetActiveBuffDebugAttributeString, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffDebugAttributeString::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffDebugAttributeString, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveBuffDebugAttributeString::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffDebugString
// 0x0018 (0x0018 - 0x0000)
struct GASBPLibrary_GetActiveBuffDebugString final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffDebugString) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveBuffDebugString");
static_assert(sizeof(GASBPLibrary_GetActiveBuffDebugString) == 0x000018, "Wrong size on GASBPLibrary_GetActiveBuffDebugString");
static_assert(offsetof(GASBPLibrary_GetActiveBuffDebugString, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffDebugString::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffDebugString, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveBuffDebugString::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffGrantedTags
// 0x0028 (0x0028 - 0x0000)
struct GASBPLibrary_GetActiveBuffGrantedTags final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffGrantedTags) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveBuffGrantedTags");
static_assert(sizeof(GASBPLibrary_GetActiveBuffGrantedTags) == 0x000028, "Wrong size on GASBPLibrary_GetActiveBuffGrantedTags");
static_assert(offsetof(GASBPLibrary_GetActiveBuffGrantedTags, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffGrantedTags::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffGrantedTags, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveBuffGrantedTags::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffId
// 0x0010 (0x0010 - 0x0000)
struct GASBPLibrary_GetActiveBuffId final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffId) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveBuffId");
static_assert(sizeof(GASBPLibrary_GetActiveBuffId) == 0x000010, "Wrong size on GASBPLibrary_GetActiveBuffId");
static_assert(offsetof(GASBPLibrary_GetActiveBuffId, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffId::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffId, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveBuffId::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffInstigator
// 0x0010 (0x0010 - 0x0000)
struct GASBPLibrary_GetActiveBuffInstigator final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffInstigator) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveBuffInstigator");
static_assert(sizeof(GASBPLibrary_GetActiveBuffInstigator) == 0x000010, "Wrong size on GASBPLibrary_GetActiveBuffInstigator");
static_assert(offsetof(GASBPLibrary_GetActiveBuffInstigator, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffInstigator::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffInstigator, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveBuffInstigator::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffLevel
// 0x0008 (0x0008 - 0x0000)
struct GASBPLibrary_GetActiveBuffLevel final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffLevel) == 0x000004, "Wrong alignment on GASBPLibrary_GetActiveBuffLevel");
static_assert(sizeof(GASBPLibrary_GetActiveBuffLevel) == 0x000008, "Wrong size on GASBPLibrary_GetActiveBuffLevel");
static_assert(offsetof(GASBPLibrary_GetActiveBuffLevel, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffLevel::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffLevel, ReturnValue) == 0x000004, "Member 'GASBPLibrary_GetActiveBuffLevel::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffPeriod
// 0x0008 (0x0008 - 0x0000)
struct GASBPLibrary_GetActiveBuffPeriod final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffPeriod) == 0x000004, "Wrong alignment on GASBPLibrary_GetActiveBuffPeriod");
static_assert(sizeof(GASBPLibrary_GetActiveBuffPeriod) == 0x000008, "Wrong size on GASBPLibrary_GetActiveBuffPeriod");
static_assert(offsetof(GASBPLibrary_GetActiveBuffPeriod, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffPeriod::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffPeriod, ReturnValue) == 0x000004, "Member 'GASBPLibrary_GetActiveBuffPeriod::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffRemainingDuration
// 0x0008 (0x0008 - 0x0000)
struct GASBPLibrary_GetActiveBuffRemainingDuration final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffRemainingDuration) == 0x000004, "Wrong alignment on GASBPLibrary_GetActiveBuffRemainingDuration");
static_assert(sizeof(GASBPLibrary_GetActiveBuffRemainingDuration) == 0x000008, "Wrong size on GASBPLibrary_GetActiveBuffRemainingDuration");
static_assert(offsetof(GASBPLibrary_GetActiveBuffRemainingDuration, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffRemainingDuration::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffRemainingDuration, ReturnValue) == 0x000004, "Member 'GASBPLibrary_GetActiveBuffRemainingDuration::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffServerId
// 0x0008 (0x0008 - 0x0000)
struct GASBPLibrary_GetActiveBuffServerId final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffServerId) == 0x000004, "Wrong alignment on GASBPLibrary_GetActiveBuffServerId");
static_assert(sizeof(GASBPLibrary_GetActiveBuffServerId) == 0x000008, "Wrong size on GASBPLibrary_GetActiveBuffServerId");
static_assert(offsetof(GASBPLibrary_GetActiveBuffServerId, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffServerId::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffServerId, ReturnValue) == 0x000004, "Member 'GASBPLibrary_GetActiveBuffServerId::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffStackCount
// 0x0008 (0x0008 - 0x0000)
struct GASBPLibrary_GetActiveBuffStackCount final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffStackCount) == 0x000004, "Wrong alignment on GASBPLibrary_GetActiveBuffStackCount");
static_assert(sizeof(GASBPLibrary_GetActiveBuffStackCount) == 0x000008, "Wrong size on GASBPLibrary_GetActiveBuffStackCount");
static_assert(offsetof(GASBPLibrary_GetActiveBuffStackCount, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffStackCount::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffStackCount, ReturnValue) == 0x000004, "Member 'GASBPLibrary_GetActiveBuffStackCount::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveBuffTotalDuration
// 0x0008 (0x0008 - 0x0000)
struct GASBPLibrary_GetActiveBuffTotalDuration final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveBuffTotalDuration) == 0x000004, "Wrong alignment on GASBPLibrary_GetActiveBuffTotalDuration");
static_assert(sizeof(GASBPLibrary_GetActiveBuffTotalDuration) == 0x000008, "Wrong size on GASBPLibrary_GetActiveBuffTotalDuration");
static_assert(offsetof(GASBPLibrary_GetActiveBuffTotalDuration, HandleId) == 0x000000, "Member 'GASBPLibrary_GetActiveBuffTotalDuration::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveBuffTotalDuration, ReturnValue) == 0x000004, "Member 'GASBPLibrary_GetActiveBuffTotalDuration::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveGameplayEffectAssetTags
// 0x0028 (0x0028 - 0x0000)
struct GASBPLibrary_GetActiveGameplayEffectAssetTags final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveGameplayEffectAssetTags) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveGameplayEffectAssetTags");
static_assert(sizeof(GASBPLibrary_GetActiveGameplayEffectAssetTags) == 0x000028, "Wrong size on GASBPLibrary_GetActiveGameplayEffectAssetTags");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectAssetTags, ActiveHandle) == 0x000000, "Member 'GASBPLibrary_GetActiveGameplayEffectAssetTags::ActiveHandle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectAssetTags, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveGameplayEffectAssetTags::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveGameplayEffectDebugString
// 0x0018 (0x0018 - 0x0000)
struct GASBPLibrary_GetActiveGameplayEffectDebugString final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveGameplayEffectDebugString) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveGameplayEffectDebugString");
static_assert(sizeof(GASBPLibrary_GetActiveGameplayEffectDebugString) == 0x000018, "Wrong size on GASBPLibrary_GetActiveGameplayEffectDebugString");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectDebugString, ActiveHandle) == 0x000000, "Member 'GASBPLibrary_GetActiveGameplayEffectDebugString::ActiveHandle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectDebugString, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveGameplayEffectDebugString::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveGameplayEffectGrantedTags
// 0x0028 (0x0028 - 0x0000)
struct GASBPLibrary_GetActiveGameplayEffectGrantedTags final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveGameplayEffectGrantedTags) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveGameplayEffectGrantedTags");
static_assert(sizeof(GASBPLibrary_GetActiveGameplayEffectGrantedTags) == 0x000028, "Wrong size on GASBPLibrary_GetActiveGameplayEffectGrantedTags");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectGrantedTags, ActiveHandle) == 0x000000, "Member 'GASBPLibrary_GetActiveGameplayEffectGrantedTags::ActiveHandle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectGrantedTags, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveGameplayEffectGrantedTags::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveGameplayEffectHandleEffectContext
// 0x0020 (0x0020 - 0x0000)
struct GASBPLibrary_GetActiveGameplayEffectHandleEffectContext final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveGameplayEffectHandleEffectContext) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveGameplayEffectHandleEffectContext");
static_assert(sizeof(GASBPLibrary_GetActiveGameplayEffectHandleEffectContext) == 0x000020, "Wrong size on GASBPLibrary_GetActiveGameplayEffectHandleEffectContext");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectHandleEffectContext, Handle) == 0x000000, "Member 'GASBPLibrary_GetActiveGameplayEffectHandleEffectContext::Handle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectHandleEffectContext, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveGameplayEffectHandleEffectContext::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveGameplayEffectHandleGeId
// 0x0010 (0x0010 - 0x0000)
struct GASBPLibrary_GetActiveGameplayEffectHandleGeId final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveGameplayEffectHandleGeId) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveGameplayEffectHandleGeId");
static_assert(sizeof(GASBPLibrary_GetActiveGameplayEffectHandleGeId) == 0x000010, "Wrong size on GASBPLibrary_GetActiveGameplayEffectHandleGeId");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectHandleGeId, Handle) == 0x000000, "Member 'GASBPLibrary_GetActiveGameplayEffectHandleGeId::Handle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectHandleGeId, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveGameplayEffectHandleGeId::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveGameplayEffectHandleInstigator
// 0x0010 (0x0010 - 0x0000)
struct GASBPLibrary_GetActiveGameplayEffectHandleInstigator final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveGameplayEffectHandleInstigator) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveGameplayEffectHandleInstigator");
static_assert(sizeof(GASBPLibrary_GetActiveGameplayEffectHandleInstigator) == 0x000010, "Wrong size on GASBPLibrary_GetActiveGameplayEffectHandleInstigator");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectHandleInstigator, Handle) == 0x000000, "Member 'GASBPLibrary_GetActiveGameplayEffectHandleInstigator::Handle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectHandleInstigator, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveGameplayEffectHandleInstigator::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveGameplayEffectHandleLevel
// 0x000C (0x000C - 0x0000)
struct GASBPLibrary_GetActiveGameplayEffectHandleLevel final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveGameplayEffectHandleLevel) == 0x000004, "Wrong alignment on GASBPLibrary_GetActiveGameplayEffectHandleLevel");
static_assert(sizeof(GASBPLibrary_GetActiveGameplayEffectHandleLevel) == 0x00000C, "Wrong size on GASBPLibrary_GetActiveGameplayEffectHandleLevel");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectHandleLevel, Handle) == 0x000000, "Member 'GASBPLibrary_GetActiveGameplayEffectHandleLevel::Handle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectHandleLevel, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveGameplayEffectHandleLevel::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveGameplayEffectModifiedAttributes
// 0x0018 (0x0018 - 0x0000)
struct GASBPLibrary_GetActiveGameplayEffectModifiedAttributes final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayAttribute>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveGameplayEffectModifiedAttributes) == 0x000008, "Wrong alignment on GASBPLibrary_GetActiveGameplayEffectModifiedAttributes");
static_assert(sizeof(GASBPLibrary_GetActiveGameplayEffectModifiedAttributes) == 0x000018, "Wrong size on GASBPLibrary_GetActiveGameplayEffectModifiedAttributes");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectModifiedAttributes, ActiveHandle) == 0x000000, "Member 'GASBPLibrary_GetActiveGameplayEffectModifiedAttributes::ActiveHandle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectModifiedAttributes, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveGameplayEffectModifiedAttributes::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveGameplayEffectPeriod
// 0x000C (0x000C - 0x0000)
struct GASBPLibrary_GetActiveGameplayEffectPeriod final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveGameplayEffectPeriod) == 0x000004, "Wrong alignment on GASBPLibrary_GetActiveGameplayEffectPeriod");
static_assert(sizeof(GASBPLibrary_GetActiveGameplayEffectPeriod) == 0x00000C, "Wrong size on GASBPLibrary_GetActiveGameplayEffectPeriod");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectPeriod, ActiveHandle) == 0x000000, "Member 'GASBPLibrary_GetActiveGameplayEffectPeriod::ActiveHandle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectPeriod, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveGameplayEffectPeriod::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetActiveGameplayEffectServerId
// 0x000C (0x000C - 0x0000)
struct GASBPLibrary_GetActiveGameplayEffectServerId final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetActiveGameplayEffectServerId) == 0x000004, "Wrong alignment on GASBPLibrary_GetActiveGameplayEffectServerId");
static_assert(sizeof(GASBPLibrary_GetActiveGameplayEffectServerId) == 0x00000C, "Wrong size on GASBPLibrary_GetActiveGameplayEffectServerId");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectServerId, ActiveHandle) == 0x000000, "Member 'GASBPLibrary_GetActiveGameplayEffectServerId::ActiveHandle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetActiveGameplayEffectServerId, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetActiveGameplayEffectServerId::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetAllTagsByParentTags
// 0x0038 (0x0038 - 0x0000)
struct GASBPLibrary_GetAllTagsByParentTags final
{
public:
	class UAbilitySystemComponent*                ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Query;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Result;                                            // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetAllTagsByParentTags) == 0x000008, "Wrong alignment on GASBPLibrary_GetAllTagsByParentTags");
static_assert(sizeof(GASBPLibrary_GetAllTagsByParentTags) == 0x000038, "Wrong size on GASBPLibrary_GetAllTagsByParentTags");
static_assert(offsetof(GASBPLibrary_GetAllTagsByParentTags, ASC) == 0x000000, "Member 'GASBPLibrary_GetAllTagsByParentTags::ASC' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetAllTagsByParentTags, Query) == 0x000008, "Member 'GASBPLibrary_GetAllTagsByParentTags::Query' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetAllTagsByParentTags, Result) == 0x000018, "Member 'GASBPLibrary_GetAllTagsByParentTags::Result' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetAssetPath
// 0x0018 (0x0018 - 0x0000)
struct GASBPLibrary_GetAssetPath final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GASBPLibrary_GetAssetPath) == 0x000008, "Wrong alignment on GASBPLibrary_GetAssetPath");
static_assert(sizeof(GASBPLibrary_GetAssetPath) == 0x000018, "Wrong size on GASBPLibrary_GetAssetPath");
static_assert(offsetof(GASBPLibrary_GetAssetPath, Object) == 0x000000, "Member 'GASBPLibrary_GetAssetPath::Object' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetAssetPath, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetAssetPath::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetGameplayAbilitySourceGE
// 0x0010 (0x0010 - 0x0000)
struct GASBPLibrary_GetGameplayAbilitySourceGE final
{
public:
	const class UGameplayAbility*                 GameplayAbility;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetGameplayAbilitySourceGE) == 0x000008, "Wrong alignment on GASBPLibrary_GetGameplayAbilitySourceGE");
static_assert(sizeof(GASBPLibrary_GetGameplayAbilitySourceGE) == 0x000010, "Wrong size on GASBPLibrary_GetGameplayAbilitySourceGE");
static_assert(offsetof(GASBPLibrary_GetGameplayAbilitySourceGE, GameplayAbility) == 0x000000, "Member 'GASBPLibrary_GetGameplayAbilitySourceGE::GameplayAbility' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetGameplayAbilitySourceGE, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetGameplayAbilitySourceGE::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetGameplayAbilitySystemActivatableAbilitiesDebugString
// 0x0018 (0x0018 - 0x0000)
struct GASBPLibrary_GetGameplayAbilitySystemActivatableAbilitiesDebugString final
{
public:
	const class UAbilitySystemComponent*          ASC;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetGameplayAbilitySystemActivatableAbilitiesDebugString) == 0x000008, "Wrong alignment on GASBPLibrary_GetGameplayAbilitySystemActivatableAbilitiesDebugString");
static_assert(sizeof(GASBPLibrary_GetGameplayAbilitySystemActivatableAbilitiesDebugString) == 0x000018, "Wrong size on GASBPLibrary_GetGameplayAbilitySystemActivatableAbilitiesDebugString");
static_assert(offsetof(GASBPLibrary_GetGameplayAbilitySystemActivatableAbilitiesDebugString, ASC) == 0x000000, "Member 'GASBPLibrary_GetGameplayAbilitySystemActivatableAbilitiesDebugString::ASC' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetGameplayAbilitySystemActivatableAbilitiesDebugString, ReturnValue) == 0x000008, "Member 'GASBPLibrary_GetGameplayAbilitySystemActivatableAbilitiesDebugString::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetGameplayCueNotify
// 0x0030 (0x0030 - 0x0000)
struct GASBPLibrary_GetGameplayCueNotify final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        OutSoftObjectPath;                                 // 0x0010(0x0020)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetGameplayCueNotify) == 0x000008, "Wrong alignment on GASBPLibrary_GetGameplayCueNotify");
static_assert(sizeof(GASBPLibrary_GetGameplayCueNotify) == 0x000030, "Wrong size on GASBPLibrary_GetGameplayCueNotify");
static_assert(offsetof(GASBPLibrary_GetGameplayCueNotify, GameplayTag) == 0x000000, "Member 'GASBPLibrary_GetGameplayCueNotify::GameplayTag' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetGameplayCueNotify, OutSoftObjectPath) == 0x000010, "Member 'GASBPLibrary_GetGameplayCueNotify::OutSoftObjectPath' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetGameplayEffectContextTarget
// 0x0020 (0x0020 - 0x0000)
struct GASBPLibrary_GetGameplayEffectContextTarget final
{
public:
	struct FGameplayEffectContextHandle           handle;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetGameplayEffectContextTarget) == 0x000008, "Wrong alignment on GASBPLibrary_GetGameplayEffectContextTarget");
static_assert(sizeof(GASBPLibrary_GetGameplayEffectContextTarget) == 0x000020, "Wrong size on GASBPLibrary_GetGameplayEffectContextTarget");
static_assert(offsetof(GASBPLibrary_GetGameplayEffectContextTarget, handle) == 0x000000, "Member 'GASBPLibrary_GetGameplayEffectContextTarget::handle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetGameplayEffectContextTarget, ReturnValue) == 0x000018, "Member 'GASBPLibrary_GetGameplayEffectContextTarget::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetGameplayTagFromTagHash
// 0x0010 (0x0010 - 0x0000)
struct GASBPLibrary_GetGameplayTagFromTagHash final
{
public:
	int32                                         TagHash;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetGameplayTagFromTagHash) == 0x000004, "Wrong alignment on GASBPLibrary_GetGameplayTagFromTagHash");
static_assert(sizeof(GASBPLibrary_GetGameplayTagFromTagHash) == 0x000010, "Wrong size on GASBPLibrary_GetGameplayTagFromTagHash");
static_assert(offsetof(GASBPLibrary_GetGameplayTagFromTagHash, TagHash) == 0x000000, "Member 'GASBPLibrary_GetGameplayTagFromTagHash::TagHash' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetGameplayTagFromTagHash, ReturnValue) == 0x000004, "Member 'GASBPLibrary_GetGameplayTagFromTagHash::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetGameplayTagId
// 0x0010 (0x0010 - 0x0000)
struct GASBPLibrary_GetGameplayTagId final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetGameplayTagId) == 0x000004, "Wrong alignment on GASBPLibrary_GetGameplayTagId");
static_assert(sizeof(GASBPLibrary_GetGameplayTagId) == 0x000010, "Wrong size on GASBPLibrary_GetGameplayTagId");
static_assert(offsetof(GASBPLibrary_GetGameplayTagId, Tag) == 0x000000, "Member 'GASBPLibrary_GetGameplayTagId::Tag' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetGameplayTagId, ReturnValue) == 0x00000C, "Member 'GASBPLibrary_GetGameplayTagId::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetGameplayTags
// 0x0050 (0x0050 - 0x0000)
struct GASBPLibrary_GetGameplayTags final
{
public:
	TMap<int32, struct FGameplayTag>              Tags;                                              // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetGameplayTags) == 0x000008, "Wrong alignment on GASBPLibrary_GetGameplayTags");
static_assert(sizeof(GASBPLibrary_GetGameplayTags) == 0x000050, "Wrong size on GASBPLibrary_GetGameplayTags");
static_assert(offsetof(GASBPLibrary_GetGameplayTags, Tags) == 0x000000, "Member 'GASBPLibrary_GetGameplayTags::Tags' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetNetworkGameplayTagNodeIndexHash
// 0x0008 (0x0008 - 0x0000)
struct GASBPLibrary_GetNetworkGameplayTagNodeIndexHash final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetNetworkGameplayTagNodeIndexHash) == 0x000008, "Wrong alignment on GASBPLibrary_GetNetworkGameplayTagNodeIndexHash");
static_assert(sizeof(GASBPLibrary_GetNetworkGameplayTagNodeIndexHash) == 0x000008, "Wrong size on GASBPLibrary_GetNetworkGameplayTagNodeIndexHash");
static_assert(offsetof(GASBPLibrary_GetNetworkGameplayTagNodeIndexHash, ReturnValue) == 0x000000, "Member 'GASBPLibrary_GetNetworkGameplayTagNodeIndexHash::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetOwnedGameplayTags
// 0x0028 (0x0028 - 0x0000)
struct GASBPLibrary_GetOwnedGameplayTags final
{
public:
	const class UAbilitySystemComponent*          ASC;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetContainer;                                   // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetOwnedGameplayTags) == 0x000008, "Wrong alignment on GASBPLibrary_GetOwnedGameplayTags");
static_assert(sizeof(GASBPLibrary_GetOwnedGameplayTags) == 0x000028, "Wrong size on GASBPLibrary_GetOwnedGameplayTags");
static_assert(offsetof(GASBPLibrary_GetOwnedGameplayTags, ASC) == 0x000000, "Member 'GASBPLibrary_GetOwnedGameplayTags::ASC' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetOwnedGameplayTags, TargetContainer) == 0x000008, "Member 'GASBPLibrary_GetOwnedGameplayTags::TargetContainer' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.GetUglyTag
// 0x0020 (0x0020 - 0x0000)
struct GASBPLibrary_GetUglyTag final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_GetUglyTag) == 0x000008, "Wrong alignment on GASBPLibrary_GetUglyTag");
static_assert(sizeof(GASBPLibrary_GetUglyTag) == 0x000020, "Wrong size on GASBPLibrary_GetUglyTag");
static_assert(offsetof(GASBPLibrary_GetUglyTag, Str) == 0x000000, "Member 'GASBPLibrary_GetUglyTag::Str' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_GetUglyTag, ReturnValue) == 0x000010, "Member 'GASBPLibrary_GetUglyTag::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.IsActiveBuffInhibited
// 0x0008 (0x0008 - 0x0000)
struct GASBPLibrary_IsActiveBuffInhibited final
{
public:
	int32                                         HandleId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GASBPLibrary_IsActiveBuffInhibited) == 0x000004, "Wrong alignment on GASBPLibrary_IsActiveBuffInhibited");
static_assert(sizeof(GASBPLibrary_IsActiveBuffInhibited) == 0x000008, "Wrong size on GASBPLibrary_IsActiveBuffInhibited");
static_assert(offsetof(GASBPLibrary_IsActiveBuffInhibited, HandleId) == 0x000000, "Member 'GASBPLibrary_IsActiveBuffInhibited::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_IsActiveBuffInhibited, ReturnValue) == 0x000004, "Member 'GASBPLibrary_IsActiveBuffInhibited::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.IsActiveGameplayEffectInhibited
// 0x000C (0x000C - 0x0000)
struct GASBPLibrary_IsActiveGameplayEffectInhibited final
{
public:
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GASBPLibrary_IsActiveGameplayEffectInhibited) == 0x000004, "Wrong alignment on GASBPLibrary_IsActiveGameplayEffectInhibited");
static_assert(sizeof(GASBPLibrary_IsActiveGameplayEffectInhibited) == 0x00000C, "Wrong size on GASBPLibrary_IsActiveGameplayEffectInhibited");
static_assert(offsetof(GASBPLibrary_IsActiveGameplayEffectInhibited, ActiveHandle) == 0x000000, "Member 'GASBPLibrary_IsActiveGameplayEffectInhibited::ActiveHandle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_IsActiveGameplayEffectInhibited, ReturnValue) == 0x000008, "Member 'GASBPLibrary_IsActiveGameplayEffectInhibited::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.IterateStructAndAssignAttributeSet
// 0x0010 (0x0010 - 0x0000)
struct GASBPLibrary_IterateStructAndAssignAttributeSet final
{
public:
	class UBaseAttributeSet*                      AttributeSet;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStruct*                                Data;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_IterateStructAndAssignAttributeSet) == 0x000008, "Wrong alignment on GASBPLibrary_IterateStructAndAssignAttributeSet");
static_assert(sizeof(GASBPLibrary_IterateStructAndAssignAttributeSet) == 0x000010, "Wrong size on GASBPLibrary_IterateStructAndAssignAttributeSet");
static_assert(offsetof(GASBPLibrary_IterateStructAndAssignAttributeSet, AttributeSet) == 0x000000, "Member 'GASBPLibrary_IterateStructAndAssignAttributeSet::AttributeSet' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_IterateStructAndAssignAttributeSet, Data) == 0x000008, "Member 'GASBPLibrary_IterateStructAndAssignAttributeSet::Data' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.MakeGameplayTagContainerFromTagHash
// 0x0028 (0x0028 - 0x0000)
struct GASBPLibrary_MakeGameplayTagContainerFromTagHash final
{
public:
	int32                                         TagHash;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_MakeGameplayTagContainerFromTagHash) == 0x000008, "Wrong alignment on GASBPLibrary_MakeGameplayTagContainerFromTagHash");
static_assert(sizeof(GASBPLibrary_MakeGameplayTagContainerFromTagHash) == 0x000028, "Wrong size on GASBPLibrary_MakeGameplayTagContainerFromTagHash");
static_assert(offsetof(GASBPLibrary_MakeGameplayTagContainerFromTagHash, TagHash) == 0x000000, "Member 'GASBPLibrary_MakeGameplayTagContainerFromTagHash::TagHash' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_MakeGameplayTagContainerFromTagHash, ReturnValue) == 0x000008, "Member 'GASBPLibrary_MakeGameplayTagContainerFromTagHash::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.RemoveActiveBuff
// 0x0018 (0x0018 - 0x0000)
struct GASBPLibrary_RemoveActiveBuff final
{
public:
	class UAbilitySystemComponent*                Asc;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandleId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GASBPLibrary_RemoveActiveBuff) == 0x000008, "Wrong alignment on GASBPLibrary_RemoveActiveBuff");
static_assert(sizeof(GASBPLibrary_RemoveActiveBuff) == 0x000018, "Wrong size on GASBPLibrary_RemoveActiveBuff");
static_assert(offsetof(GASBPLibrary_RemoveActiveBuff, Asc) == 0x000000, "Member 'GASBPLibrary_RemoveActiveBuff::Asc' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_RemoveActiveBuff, HandleId) == 0x000008, "Member 'GASBPLibrary_RemoveActiveBuff::HandleId' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_RemoveActiveBuff, StacksToRemove) == 0x00000C, "Member 'GASBPLibrary_RemoveActiveBuff::StacksToRemove' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_RemoveActiveBuff, ReturnValue) == 0x000010, "Member 'GASBPLibrary_RemoveActiveBuff::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.RemoveAllDurationGameplayEffects
// 0x0008 (0x0008 - 0x0000)
struct GASBPLibrary_RemoveAllDurationGameplayEffects final
{
public:
	class UAbilitySystemComponent*                ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_RemoveAllDurationGameplayEffects) == 0x000008, "Wrong alignment on GASBPLibrary_RemoveAllDurationGameplayEffects");
static_assert(sizeof(GASBPLibrary_RemoveAllDurationGameplayEffects) == 0x000008, "Wrong size on GASBPLibrary_RemoveAllDurationGameplayEffects");
static_assert(offsetof(GASBPLibrary_RemoveAllDurationGameplayEffects, ASC) == 0x000000, "Member 'GASBPLibrary_RemoveAllDurationGameplayEffects::ASC' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.RemoveAllGameplayEffects
// 0x0008 (0x0008 - 0x0000)
struct GASBPLibrary_RemoveAllGameplayEffects final
{
public:
	class UAbilitySystemComponent*                ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_RemoveAllGameplayEffects) == 0x000008, "Wrong alignment on GASBPLibrary_RemoveAllGameplayEffects");
static_assert(sizeof(GASBPLibrary_RemoveAllGameplayEffects) == 0x000008, "Wrong size on GASBPLibrary_RemoveAllGameplayEffects");
static_assert(offsetof(GASBPLibrary_RemoveAllGameplayEffects, ASC) == 0x000000, "Member 'GASBPLibrary_RemoveAllGameplayEffects::ASC' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.RemoveBuffByTagFromActor
// 0x0010 (0x0010 - 0x0000)
struct GASBPLibrary_RemoveBuffByTagFromActor final
{
public:
	class UAbilitySystemComponent*                Asc;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTagHash;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarkTagHash;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_RemoveBuffByTagFromActor) == 0x000008, "Wrong alignment on GASBPLibrary_RemoveBuffByTagFromActor");
static_assert(sizeof(GASBPLibrary_RemoveBuffByTagFromActor) == 0x000010, "Wrong size on GASBPLibrary_RemoveBuffByTagFromActor");
static_assert(offsetof(GASBPLibrary_RemoveBuffByTagFromActor, Asc) == 0x000000, "Member 'GASBPLibrary_RemoveBuffByTagFromActor::Asc' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_RemoveBuffByTagFromActor, InTagHash) == 0x000008, "Member 'GASBPLibrary_RemoveBuffByTagFromActor::InTagHash' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_RemoveBuffByTagFromActor, MarkTagHash) == 0x00000C, "Member 'GASBPLibrary_RemoveBuffByTagFromActor::MarkTagHash' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.RemoveTagFromActor
// 0x0010 (0x0010 - 0x0000)
struct GASBPLibrary_RemoveTagFromActor final
{
public:
	class UAbilitySystemComponent*                Asc;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTagHash;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarkTagHash;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_RemoveTagFromActor) == 0x000008, "Wrong alignment on GASBPLibrary_RemoveTagFromActor");
static_assert(sizeof(GASBPLibrary_RemoveTagFromActor) == 0x000010, "Wrong size on GASBPLibrary_RemoveTagFromActor");
static_assert(offsetof(GASBPLibrary_RemoveTagFromActor, Asc) == 0x000000, "Member 'GASBPLibrary_RemoveTagFromActor::Asc' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_RemoveTagFromActor, InTagHash) == 0x000008, "Member 'GASBPLibrary_RemoveTagFromActor::InTagHash' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_RemoveTagFromActor, MarkTagHash) == 0x00000C, "Member 'GASBPLibrary_RemoveTagFromActor::MarkTagHash' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.ResetGameplayEffectSpecPeriod
// 0x0028 (0x0028 - 0x0000)
struct GASBPLibrary_ResetGameplayEffectSpecPeriod final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	float                                         NewPeriod;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_ResetGameplayEffectSpecPeriod) == 0x000008, "Wrong alignment on GASBPLibrary_ResetGameplayEffectSpecPeriod");
static_assert(sizeof(GASBPLibrary_ResetGameplayEffectSpecPeriod) == 0x000028, "Wrong size on GASBPLibrary_ResetGameplayEffectSpecPeriod");
static_assert(offsetof(GASBPLibrary_ResetGameplayEffectSpecPeriod, SpecHandle) == 0x000000, "Member 'GASBPLibrary_ResetGameplayEffectSpecPeriod::SpecHandle' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_ResetGameplayEffectSpecPeriod, NewPeriod) == 0x000010, "Member 'GASBPLibrary_ResetGameplayEffectSpecPeriod::NewPeriod' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_ResetGameplayEffectSpecPeriod, ReturnValue) == 0x000018, "Member 'GASBPLibrary_ResetGameplayEffectSpecPeriod::ReturnValue' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.SetAttributeValue
// 0x0010 (0x0010 - 0x0000)
struct GASBPLibrary_SetAttributeValue final
{
public:
	class UBaseAttributeSet*                      AttributeSet;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStruct*                                InStruct;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_SetAttributeValue) == 0x000008, "Wrong alignment on GASBPLibrary_SetAttributeValue");
static_assert(sizeof(GASBPLibrary_SetAttributeValue) == 0x000010, "Wrong size on GASBPLibrary_SetAttributeValue");
static_assert(offsetof(GASBPLibrary_SetAttributeValue, AttributeSet) == 0x000000, "Member 'GASBPLibrary_SetAttributeValue::AttributeSet' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_SetAttributeValue, InStruct) == 0x000008, "Member 'GASBPLibrary_SetAttributeValue::InStruct' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.SetNeedSyncAttributes
// 0x0050 (0x0050 - 0x0000)
struct GASBPLibrary_SetNeedSyncAttributes final
{
public:
	TSet<int32>                                   SourceNeedSyncAttributes;                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GASBPLibrary_SetNeedSyncAttributes) == 0x000008, "Wrong alignment on GASBPLibrary_SetNeedSyncAttributes");
static_assert(sizeof(GASBPLibrary_SetNeedSyncAttributes) == 0x000050, "Wrong size on GASBPLibrary_SetNeedSyncAttributes");
static_assert(offsetof(GASBPLibrary_SetNeedSyncAttributes, SourceNeedSyncAttributes) == 0x000000, "Member 'GASBPLibrary_SetNeedSyncAttributes::SourceNeedSyncAttributes' has a wrong offset!");

// Function KuroGAS.GASBPLibrary.SetRootComponent
// 0x0018 (0x0018 - 0x0000)
struct GASBPLibrary_SetRootComponent final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        NewRootComponent;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GASBPLibrary_SetRootComponent) == 0x000008, "Wrong alignment on GASBPLibrary_SetRootComponent");
static_assert(sizeof(GASBPLibrary_SetRootComponent) == 0x000018, "Wrong size on GASBPLibrary_SetRootComponent");
static_assert(offsetof(GASBPLibrary_SetRootComponent, TargetActor) == 0x000000, "Member 'GASBPLibrary_SetRootComponent::TargetActor' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_SetRootComponent, NewRootComponent) == 0x000008, "Member 'GASBPLibrary_SetRootComponent::NewRootComponent' has a wrong offset!");
static_assert(offsetof(GASBPLibrary_SetRootComponent, ReturnValue) == 0x000010, "Member 'GASBPLibrary_SetRootComponent::ReturnValue' has a wrong offset!");

// Function KuroGAS.AbilityTask_WaitDelayForNextTick.WaitDelayForNextTick
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_WaitDelayForNextTick_WaitDelayForNextTick final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_WaitDelayForNextTick*      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitDelayForNextTick_WaitDelayForNextTick) == 0x000008, "Wrong alignment on AbilityTask_WaitDelayForNextTick_WaitDelayForNextTick");
static_assert(sizeof(AbilityTask_WaitDelayForNextTick_WaitDelayForNextTick) == 0x000010, "Wrong size on AbilityTask_WaitDelayForNextTick_WaitDelayForNextTick");
static_assert(offsetof(AbilityTask_WaitDelayForNextTick_WaitDelayForNextTick, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitDelayForNextTick_WaitDelayForNextTick::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitDelayForNextTick_WaitDelayForNextTick, ReturnValue) == 0x000008, "Member 'AbilityTask_WaitDelayForNextTick_WaitDelayForNextTick::ReturnValue' has a wrong offset!");

}

