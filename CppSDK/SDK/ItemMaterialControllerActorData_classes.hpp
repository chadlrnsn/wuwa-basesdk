#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemMaterialControllerActorData

#include "Basic.hpp"

#include "KuroCurve_structs.hpp"
#include "Engine_classes.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass ItemMaterialControllerActorData.ItemMaterialControllerActorData_C
// 0x2AA0 (0x2AD8 - 0x0038)
class UItemMaterialControllerActorData_C final : public UPrimaryDataAsset
{
public:
	float                                         StartTime;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LoopTime;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndTime;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableBaseColorScale;                              // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        BaseColorScale;                                    // 0x0048(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnableAddEmissionColor;                            // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  AddEmissionColor;                                  // 0x00E0(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnableRimLight;                                    // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  RimLightColor;                                     // 0x0308(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnableDissolve;                                    // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        DissolveProgress;                                  // 0x0530(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        DissolveAdjustment;                                // 0x05C0(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveLinearColor                  DissolveTexScaleOffset;                            // 0x0650(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveLinearColor                  DissolveTexSpeed;                                  // 0x0870(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        RimPower;                                          // 0x0A90(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	KuroRenderingRuntimeBPPlugin::ECharacterControllerUVSwitch DissolveUv;                                        // 0x0B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B21[0x7];                                      // 0x0B21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  DissolveEdageColor;                                // 0x0B28(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        DissolveEdageStrength;                             // 0x0D48(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        DissolveEdageWidth;                                // 0x0DD8(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnableScanning;                                    // 0x0E68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E69[0x7];                                      // 0x0E69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        ScanningOutlineStrength;                           // 0x0E70(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveLinearColor                  ScanningOutlineTexScaleOffset;                     // 0x0F00(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveLinearColor                  ScanningOutlineColor;                              // 0x1120(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        ScanningOutlineMixNoiseStrength;                   // 0x1340(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnableEmissionChange;                              // 0x13D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D1[0x7];                                     // 0x13D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        EmissionLightColorChangeProgress;                  // 0x13D8(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        EmissionLightColorChangeStrength;                  // 0x1468(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveLinearColor                  EmissionLightColorChangeColor;                     // 0x14F8(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        VertexAnimTimeDebug;                               // 0x1718(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper)
	struct FKuroCurveFloat                        VertexAnimFrame;                                   // 0x17A8(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper)
	bool                                          EnablePivotPainterWorldPositionOffset;             // 0x1838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_1839[0x7];                                     // 0x1839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  PivotPainterTransform;                             // 0x1840(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper)
	struct FKuroCurveFloat                        FloatingThreshold;                                 // 0x1A60(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper)
	bool                                          DisableFoliageEffect;                              // 0x1AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          EnableFoliageEffect;                               // 0x1AF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          UseRimlightColorSpecil;                            // 0x1AF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_1AF3[0x5];                                     // 0x1AF3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  RimLightColorSpecil;                               // 0x1AF8(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper)
	struct FKuroCurveFloat                        RimlightColorStrength;                             // 0x1D18(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper)
	bool                                          EnableWorldPositionOffset;                         // 0x1DA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_1DA9[0x7];                                     // 0x1DA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  WorldPositionOffsetOffset;                         // 0x1DB0(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper)
	struct FKuroCurveFloat                        WorldPositionOffsetNormal;                         // 0x1FD0(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper)
	bool                                          UseEmissionTex;                                    // 0x2060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_2061[0x7];                                     // 0x2061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        EmissionTexStrength;                               // 0x2068(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper)
	struct FKuroCurveFloat                        SimpleUspeed;                                      // 0x20F8(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        SimpleVspeed;                                      // 0x2188(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveFloat                        SimpleUseFlow;                                     // 0x2218(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnableQuanXiPinTu;                                 // 0x22A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22A9[0x7];                                     // 0x22A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        TransparencyQuanXiPinTu;                           // 0x22B0(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveLinearColor                  TransparentColorQuanXiPinTu;                       // 0x2340(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveLinearColor                  OpaqueColorQuanXiPinTu;                            // 0x2560(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnableQuanXiFengSuo;                               // 0x2780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2781[0x7];                                     // 0x2781(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        TransparencyQuanXiFengSuo;                         // 0x2788(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKuroCurveLinearColor                  TransparentColorQuanXiFengSuo;                     // 0x2818(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FKuroCurveFloat>     CustomScalarParMap;                                // 0x2A38(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FKuroCurveLinearColor> CustomColorParMap;                                 // 0x2A88(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ItemMaterialControllerActorData_C">();
	}
	static class UItemMaterialControllerActorData_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemMaterialControllerActorData_C>();
	}
};
static_assert(alignof(UItemMaterialControllerActorData_C) == 0x000008, "Wrong alignment on UItemMaterialControllerActorData_C");
static_assert(sizeof(UItemMaterialControllerActorData_C) == 0x002AD8, "Wrong size on UItemMaterialControllerActorData_C");
static_assert(offsetof(UItemMaterialControllerActorData_C, StartTime) == 0x000038, "Member 'UItemMaterialControllerActorData_C::StartTime' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, LoopTime) == 0x00003C, "Member 'UItemMaterialControllerActorData_C::LoopTime' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EndTime) == 0x000040, "Member 'UItemMaterialControllerActorData_C::EndTime' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EnableBaseColorScale) == 0x000044, "Member 'UItemMaterialControllerActorData_C::EnableBaseColorScale' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, BaseColorScale) == 0x000048, "Member 'UItemMaterialControllerActorData_C::BaseColorScale' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EnableAddEmissionColor) == 0x0000D8, "Member 'UItemMaterialControllerActorData_C::EnableAddEmissionColor' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, AddEmissionColor) == 0x0000E0, "Member 'UItemMaterialControllerActorData_C::AddEmissionColor' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EnableRimLight) == 0x000300, "Member 'UItemMaterialControllerActorData_C::EnableRimLight' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, RimLightColor) == 0x000308, "Member 'UItemMaterialControllerActorData_C::RimLightColor' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EnableDissolve) == 0x000528, "Member 'UItemMaterialControllerActorData_C::EnableDissolve' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, DissolveProgress) == 0x000530, "Member 'UItemMaterialControllerActorData_C::DissolveProgress' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, DissolveAdjustment) == 0x0005C0, "Member 'UItemMaterialControllerActorData_C::DissolveAdjustment' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, DissolveTexScaleOffset) == 0x000650, "Member 'UItemMaterialControllerActorData_C::DissolveTexScaleOffset' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, DissolveTexSpeed) == 0x000870, "Member 'UItemMaterialControllerActorData_C::DissolveTexSpeed' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, RimPower) == 0x000A90, "Member 'UItemMaterialControllerActorData_C::RimPower' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, DissolveUv) == 0x000B20, "Member 'UItemMaterialControllerActorData_C::DissolveUv' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, DissolveEdageColor) == 0x000B28, "Member 'UItemMaterialControllerActorData_C::DissolveEdageColor' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, DissolveEdageStrength) == 0x000D48, "Member 'UItemMaterialControllerActorData_C::DissolveEdageStrength' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, DissolveEdageWidth) == 0x000DD8, "Member 'UItemMaterialControllerActorData_C::DissolveEdageWidth' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EnableScanning) == 0x000E68, "Member 'UItemMaterialControllerActorData_C::EnableScanning' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, ScanningOutlineStrength) == 0x000E70, "Member 'UItemMaterialControllerActorData_C::ScanningOutlineStrength' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, ScanningOutlineTexScaleOffset) == 0x000F00, "Member 'UItemMaterialControllerActorData_C::ScanningOutlineTexScaleOffset' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, ScanningOutlineColor) == 0x001120, "Member 'UItemMaterialControllerActorData_C::ScanningOutlineColor' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, ScanningOutlineMixNoiseStrength) == 0x001340, "Member 'UItemMaterialControllerActorData_C::ScanningOutlineMixNoiseStrength' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EnableEmissionChange) == 0x0013D0, "Member 'UItemMaterialControllerActorData_C::EnableEmissionChange' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EmissionLightColorChangeProgress) == 0x0013D8, "Member 'UItemMaterialControllerActorData_C::EmissionLightColorChangeProgress' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EmissionLightColorChangeStrength) == 0x001468, "Member 'UItemMaterialControllerActorData_C::EmissionLightColorChangeStrength' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EmissionLightColorChangeColor) == 0x0014F8, "Member 'UItemMaterialControllerActorData_C::EmissionLightColorChangeColor' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, VertexAnimTimeDebug) == 0x001718, "Member 'UItemMaterialControllerActorData_C::VertexAnimTimeDebug' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, VertexAnimFrame) == 0x0017A8, "Member 'UItemMaterialControllerActorData_C::VertexAnimFrame' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EnablePivotPainterWorldPositionOffset) == 0x001838, "Member 'UItemMaterialControllerActorData_C::EnablePivotPainterWorldPositionOffset' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, PivotPainterTransform) == 0x001840, "Member 'UItemMaterialControllerActorData_C::PivotPainterTransform' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, FloatingThreshold) == 0x001A60, "Member 'UItemMaterialControllerActorData_C::FloatingThreshold' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, DisableFoliageEffect) == 0x001AF0, "Member 'UItemMaterialControllerActorData_C::DisableFoliageEffect' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EnableFoliageEffect) == 0x001AF1, "Member 'UItemMaterialControllerActorData_C::EnableFoliageEffect' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, UseRimlightColorSpecil) == 0x001AF2, "Member 'UItemMaterialControllerActorData_C::UseRimlightColorSpecil' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, RimLightColorSpecil) == 0x001AF8, "Member 'UItemMaterialControllerActorData_C::RimLightColorSpecil' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, RimlightColorStrength) == 0x001D18, "Member 'UItemMaterialControllerActorData_C::RimlightColorStrength' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EnableWorldPositionOffset) == 0x001DA8, "Member 'UItemMaterialControllerActorData_C::EnableWorldPositionOffset' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, WorldPositionOffsetOffset) == 0x001DB0, "Member 'UItemMaterialControllerActorData_C::WorldPositionOffsetOffset' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, WorldPositionOffsetNormal) == 0x001FD0, "Member 'UItemMaterialControllerActorData_C::WorldPositionOffsetNormal' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, UseEmissionTex) == 0x002060, "Member 'UItemMaterialControllerActorData_C::UseEmissionTex' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EmissionTexStrength) == 0x002068, "Member 'UItemMaterialControllerActorData_C::EmissionTexStrength' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, SimpleUspeed) == 0x0020F8, "Member 'UItemMaterialControllerActorData_C::SimpleUspeed' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, SimpleVspeed) == 0x002188, "Member 'UItemMaterialControllerActorData_C::SimpleVspeed' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, SimpleUseFlow) == 0x002218, "Member 'UItemMaterialControllerActorData_C::SimpleUseFlow' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EnableQuanXiPinTu) == 0x0022A8, "Member 'UItemMaterialControllerActorData_C::EnableQuanXiPinTu' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, TransparencyQuanXiPinTu) == 0x0022B0, "Member 'UItemMaterialControllerActorData_C::TransparencyQuanXiPinTu' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, TransparentColorQuanXiPinTu) == 0x002340, "Member 'UItemMaterialControllerActorData_C::TransparentColorQuanXiPinTu' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, OpaqueColorQuanXiPinTu) == 0x002560, "Member 'UItemMaterialControllerActorData_C::OpaqueColorQuanXiPinTu' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, EnableQuanXiFengSuo) == 0x002780, "Member 'UItemMaterialControllerActorData_C::EnableQuanXiFengSuo' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, TransparencyQuanXiFengSuo) == 0x002788, "Member 'UItemMaterialControllerActorData_C::TransparencyQuanXiFengSuo' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, TransparentColorQuanXiFengSuo) == 0x002818, "Member 'UItemMaterialControllerActorData_C::TransparentColorQuanXiFengSuo' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, CustomScalarParMap) == 0x002A38, "Member 'UItemMaterialControllerActorData_C::CustomScalarParMap' has a wrong offset!");
static_assert(offsetof(UItemMaterialControllerActorData_C, CustomColorParMap) == 0x002A88, "Member 'UItemMaterialControllerActorData_C::CustomColorParMap' has a wrong offset!");

}

