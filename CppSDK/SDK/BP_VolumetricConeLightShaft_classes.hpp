#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VolumetricConeLightShaft

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VolumetricConeLightShaft.BP_VolumetricConeLightShaft_C
// 0x0140 (0x03F0 - 0x02B0)
class ABP_VolumetricConeLightShaft_C final : public AActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            StaticMeshCone;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MaterialInstance;                                  // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MaterialInstanceB;                                 // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MaterialInstanceBT;                                // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MaterialInstanceT;                                 // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VolumetriConeScale;                                // 0x02E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableBottomColor;                                 // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWholeDay;                                        // 0x02ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableFlickent;                                    // 0x02EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EF[0x1];                                      // 0x02EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConeSin;                                           // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadFallOut;                                        // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TopClip;                                           // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TopColorLerp;                                      // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TopColor;                                          // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BottomColor;                                       // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkyLightInt;                                       // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkyLightOffset;                                    // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrightLength;                                      // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlickerTime;                                       // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DepthFade;                                         // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ViewTime;                                          // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LightShaftScale;                                   // 0x0338(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            LightShaftStaticMeshCone;                          // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      LightShaftCone;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Mask;                                              // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FallOff_ColorTint;                                 // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallOff_DepthFade;                                 // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenFadeFrom;                                    // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Opacity_CenterPower;                               // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenFadeDistance;                                // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShaftTopClip;                                      // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UVScaleAndAdd;                                     // 0x0384(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            LightMaskStaticMesh;                               // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightMaskZaxis;                                    // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      LightMaskMaterial;                                 // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LightMaskScale;                                    // 0x03B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightMaskColorTint;                                // 0x03BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             LightMaskTexture;                                  // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ColorIntensity;                                    // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Opacity;                                           // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeDistance;                                      // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlankInt;                                          // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Power;                                             // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightSideInt;                                      // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VolumetricConeLightShaft_C">();
	}
	static class ABP_VolumetricConeLightShaft_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VolumetricConeLightShaft_C>();
	}
};
static_assert(alignof(ABP_VolumetricConeLightShaft_C) == 0x000008, "Wrong alignment on ABP_VolumetricConeLightShaft_C");
static_assert(sizeof(ABP_VolumetricConeLightShaft_C) == 0x0003F0, "Wrong size on ABP_VolumetricConeLightShaft_C");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_VolumetricConeLightShaft_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, StaticMeshCone) == 0x0002B8, "Member 'ABP_VolumetricConeLightShaft_C::StaticMeshCone' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, MaterialInstance) == 0x0002C0, "Member 'ABP_VolumetricConeLightShaft_C::MaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, MaterialInstanceB) == 0x0002C8, "Member 'ABP_VolumetricConeLightShaft_C::MaterialInstanceB' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, MaterialInstanceBT) == 0x0002D0, "Member 'ABP_VolumetricConeLightShaft_C::MaterialInstanceBT' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, MaterialInstanceT) == 0x0002D8, "Member 'ABP_VolumetricConeLightShaft_C::MaterialInstanceT' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, VolumetriConeScale) == 0x0002E0, "Member 'ABP_VolumetricConeLightShaft_C::VolumetriConeScale' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, EnableBottomColor) == 0x0002EC, "Member 'ABP_VolumetricConeLightShaft_C::EnableBottomColor' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, IsWholeDay) == 0x0002ED, "Member 'ABP_VolumetricConeLightShaft_C::IsWholeDay' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, EnableFlickent) == 0x0002EE, "Member 'ABP_VolumetricConeLightShaft_C::EnableFlickent' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, ConeSin) == 0x0002F0, "Member 'ABP_VolumetricConeLightShaft_C::ConeSin' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, RadFallOut) == 0x0002F4, "Member 'ABP_VolumetricConeLightShaft_C::RadFallOut' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, TopClip) == 0x0002F8, "Member 'ABP_VolumetricConeLightShaft_C::TopClip' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, TopColorLerp) == 0x0002FC, "Member 'ABP_VolumetricConeLightShaft_C::TopColorLerp' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, TopColor) == 0x000300, "Member 'ABP_VolumetricConeLightShaft_C::TopColor' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, BottomColor) == 0x000310, "Member 'ABP_VolumetricConeLightShaft_C::BottomColor' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, SkyLightInt) == 0x000320, "Member 'ABP_VolumetricConeLightShaft_C::SkyLightInt' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, SkyLightOffset) == 0x000324, "Member 'ABP_VolumetricConeLightShaft_C::SkyLightOffset' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, BrightLength) == 0x000328, "Member 'ABP_VolumetricConeLightShaft_C::BrightLength' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, FlickerTime) == 0x00032C, "Member 'ABP_VolumetricConeLightShaft_C::FlickerTime' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, DepthFade) == 0x000330, "Member 'ABP_VolumetricConeLightShaft_C::DepthFade' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, ViewTime) == 0x000334, "Member 'ABP_VolumetricConeLightShaft_C::ViewTime' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, LightShaftScale) == 0x000338, "Member 'ABP_VolumetricConeLightShaft_C::LightShaftScale' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, LightShaftStaticMeshCone) == 0x000348, "Member 'ABP_VolumetricConeLightShaft_C::LightShaftStaticMeshCone' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, LightShaftCone) == 0x000350, "Member 'ABP_VolumetricConeLightShaft_C::LightShaftCone' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, Mask) == 0x000358, "Member 'ABP_VolumetricConeLightShaft_C::Mask' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, FallOff_ColorTint) == 0x000360, "Member 'ABP_VolumetricConeLightShaft_C::FallOff_ColorTint' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, FallOff_DepthFade) == 0x000370, "Member 'ABP_VolumetricConeLightShaft_C::FallOff_DepthFade' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, ScreenFadeFrom) == 0x000374, "Member 'ABP_VolumetricConeLightShaft_C::ScreenFadeFrom' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, Opacity_CenterPower) == 0x000378, "Member 'ABP_VolumetricConeLightShaft_C::Opacity_CenterPower' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, ScreenFadeDistance) == 0x00037C, "Member 'ABP_VolumetricConeLightShaft_C::ScreenFadeDistance' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, ShaftTopClip) == 0x000380, "Member 'ABP_VolumetricConeLightShaft_C::ShaftTopClip' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, UVScaleAndAdd) == 0x000384, "Member 'ABP_VolumetricConeLightShaft_C::UVScaleAndAdd' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, LightMaskStaticMesh) == 0x000398, "Member 'ABP_VolumetricConeLightShaft_C::LightMaskStaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, LightMaskZaxis) == 0x0003A0, "Member 'ABP_VolumetricConeLightShaft_C::LightMaskZaxis' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, LightMaskMaterial) == 0x0003A8, "Member 'ABP_VolumetricConeLightShaft_C::LightMaskMaterial' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, LightMaskScale) == 0x0003B0, "Member 'ABP_VolumetricConeLightShaft_C::LightMaskScale' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, LightMaskColorTint) == 0x0003BC, "Member 'ABP_VolumetricConeLightShaft_C::LightMaskColorTint' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, LightMaskTexture) == 0x0003D0, "Member 'ABP_VolumetricConeLightShaft_C::LightMaskTexture' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, ColorIntensity) == 0x0003D8, "Member 'ABP_VolumetricConeLightShaft_C::ColorIntensity' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, Opacity) == 0x0003DC, "Member 'ABP_VolumetricConeLightShaft_C::Opacity' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, FadeDistance) == 0x0003E0, "Member 'ABP_VolumetricConeLightShaft_C::FadeDistance' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, FlankInt) == 0x0003E4, "Member 'ABP_VolumetricConeLightShaft_C::FlankInt' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, Power) == 0x0003E8, "Member 'ABP_VolumetricConeLightShaft_C::Power' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricConeLightShaft_C, RightSideInt) == 0x0003EC, "Member 'ABP_VolumetricConeLightShaft_C::RightSideInt' has a wrong offset!");

}

