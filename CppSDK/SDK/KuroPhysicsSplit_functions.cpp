#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroPhysicsSplit

#include "Basic.hpp"

#include "KuroPhysicsSplit_classes.hpp"
#include "KuroPhysicsSplit_parameters.hpp"


namespace SDK
{

// Function KuroPhysicsSplit.KuroPhysicsSplitSystem.IsTickFinishBP
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroPhysicsSplitSystem::IsTickFinishBP(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPhysicsSplitSystem", "IsTickFinishBP");

	Params::KuroPhysicsSplitSystem_IsTickFinishBP Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroPhysicsSplit.KuroPhysicsSplitSystem.StartTickPhysicsStateBP
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bUseProcessNumPerFrame                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             ProcessNumPerFrame                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroPhysicsSplitSystem::StartTickPhysicsStateBP(class UWorld* World, const bool bUseProcessNumPerFrame, const int32 ProcessNumPerFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroPhysicsSplitSystem", "StartTickPhysicsStateBP");

	Params::KuroPhysicsSplitSystem_StartTickPhysicsStateBP Parms{};

	Parms.World = World;
	Parms.bUseProcessNumPerFrame = bUseProcessNumPerFrame;
	Parms.ProcessNumPerFrame = ProcessNumPerFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

