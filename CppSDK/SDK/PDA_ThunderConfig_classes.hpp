#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PDA_ThunderConfig

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"
#include "KuroCurve_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PDA_ThunderConfig.PDA_ThunderConfig_C
// 0x03C8 (0x0400 - 0x0038)
class UPDA_ThunderConfig_C final : public UPrimaryDataAsset
{
public:
	float                                         落雷概率;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         雷落地概率;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         落雷间隔Min;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         落雷间隔Max;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         ThunderNiagara;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKuroCurveFloat                        灯光强度曲线;                                      // 0x0050(0x0090)(Edit, BlueprintVisible)
	struct FKuroCurveFloat                        灯光半径曲线;                                      // 0x00E0(0x0090)(Edit, BlueprintVisible)
	struct FKuroCurveFloat                        后处理强度曲线;                                    // 0x0170(0x0090)(Edit, BlueprintVisible)
	float                                         落雷内半径;                                        // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         落雷外半径;                                        // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         位置系数;                                          // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         射线高度Min;                                       // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         射线高度Max;                                       // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        云层雷闪光强度曲线;                                // 0x0218(0x0090)(Edit, BlueprintVisible)
	class UAkAudioEvent*                          AudioEvent_2D;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwoDEventStopTransition;                           // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AudioEvent_Lightening;                             // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKuroCurveFloat                        云层压暗曲线;                                      // 0x02C0(0x0090)(Edit, BlueprintVisible)
	struct FKuroCurveFloat                        暗角曲线;                                          // 0x0350(0x0090)(Edit, BlueprintVisible)
	bool                                          局部云层闪光;                                      // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x3];                                      // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         云层闪电高度;                                      // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKuroWeatherDataAsset*                  PostProcessData;                                   // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           默认闪电颜色;                                      // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PDA_ThunderConfig_C">();
	}
	static class UPDA_ThunderConfig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPDA_ThunderConfig_C>();
	}
};
static_assert(alignof(UPDA_ThunderConfig_C) == 0x000008, "Wrong alignment on UPDA_ThunderConfig_C");
static_assert(sizeof(UPDA_ThunderConfig_C) == 0x000400, "Wrong size on UPDA_ThunderConfig_C");
static_assert(offsetof(UPDA_ThunderConfig_C, 落雷概率) == 0x000038, "Member 'UPDA_ThunderConfig_C::落雷概率' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 雷落地概率) == 0x00003C, "Member 'UPDA_ThunderConfig_C::雷落地概率' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 落雷间隔Min) == 0x000040, "Member 'UPDA_ThunderConfig_C::落雷间隔Min' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 落雷间隔Max) == 0x000044, "Member 'UPDA_ThunderConfig_C::落雷间隔Max' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, ThunderNiagara) == 0x000048, "Member 'UPDA_ThunderConfig_C::ThunderNiagara' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 灯光强度曲线) == 0x000050, "Member 'UPDA_ThunderConfig_C::灯光强度曲线' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 灯光半径曲线) == 0x0000E0, "Member 'UPDA_ThunderConfig_C::灯光半径曲线' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 后处理强度曲线) == 0x000170, "Member 'UPDA_ThunderConfig_C::后处理强度曲线' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 落雷内半径) == 0x000200, "Member 'UPDA_ThunderConfig_C::落雷内半径' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 落雷外半径) == 0x000204, "Member 'UPDA_ThunderConfig_C::落雷外半径' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 位置系数) == 0x000208, "Member 'UPDA_ThunderConfig_C::位置系数' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 射线高度Min) == 0x00020C, "Member 'UPDA_ThunderConfig_C::射线高度Min' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 射线高度Max) == 0x000210, "Member 'UPDA_ThunderConfig_C::射线高度Max' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 云层雷闪光强度曲线) == 0x000218, "Member 'UPDA_ThunderConfig_C::云层雷闪光强度曲线' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, AudioEvent_2D) == 0x0002A8, "Member 'UPDA_ThunderConfig_C::AudioEvent_2D' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, TwoDEventStopTransition) == 0x0002B0, "Member 'UPDA_ThunderConfig_C::TwoDEventStopTransition' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, AudioEvent_Lightening) == 0x0002B8, "Member 'UPDA_ThunderConfig_C::AudioEvent_Lightening' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 云层压暗曲线) == 0x0002C0, "Member 'UPDA_ThunderConfig_C::云层压暗曲线' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 暗角曲线) == 0x000350, "Member 'UPDA_ThunderConfig_C::暗角曲线' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 局部云层闪光) == 0x0003E0, "Member 'UPDA_ThunderConfig_C::局部云层闪光' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 云层闪电高度) == 0x0003E4, "Member 'UPDA_ThunderConfig_C::云层闪电高度' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, PostProcessData) == 0x0003E8, "Member 'UPDA_ThunderConfig_C::PostProcessData' has a wrong offset!");
static_assert(offsetof(UPDA_ThunderConfig_C, 默认闪电颜色) == 0x0003F0, "Member 'UPDA_ThunderConfig_C::默认闪电颜色' has a wrong offset!");

}

