#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SequenceDialogue

#include "Basic.hpp"

#include "MovieScene_classes.hpp"
#include "SequenceDialogue_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class SequenceDialogue.MovieSceneAutoTransformSection
// 0x0000 (0x00F8 - 0x00F8)
class UMovieSceneAutoTransformSection final : public UMovieSceneSection
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAutoTransformSection">();
	}
	static class UMovieSceneAutoTransformSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAutoTransformSection>();
	}
};
static_assert(alignof(UMovieSceneAutoTransformSection) == 0x000008, "Wrong alignment on UMovieSceneAutoTransformSection");
static_assert(sizeof(UMovieSceneAutoTransformSection) == 0x0000F8, "Wrong size on UMovieSceneAutoTransformSection");

// Class SequenceDialogue.MovieSceneAutoTransformTrack
// 0x0018 (0x0098 - 0x0080)
class UMovieSceneAutoTransformTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0088(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAutoTransformTrack">();
	}
	static class UMovieSceneAutoTransformTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAutoTransformTrack>();
	}
};
static_assert(alignof(UMovieSceneAutoTransformTrack) == 0x000008, "Wrong alignment on UMovieSceneAutoTransformTrack");
static_assert(sizeof(UMovieSceneAutoTransformTrack) == 0x000098, "Wrong size on UMovieSceneAutoTransformTrack");
static_assert(offsetof(UMovieSceneAutoTransformTrack, Sections) == 0x000088, "Member 'UMovieSceneAutoTransformTrack::Sections' has a wrong offset!");

// Class SequenceDialogue.MovieSceneDialogueAudioSection
// 0x0018 (0x0110 - 0x00F8)
class UMovieSceneDialogueAudioSection final : public UMovieSceneSection
{
public:
	class FString                                 AudioKey;                                          // 0x00F8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AudioTransitionDuration;                           // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDialogueAudioSection">();
	}
	static class UMovieSceneDialogueAudioSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDialogueAudioSection>();
	}
};
static_assert(alignof(UMovieSceneDialogueAudioSection) == 0x000008, "Wrong alignment on UMovieSceneDialogueAudioSection");
static_assert(sizeof(UMovieSceneDialogueAudioSection) == 0x000110, "Wrong size on UMovieSceneDialogueAudioSection");
static_assert(offsetof(UMovieSceneDialogueAudioSection, AudioKey) == 0x0000F8, "Member 'UMovieSceneDialogueAudioSection::AudioKey' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueAudioSection, AudioTransitionDuration) == 0x000108, "Member 'UMovieSceneDialogueAudioSection::AudioTransitionDuration' has a wrong offset!");

// Class SequenceDialogue.MovieSceneDialogueAudioTrack
// 0x0018 (0x0098 - 0x0080)
class UMovieSceneDialogueAudioTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0088(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDialogueAudioTrack">();
	}
	static class UMovieSceneDialogueAudioTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDialogueAudioTrack>();
	}
};
static_assert(alignof(UMovieSceneDialogueAudioTrack) == 0x000008, "Wrong alignment on UMovieSceneDialogueAudioTrack");
static_assert(sizeof(UMovieSceneDialogueAudioTrack) == 0x000098, "Wrong size on UMovieSceneDialogueAudioTrack");
static_assert(offsetof(UMovieSceneDialogueAudioTrack, Sections) == 0x000088, "Member 'UMovieSceneDialogueAudioTrack::Sections' has a wrong offset!");

// Class SequenceDialogue.MovieSceneDialogueSection
// 0x0090 (0x0188 - 0x00F8)
class UMovieSceneDialogueSection final : public UMovieSceneSection
{
public:
	class FText                                   DialogueInfo;                                      // 0x00F8(0x0018)(Edit, NativeAccessSpecifierPrivate)
	int32                                         Index_0;                                           // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SpeakerName;                                       // 0x0118(0x0018)(Edit, NativeAccessSpecifierPrivate)
	int32                                         SpeakerID;                                         // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DialogueID;                                        // 0x0138(0x0018)(Edit, NativeAccessSpecifierPrivate)
	TArray<class FText>                           DialogueInfos;                                     // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FText>                           OptionInfos;                                       // 0x0160(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         GuardTime;                                         // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AudioDelay;                                        // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AudioTransitionDuration;                           // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ELanguageAudio                                LanguageType;                                      // 0x017C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QteId;                                             // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          EnableGuardTime;                                   // 0x0184(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDialogueSection">();
	}
	static class UMovieSceneDialogueSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDialogueSection>();
	}
};
static_assert(alignof(UMovieSceneDialogueSection) == 0x000008, "Wrong alignment on UMovieSceneDialogueSection");
static_assert(sizeof(UMovieSceneDialogueSection) == 0x000188, "Wrong size on UMovieSceneDialogueSection");
static_assert(offsetof(UMovieSceneDialogueSection, DialogueInfo) == 0x0000F8, "Member 'UMovieSceneDialogueSection::DialogueInfo' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSection, Index_0) == 0x000110, "Member 'UMovieSceneDialogueSection::Index_0' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSection, SpeakerName) == 0x000118, "Member 'UMovieSceneDialogueSection::SpeakerName' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSection, SpeakerID) == 0x000130, "Member 'UMovieSceneDialogueSection::SpeakerID' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSection, DialogueID) == 0x000138, "Member 'UMovieSceneDialogueSection::DialogueID' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSection, DialogueInfos) == 0x000150, "Member 'UMovieSceneDialogueSection::DialogueInfos' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSection, OptionInfos) == 0x000160, "Member 'UMovieSceneDialogueSection::OptionInfos' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSection, GuardTime) == 0x000170, "Member 'UMovieSceneDialogueSection::GuardTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSection, AudioDelay) == 0x000174, "Member 'UMovieSceneDialogueSection::AudioDelay' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSection, AudioTransitionDuration) == 0x000178, "Member 'UMovieSceneDialogueSection::AudioTransitionDuration' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSection, LanguageType) == 0x00017C, "Member 'UMovieSceneDialogueSection::LanguageType' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSection, QteId) == 0x000180, "Member 'UMovieSceneDialogueSection::QteId' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSection, EnableGuardTime) == 0x000184, "Member 'UMovieSceneDialogueSection::EnableGuardTime' has a wrong offset!");

// Class SequenceDialogue.MovieSceneDialogueStateSection
// 0x0008 (0x0100 - 0x00F8)
class UMovieSceneDialogueStateSection final : public UMovieSceneSection
{
public:
	struct FDialogueStateStruct                   SectionData;                                       // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDialogueStateSection">();
	}
	static class UMovieSceneDialogueStateSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDialogueStateSection>();
	}
};
static_assert(alignof(UMovieSceneDialogueStateSection) == 0x000008, "Wrong alignment on UMovieSceneDialogueStateSection");
static_assert(sizeof(UMovieSceneDialogueStateSection) == 0x000100, "Wrong size on UMovieSceneDialogueStateSection");
static_assert(offsetof(UMovieSceneDialogueStateSection, SectionData) == 0x0000F8, "Member 'UMovieSceneDialogueStateSection::SectionData' has a wrong offset!");

// Class SequenceDialogue.MovieSceneDialogueStateTrack
// 0x0018 (0x0098 - 0x0080)
class UMovieSceneDialogueStateTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0088(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDialogueStateTrack">();
	}
	static class UMovieSceneDialogueStateTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDialogueStateTrack>();
	}
};
static_assert(alignof(UMovieSceneDialogueStateTrack) == 0x000008, "Wrong alignment on UMovieSceneDialogueStateTrack");
static_assert(sizeof(UMovieSceneDialogueStateTrack) == 0x000098, "Wrong size on UMovieSceneDialogueStateTrack");
static_assert(offsetof(UMovieSceneDialogueStateTrack, Sections) == 0x000088, "Member 'UMovieSceneDialogueStateTrack::Sections' has a wrong offset!");

// Class SequenceDialogue.MovieSceneDialogueSubsystem
// 0x0068 (0x00A0 - 0x0038)
class UMovieSceneDialogueSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bShow, const class FText& DialogueID, const int32 GuardTime, const int32 AudioDelay, const int32 AudioTransitionDuration, const ELanguageAudio LanguageType)> OnShowDialogue; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bShow, const class FString& AudioKey, const int32 AudioTransitionDuration)> OnShowDialogueAudio; // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AutoTransformActor;                                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMovieScene3DTransformTrack*            AutoTransformDataTrack;                            // 0x0078(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x20];                                      // 0x0080(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ShowDialogue(bool bShow, const class FText& DialogueID, const int32 GuardTime, const int32 AudioDelay, const int32 AudioTransitionDuration, const ELanguageAudio LanguageType);
	void ShowDialogueAudio(bool bShow, const class FString& AudioKey, const int32 AudioTransitionDuration);
	bool TryGetAutoTransformByOffsetTime(struct FTransform* OutTrans, float OffsetTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDialogueSubsystem">();
	}
	static class UMovieSceneDialogueSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDialogueSubsystem>();
	}
};
static_assert(alignof(UMovieSceneDialogueSubsystem) == 0x000008, "Wrong alignment on UMovieSceneDialogueSubsystem");
static_assert(sizeof(UMovieSceneDialogueSubsystem) == 0x0000A0, "Wrong size on UMovieSceneDialogueSubsystem");
static_assert(offsetof(UMovieSceneDialogueSubsystem, OnShowDialogue) == 0x000040, "Member 'UMovieSceneDialogueSubsystem::OnShowDialogue' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSubsystem, OnShowDialogueAudio) == 0x000050, "Member 'UMovieSceneDialogueSubsystem::OnShowDialogueAudio' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSubsystem, AutoTransformActor) == 0x000070, "Member 'UMovieSceneDialogueSubsystem::AutoTransformActor' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueSubsystem, AutoTransformDataTrack) == 0x000078, "Member 'UMovieSceneDialogueSubsystem::AutoTransformDataTrack' has a wrong offset!");

// Class SequenceDialogue.MovieSceneDialogueTrack
// 0x0020 (0x00A0 - 0x0080)
class UMovieSceneDialogueTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0088(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	ELanguageAudio                                LanguageType;                                      // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDialogueTrack">();
	}
	static class UMovieSceneDialogueTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDialogueTrack>();
	}
};
static_assert(alignof(UMovieSceneDialogueTrack) == 0x000008, "Wrong alignment on UMovieSceneDialogueTrack");
static_assert(sizeof(UMovieSceneDialogueTrack) == 0x0000A0, "Wrong size on UMovieSceneDialogueTrack");
static_assert(offsetof(UMovieSceneDialogueTrack, Sections) == 0x000088, "Member 'UMovieSceneDialogueTrack::Sections' has a wrong offset!");
static_assert(offsetof(UMovieSceneDialogueTrack, LanguageType) == 0x000098, "Member 'UMovieSceneDialogueTrack::LanguageType' has a wrong offset!");

// Class SequenceDialogue.MovieSceneSeqAnimDataSection
// 0x0020 (0x0118 - 0x00F8)
class UMovieSceneSeqAnimDataSection final : public UMovieSceneSection
{
public:
	TArray<struct FFloatNameAndCurve>             FloatNamesAndCurves;                               // 0x00F8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVectorNameAndCurve>            VectorNameAndCurves;                               // 0x0108(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void AddScalarParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, float InValue);
	void AddVectorParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, const struct FVector& InValue);
	void EmptyParameters();
	bool GetScalarParameters(const struct FFrameNumber& InTime, TMap<class FName, float>* Floats);
	bool GetVectorParameter(class FName InParameterName, const struct FFrameNumber& InTime, struct FVector* Value);
	bool RemoveCategory(class FName InParameterName);
	bool RemoveScalarParameter(class FName InParameterName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSeqAnimDataSection">();
	}
	static class UMovieSceneSeqAnimDataSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSeqAnimDataSection>();
	}
};
static_assert(alignof(UMovieSceneSeqAnimDataSection) == 0x000008, "Wrong alignment on UMovieSceneSeqAnimDataSection");
static_assert(sizeof(UMovieSceneSeqAnimDataSection) == 0x000118, "Wrong size on UMovieSceneSeqAnimDataSection");
static_assert(offsetof(UMovieSceneSeqAnimDataSection, FloatNamesAndCurves) == 0x0000F8, "Member 'UMovieSceneSeqAnimDataSection::FloatNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneSeqAnimDataSection, VectorNameAndCurves) == 0x000108, "Member 'UMovieSceneSeqAnimDataSection::VectorNameAndCurves' has a wrong offset!");

// Class SequenceDialogue.MovieSceneSeqAnimDataTrack
// 0x0018 (0x0098 - 0x0080)
class UMovieSceneSeqAnimDataTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0088(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSeqAnimDataTrack">();
	}
	static class UMovieSceneSeqAnimDataTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSeqAnimDataTrack>();
	}
};
static_assert(alignof(UMovieSceneSeqAnimDataTrack) == 0x000008, "Wrong alignment on UMovieSceneSeqAnimDataTrack");
static_assert(sizeof(UMovieSceneSeqAnimDataTrack) == 0x000098, "Wrong size on UMovieSceneSeqAnimDataTrack");
static_assert(offsetof(UMovieSceneSeqAnimDataTrack, Sections) == 0x000088, "Member 'UMovieSceneSeqAnimDataTrack::Sections' has a wrong offset!");

// Class SequenceDialogue.SeqAnimDataSetting
// 0x0020 (0x0050 - 0x0030)
class USeqAnimDataSetting final : public UObject
{
public:
	TArray<struct FSeqAnimCurveFloatDesc>         SeqAnimCurveFloats;                                // 0x0030(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FSeqAnimCurveVectorDesc>        SeqAnimCurveVectors;                               // 0x0040(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SeqAnimDataSetting">();
	}
	static class USeqAnimDataSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<USeqAnimDataSetting>();
	}
};
static_assert(alignof(USeqAnimDataSetting) == 0x000008, "Wrong alignment on USeqAnimDataSetting");
static_assert(sizeof(USeqAnimDataSetting) == 0x000050, "Wrong size on USeqAnimDataSetting");
static_assert(offsetof(USeqAnimDataSetting, SeqAnimCurveFloats) == 0x000030, "Member 'USeqAnimDataSetting::SeqAnimCurveFloats' has a wrong offset!");
static_assert(offsetof(USeqAnimDataSetting, SeqAnimCurveVectors) == 0x000040, "Member 'USeqAnimDataSetting::SeqAnimCurveVectors' has a wrong offset!");

// Class SequenceDialogue.SeqAnimDataInterface
// 0x0000 (0x0000 - 0x0000)
class ISeqAnimDataInterface final
{
public:
	bool GetAnimDataFloat(TArray<struct FNamedCurveValue>* FloatCurveData);
	bool GetAnimDataVector(TMap<class FName, struct FVector>* VectorCurveData);
	TArray<class FName> GetSupportGroupNames();
	bool SetAnimDataFloat(const TArray<struct FNamedCurveValue>& FloatCurveData);
	bool SetAnimDataVector(const TMap<class FName, struct FVector>& VectorCurveData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SeqAnimDataInterface">();
	}
	static class ISeqAnimDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISeqAnimDataInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ISeqAnimDataInterface) == 0x000001, "Wrong alignment on ISeqAnimDataInterface");
static_assert(sizeof(ISeqAnimDataInterface) == 0x000001, "Wrong size on ISeqAnimDataInterface");

// Class SequenceDialogue.SeqAutoTransformInterface
// 0x0000 (0x0000 - 0x0000)
class ISeqAutoTransformInterface final
{
public:
	void BeginAutoTransform(float TimeLength);
	void EndAutoTransform();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SeqAutoTransformInterface">();
	}
	static class ISeqAutoTransformInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISeqAutoTransformInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ISeqAutoTransformInterface) == 0x000001, "Wrong alignment on ISeqAutoTransformInterface");
static_assert(sizeof(ISeqAutoTransformInterface) == 0x000001, "Wrong size on ISeqAutoTransformInterface");

}

