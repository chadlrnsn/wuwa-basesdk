#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraBlueprintFunctionLibrary

#include "Basic.hpp"

#include "ECameraAnsEffectiveClientType_structs.hpp"
#include "ESequenceCameraAnsEffectiveClientType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ECameraGravityMode_structs.hpp"
#include "EAimAssistMode_structs.hpp"
#include "ECustomCameraMode_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass CameraBlueprintFunctionLibrary.CameraBlueprintFunctionLibrary_C
// 0x0000 (0x0030 - 0x0030)
class UCameraBlueprintFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void OnPossess(class APawn* pawn, class UObject* __WorldContext);
	static ECustomCameraMode GetCameraMode(class UObject* __WorldContext);
	static void SetCameraRotation(const struct FRotator& rotator, class UObject* __WorldContext);
	static struct FVectorDouble GetTargetSocketLocation(class UObject* __WorldContext);
	static void SetWidgetCameraBlendParams(float blendTime, EViewTargetBlendFunction blendFunction, float blendExp, bool blendLocation, bool isRelativeLocation, bool overrideLocation, const struct FVector& newLocation, bool blendRotation, bool isRelativeRotation, bool overrideRotation, const struct FRotator& newRotation, class UObject* __WorldContext);
	static struct FVectorDouble GetFightCameraLocation(class UObject* __WorldContext);
	static void SetFightCameraFollow(bool follow, class UObject* __WorldContext);
	static void ResetFightCameraPitchAndArmLength(class UObject* __WorldContext);
	static void EnterCameraExplore(int32 id, const struct FVector& lookAt1, const struct FVector& lookAt2, float prepTime, float fadeDistance, float armLengthMin, float armLengthMax, class UObject* __WorldContext);
	static void ExitCameraExplore(int32 id, class UObject* __WorldContext);
	static void EnterSequenceDialogue(class AActor* target, class UObject* __WorldContext);
	static void ExitSequenceDialogue(class UObject* __WorldContext);
	static void EnterCameraMode(ECustomCameraMode cameraMode, float blendTime, EViewTargetBlendFunction blendFunction, float blendExp, class UObject* __WorldContext);
	static void ExitCameraMode(ECustomCameraMode cameraMode, float blendTime, EViewTargetBlendFunction blendFunction, float blendExp, class UObject* __WorldContext);
	static void ReloadCameraConfig(class UObject* __WorldContext);
	static class ACameraActor* GetFightCameraActor(class UObject* __WorldContext);
	static void PlayCameraOrbital(class ULevelSequence* levelSequence, const struct FVector& startLocation1, const struct FVector& endLocation1, float blendInTime1, float blendOutTime1, class UObject* __WorldContext);
	static void StopCameraOrbital(class UObject* __WorldContext);
	static bool IsRoleOnCameraRight(class UObject* __WorldContext);
	static void SetAimAssistMode(EAimAssistMode mode, class UObject* __WorldContext);
	static bool GetIsCameraTargetInScreen(class UObject* __WorldContext);
	static void ExitSpecialGameplayCamera(class UObject* __WorldContext);
	static void ApplyCameraModify(const struct FGameplayTag& tag, float duration, float blendInTime, float blendOutTime, float breakBlendOutTime, const struct FSCameraModifier_Settings& cameraModifySettings, class UAnimMontage* montage, const struct FSBaseCurve& blendInCurve, const struct FSBaseCurve& blendOutCurve, const class FString& cameraAttachSocket, int32 entityId, ECameraAnsEffectiveClientType cameraEffectiveClientType, TArray<struct FSCameraModifier_Condition>& cameraModifierContions, class UObject* __WorldContext);
	static class ALevelSequenceActor* GetSequenceCameraActor(class UObject* __WorldContext);
	static class ACameraActor* GetWidgetCameraActor(class UObject* __WorldContext);
	static class ACameraActor* EnterSpecialGameplayCamera(int32 gameplayId, class UObject* __WorldContext);
	static void ExitSpecialGameplayCamera2(class UObject* __WorldContext);
	static bool PlayCameraSequence(ESequenceCameraAnsEffectiveClientType 生效客户端, int32 entityId, const struct FSSequenceCamera_Settings& settings, bool resetLockOnCamera, const struct FRotator& additiveRotation, const class FString& cameraAttachSocket, const class FString& cameraDetectSocket, const struct FVector& extraSphereLocation, float extraDetectSphereRadius, bool isShowExtraSphere, bool isIgnoreCharacterCollision, bool disableMovementInput, bool disableLookAtInput, bool disableMotionBlur, class UObject* __WorldContext);
	static bool IsTargetSocketLocationValid(class UObject* __WorldContext);
	static struct FRotator GetFightCameraRotation(class UObject* __WorldContext);
	static void SetAimAssistModeByKey(const class FString& key, EAimAssistMode mode, class UObject* __WorldContext);
	static void ClearAimAssistModeByKey(const class FString& key, class UObject* __WorldContext);
	static void SetCameraDebugToolEnabled(bool inEnable, class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawCameraCollision(class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawSpringArm(class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawFocusTargetLine(class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawSpringArmEdgeRange(class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawLockCameraMoveLine(class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawSettlementCamera(class UObject* __WorldContext);
	static TMap<class FString, class FString> GetDebugDesiredCameraProps(class UObject* __WorldContext);
	static TArray<struct FSCameraDebugTool_SubCameraModification> GetSubCameraModifications(class UObject* __WorldContext);
	static TArray<struct FSCameraDebugTool_ControllerModification> GetControllerModifications(class UObject* __WorldContext);
	static struct FSCameraDebugTool_CameraModeInfo GetCamereModeInfo(class UObject* __WorldContext);
	static void PlaySettlementCamera(class UObject* __WorldContext);
	static void SetSequenceCameraCollisionState(bool bEnable, class UObject* __WorldContext);
	static void SwitchCameraDebugToolDrawCameraZone(class UObject* __WorldContext);
	static void SetXRayState(bool isEnable, class UObject* __WorldContext);
	static void SetUiCameraDebugToolEnabled(bool enabled, class UObject* __WorldContext);
	static void SwitchUiCameraDtSync(class UObject* __WorldContext);
	static TMap<class FString, class FString> GetDebugToolUiCameraProps(class UObject* __WorldContext);
	static void SwitchUiCameraArmLengthSync(class UObject* __WorldContext);
	static void OnDebugToolUiCameraArmLengthInputChanged(const class FString& armLengthStr, class UObject* __WorldContext);
	static void SetCameraGravityMode(ECameraGravityMode gravityMode, const struct FVectorDouble& gravityDirect, class UObject* __WorldContext);
	static ECameraGravityMode GetCameraGravityMode(class UObject* __WorldContext);
	static struct FVectorDouble GetCameraGravityDirect(class UObject* __WorldContext);
	static struct FVectorDouble GetCameraGravityUp(class UObject* __WorldContext);
	static struct FRotator GetCameraRotationInGravity(class UObject* __WorldContext);
	static struct FVectorDouble GetPlayerLocationInGravity(class UObject* __WorldContext);
	static struct FRotator GetPlayerRotatorInGravity(class UObject* __WorldContext);
	static void SwitchCameraDebugRotatorEnabled(class UObject* __WorldContext);
	static void ApplyCameraGuide(const struct FVector& lookAt, float fadeInTime, float stayTime, float fadeOutTime, bool lockCameraInput, const struct FVector& endPosition, float fov, bool ignoreAdjustYaw, bool staticCamera, class UObject* __WorldContext);
	static void ExitCameraGuide(class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CameraBlueprintFunctionLibrary_C">();
	}
	static class UCameraBlueprintFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraBlueprintFunctionLibrary_C>();
	}
};
static_assert(alignof(UCameraBlueprintFunctionLibrary_C) == 0x000008, "Wrong alignment on UCameraBlueprintFunctionLibrary_C");
static_assert(sizeof(UCameraBlueprintFunctionLibrary_C) == 0x000030, "Wrong size on UCameraBlueprintFunctionLibrary_C");

}

