#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HoudiniNiagara

#include "Basic.hpp"

#include "HoudiniNiagara_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Niagara_classes.hpp"


namespace SDK
{

// Class HoudiniNiagara.HoudiniPointCache
// 0x00C0 (0x00F0 - 0x0030)
class UHoudiniPointCache final : public UObject
{
public:
	class FString                                 FileName;                                          // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfSamples;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfAttributes;                                // 0x0044(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPoints;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfFrames;                                    // 0x004C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstFrame;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastFrame;                                         // 0x0054(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSampleTime;                                     // 0x0058(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSampleTime;                                     // 0x005C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceCSVTitleRow;                                 // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AttributeArray;                                    // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 FloatSampleData;                                   // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 SpawnTimes;                                        // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 LifeValues;                                        // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 PointTypes;                                        // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 SpecialAttributeIndexes;                           // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FPointIndexes>                  PointValueIndexes;                                 // 0x00D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          UseCustomCSVTitleRow;                              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EHoudiniPointCacheFileType                    FileType;                                          // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool GetAttributeIndexInArrayFromString(const class FString& InAttribute, const TArray<class FString>& InAttributeArray, int32* OutAttributeIndex);

	void SetUseCustomCSVTitleRow(bool bInUseCustomCSVTitleRow);

	bool GetAttributeIndexFromString(const class FString& Attribute, int32* AttributeIndex) const;
	bool GetColorValue(const int32& sampleIndex, struct FLinearColor* value) const;
	const TArray<float> GetFloatSampleData() const;
	bool GetFloatValue(const int32& sampleIndex, const int32& attrIndex, float* value) const;
	bool GetFloatValueForString(const int32& sampleIndex, const class FString& Attribute, float* value) const;
	bool GetImpulseValue(const int32& sampleIndex, float* value) const;
	bool GetLastPointIDToSpawnAtTime(const float& time, int32* lastID) const;
	bool GetLastSampleIndexAtTime(const float& desiredTime, int32* lastSampleIndex) const;
	const TArray<float> GetLifeValues() const;
	bool GetNormalValue(const int32& sampleIndex, struct FVector* value) const;
	int32 GetNumberOfAttributes() const;
	int32 GetNumberOfPoints() const;
	int32 GetNumberOfSamples() const;
	bool GetPointFloatValueAtTime(int32 PointID, int32 AttributeIndex, float desiredTime, float* Value) const;
	bool GetPointIDsToSpawnAtTime(const float& desiredTime, int32* MinID, int32* MaxID, int32* Count, int32* LastSpawnedPointID, float* LastSpawnTime, float* LastSpawnTimeRequest) const;
	bool GetPointInt32ValueAtTime(int32 PointID, int32 AttributeIndex, float desiredTime, int32* Value) const;
	bool GetPointLife(const int32& PointID, float* Value) const;
	bool GetPointLifeAtTime(const int32& PointID, const float& DesiredTime, float* Value) const;
	bool GetPointPositionAtTime(const int32& PointID, const float& desiredTime, struct FVector* Vector) const;
	bool GetPointQuatValueAtTime(int32 PointID, int32 AttributeIndex, float desiredTime, struct FQuat* Quat, bool DoHoudiniToUnrealConversion) const;
	bool GetPointQuatValueAtTimeForString(int32 PointID, const class FString& Attribute, float desiredTime, struct FQuat* Quat, bool DoHoudiniToUnrealConversion) const;
	bool GetPointType(const int32& PointID, int32* Value) const;
	const TArray<int32> GetPointTypes() const;
	bool GetPointValueAtTime(const int32& PointID, const int32& AttributeIndex, const float& desiredTime, float* Value) const;
	bool GetPointValueAtTimeForString(const int32& PointID, const class FString& Attribute, const float& desiredTime, float* Value) const;
	const TArray<struct FPointIndexes> GetPointValueIndexes() const;
	bool GetPointVector4ValueAtTime(int32 PointID, int32 AttributeIndex, float desiredTime, struct FVector4* Vector) const;
	bool GetPointVector4ValueAtTimeForString(int32 PointID, const class FString& Attribute, float desiredTime, struct FVector4* Vector) const;
	bool GetPointVectorValueAtTime(int32 PointID, int32 AttributeIndex, float desiredTime, struct FVector* Vector, bool DoSwap, bool DoScale) const;
	bool GetPointVectorValueAtTimeForString(int32 PointID, const class FString& Attribute, float desiredTime, struct FVector* Vector, bool DoSwap, bool DoScale) const;
	bool GetPositionValue(const int32& sampleIndex, struct FVector* value) const;
	bool GetQuatValue(const int32& sampleIndex, const int32& attrIndex, struct FQuat* value, const bool& DoHoudiniToUnrealConversion) const;
	bool GetQuatValueForString(const int32& sampleIndex, const class FString& Attribute, struct FQuat* value, const bool& DoHoudiniToUnrealConversion) const;
	bool GetSampleIndexesForPointAtTime(const int32& PointID, const float& desiredTime, int32* PrevSampleIndex, int32* NextSampleIndex, float* PrevWeight) const;
	const TArray<float> GetSpawnTimes() const;
	const TArray<int32> GetSpecialAttributeIndexes() const;
	bool GetTimeValue(const int32& sampleIndex, float* value) const;
	bool GetUseCustomCSVTitleRow() const;
	bool GetVector4Value(const int32& sampleIndex, const int32& attrIndex, struct FVector4* value) const;
	bool GetVector4ValueForString(const int32& sampleIndex, const class FString& Attribute, struct FVector4* value) const;
	bool GetVectorValue(const int32& sampleIndex, const int32& attrIndex, struct FVector* value, const bool& DoSwap, const bool& DoScale) const;
	bool GetVectorValueForString(const int32& sampleIndex, const class FString& Attribute, struct FVector* value, const bool& DoSwap, const bool& DoScale) const;
	bool GetVelocityValue(const int32& sampleIndex, struct FVector* value) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoudiniPointCache">();
	}
	static class UHoudiniPointCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHoudiniPointCache>();
	}
};
static_assert(alignof(UHoudiniPointCache) == 0x000008, "Wrong alignment on UHoudiniPointCache");
static_assert(sizeof(UHoudiniPointCache) == 0x0000F0, "Wrong size on UHoudiniPointCache");
static_assert(offsetof(UHoudiniPointCache, FileName) == 0x000030, "Member 'UHoudiniPointCache::FileName' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, NumberOfSamples) == 0x000040, "Member 'UHoudiniPointCache::NumberOfSamples' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, NumberOfAttributes) == 0x000044, "Member 'UHoudiniPointCache::NumberOfAttributes' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, NumberOfPoints) == 0x000048, "Member 'UHoudiniPointCache::NumberOfPoints' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, NumberOfFrames) == 0x00004C, "Member 'UHoudiniPointCache::NumberOfFrames' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, FirstFrame) == 0x000050, "Member 'UHoudiniPointCache::FirstFrame' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, LastFrame) == 0x000054, "Member 'UHoudiniPointCache::LastFrame' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, MinSampleTime) == 0x000058, "Member 'UHoudiniPointCache::MinSampleTime' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, MaxSampleTime) == 0x00005C, "Member 'UHoudiniPointCache::MaxSampleTime' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, SourceCSVTitleRow) == 0x000060, "Member 'UHoudiniPointCache::SourceCSVTitleRow' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, AttributeArray) == 0x000070, "Member 'UHoudiniPointCache::AttributeArray' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, FloatSampleData) == 0x000088, "Member 'UHoudiniPointCache::FloatSampleData' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, SpawnTimes) == 0x000098, "Member 'UHoudiniPointCache::SpawnTimes' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, LifeValues) == 0x0000A8, "Member 'UHoudiniPointCache::LifeValues' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, PointTypes) == 0x0000B8, "Member 'UHoudiniPointCache::PointTypes' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, SpecialAttributeIndexes) == 0x0000C8, "Member 'UHoudiniPointCache::SpecialAttributeIndexes' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, PointValueIndexes) == 0x0000D8, "Member 'UHoudiniPointCache::PointValueIndexes' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, UseCustomCSVTitleRow) == 0x0000E8, "Member 'UHoudiniPointCache::UseCustomCSVTitleRow' has a wrong offset!");
static_assert(offsetof(UHoudiniPointCache, FileType) == 0x0000E9, "Member 'UHoudiniPointCache::FileType' has a wrong offset!");

// Class HoudiniNiagara.NiagaraDataInterfaceHoudini
// 0x0008 (0x0048 - 0x0040)
class UNiagaraDataInterfaceHoudini final : public UNiagaraDataInterface
{
public:
	class UHoudiniPointCache*                     HoudiniPointCacheAsset;                            // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraDataInterfaceHoudini">();
	}
	static class UNiagaraDataInterfaceHoudini* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraDataInterfaceHoudini>();
	}
};
static_assert(alignof(UNiagaraDataInterfaceHoudini) == 0x000008, "Wrong alignment on UNiagaraDataInterfaceHoudini");
static_assert(sizeof(UNiagaraDataInterfaceHoudini) == 0x000048, "Wrong size on UNiagaraDataInterfaceHoudini");
static_assert(offsetof(UNiagaraDataInterfaceHoudini, HoudiniPointCacheAsset) == 0x000040, "Member 'UNiagaraDataInterfaceHoudini::HoudiniPointCacheAsset' has a wrong offset!");

}

