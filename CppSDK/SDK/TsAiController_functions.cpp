#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsAiController

#include "Basic.hpp"

#include "TsAiController_classes.hpp"
#include "TsAiController_parameters.hpp"


namespace SDK
{

// Function TsAiController.TsAiController_C.ExecuteUbergraph_TsAiController
// (Final, Native, UbergraphFunction, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::ExecuteUbergraph_TsAiController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "ExecuteUbergraph_TsAiController");

	Params::TsAiController_C_ExecuteUbergraph_TsAiController Parms{};

	Parms.EntryPoint = EntryPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.ReceiveDestroyed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ATsAiController_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "ReceiveDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.ActivateSkillGroup
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   skillGroupIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    activate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATsAiController_C::ActivateSkillGroup(int32 skillGroupIndex, bool activate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "ActivateSkillGroup");

	Params::TsAiController_C_ActivateSkillGroup Parms{};

	Parms.skillGroupIndex = skillGroupIndex;
	Parms.activate = activate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddSkillCd
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   skillInfoId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   cdAdd                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AddSkillCd(int32 skillInfoId, float cdAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddSkillCd");

	Params::TsAiController_C_AddSkillCd Parms{};

	Parms.skillInfoId = skillInfoId;
	Parms.cdAdd = cdAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetBattleWanderTime
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   min_0                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   max_0                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::SetBattleWanderTime(float min_0, float max_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetBattleWanderTime");

	Params::TsAiController_C_SetBattleWanderTime Parms{};

	Parms.min_0 = min_0;
	Parms.max_0 = max_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddComplicatedEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSAiConditions&            conditions                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UKuroBooleanEventBinder*          eventBinder                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::AddComplicatedEventBinder(const struct FSAiConditions& conditions, class UKuroBooleanEventBinder* eventBinder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddComplicatedEventBinder");

	Params::TsAiController_C_AddComplicatedEventBinder Parms{};

	Parms.conditions = std::move(conditions);
	Parms.eventBinder = eventBinder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.OnStart
// (Native, Public, BlueprintCallable, BlueprintEvent)

void ATsAiController_C::OnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "OnStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.GetDebugText
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText ATsAiController_C::GetDebugText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "GetDebugText");

	Params::TsAiController_C_GetDebugText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsAiController.TsAiController_C.ChangeHatred
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   abs                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::ChangeHatred(int32 entityId, float rate, float abs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "ChangeHatred");

	Params::TsAiController_C_ChangeHatred Parms{};

	Parms.entityId = entityId;
	Parms.rate = rate;
	Parms.abs = abs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.ClearHatred
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::ClearHatred(int32 entityId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "ClearHatred");

	Params::TsAiController_C_ClearHatred Parms{};

	Parms.entityId = entityId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetBattleWanderIndex
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   index                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::SetBattleWanderIndex(int32 index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetBattleWanderIndex");

	Params::TsAiController_C_SetBattleWanderIndex Parms{};

	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddBattleWanderEndTime
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   addTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AddBattleWanderEndTime(float addTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddBattleWanderEndTime");

	Params::TsAiController_C_AddBattleWanderEndTime Parms{};

	Parms.addTime = addTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.TestChangeAi
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ATsAiController_C::TestChangeAi(const class FString& id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "TestChangeAi");

	Params::TsAiController_C_TestChangeAi Parms{};

	Parms.id = std::move(id);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AicApplyBuff
// (Native, Public, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   buffId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AicApplyBuff(int64 buffId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AicApplyBuff");

	Params::TsAiController_C_AicApplyBuff Parms{};

	Parms.buffId = buffId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AicRemoveBuff
// (Native, Public, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   buffId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AicRemoveBuff(int64 buffId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AicRemoveBuff");

	Params::TsAiController_C_AicRemoveBuff Parms{};

	Parms.buffId = buffId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AicAddTag
// (Native, Public, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AicAddTag(const struct FGameplayTag& tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AicAddTag");

	Params::TsAiController_C_AicAddTag Parms{};

	Parms.tag = std::move(tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AicRemoveTag
// (Native, Public, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AicRemoveTag(const struct FGameplayTag& tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AicRemoveTag");

	Params::TsAiController_C_AicRemoveTag Parms{};

	Parms.tag = std::move(tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetAiEnable
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ATsAiController_C::SetAiEnable(bool enable, const class FString& key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetAiEnable");

	Params::TsAiController_C_SetAiEnable Parms{};

	Parms.enable = enable;
	Parms.key = std::move(key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.LogReport
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   logId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::LogReport(int32 logId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "LogReport");

	Params::TsAiController_C_LogReport Parms{};

	Parms.logId = logId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetAiSenseEnable
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   index                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)

void ATsAiController_C::SetAiSenseEnable(int32 index, bool enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetAiSenseEnable");

	Params::TsAiController_C_SetAiSenseEnable Parms{};

	Parms.index = index;
	Parms.enable = enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddOrRemoveAiSense
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   aiSenseId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    add                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)

void ATsAiController_C::AddOrRemoveAiSense(int32 aiSenseId, bool add)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddOrRemoveAiSense");

	Params::TsAiController_C_AddOrRemoveAiSense Parms{};

	Parms.aiSenseId = aiSenseId;
	Parms.add = add;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.EnableAiSenseByType
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)

void ATsAiController_C::EnableAiSenseByType(int32 type, bool enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "EnableAiSenseByType");

	Params::TsAiController_C_EnableAiSenseByType Parms{};

	Parms.type = type;
	Parms.enable = enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddHateEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UKuroPerceptionEventBinder*       handler1                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::AddHateEventBinder(class UKuroPerceptionEventBinder* handler1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddHateEventBinder");

	Params::TsAiController_C_AddHateEventBinder Parms{};

	Parms.handler1 = handler1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddPerceptionEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UKuroPerceptionEventBinder*       handler                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::AddPerceptionEventBinder(class UKuroPerceptionEventBinder* handler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddPerceptionEventBinder");

	Params::TsAiController_C_AddPerceptionEventBinder Parms{};

	Parms.handler = handler;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddHateOutRangeEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UKuroPerceptionEventBinder*       handler                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::AddHateOutRangeEventBinder(class UKuroPerceptionEventBinder* handler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddHateOutRangeEventBinder");

	Params::TsAiController_C_AddHateOutRangeEventBinder Parms{};

	Parms.handler = handler;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetPerceptionEventState
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    includeFriend                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
// bool                                    includeEnemy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
// bool                                    includeNeutral                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)

void ATsAiController_C::SetPerceptionEventState(bool includeFriend, bool includeEnemy, bool includeNeutral)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetPerceptionEventState");

	Params::TsAiController_C_SetPerceptionEventState Parms{};

	Parms.includeFriend = includeFriend;
	Parms.includeEnemy = includeEnemy;
	Parms.includeNeutral = includeNeutral;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddSceneItemDestroyEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UKuroActorEventBinder*            eventBinder                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::AddSceneItemDestroyEventBinder(float distance, class UKuroActorEventBinder* eventBinder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddSceneItemDestroyEventBinder");

	Params::TsAiController_C_AddSceneItemDestroyEventBinder Parms{};

	Parms.distance = distance;
	Parms.eventBinder = eventBinder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetAiHateConfig
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    configId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::SetAiHateConfig(const class FString& configId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetAiHateConfig");

	Params::TsAiController_C_SetAiHateConfig Parms{};

	Parms.configId = std::move(configId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddAlertEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UKuroBooleanEventBinder*          eventBinder                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::AddAlertEventBinder(class UKuroBooleanEventBinder* eventBinder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddAlertEventBinder");

	Params::TsAiController_C_AddAlertEventBinder Parms{};

	Parms.eventBinder = eventBinder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.SetAiAlertConfig
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    configId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::SetAiAlertConfig(const class FString& configId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetAiAlertConfig");

	Params::TsAiController_C_SetAiAlertConfig Parms{};

	Parms.configId = std::move(configId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.GetCoolDownDone
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ATsAiController_C::GetCoolDownDone(int32 id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "GetCoolDownDone");

	Params::TsAiController_C_GetCoolDownDone Parms{};

	Parms.id = id;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsAiController.TsAiController_C.GetCoolDownRemainTime
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ATsAiController_C::GetCoolDownRemainTime(int32 id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "GetCoolDownRemainTime");

	Params::TsAiController_C_GetCoolDownRemainTime Parms{};

	Parms.id = id;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsAiController.TsAiController_C.SetCoolDown
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   cd                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::SetCoolDown(int32 id, float cd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "SetCoolDown");

	Params::TsAiController_C_SetCoolDown Parms{};

	Parms.id = id;
	Parms.cd = cd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.InitCooldownEvent
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UKuroBooleanEventBinder*          eventBinder                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::InitCooldownEvent(int32 id, class UKuroBooleanEventBinder* eventBinder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "InitCooldownEvent");

	Params::TsAiController_C_InitCooldownEvent Parms{};

	Parms.id = id;
	Parms.eventBinder = eventBinder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.StartCooldownTimer
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   id                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ATsAiController_C::StartCooldownTimer(int32 id, float duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "StartCooldownTimer");

	Params::TsAiController_C_StartCooldownTimer Parms{};

	Parms.id = id;
	Parms.duration = duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.逻辑主控
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ATsAiController_C::逻辑主控()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "逻辑主控");

	Params::TsAiController_C_逻辑主控 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsAiController.TsAiController_C.移动主控
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ATsAiController_C::移动主控()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "移动主控");

	Params::TsAiController_C_移动主控 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsAiController.TsAiController_C.获取控制权时
// (Native, Public, BlueprintCallable, BlueprintEvent)

void ATsAiController_C::获取控制权时()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "获取控制权时");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.状态切换时
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterState                         oldState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterState                         newState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    isAutonomousProxy                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATsAiController_C::状态切换时(ECharacterState oldState, ECharacterState newState, bool isAutonomousProxy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "状态切换时");

	Params::TsAiController_C_状态切换时 Parms{};

	Parms.oldState = oldState;
	Parms.newState = newState;
	Parms.isAutonomousProxy = isAutonomousProxy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.检查状态机状态
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FString>&                  states                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ATsAiController_C::检查状态机状态(TArray<class FString>& states)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "检查状态机状态");

	Params::TsAiController_C_检查状态机状态 Parms{};

	Parms.states = std::move(states);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	states = std::move(Parms.states);

	return Parms.ReturnValue;
}


// Function TsAiController.TsAiController_C.切换状态机状态
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>&                  states                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ATsAiController_C::切换状态机状态(TArray<class FString>& states)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "切换状态机状态");

	Params::TsAiController_C_切换状态机状态 Parms{};

	Parms.states = std::move(states);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	states = std::move(Parms.states);
}


// Function TsAiController.TsAiController_C.GetDebugStateMachine
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    output                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ATsAiController_C::GetDebugStateMachine(TArray<class FText>& output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "GetDebugStateMachine");

	Params::TsAiController_C_GetDebugStateMachine Parms{};

	Parms.output = std::move(output);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	output = std::move(Parms.output);
}


// Function TsAiController.TsAiController_C.AicApplyBuffToTarget
// (Native, Public, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   targetId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64                                   buffId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AicApplyBuffToTarget(int32 targetId, int64 buffId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AicApplyBuffToTarget");

	Params::TsAiController_C_AicApplyBuffToTarget Parms{};

	Parms.targetId = targetId;
	Parms.buffId = buffId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddLevelVarBoolEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSAiLevelVar&              levelVar                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UKuroBooleanEventBinder*          eventBinder                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AddLevelVarBoolEventBinder(const struct FSAiLevelVar& levelVar, class UKuroBooleanEventBinder* eventBinder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddLevelVarBoolEventBinder");

	Params::TsAiController_C_AddLevelVarBoolEventBinder Parms{};

	Parms.levelVar = std::move(levelVar);
	Parms.eventBinder = eventBinder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsAiController.TsAiController_C.AddLevelVarIntEventBinder
// (Native, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSAiLevelVar&              levelVar                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UKuroIntEventBinder*              eventBinder                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATsAiController_C::AddLevelVarIntEventBinder(const struct FSAiLevelVar& levelVar, class UKuroIntEventBinder* eventBinder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TsAiController_C", "AddLevelVarIntEventBinder");

	Params::TsAiController_C_AddLevelVarIntEventBinder Parms{};

	Parms.levelVar = std::move(levelVar);
	Parms.eventBinder = eventBinder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

