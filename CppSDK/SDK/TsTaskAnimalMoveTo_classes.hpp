#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsTaskAnimalMoveTo

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ECharState_structs.hpp"
#include "TsTaskAbortImmediatelyBase_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsTaskAnimalMoveTo.TsTaskAnimalMoveTo_C
// 0x0030 (0x00E8 - 0x00B8)
class UTsTaskAnimalMoveTo_C final : public UTsTaskAbortImmediatelyBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_TsTaskAnimalMoveTo_C;               // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	ECharState                                    MoveState;                                         // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          NavigationOn;                                      // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetLocation;                                    // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         LimitTime;                                         // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         TurnSpeed;                                         // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          RootMotion;                                        // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DistanceErrorThreshold;                            // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ExecuteUbergraph_TsTaskAnimalMoveTo(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsTaskAnimalMoveTo_C">();
	}
	static class UTsTaskAnimalMoveTo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsTaskAnimalMoveTo_C>();
	}
};
static_assert(alignof(UTsTaskAnimalMoveTo_C) == 0x000008, "Wrong alignment on UTsTaskAnimalMoveTo_C");
static_assert(sizeof(UTsTaskAnimalMoveTo_C) == 0x0000E8, "Wrong size on UTsTaskAnimalMoveTo_C");
static_assert(offsetof(UTsTaskAnimalMoveTo_C, UberGraphFrame_TsTaskAnimalMoveTo_C) == 0x0000B8, "Member 'UTsTaskAnimalMoveTo_C::UberGraphFrame_TsTaskAnimalMoveTo_C' has a wrong offset!");
static_assert(offsetof(UTsTaskAnimalMoveTo_C, MoveState) == 0x0000C0, "Member 'UTsTaskAnimalMoveTo_C::MoveState' has a wrong offset!");
static_assert(offsetof(UTsTaskAnimalMoveTo_C, NavigationOn) == 0x0000C1, "Member 'UTsTaskAnimalMoveTo_C::NavigationOn' has a wrong offset!");
static_assert(offsetof(UTsTaskAnimalMoveTo_C, TargetLocation) == 0x0000C8, "Member 'UTsTaskAnimalMoveTo_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(UTsTaskAnimalMoveTo_C, LimitTime) == 0x0000D8, "Member 'UTsTaskAnimalMoveTo_C::LimitTime' has a wrong offset!");
static_assert(offsetof(UTsTaskAnimalMoveTo_C, TurnSpeed) == 0x0000DC, "Member 'UTsTaskAnimalMoveTo_C::TurnSpeed' has a wrong offset!");
static_assert(offsetof(UTsTaskAnimalMoveTo_C, RootMotion) == 0x0000E0, "Member 'UTsTaskAnimalMoveTo_C::RootMotion' has a wrong offset!");
static_assert(offsetof(UTsTaskAnimalMoveTo_C, DistanceErrorThreshold) == 0x0000E4, "Member 'UTsTaskAnimalMoveTo_C::DistanceErrorThreshold' has a wrong offset!");

}

