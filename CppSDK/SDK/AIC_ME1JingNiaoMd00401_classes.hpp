#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIC_ME1JingNiaoMd00401

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SAiConditions_structs.hpp"
#include "AIC_AICommon_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AIC_ME1JingNiaoMd00401.AIC_ME1JingNiaoMd00401_C
// 0x0968 (0x10F0 - 0x0788)
class AAIC_ME1JingNiaoMd00401_C final : public AAIC_AICommon_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_AIC_ME1JingNiaoMd00401_C;           // 0x0788(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FSAiConditions                         血量检测1;                                         // 0x0790(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         满白条验证;                                        // 0x0848(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         狂暴清空验证;                                      // 0x0900(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         火监测;                                            // 0x09B8(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         冰检测;                                            // 0x0A70(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         暗检测;                                            // 0x0B28(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         光检测;                                            // 0x0BE0(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         出生进化火;                                        // 0x0C98(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         出生进化冰;                                        // 0x0D50(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         出生进化光;                                        // 0x0E08(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         出生进化暗;                                        // 0x0EC0(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Entity_ID;                                         // 0x0F78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F7C[0x4];                                      // 0x0F7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSAiConditions                         一次性爬塔_0;                                      // 0x0F80(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         监听捕食标签;                                      // 0x1038(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AIC_ME1JingNiaoMd00401(int32 EntryPoint);
	void 捕食被打断(bool bContent);
	void 一次性爬塔监听(bool bContent);
	void 出生进化4(bool bContent);
	void 白条空(bool bContent);
	void 出生进化3(bool bContent);
	void 出生进化2(bool bContent);
	void 出生进化(bool bContent);
	void OnStart();
	void 光芒检测(bool bContent);
	void 黑暗检测(bool bContent);
	void 冰冻检测(bool bContent);
	void 火焰检测(bool bContent);
	void 白条满(bool bContent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AIC_ME1JingNiaoMd00401_C">();
	}
	static class AAIC_ME1JingNiaoMd00401_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAIC_ME1JingNiaoMd00401_C>();
	}
};
static_assert(alignof(AAIC_ME1JingNiaoMd00401_C) == 0x000008, "Wrong alignment on AAIC_ME1JingNiaoMd00401_C");
static_assert(sizeof(AAIC_ME1JingNiaoMd00401_C) == 0x0010F0, "Wrong size on AAIC_ME1JingNiaoMd00401_C");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, UberGraphFrame_AIC_ME1JingNiaoMd00401_C) == 0x000788, "Member 'AAIC_ME1JingNiaoMd00401_C::UberGraphFrame_AIC_ME1JingNiaoMd00401_C' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 血量检测1) == 0x000790, "Member 'AAIC_ME1JingNiaoMd00401_C::血量检测1' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 满白条验证) == 0x000848, "Member 'AAIC_ME1JingNiaoMd00401_C::满白条验证' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 狂暴清空验证) == 0x000900, "Member 'AAIC_ME1JingNiaoMd00401_C::狂暴清空验证' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 火监测) == 0x0009B8, "Member 'AAIC_ME1JingNiaoMd00401_C::火监测' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 冰检测) == 0x000A70, "Member 'AAIC_ME1JingNiaoMd00401_C::冰检测' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 暗检测) == 0x000B28, "Member 'AAIC_ME1JingNiaoMd00401_C::暗检测' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 光检测) == 0x000BE0, "Member 'AAIC_ME1JingNiaoMd00401_C::光检测' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 出生进化火) == 0x000C98, "Member 'AAIC_ME1JingNiaoMd00401_C::出生进化火' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 出生进化冰) == 0x000D50, "Member 'AAIC_ME1JingNiaoMd00401_C::出生进化冰' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 出生进化光) == 0x000E08, "Member 'AAIC_ME1JingNiaoMd00401_C::出生进化光' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 出生进化暗) == 0x000EC0, "Member 'AAIC_ME1JingNiaoMd00401_C::出生进化暗' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, Entity_ID) == 0x000F78, "Member 'AAIC_ME1JingNiaoMd00401_C::Entity_ID' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 一次性爬塔_0) == 0x000F80, "Member 'AAIC_ME1JingNiaoMd00401_C::一次性爬塔_0' has a wrong offset!");
static_assert(offsetof(AAIC_ME1JingNiaoMd00401_C, 监听捕食标签) == 0x001038, "Member 'AAIC_ME1JingNiaoMd00401_C::监听捕食标签' has a wrong offset!");

}

