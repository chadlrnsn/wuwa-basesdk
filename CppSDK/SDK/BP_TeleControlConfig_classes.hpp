#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TeleControlConfig

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TeleControlConfig.BP_TeleControlConfig_C
// 0x0260 (0x0298 - 0x0038)
class UBP_TeleControlConfig_C final : public UPrimaryDataAsset
{
public:
	float                                         读条时间;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          未锁定目标时不可投掷;                              // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         摆动频率;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         吸取延迟;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         线性阻尼;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         角刚度;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         线性刚度;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         角度阻尼;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         吸取时间;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         对齐时间;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         牵引高度;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         角速度;                                            // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         摆动范围;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                旋转;                                              // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                一级偏移;                                          // 0x0078(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                二级偏移;                                          // 0x0084(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           控物保持镜头;                                      // 0x0090(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           读条镜头;                                          // 0x009C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 读条震屏;                                          // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         被控制CD;                                          // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 控物保持震屏;                                      // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           吸取飞行镜头;                                      // 0x00C0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 吸取飞行震屏;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          打开速度Log;                                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         可再被控速度最小值;                                // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         被感知范围;                                        // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<float, float>                            被感知角度权重;                                    // 0x00E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 投掷震屏;                                          // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          随速度调整朝向;                                    // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          控物保持使用物理;                                  // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         无锁状态附加仰角;                                  // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   控物保持标签;                                      // 0x0148(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                被感知坐标偏移;                                    // 0x0158(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         物体质量;                                          // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         物体线性阻尼;                                      // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         物体角速度阻尼;                                    // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 控物准星资源ID;                                    // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          角色是否随相机旋转;                                // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   待机状态碰撞预设;                                  // 0x0184(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   吸取状态碰撞预设;                                  // 0x0190(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   保持状态碰撞预设;                                  // 0x019C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   投掷状态碰撞预设;                                  // 0x01A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           投掷运动轨迹曲线;                                  // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          抛物瞄准射线Debug;                                 // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          抛物瞄准模式开关;                                  // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C2[0x2];                                      // 0x01C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         抛物瞄准模式仰角;                                  // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         抛物瞄准模式初速度;                                // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         抛物瞄准射线检测半径;                              // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           抛物瞄准模式镜头;                                  // 0x01D0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        抛物瞄准模式样条特效;                              // 0x01E0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSoftObjectPath                        抛物瞄准模式终点特效;                              // 0x0200(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         抛物瞄准模式重力加速度;                            // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         投掷锁定范围;                                      // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        归位消失特效;                                      // 0x0228(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<int32, float>                            投掷状态CueId;                                     // 0x0248(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TeleControlConfig_C">();
	}
	static class UBP_TeleControlConfig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TeleControlConfig_C>();
	}
};
static_assert(alignof(UBP_TeleControlConfig_C) == 0x000008, "Wrong alignment on UBP_TeleControlConfig_C");
static_assert(sizeof(UBP_TeleControlConfig_C) == 0x000298, "Wrong size on UBP_TeleControlConfig_C");
static_assert(offsetof(UBP_TeleControlConfig_C, 读条时间) == 0x000038, "Member 'UBP_TeleControlConfig_C::读条时间' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 未锁定目标时不可投掷) == 0x00003C, "Member 'UBP_TeleControlConfig_C::未锁定目标时不可投掷' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 摆动频率) == 0x000040, "Member 'UBP_TeleControlConfig_C::摆动频率' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 吸取延迟) == 0x000044, "Member 'UBP_TeleControlConfig_C::吸取延迟' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 线性阻尼) == 0x000048, "Member 'UBP_TeleControlConfig_C::线性阻尼' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 角刚度) == 0x00004C, "Member 'UBP_TeleControlConfig_C::角刚度' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 线性刚度) == 0x000050, "Member 'UBP_TeleControlConfig_C::线性刚度' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 角度阻尼) == 0x000054, "Member 'UBP_TeleControlConfig_C::角度阻尼' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 吸取时间) == 0x000058, "Member 'UBP_TeleControlConfig_C::吸取时间' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 对齐时间) == 0x00005C, "Member 'UBP_TeleControlConfig_C::对齐时间' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 牵引高度) == 0x000060, "Member 'UBP_TeleControlConfig_C::牵引高度' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 角速度) == 0x000064, "Member 'UBP_TeleControlConfig_C::角速度' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 摆动范围) == 0x000068, "Member 'UBP_TeleControlConfig_C::摆动范围' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 旋转) == 0x00006C, "Member 'UBP_TeleControlConfig_C::旋转' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 一级偏移) == 0x000078, "Member 'UBP_TeleControlConfig_C::一级偏移' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 二级偏移) == 0x000084, "Member 'UBP_TeleControlConfig_C::二级偏移' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 控物保持镜头) == 0x000090, "Member 'UBP_TeleControlConfig_C::控物保持镜头' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 读条镜头) == 0x00009C, "Member 'UBP_TeleControlConfig_C::读条镜头' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 读条震屏) == 0x0000A8, "Member 'UBP_TeleControlConfig_C::读条震屏' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 被控制CD) == 0x0000B0, "Member 'UBP_TeleControlConfig_C::被控制CD' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 控物保持震屏) == 0x0000B8, "Member 'UBP_TeleControlConfig_C::控物保持震屏' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 吸取飞行镜头) == 0x0000C0, "Member 'UBP_TeleControlConfig_C::吸取飞行镜头' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 吸取飞行震屏) == 0x0000D0, "Member 'UBP_TeleControlConfig_C::吸取飞行震屏' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 打开速度Log) == 0x0000D8, "Member 'UBP_TeleControlConfig_C::打开速度Log' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 可再被控速度最小值) == 0x0000DC, "Member 'UBP_TeleControlConfig_C::可再被控速度最小值' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 被感知范围) == 0x0000E0, "Member 'UBP_TeleControlConfig_C::被感知范围' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 被感知角度权重) == 0x0000E8, "Member 'UBP_TeleControlConfig_C::被感知角度权重' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 投掷震屏) == 0x000138, "Member 'UBP_TeleControlConfig_C::投掷震屏' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 随速度调整朝向) == 0x000140, "Member 'UBP_TeleControlConfig_C::随速度调整朝向' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 控物保持使用物理) == 0x000141, "Member 'UBP_TeleControlConfig_C::控物保持使用物理' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 无锁状态附加仰角) == 0x000144, "Member 'UBP_TeleControlConfig_C::无锁状态附加仰角' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 控物保持标签) == 0x000148, "Member 'UBP_TeleControlConfig_C::控物保持标签' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 被感知坐标偏移) == 0x000158, "Member 'UBP_TeleControlConfig_C::被感知坐标偏移' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 物体质量) == 0x000164, "Member 'UBP_TeleControlConfig_C::物体质量' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 物体线性阻尼) == 0x000168, "Member 'UBP_TeleControlConfig_C::物体线性阻尼' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 物体角速度阻尼) == 0x00016C, "Member 'UBP_TeleControlConfig_C::物体角速度阻尼' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 控物准星资源ID) == 0x000170, "Member 'UBP_TeleControlConfig_C::控物准星资源ID' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 角色是否随相机旋转) == 0x000180, "Member 'UBP_TeleControlConfig_C::角色是否随相机旋转' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 待机状态碰撞预设) == 0x000184, "Member 'UBP_TeleControlConfig_C::待机状态碰撞预设' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 吸取状态碰撞预设) == 0x000190, "Member 'UBP_TeleControlConfig_C::吸取状态碰撞预设' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 保持状态碰撞预设) == 0x00019C, "Member 'UBP_TeleControlConfig_C::保持状态碰撞预设' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 投掷状态碰撞预设) == 0x0001A8, "Member 'UBP_TeleControlConfig_C::投掷状态碰撞预设' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 投掷运动轨迹曲线) == 0x0001B8, "Member 'UBP_TeleControlConfig_C::投掷运动轨迹曲线' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 抛物瞄准射线Debug) == 0x0001C0, "Member 'UBP_TeleControlConfig_C::抛物瞄准射线Debug' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 抛物瞄准模式开关) == 0x0001C1, "Member 'UBP_TeleControlConfig_C::抛物瞄准模式开关' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 抛物瞄准模式仰角) == 0x0001C4, "Member 'UBP_TeleControlConfig_C::抛物瞄准模式仰角' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 抛物瞄准模式初速度) == 0x0001C8, "Member 'UBP_TeleControlConfig_C::抛物瞄准模式初速度' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 抛物瞄准射线检测半径) == 0x0001CC, "Member 'UBP_TeleControlConfig_C::抛物瞄准射线检测半径' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 抛物瞄准模式镜头) == 0x0001D0, "Member 'UBP_TeleControlConfig_C::抛物瞄准模式镜头' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 抛物瞄准模式样条特效) == 0x0001E0, "Member 'UBP_TeleControlConfig_C::抛物瞄准模式样条特效' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 抛物瞄准模式终点特效) == 0x000200, "Member 'UBP_TeleControlConfig_C::抛物瞄准模式终点特效' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 抛物瞄准模式重力加速度) == 0x000220, "Member 'UBP_TeleControlConfig_C::抛物瞄准模式重力加速度' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 投掷锁定范围) == 0x000224, "Member 'UBP_TeleControlConfig_C::投掷锁定范围' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 归位消失特效) == 0x000228, "Member 'UBP_TeleControlConfig_C::归位消失特效' has a wrong offset!");
static_assert(offsetof(UBP_TeleControlConfig_C, 投掷状态CueId) == 0x000248, "Member 'UBP_TeleControlConfig_C::投掷状态CueId' has a wrong offset!");

}

