#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsMoveBlueprintFunctionLibrary

#include "Basic.hpp"

#include "TsMoveBlueprintFunctionLibrary_classes.hpp"
#include "TsMoveBlueprintFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetActorRotationWithPriority
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    sweep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::SetActorRotationWithPriority(int32 entityId, const struct FRotator& value, bool sweep, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetActorRotationWithPriority");

	Params::TsMoveBlueprintFunctionLibrary_C_SetActorRotationWithPriority Parms{};

	Parms.entityId = entityId;
	Parms.value = std::move(value);
	Parms.sweep = sweep;
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetActorRotationWithContext
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    sweep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::SetActorRotationWithContext(int32 entityId, const struct FRotator& rotation, bool sweep, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetActorRotationWithContext");

	Params::TsMoveBlueprintFunctionLibrary_C_SetActorRotationWithContext Parms{};

	Parms.entityId = entityId;
	Parms.rotation = std::move(rotation);
	Parms.sweep = sweep;
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.ActorTeleportToWithContext
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FVectorDouble&             location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::ActorTeleportToWithContext(int32 entityId, const struct FVectorDouble& location, const struct FRotator& rotation, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "ActorTeleportToWithContext");

	Params::TsMoveBlueprintFunctionLibrary_C_ActorTeleportToWithContext Parms{};

	Parms.entityId = entityId;
	Parms.location = std::move(location);
	Parms.rotation = std::move(rotation);
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.ActorKuroMoveAlongFloorWithContext
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FVector&                   velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   deltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::ActorKuroMoveAlongFloorWithContext(int32 entityId, const struct FVector& velocity, float deltaSeconds, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "ActorKuroMoveAlongFloorWithContext");

	Params::TsMoveBlueprintFunctionLibrary_C_ActorKuroMoveAlongFloorWithContext Parms{};

	Parms.entityId = entityId;
	Parms.velocity = std::move(velocity);
	Parms.deltaSeconds = deltaSeconds;
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetInputDirect
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVectorDouble UTsMoveBlueprintFunctionLibrary_C::GetInputDirect(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetInputDirect");

	Params::TsMoveBlueprintFunctionLibrary_C_GetInputDirect Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetInputDirect
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FVectorDouble&             direct                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetInputDirect(int32 entityId, const struct FVectorDouble& direct, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetInputDirect");

	Params::TsMoveBlueprintFunctionLibrary_C_SetInputDirect Parms{};

	Parms.entityId = entityId;
	Parms.direct = std::move(direct);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetInputRotator
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator UTsMoveBlueprintFunctionLibrary_C::GetInputRotator(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetInputRotator");

	Params::TsMoveBlueprintFunctionLibrary_C_GetInputRotator Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetInputRotator
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FRotator&                  rotator                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetInputRotator(int32 entityId, const struct FRotator& rotator, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetInputRotator");

	Params::TsMoveBlueprintFunctionLibrary_C_SetInputRotator Parms{};

	Parms.entityId = entityId;
	Parms.rotator = std::move(rotator);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetCharacterHidden
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// bool                                    isHidden                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          callObject                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetCharacterHidden(int32 entityId, bool isHidden, class UObject* callObject, const class FString& reason, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetCharacterHidden");

	Params::TsMoveBlueprintFunctionLibrary_C_SetCharacterHidden Parms{};

	Parms.entityId = entityId;
	Parms.isHidden = isHidden;
	Parms.callObject = callObject;
	Parms.reason = std::move(reason);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetHiddenMovementMode
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// bool                                    isHidden                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetHiddenMovementMode(int32 entityId, bool isHidden, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetHiddenMovementMode");

	Params::TsMoveBlueprintFunctionLibrary_C_SetHiddenMovementMode Parms{};

	Parms.entityId = entityId;
	Parms.isHidden = isHidden;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.CanResponseInput
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::CanResponseInput(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "CanResponseInput");

	Params::TsMoveBlueprintFunctionLibrary_C_CanResponseInput Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.CanJumpPress
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::CanJumpPress(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "CanJumpPress");

	Params::TsMoveBlueprintFunctionLibrary_C_CanJumpPress Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.CanWalkPress
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::CanWalkPress(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "CanWalkPress");

	Params::TsMoveBlueprintFunctionLibrary_C_CanWalkPress Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetAimYawRate
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTsMoveBlueprintFunctionLibrary_C::GetAimYawRate(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetAimYawRate");

	Params::TsMoveBlueprintFunctionLibrary_C_GetAimYawRate Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetMovementData
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSMovementSetting_State          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FSMovementSetting_State UTsMoveBlueprintFunctionLibrary_C::GetMovementData(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetMovementData");

	Params::TsMoveBlueprintFunctionLibrary_C_GetMovementData Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SmoothCharacterRotation
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FRotator&                  target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SmoothCharacterRotation(int32 entityId, const struct FRotator& target, float speed, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SmoothCharacterRotation");

	Params::TsMoveBlueprintFunctionLibrary_C_SmoothCharacterRotation Parms{};

	Parms.entityId = entityId;
	Parms.target = std::move(target);
	Parms.speed = speed;
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.HasMoveInput
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::HasMoveInput(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "HasMoveInput");

	Params::TsMoveBlueprintFunctionLibrary_C_HasMoveInput Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.HasRotatorInput
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::HasRotatorInput(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "HasRotatorInput");

	Params::TsMoveBlueprintFunctionLibrary_C_HasRotatorInput Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.IsMoving
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::IsMoving(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "IsMoving");

	Params::TsMoveBlueprintFunctionLibrary_C_IsMoving Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.IsJump
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::IsJump(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "IsJump");

	Params::TsMoveBlueprintFunctionLibrary_C_IsJump Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetSpeed
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTsMoveBlueprintFunctionLibrary_C::GetSpeed(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetSpeed");

	Params::TsMoveBlueprintFunctionLibrary_C_GetSpeed Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetGroundedTime
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTsMoveBlueprintFunctionLibrary_C::GetGroundedTime(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetGroundedTime");

	Params::TsMoveBlueprintFunctionLibrary_C_GetGroundedTime Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.IsFallingIntoWater
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::IsFallingIntoWater(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "IsFallingIntoWater");

	Params::TsMoveBlueprintFunctionLibrary_C_IsFallingIntoWater Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetForceSpeed
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FVectorDouble&             speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetForceSpeed(int32 entityId, const struct FVectorDouble& speed, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetForceSpeed");

	Params::TsMoveBlueprintFunctionLibrary_C_SetForceSpeed Parms{};

	Parms.entityId = entityId;
	Parms.speed = std::move(speed);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetAddMove
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UMeshComponent*                   mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   timeLength                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetAddMove(int32 entityId, class UMeshComponent* mesh, const struct FVectorDouble& speed, float timeLength, class UCurveFloat* curve, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetAddMove");

	Params::TsMoveBlueprintFunctionLibrary_C_SetAddMove Parms{};

	Parms.entityId = entityId;
	Parms.mesh = mesh;
	Parms.speed = std::move(speed);
	Parms.timeLength = timeLength;
	Parms.curve = curve;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.StopAddMove
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UMeshComponent*                   mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::StopAddMove(int32 entityId, class UMeshComponent* mesh, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "StopAddMove");

	Params::TsMoveBlueprintFunctionLibrary_C_StopAddMove Parms{};

	Parms.entityId = entityId;
	Parms.mesh = mesh;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.FixActorLocation
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FVectorDouble&             target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

struct FHitResult UTsMoveBlueprintFunctionLibrary_C::FixActorLocation(int32 entityId, const struct FVectorDouble& target, float offset, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "FixActorLocation");

	Params::TsMoveBlueprintFunctionLibrary_C_FixActorLocation Parms{};

	Parms.entityId = entityId;
	Parms.target = std::move(target);
	Parms.offset = offset;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.StopAllAddMove
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::StopAllAddMove(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "StopAllAddMove");

	Params::TsMoveBlueprintFunctionLibrary_C_StopAllAddMove Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetAddMoveWorld
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UMeshComponent*                   mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   timeLength                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetAddMoveWorld(int32 entityId, class UMeshComponent* mesh, const struct FVectorDouble& speed, float timeLength, class UCurveFloat* curve, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetAddMoveWorld");

	Params::TsMoveBlueprintFunctionLibrary_C_SetAddMoveWorld Parms{};

	Parms.entityId = entityId;
	Parms.mesh = mesh;
	Parms.speed = std::move(speed);
	Parms.timeLength = timeLength;
	Parms.curve = curve;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetAddMoveWorldSpeed
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UMeshComponent*                   mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetAddMoveWorldSpeed(int32 entityId, class UMeshComponent* mesh, const struct FVectorDouble& speed, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetAddMoveWorldSpeed");

	Params::TsMoveBlueprintFunctionLibrary_C_SetAddMoveWorldSpeed Parms{};

	Parms.entityId = entityId;
	Parms.mesh = mesh;
	Parms.speed = std::move(speed);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetAddMoveOffset
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FVectorDouble&             offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetAddMoveOffset(int32 entityId, const struct FVectorDouble& offset, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetAddMoveOffset");

	Params::TsMoveBlueprintFunctionLibrary_C_SetAddMoveOffset Parms{};

	Parms.entityId = entityId;
	Parms.offset = std::move(offset);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetAddMoveRotation
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FRotator&                  rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetAddMoveRotation(int32 entityId, const struct FRotator& rotation, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetAddMoveRotation");

	Params::TsMoveBlueprintFunctionLibrary_C_SetAddMoveRotation Parms{};

	Parms.entityId = entityId;
	Parms.rotation = std::move(rotation);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetEnterWaterState
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// bool                                    isEnter                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetEnterWaterState(int32 entityId, bool isEnter, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetEnterWaterState");

	Params::TsMoveBlueprintFunctionLibrary_C_SetEnterWaterState Parms{};

	Parms.entityId = entityId;
	Parms.isEnter = isEnter;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetClimbState
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSClimbState                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FSClimbState UTsMoveBlueprintFunctionLibrary_C::GetClimbState(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetClimbState");

	Params::TsMoveBlueprintFunctionLibrary_C_GetClimbState Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetClimbRadius
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTsMoveBlueprintFunctionLibrary_C::GetClimbRadius(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetClimbRadius");

	Params::TsMoveBlueprintFunctionLibrary_C_GetClimbRadius Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetClimbInfo
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSClimbInfo                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FSClimbInfo UTsMoveBlueprintFunctionLibrary_C::GetClimbInfo(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetClimbInfo");

	Params::TsMoveBlueprintFunctionLibrary_C_GetClimbInfo Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.KickExitCheck
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::KickExitCheck(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "KickExitCheck");

	Params::TsMoveBlueprintFunctionLibrary_C_KickExitCheck Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.CanClimbPress
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::CanClimbPress(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "CanClimbPress");

	Params::TsMoveBlueprintFunctionLibrary_C_CanClimbPress Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.OnEnterClimb
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::OnEnterClimb(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "OnEnterClimb");

	Params::TsMoveBlueprintFunctionLibrary_C_OnEnterClimb Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.OnExitClimb
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::OnExitClimb(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "OnExitClimb");

	Params::TsMoveBlueprintFunctionLibrary_C_OnExitClimb Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.DealClimbUpStart
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::DealClimbUpStart(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "DealClimbUpStart");

	Params::TsMoveBlueprintFunctionLibrary_C_DealClimbUpStart Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.FinishClimbDown
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::FinishClimbDown(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "FinishClimbDown");

	Params::TsMoveBlueprintFunctionLibrary_C_FinishClimbDown Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.DealClimbUpFinish
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::DealClimbUpFinish(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "DealClimbUpFinish");

	Params::TsMoveBlueprintFunctionLibrary_C_DealClimbUpFinish Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetClimbState
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// EClimbState                             climbState                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetClimbState(int32 entityId, EClimbState climbState, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetClimbState");

	Params::TsMoveBlueprintFunctionLibrary_C_SetClimbState Parms{};

	Parms.entityId = entityId;
	Parms.climbState = climbState;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetEnterClimbType
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// EEnterClimb                             enterType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetEnterClimbType(int32 entityId, EEnterClimb enterType, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetEnterClimbType");

	Params::TsMoveBlueprintFunctionLibrary_C_SetEnterClimbType Parms{};

	Parms.entityId = entityId;
	Parms.enterType = enterType;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetExitClimbType
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// EExitClimb                              exitType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetExitClimbType(int32 entityId, EExitClimb exitType, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetExitClimbType");

	Params::TsMoveBlueprintFunctionLibrary_C_SetExitClimbType Parms{};

	Parms.entityId = entityId;
	Parms.exitType = exitType;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetWaterLocation
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVectorDouble UTsMoveBlueprintFunctionLibrary_C::GetWaterLocation(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetWaterLocation");

	Params::TsMoveBlueprintFunctionLibrary_C_GetWaterLocation Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetWaterVolume
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::GetWaterVolume(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetWaterVolume");

	Params::TsMoveBlueprintFunctionLibrary_C_GetWaterVolume Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetClimbOnWallAngle
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTsMoveBlueprintFunctionLibrary_C::GetClimbOnWallAngle(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetClimbOnWallAngle");

	Params::TsMoveBlueprintFunctionLibrary_C_GetClimbOnWallAngle Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetUseDebugMovementSetting
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// bool                                    newSelect                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetUseDebugMovementSetting(int32 entityId, bool newSelect, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetUseDebugMovementSetting");

	Params::TsMoveBlueprintFunctionLibrary_C_SetUseDebugMovementSetting Parms{};

	Parms.entityId = entityId;
	Parms.newSelect = newSelect;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetDebugMovementSetting
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FSMovementSetting&         newSetting                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetDebugMovementSetting(int32 entityId, const struct FSMovementSetting& newSetting, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetDebugMovementSetting");

	Params::TsMoveBlueprintFunctionLibrary_C_SetDebugMovementSetting Parms{};

	Parms.entityId = entityId;
	Parms.newSetting = std::move(newSetting);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetLockedRotation
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// bool                                    lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetLockedRotation(int32 entityId, bool lock, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetLockedRotation");

	Params::TsMoveBlueprintFunctionLibrary_C_SetLockedRotation Parms{};

	Parms.entityId = entityId;
	Parms.lock = lock;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetLockedRotation
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::GetLockedRotation(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetLockedRotation");

	Params::TsMoveBlueprintFunctionLibrary_C_GetLockedRotation Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetFallingHorizontalMaxSpeed
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetFallingHorizontalMaxSpeed(int32 entityId, float speed, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetFallingHorizontalMaxSpeed");

	Params::TsMoveBlueprintFunctionLibrary_C_SetFallingHorizontalMaxSpeed Parms{};

	Parms.entityId = entityId;
	Parms.speed = speed;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.ClearFallingHorizontalMaxSpeed
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::ClearFallingHorizontalMaxSpeed(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "ClearFallingHorizontalMaxSpeed");

	Params::TsMoveBlueprintFunctionLibrary_C_ClearFallingHorizontalMaxSpeed Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.DetectClimbWithDirect
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// bool                                    bSprintEnter                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVectorDouble&             direct                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::DetectClimbWithDirect(int32 entityId, bool bSprintEnter, const struct FVectorDouble& direct, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "DetectClimbWithDirect");

	Params::TsMoveBlueprintFunctionLibrary_C_DetectClimbWithDirect Parms{};

	Parms.entityId = entityId;
	Parms.bSprintEnter = bSprintEnter;
	Parms.direct = std::move(direct);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.TurnToTarget
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class AActor*                           target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::TurnToTarget(int32 entityId, class AActor* target, float speed, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "TurnToTarget");

	Params::TsMoveBlueprintFunctionLibrary_C_TurnToTarget Parms{};

	Parms.entityId = entityId;
	Parms.target = target;
	Parms.speed = speed;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetMonsterMoveDirection
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementDirection                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EMovementDirection UTsMoveBlueprintFunctionLibrary_C::GetMonsterMoveDirection(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetMonsterMoveDirection");

	Params::TsMoveBlueprintFunctionLibrary_C_GetMonsterMoveDirection Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetRoleBody
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UTsMoveBlueprintFunctionLibrary_C::GetRoleBody(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetRoleBody");

	Params::TsMoveBlueprintFunctionLibrary_C_GetRoleBody Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetRacingRightSpeed
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTsMoveBlueprintFunctionLibrary_C::GetRacingRightSpeed(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetRacingRightSpeed");

	Params::TsMoveBlueprintFunctionLibrary_C_GetRacingRightSpeed Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetPendulumData
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   addVelocityX                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   addVelocityY                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   addVelocityZ                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   forwardLossPercentage                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   lossPercentage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   gravity                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   friction                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   deceleration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   accelerator                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   maxSpeed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   maxFallingSpeed                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetPendulumData(int32 entityId, float addVelocityX, float addVelocityY, float addVelocityZ, float forwardLossPercentage, float lossPercentage, float gravity, float friction, float deceleration, float accelerator, float maxSpeed, float maxFallingSpeed, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetPendulumData");

	Params::TsMoveBlueprintFunctionLibrary_C_SetPendulumData Parms{};

	Parms.entityId = entityId;
	Parms.addVelocityX = addVelocityX;
	Parms.addVelocityY = addVelocityY;
	Parms.addVelocityZ = addVelocityZ;
	Parms.forwardLossPercentage = forwardLossPercentage;
	Parms.lossPercentage = lossPercentage;
	Parms.gravity = gravity;
	Parms.friction = friction;
	Parms.deceleration = deceleration;
	Parms.accelerator = accelerator;
	Parms.maxSpeed = maxSpeed;
	Parms.maxFallingSpeed = maxFallingSpeed;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.Reset
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::Reset(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "Reset");

	Params::TsMoveBlueprintFunctionLibrary_C_Reset Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetGrabPoint
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const struct FVectorDouble&             point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetGrabPoint(int32 entityId, const struct FVectorDouble& point, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetGrabPoint");

	Params::TsMoveBlueprintFunctionLibrary_C_SetGrabPoint Parms{};

	Parms.entityId = entityId;
	Parms.point = std::move(point);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetGrabPoint
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVectorDouble UTsMoveBlueprintFunctionLibrary_C::GetGrabPoint(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetGrabPoint");

	Params::TsMoveBlueprintFunctionLibrary_C_GetGrabPoint Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetHooked
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// bool                                    isHooked                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetHooked(int32 entityId, bool isHooked, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetHooked");

	Params::TsMoveBlueprintFunctionLibrary_C_SetHooked Parms{};

	Parms.entityId = entityId;
	Parms.isHooked = isHooked;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetHooked
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::GetHooked(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetHooked");

	Params::TsMoveBlueprintFunctionLibrary_C_GetHooked Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetSocketName
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// const class FString&                    socketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetSocketName(int32 entityId, const class FString& socketName, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetSocketName");

	Params::TsMoveBlueprintFunctionLibrary_C_SetSocketName Parms{};

	Parms.entityId = entityId;
	Parms.socketName = std::move(socketName);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetRopeForce
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   ropeForce                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetRopeForce(int32 entityId, float ropeForce, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetRopeForce");

	Params::TsMoveBlueprintFunctionLibrary_C_SetRopeForce Parms{};

	Parms.entityId = entityId;
	Parms.ropeForce = ropeForce;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetRopeForce
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTsMoveBlueprintFunctionLibrary_C::GetRopeForce(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetRopeForce");

	Params::TsMoveBlueprintFunctionLibrary_C_GetRopeForce Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetDistanceRopeToActor
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   ropeForce                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetDistanceRopeToActor(int32 entityId, float ropeForce, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetDistanceRopeToActor");

	Params::TsMoveBlueprintFunctionLibrary_C_SetDistanceRopeToActor Parms{};

	Parms.entityId = entityId;
	Parms.ropeForce = ropeForce;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetDistanceRopeToActor
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTsMoveBlueprintFunctionLibrary_C::GetDistanceRopeToActor(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetDistanceRopeToActor");

	Params::TsMoveBlueprintFunctionLibrary_C_GetDistanceRopeToActor Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetAirControl
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   airControl                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetAirControl(int32 entityId, float airControl, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetAirControl");

	Params::TsMoveBlueprintFunctionLibrary_C_SetAirControl Parms{};

	Parms.entityId = entityId;
	Parms.airControl = airControl;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetAirControl
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTsMoveBlueprintFunctionLibrary_C::GetAirControl(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetAirControl");

	Params::TsMoveBlueprintFunctionLibrary_C_GetAirControl Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetUpLength
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetUpLength(int32 entityId, float length, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetUpLength");

	Params::TsMoveBlueprintFunctionLibrary_C_SetUpLength Parms{};

	Parms.entityId = entityId;
	Parms.length = length;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetCanMoveFromInput
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// bool                                    canMove                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetCanMoveFromInput(int32 entityId, bool canMove, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetCanMoveFromInput");

	Params::TsMoveBlueprintFunctionLibrary_C_SetCanMoveFromInput Parms{};

	Parms.entityId = entityId;
	Parms.canMove = canMove;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.UpdateAnimInfoMoveMonster
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UBP_ABPLogicParams_C*             animLogicParams                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::UpdateAnimInfoMoveMonster(int32 entityId, class UBP_ABPLogicParams_C* animLogicParams, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "UpdateAnimInfoMoveMonster");

	Params::TsMoveBlueprintFunctionLibrary_C_UpdateAnimInfoMoveMonster Parms{};

	Parms.entityId = entityId;
	Parms.animLogicParams = animLogicParams;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.UpdateAnimInfoMove
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UBP_ABPLogicParams_C*             animLogicParams                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::UpdateAnimInfoMove(int32 entityId, class UBP_ABPLogicParams_C* animLogicParams, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "UpdateAnimInfoMove");

	Params::TsMoveBlueprintFunctionLibrary_C_UpdateAnimInfoMove Parms{};

	Parms.entityId = entityId;
	Parms.animLogicParams = animLogicParams;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.UpdateAnimInfoMoveRoleNpc
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UBP_ABPLogicParams_C*             animLogicParams                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::UpdateAnimInfoMoveRoleNpc(int32 entityId, class UBP_ABPLogicParams_C* animLogicParams, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "UpdateAnimInfoMoveRoleNpc");

	Params::TsMoveBlueprintFunctionLibrary_C_UpdateAnimInfoMoveRoleNpc Parms{};

	Parms.entityId = entityId;
	Parms.animLogicParams = animLogicParams;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.TurnOffAutomaticFlightMode
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::TurnOffAutomaticFlightMode(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "TurnOffAutomaticFlightMode");

	Params::TsMoveBlueprintFunctionLibrary_C_TurnOffAutomaticFlightMode Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.HasMoveInputOrTickIntervalAndModelBuffer
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::HasMoveInputOrTickIntervalAndModelBuffer(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "HasMoveInputOrTickIntervalAndModelBuffer");

	Params::TsMoveBlueprintFunctionLibrary_C_HasMoveInputOrTickIntervalAndModelBuffer Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetActorLocationWithContext
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    sweep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::SetActorLocationWithContext(int32 entityId, const struct FVectorDouble& location, bool sweep, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetActorLocationWithContext");

	Params::TsMoveBlueprintFunctionLibrary_C_SetActorLocationWithContext Parms{};

	Parms.entityId = entityId;
	Parms.location = std::move(location);
	Parms.sweep = sweep;
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetActorLocationAndRotationWithContext
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    sweep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::SetActorLocationAndRotationWithContext(int32 entityId, const struct FVectorDouble& location, const struct FRotator& rotation, bool sweep, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetActorLocationAndRotationWithContext");

	Params::TsMoveBlueprintFunctionLibrary_C_SetActorLocationAndRotationWithContext Parms{};

	Parms.entityId = entityId;
	Parms.location = std::move(location);
	Parms.rotation = std::move(rotation);
	Parms.sweep = sweep;
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.AddActorWorldOffsetWithContext
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    sweep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::AddActorWorldOffsetWithContext(int32 entityId, const struct FVectorDouble& offset, bool sweep, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "AddActorWorldOffsetWithContext");

	Params::TsMoveBlueprintFunctionLibrary_C_AddActorWorldOffsetWithContext Parms{};

	Parms.entityId = entityId;
	Parms.offset = std::move(offset);
	Parms.sweep = sweep;
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.AddActorWorldRotationWithContext
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    sweep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::AddActorWorldRotationWithContext(int32 entityId, const struct FRotator& rotation, bool sweep, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "AddActorWorldRotationWithContext");

	Params::TsMoveBlueprintFunctionLibrary_C_AddActorWorldRotationWithContext Parms{};

	Parms.entityId = entityId;
	Parms.rotation = std::move(rotation);
	Parms.sweep = sweep;
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.AddActorLocalRotationWithContext
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    sweep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::AddActorLocalRotationWithContext(int32 entityId, const struct FRotator& rotation, bool sweep, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "AddActorLocalRotationWithContext");

	Params::TsMoveBlueprintFunctionLibrary_C_AddActorLocalRotationWithContext Parms{};

	Parms.entityId = entityId;
	Parms.rotation = std::move(rotation);
	Parms.sweep = sweep;
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.AddActorLocalOffsetWithContext
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    sweep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::AddActorLocalOffsetWithContext(int32 entityId, const struct FVectorDouble& offset, bool sweep, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "AddActorLocalOffsetWithContext");

	Params::TsMoveBlueprintFunctionLibrary_C_AddActorLocalOffsetWithContext Parms{};

	Parms.entityId = entityId;
	Parms.offset = std::move(offset);
	Parms.sweep = sweep;
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetSwimLocation
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVectorDouble UTsMoveBlueprintFunctionLibrary_C::GetSwimLocation(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetSwimLocation");

	Params::TsMoveBlueprintFunctionLibrary_C_GetSwimLocation Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SimpleSwim
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   deltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   detectedHeight                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             currentSpeed                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVectorDouble UTsMoveBlueprintFunctionLibrary_C::SimpleSwim(int32 entityId, float deltaSeconds, float detectedHeight, const struct FVectorDouble& currentSpeed, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SimpleSwim");

	Params::TsMoveBlueprintFunctionLibrary_C_SimpleSwim Parms{};

	Parms.entityId = entityId;
	Parms.deltaSeconds = deltaSeconds;
	Parms.detectedHeight = detectedHeight;
	Parms.currentSpeed = std::move(currentSpeed);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.LeaveRoll
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::LeaveRoll(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "LeaveRoll");

	Params::TsMoveBlueprintFunctionLibrary_C_LeaveRoll Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.EnterRoll
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   targetSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   friction                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   accelOnGround                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   gravity                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   stepUpHeight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   maxSpeed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::EnterRoll(int32 entityId, float targetSpeed, float friction, float accelOnGround, float gravity, float stepUpHeight, float maxSpeed, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "EnterRoll");

	Params::TsMoveBlueprintFunctionLibrary_C_EnterRoll Parms{};

	Parms.entityId = entityId;
	Parms.targetSpeed = targetSpeed;
	Parms.friction = friction;
	Parms.accelOnGround = accelOnGround;
	Parms.gravity = gravity;
	Parms.stepUpHeight = stepUpHeight;
	Parms.maxSpeed = maxSpeed;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.EnterKite
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::EnterKite(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "EnterKite");

	Params::TsMoveBlueprintFunctionLibrary_C_EnterKite Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetAcceleration
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UTsMoveBlueprintFunctionLibrary_C::GetAcceleration(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetAcceleration");

	Params::TsMoveBlueprintFunctionLibrary_C_GetAcceleration Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.GetHeightAboveGround
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   detectedHeight                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTsMoveBlueprintFunctionLibrary_C::GetHeightAboveGround(int32 entityId, float detectedHeight, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "GetHeightAboveGround");

	Params::TsMoveBlueprintFunctionLibrary_C_GetHeightAboveGround Parms{};

	Parms.entityId = entityId;
	Parms.detectedHeight = detectedHeight;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.TurnOffCameraDrivenAutoFlightMode
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::TurnOffCameraDrivenAutoFlightMode(int32 entityId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "TurnOffCameraDrivenAutoFlightMode");

	Params::TsMoveBlueprintFunctionLibrary_C_TurnOffCameraDrivenAutoFlightMode Parms{};

	Parms.entityId = entityId;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.TurnOnAutomaticFlightMode
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UICM_AutomaticFlight_DataBase_C*  dataAsset                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::TurnOnAutomaticFlightMode(int32 entityId, class UICM_AutomaticFlight_DataBase_C* dataAsset, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "TurnOnAutomaticFlightMode");

	Params::TsMoveBlueprintFunctionLibrary_C_TurnOnAutomaticFlightMode Parms{};

	Parms.entityId = entityId;
	Parms.dataAsset = dataAsset;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.TurnOnCameraDrivenAutoFlightMode
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_CameraDrivenAutoFlightData_C* dataAsset                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::TurnOnCameraDrivenAutoFlightMode(int32 entityId, class UBP_CameraDrivenAutoFlightData_C* dataAsset, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "TurnOnCameraDrivenAutoFlightMode");

	Params::TsMoveBlueprintFunctionLibrary_C_TurnOnCameraDrivenAutoFlightMode Parms{};

	Parms.entityId = entityId;
	Parms.dataAsset = dataAsset;
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.AddActorWorldOffsetWithContextAndReset
// (Native, Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    sweep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTsMoveBlueprintFunctionLibrary_C::AddActorWorldOffsetWithContextAndReset(int32 entityId, const struct FVectorDouble& offset, bool sweep, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "AddActorWorldOffsetWithContextAndReset");

	Params::TsMoveBlueprintFunctionLibrary_C_AddActorWorldOffsetWithContextAndReset Parms{};

	Parms.entityId = entityId;
	Parms.offset = std::move(offset);
	Parms.sweep = sweep;
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C.SetActorLookAtWithContext
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   entityId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVectorDouble&             targetPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UTsMoveBlueprintFunctionLibrary_C::SetActorLookAtWithContext(int32 entityId, const struct FVectorDouble& targetPoint, const class FString& context, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TsMoveBlueprintFunctionLibrary_C", "SetActorLookAtWithContext");

	Params::TsMoveBlueprintFunctionLibrary_C_SetActorLookAtWithContext Parms{};

	Parms.entityId = entityId;
	Parms.targetPoint = std::move(targetPoint);
	Parms.context = std::move(context);
	Parms.__WorldContext = __WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

