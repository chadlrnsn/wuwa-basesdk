#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelSequence

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "LevelSequence_structs.hpp"
#include "UMG_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class LevelSequence.LevelSequenceBurnInOptions
// 0x0030 (0x0060 - 0x0030)
class ULevelSequenceBurnInOptions final : public UObject
{
public:
	bool                                          bUseBurnIn;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         BurnInClass;                                       // 0x0038(0x0020)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequenceBurnInInitSettings*       Settings;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetBurnIn(const struct FSoftClassPath& InBurnInClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceBurnInOptions">();
	}
	static class ULevelSequenceBurnInOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceBurnInOptions>();
	}
};
static_assert(alignof(ULevelSequenceBurnInOptions) == 0x000008, "Wrong alignment on ULevelSequenceBurnInOptions");
static_assert(sizeof(ULevelSequenceBurnInOptions) == 0x000060, "Wrong size on ULevelSequenceBurnInOptions");
static_assert(offsetof(ULevelSequenceBurnInOptions, bUseBurnIn) == 0x000030, "Member 'ULevelSequenceBurnInOptions::bUseBurnIn' has a wrong offset!");
static_assert(offsetof(ULevelSequenceBurnInOptions, BurnInClass) == 0x000038, "Member 'ULevelSequenceBurnInOptions::BurnInClass' has a wrong offset!");
static_assert(offsetof(ULevelSequenceBurnInOptions, Settings) == 0x000058, "Member 'ULevelSequenceBurnInOptions::Settings' has a wrong offset!");

// Class LevelSequence.LevelSequenceActor
// 0x0098 (0x0348 - 0x02B0)
class ALevelSequenceActor : public AActor
{
public:
	uint8                                         Pad_2B0[0x10];                                     // 0x02B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneSequencePlaybackSettings    PlaybackSettings;                                  // 0x02C0(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   SequencePlayer;                                    // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LevelSequence;                                     // 0x02E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelSequenceCameraSettings           CameraSettings;                                    // 0x0300(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequenceBurnInOptions*            BurnInOptions;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneBindingOverrides*            BindingOverrides;                                  // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAutoPlay : 1;                                     // 0x0318(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideInstanceData : 1;                         // 0x0318(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReplicatePlayback : 1;                            // 0x0318(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DefaultInstanceData;                               // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequenceBurnIn*                   BurnInInstance;                                    // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowBurnin;                                       // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_331[0x17];                                     // 0x0331(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddBinding(const struct FMovieSceneObjectBindingID& Binding, class AActor* Actor, bool bAllowBindingsFromAsset);
	void AddBindingByTag(class FName BindingTag, class AActor* Actor, bool bAllowBindingsFromAsset, bool IncludeSubSequence);
	TArray<class UObject*> GetBindingByTag(class FName BindingTag, bool IncludeSubSequence);
	TArray<class UObject*> GetBindingByTagInTemplate(class FName BindingTag, bool IncludeSubSequence);
	bool HasBindingByTag(class FName BindingTag, bool IncludeSubSequence);
	void HideBurnin();
	void RemoveBinding(const struct FMovieSceneObjectBindingID& Binding, class AActor* Actor);
	void RemoveBindingByTag(class FName Tag, class AActor* Actor, bool IncludeSubSequence);
	void ResetBinding(const struct FMovieSceneObjectBindingID& Binding);
	void ResetBindings();
	void SetBinding(const struct FMovieSceneObjectBindingID& Binding, const TArray<class AActor*>& Actors, bool bAllowBindingsFromAsset);
	void SetBindingByTag(class FName BindingTag, const TArray<class AActor*>& Actors, bool bAllowBindingsFromAsset, bool IncludeSubSequence);
	void SetReplicatePlayback(bool ReplicatePlayback);
	void SetSequence(class ULevelSequence* InSequence);
	void SetShouldLatentDestroy(bool bInShouldLatentDestroy);
	void SetTickOptimize(bool Enable, bool InCheckBindingActorVisibility, bool InSeekTicks);
	void ShowBurnin();

	struct FMovieSceneObjectBindingID FindNamedBinding(class FName Tag) const;
	const TArray<struct FMovieSceneObjectBindingID> FindNamedBindings(class FName Tag) const;
	class ULevelSequence* GetSequence() const;
	class ULevelSequencePlayer* GetSequencePlayer() const;
	class ULevelSequence* LoadSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceActor">();
	}
	static class ALevelSequenceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelSequenceActor>();
	}
};
static_assert(alignof(ALevelSequenceActor) == 0x000008, "Wrong alignment on ALevelSequenceActor");
static_assert(sizeof(ALevelSequenceActor) == 0x000348, "Wrong size on ALevelSequenceActor");
static_assert(offsetof(ALevelSequenceActor, PlaybackSettings) == 0x0002C0, "Member 'ALevelSequenceActor::PlaybackSettings' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, SequencePlayer) == 0x0002D8, "Member 'ALevelSequenceActor::SequencePlayer' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, LevelSequence) == 0x0002E0, "Member 'ALevelSequenceActor::LevelSequence' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, CameraSettings) == 0x000300, "Member 'ALevelSequenceActor::CameraSettings' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, BurnInOptions) == 0x000308, "Member 'ALevelSequenceActor::BurnInOptions' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, BindingOverrides) == 0x000310, "Member 'ALevelSequenceActor::BindingOverrides' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, DefaultInstanceData) == 0x000320, "Member 'ALevelSequenceActor::DefaultInstanceData' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, BurnInInstance) == 0x000328, "Member 'ALevelSequenceActor::BurnInInstance' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, bShowBurnin) == 0x000330, "Member 'ALevelSequenceActor::bShowBurnin' has a wrong offset!");

// Class LevelSequence.AnimSequenceLevelSequenceLink
// 0x0030 (0x0060 - 0x0030)
class UAnimSequenceLevelSequenceLink final : public UAssetUserData
{
public:
	struct FGuid                                  SkelTrackGuid;                                     // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        PathToLevelSequence;                               // 0x0040(0x0020)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimSequenceLevelSequenceLink">();
	}
	static class UAnimSequenceLevelSequenceLink* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimSequenceLevelSequenceLink>();
	}
};
static_assert(alignof(UAnimSequenceLevelSequenceLink) == 0x000008, "Wrong alignment on UAnimSequenceLevelSequenceLink");
static_assert(sizeof(UAnimSequenceLevelSequenceLink) == 0x000060, "Wrong size on UAnimSequenceLevelSequenceLink");
static_assert(offsetof(UAnimSequenceLevelSequenceLink, SkelTrackGuid) == 0x000030, "Member 'UAnimSequenceLevelSequenceLink::SkelTrackGuid' has a wrong offset!");
static_assert(offsetof(UAnimSequenceLevelSequenceLink, PathToLevelSequence) == 0x000040, "Member 'UAnimSequenceLevelSequenceLink::PathToLevelSequence' has a wrong offset!");

// Class LevelSequence.LevelSequence
// 0x01E0 (0x0248 - 0x0068)
class ULevelSequence : public UMovieSceneSequence
{
public:
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieScene*                            MovieScene;                                        // 0x0070(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelSequenceObjectReferenceMap       ObjectReferences;                                  // 0x0078(0x0050)(Protected, NativeAccessSpecifierProtected)
	struct FLevelSequenceBindingReferences        BindingReferences;                                 // 0x00C8(0x00A0)(Protected, NativeAccessSpecifierProtected)
	TMap<class FString, struct FLevelSequenceObject> PossessedObjects;                               // 0x0168(0x0050)(Deprecated, Protected, NativeAccessSpecifierProtected)
	class UClass*                                 DirectorClass;                                     // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOverrideCenterOffset;                             // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DefaultCenterOffset;                               // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseAnimAudio;                                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UKuroSequenceConsoleCommandDataAsset*   KuroSequenceConsoleCommandDataAsset;               // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKuroSequenceConsoleCommandDataAsset*   SequenceDataAsset;                                 // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x01E8(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGuid, struct FGuid>              CustomGuidToBindingGuidMap;                        // 0x01F8(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	class UObject* CopyMetaData(class UObject* InMetaData);
	bool D_GetCenterOffset(struct FVectorDouble* OutCenterOffset);
	class UObject* FindOrAddMetaDataByClass(TSubclassOf<class UObject> InClass);
	bool GetAnimAudio();
	bool GetCenterOffset(struct FVector* OutCenterOffset);
	void RemoveMetaDataByClass(TSubclassOf<class UObject> InClass);
	void SetAnimAudio(bool Value);
	void SetCenterOffset(const struct FVector& InCenterOffset);

	class UObject* FindMetaDataByClass(TSubclassOf<class UObject> InClass) const;
	class UMovieScene* GetMovieScene() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequence">();
	}
	static class ULevelSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequence>();
	}
};
static_assert(alignof(ULevelSequence) == 0x000008, "Wrong alignment on ULevelSequence");
static_assert(sizeof(ULevelSequence) == 0x000248, "Wrong size on ULevelSequence");
static_assert(offsetof(ULevelSequence, MovieScene) == 0x000070, "Member 'ULevelSequence::MovieScene' has a wrong offset!");
static_assert(offsetof(ULevelSequence, ObjectReferences) == 0x000078, "Member 'ULevelSequence::ObjectReferences' has a wrong offset!");
static_assert(offsetof(ULevelSequence, BindingReferences) == 0x0000C8, "Member 'ULevelSequence::BindingReferences' has a wrong offset!");
static_assert(offsetof(ULevelSequence, PossessedObjects) == 0x000168, "Member 'ULevelSequence::PossessedObjects' has a wrong offset!");
static_assert(offsetof(ULevelSequence, DirectorClass) == 0x0001B8, "Member 'ULevelSequence::DirectorClass' has a wrong offset!");
static_assert(offsetof(ULevelSequence, bOverrideCenterOffset) == 0x0001C0, "Member 'ULevelSequence::bOverrideCenterOffset' has a wrong offset!");
static_assert(offsetof(ULevelSequence, DefaultCenterOffset) == 0x0001C4, "Member 'ULevelSequence::DefaultCenterOffset' has a wrong offset!");
static_assert(offsetof(ULevelSequence, bUseAnimAudio) == 0x0001D0, "Member 'ULevelSequence::bUseAnimAudio' has a wrong offset!");
static_assert(offsetof(ULevelSequence, KuroSequenceConsoleCommandDataAsset) == 0x0001D8, "Member 'ULevelSequence::KuroSequenceConsoleCommandDataAsset' has a wrong offset!");
static_assert(offsetof(ULevelSequence, SequenceDataAsset) == 0x0001E0, "Member 'ULevelSequence::SequenceDataAsset' has a wrong offset!");
static_assert(offsetof(ULevelSequence, AssetUserData) == 0x0001E8, "Member 'ULevelSequence::AssetUserData' has a wrong offset!");
static_assert(offsetof(ULevelSequence, CustomGuidToBindingGuidMap) == 0x0001F8, "Member 'ULevelSequence::CustomGuidToBindingGuidMap' has a wrong offset!");

// Class LevelSequence.DefaultLevelSequenceInstanceData
// 0x0050 (0x0080 - 0x0030)
class UDefaultLevelSequenceInstanceData final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TransformOriginActor;                              // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TransformOrigin;                                   // 0x0040(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ApplyWorldOrigin;                                  // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DefaultLevelSequenceInstanceData">();
	}
	static class UDefaultLevelSequenceInstanceData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDefaultLevelSequenceInstanceData>();
	}
};
static_assert(alignof(UDefaultLevelSequenceInstanceData) == 0x000010, "Wrong alignment on UDefaultLevelSequenceInstanceData");
static_assert(sizeof(UDefaultLevelSequenceInstanceData) == 0x000080, "Wrong size on UDefaultLevelSequenceInstanceData");
static_assert(offsetof(UDefaultLevelSequenceInstanceData, TransformOriginActor) == 0x000038, "Member 'UDefaultLevelSequenceInstanceData::TransformOriginActor' has a wrong offset!");
static_assert(offsetof(UDefaultLevelSequenceInstanceData, TransformOrigin) == 0x000040, "Member 'UDefaultLevelSequenceInstanceData::TransformOrigin' has a wrong offset!");
static_assert(offsetof(UDefaultLevelSequenceInstanceData, ApplyWorldOrigin) == 0x000070, "Member 'UDefaultLevelSequenceInstanceData::ApplyWorldOrigin' has a wrong offset!");

// Class LevelSequence.LevelSequenceMetaData
// 0x0000 (0x0000 - 0x0000)
class ILevelSequenceMetaData final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceMetaData">();
	}
	static class ILevelSequenceMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILevelSequenceMetaData>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ILevelSequenceMetaData) == 0x000001, "Wrong alignment on ILevelSequenceMetaData");
static_assert(sizeof(ILevelSequenceMetaData) == 0x000001, "Wrong size on ILevelSequenceMetaData");

// Class LevelSequence.KuroSequenceConsoleCommandDataAsset
// 0x0048 (0x0080 - 0x0038)
class UKuroSequenceConsoleCommandDataAsset final : public UDataAsset
{
public:
	TArray<class FString>                         ConsoleCommands;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         GlobalConsoleCommands;                             // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         MobileConsoleCommands;                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         GlobalMobileConsoleCommands;                       // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMobileLowStreaming;                               // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MobileLowStreamingScale;                           // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroSequenceConsoleCommandDataAsset">();
	}
	static class UKuroSequenceConsoleCommandDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroSequenceConsoleCommandDataAsset>();
	}
};
static_assert(alignof(UKuroSequenceConsoleCommandDataAsset) == 0x000008, "Wrong alignment on UKuroSequenceConsoleCommandDataAsset");
static_assert(sizeof(UKuroSequenceConsoleCommandDataAsset) == 0x000080, "Wrong size on UKuroSequenceConsoleCommandDataAsset");
static_assert(offsetof(UKuroSequenceConsoleCommandDataAsset, ConsoleCommands) == 0x000038, "Member 'UKuroSequenceConsoleCommandDataAsset::ConsoleCommands' has a wrong offset!");
static_assert(offsetof(UKuroSequenceConsoleCommandDataAsset, GlobalConsoleCommands) == 0x000048, "Member 'UKuroSequenceConsoleCommandDataAsset::GlobalConsoleCommands' has a wrong offset!");
static_assert(offsetof(UKuroSequenceConsoleCommandDataAsset, MobileConsoleCommands) == 0x000058, "Member 'UKuroSequenceConsoleCommandDataAsset::MobileConsoleCommands' has a wrong offset!");
static_assert(offsetof(UKuroSequenceConsoleCommandDataAsset, GlobalMobileConsoleCommands) == 0x000068, "Member 'UKuroSequenceConsoleCommandDataAsset::GlobalMobileConsoleCommands' has a wrong offset!");
static_assert(offsetof(UKuroSequenceConsoleCommandDataAsset, bMobileLowStreaming) == 0x000078, "Member 'UKuroSequenceConsoleCommandDataAsset::bMobileLowStreaming' has a wrong offset!");
static_assert(offsetof(UKuroSequenceConsoleCommandDataAsset, MobileLowStreamingScale) == 0x00007C, "Member 'UKuroSequenceConsoleCommandDataAsset::MobileLowStreamingScale' has a wrong offset!");

// Class LevelSequence.LevelSequenceBurnInInitSettings
// 0x0000 (0x0030 - 0x0030)
class ULevelSequenceBurnInInitSettings final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceBurnInInitSettings">();
	}
	static class ULevelSequenceBurnInInitSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceBurnInInitSettings>();
	}
};
static_assert(alignof(ULevelSequenceBurnInInitSettings) == 0x000008, "Wrong alignment on ULevelSequenceBurnInInitSettings");
static_assert(sizeof(ULevelSequenceBurnInInitSettings) == 0x000030, "Wrong size on ULevelSequenceBurnInInitSettings");

// Class LevelSequence.KuroLevelSequenceActorConfig
// 0x0020 (0x0050 - 0x0030)
class UKuroLevelSequenceActorConfig final : public UObject
{
public:
	int32                                         RenderCheckFrame;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistSquared;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinSkipFrame;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidDistSquared;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MidSkipFrame;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistSquared;                                    // 0x0044(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSkipFrame;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroLevelSequenceActorConfig">();
	}
	static class UKuroLevelSequenceActorConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroLevelSequenceActorConfig>();
	}
};
static_assert(alignof(UKuroLevelSequenceActorConfig) == 0x000008, "Wrong alignment on UKuroLevelSequenceActorConfig");
static_assert(sizeof(UKuroLevelSequenceActorConfig) == 0x000050, "Wrong size on UKuroLevelSequenceActorConfig");
static_assert(offsetof(UKuroLevelSequenceActorConfig, RenderCheckFrame) == 0x000030, "Member 'UKuroLevelSequenceActorConfig::RenderCheckFrame' has a wrong offset!");
static_assert(offsetof(UKuroLevelSequenceActorConfig, MinDistSquared) == 0x000034, "Member 'UKuroLevelSequenceActorConfig::MinDistSquared' has a wrong offset!");
static_assert(offsetof(UKuroLevelSequenceActorConfig, MinSkipFrame) == 0x000038, "Member 'UKuroLevelSequenceActorConfig::MinSkipFrame' has a wrong offset!");
static_assert(offsetof(UKuroLevelSequenceActorConfig, MidDistSquared) == 0x00003C, "Member 'UKuroLevelSequenceActorConfig::MidDistSquared' has a wrong offset!");
static_assert(offsetof(UKuroLevelSequenceActorConfig, MidSkipFrame) == 0x000040, "Member 'UKuroLevelSequenceActorConfig::MidSkipFrame' has a wrong offset!");
static_assert(offsetof(UKuroLevelSequenceActorConfig, MaxDistSquared) == 0x000044, "Member 'UKuroLevelSequenceActorConfig::MaxDistSquared' has a wrong offset!");
static_assert(offsetof(UKuroLevelSequenceActorConfig, MaxSkipFrame) == 0x000048, "Member 'UKuroLevelSequenceActorConfig::MaxSkipFrame' has a wrong offset!");

// Class LevelSequence.LevelSequenceAnimSequenceLink
// 0x0010 (0x0040 - 0x0030)
class ULevelSequenceAnimSequenceLink final : public UAssetUserData
{
public:
	TArray<struct FLevelSequenceAnimSequenceLinkItem> AnimSequenceLinks;                             // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceAnimSequenceLink">();
	}
	static class ULevelSequenceAnimSequenceLink* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceAnimSequenceLink>();
	}
};
static_assert(alignof(ULevelSequenceAnimSequenceLink) == 0x000008, "Wrong alignment on ULevelSequenceAnimSequenceLink");
static_assert(sizeof(ULevelSequenceAnimSequenceLink) == 0x000040, "Wrong size on ULevelSequenceAnimSequenceLink");
static_assert(offsetof(ULevelSequenceAnimSequenceLink, AnimSequenceLinks) == 0x000030, "Member 'ULevelSequenceAnimSequenceLink::AnimSequenceLinks' has a wrong offset!");

// Class LevelSequence.LevelSequenceBurnIn
// 0x00C8 (0x03C8 - 0x0300)
class ULevelSequenceBurnIn final : public UUserWidget
{
public:
	struct FLevelSequencePlayerSnapshot           FrameInformation;                                  // 0x0300(0x00C0)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetSettings(class UObject* InSettings);

	TSubclassOf<class ULevelSequenceBurnInInitSettings> GetSettingsClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceBurnIn">();
	}
	static class ULevelSequenceBurnIn* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceBurnIn>();
	}
};
static_assert(alignof(ULevelSequenceBurnIn) == 0x000008, "Wrong alignment on ULevelSequenceBurnIn");
static_assert(sizeof(ULevelSequenceBurnIn) == 0x0003C8, "Wrong size on ULevelSequenceBurnIn");
static_assert(offsetof(ULevelSequenceBurnIn, FrameInformation) == 0x000300, "Member 'ULevelSequenceBurnIn::FrameInformation' has a wrong offset!");
static_assert(offsetof(ULevelSequenceBurnIn, LevelSequenceActor) == 0x0003C0, "Member 'ULevelSequenceBurnIn::LevelSequenceActor' has a wrong offset!");

// Class LevelSequence.LevelSequenceDirector
// 0x0008 (0x0038 - 0x0030)
class ULevelSequenceDirector : public UObject
{
public:
	class ULevelSequencePlayer*                   Player;                                            // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnCreated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceDirector">();
	}
	static class ULevelSequenceDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceDirector>();
	}
};
static_assert(alignof(ULevelSequenceDirector) == 0x000008, "Wrong alignment on ULevelSequenceDirector");
static_assert(sizeof(ULevelSequenceDirector) == 0x000038, "Wrong size on ULevelSequenceDirector");
static_assert(offsetof(ULevelSequenceDirector, Player) == 0x000030, "Member 'ULevelSequenceDirector::Player' has a wrong offset!");

// Class LevelSequence.LegacyLevelSequenceDirectorBlueprint
// 0x0000 (0x00A8 - 0x00A8)
class ULegacyLevelSequenceDirectorBlueprint final : public UBlueprint
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LegacyLevelSequenceDirectorBlueprint">();
	}
	static class ULegacyLevelSequenceDirectorBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULegacyLevelSequenceDirectorBlueprint>();
	}
};
static_assert(alignof(ULegacyLevelSequenceDirectorBlueprint) == 0x000008, "Wrong alignment on ULegacyLevelSequenceDirectorBlueprint");
static_assert(sizeof(ULegacyLevelSequenceDirectorBlueprint) == 0x0000A8, "Wrong size on ULegacyLevelSequenceDirectorBlueprint");

// Class LevelSequence.LevelSequencePlayer
// 0x0138 (0x0828 - 0x06F0)
class ULevelSequencePlayer final : public UMovieSceneSequencePlayer
{
public:
	TMulticastInlineDelegate<void(class UCameraComponent* CameraComponent)> OnCameraCut;             // 0x06F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULevelSequence* LevelSequence, const struct FGuid& Guid, class UObject* Object)> OnSequenceObjectSpawned; // 0x0700(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_710[0x118];                                    // 0x0710(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULevelSequencePlayer* CreateLevelSequencePlayer(class UObject* WorldContextObject, class ULevelSequence* LevelSequence, const struct FMovieSceneSequencePlaybackSettings& Settings, class ALevelSequenceActor** OutActor);

	void CleanUnboundSpawnable();
	TArray<class UObject*> GetAllSpawnedObjects();

	class UCameraComponent* GetActiveCameraComponent() const;
	class AActor* GetSpawnedActorByGuid(const struct FGuid& Guid, bool bIncludeSubSequence) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequencePlayer">();
	}
	static class ULevelSequencePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequencePlayer>();
	}
};
static_assert(alignof(ULevelSequencePlayer) == 0x000008, "Wrong alignment on ULevelSequencePlayer");
static_assert(sizeof(ULevelSequencePlayer) == 0x000828, "Wrong size on ULevelSequencePlayer");
static_assert(offsetof(ULevelSequencePlayer, OnCameraCut) == 0x0006F0, "Member 'ULevelSequencePlayer::OnCameraCut' has a wrong offset!");
static_assert(offsetof(ULevelSequencePlayer, OnSequenceObjectSpawned) == 0x000700, "Member 'ULevelSequencePlayer::OnSequenceObjectSpawned' has a wrong offset!");

// Class LevelSequence.SequenceCustomGuidGetterInterface
// 0x0000 (0x0000 - 0x0000)
class ISequenceCustomGuidGetterInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SequenceCustomGuidGetterInterface">();
	}
	static class ISequenceCustomGuidGetterInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISequenceCustomGuidGetterInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ISequenceCustomGuidGetterInterface) == 0x000001, "Wrong alignment on ISequenceCustomGuidGetterInterface");
static_assert(sizeof(ISequenceCustomGuidGetterInterface) == 0x000001, "Wrong size on ISequenceCustomGuidGetterInterface");

// Class LevelSequence.LevelSequenceMediaController
// 0x0028 (0x02D8 - 0x02B0)
class ALevelSequenceMediaController final : public AActor
{
public:
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    Sequence;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMediaComponent*                        MediaComponent;                                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ServerStartTimeSeconds;                            // 0x02C8(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2CC[0xC];                                      // 0x02CC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_ServerStartTimeSeconds();
	void Play();
	void SynchronizeToServer(float DesyncThresholdSeconds);

	class UMediaComponent* GetMediaComponent() const;
	class ALevelSequenceActor* GetSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceMediaController">();
	}
	static class ALevelSequenceMediaController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelSequenceMediaController>();
	}
};
static_assert(alignof(ALevelSequenceMediaController) == 0x000008, "Wrong alignment on ALevelSequenceMediaController");
static_assert(sizeof(ALevelSequenceMediaController) == 0x0002D8, "Wrong size on ALevelSequenceMediaController");
static_assert(offsetof(ALevelSequenceMediaController, Sequence) == 0x0002B8, "Member 'ALevelSequenceMediaController::Sequence' has a wrong offset!");
static_assert(offsetof(ALevelSequenceMediaController, MediaComponent) == 0x0002C0, "Member 'ALevelSequenceMediaController::MediaComponent' has a wrong offset!");
static_assert(offsetof(ALevelSequenceMediaController, ServerStartTimeSeconds) == 0x0002C8, "Member 'ALevelSequenceMediaController::ServerStartTimeSeconds' has a wrong offset!");

}

