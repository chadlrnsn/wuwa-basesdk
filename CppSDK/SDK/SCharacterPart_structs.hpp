#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SCharacterPart

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "EBulletType_structs.hpp"


namespace SDK
{

// UserDefinedStruct SCharacterPart.SCharacterPart
// 0x0118 (0x0118 - 0x0000)
struct FSCharacterPart final
{
public:
	class FString                                 部位名_26_CC011507437764775EEF11A0E897EF09;        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         骨骼名_48_80FA92DC4D8852C13ACCC2926FBC8EE5;        // 0x0010(0x0010)(Edit, BlueprintVisible)
	bool                                          是否独立承伤_14_CC4E77B84115DD83271460ACB5A1B423;  // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          是否出生激活_17_34AF7E1743045D05F16238BD9A5ED076;  // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           部位标签_20_42EAC5034D41C8EF242A27978F45A52A;      // 0x0024(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           部位激活标签_41_E6304792471065138EA8FDAD9631A543;  // 0x0030(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	float                                         继承生命值比例_23_7055EC584C420B5D5A69D4A297BB09BE; // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否弱点_28_6C8AACBB4B6D68FF9409CF85EA53D4E2;      // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<EBulletType>                             弱点攻击类型_38_B44245454F03B67F7B9720AC632C55A8;  // 0x0048(0x0050)(Edit, BlueprintVisible)
	float                                         弱点受击角度_34_02644BFB40E4F421B0444EBD980BE344;  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否盾牌_50_C6329D80406FFD88EF6664B040CCC15C;      // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         格挡判定角度_53_E92C679B42F3EC2949407A8BB73649C0;  // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否传递伤害_56_4227F4124093B8725B7F14A9E2F16607;  // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   部位状态条骨骼插槽_45_C79E7AA94E2ED746B826F28630D76DFD; // 0x00A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否在目标创建时显示部位状态条_46_9D882A9A4BEEC5534C7C59A87AB3B2B1; // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int64>                                 属性快照Buff列表_61_37032C9442C4C285A7FF8CAD48EC3719; // 0x00B8(0x0010)(Edit, BlueprintVisible)
	class UEffectModelBase*                       扫描特效_75_88FDB5514FC905F24EBDB69ACE40B87A;      // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        被扫描播放特效_74_22B564E4464F7F409528FDA4534A9A25; // 0x00D0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 扫描特效绑定骨骼名_68_850DA0084A00F63CD5EF59A35623CCBC; // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UPD_CharacterControllerData_C*          扫描材质特效_71_60B296F542BE89890DF6A1AFFB8E6DEF;  // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   合体骨骼名_79_68A02C4E4D9C34C73DD2D2AA6950F1DF;    // 0x0108(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FSCharacterPart) == 0x000008, "Wrong alignment on FSCharacterPart");
static_assert(sizeof(FSCharacterPart) == 0x000118, "Wrong size on FSCharacterPart");
static_assert(offsetof(FSCharacterPart, 部位名_26_CC011507437764775EEF11A0E897EF09) == 0x000000, "Member 'FSCharacterPart::部位名_26_CC011507437764775EEF11A0E897EF09' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 骨骼名_48_80FA92DC4D8852C13ACCC2926FBC8EE5) == 0x000010, "Member 'FSCharacterPart::骨骼名_48_80FA92DC4D8852C13ACCC2926FBC8EE5' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 是否独立承伤_14_CC4E77B84115DD83271460ACB5A1B423) == 0x000020, "Member 'FSCharacterPart::是否独立承伤_14_CC4E77B84115DD83271460ACB5A1B423' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 是否出生激活_17_34AF7E1743045D05F16238BD9A5ED076) == 0x000021, "Member 'FSCharacterPart::是否出生激活_17_34AF7E1743045D05F16238BD9A5ED076' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 部位标签_20_42EAC5034D41C8EF242A27978F45A52A) == 0x000024, "Member 'FSCharacterPart::部位标签_20_42EAC5034D41C8EF242A27978F45A52A' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 部位激活标签_41_E6304792471065138EA8FDAD9631A543) == 0x000030, "Member 'FSCharacterPart::部位激活标签_41_E6304792471065138EA8FDAD9631A543' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 继承生命值比例_23_7055EC584C420B5D5A69D4A297BB09BE) == 0x00003C, "Member 'FSCharacterPart::继承生命值比例_23_7055EC584C420B5D5A69D4A297BB09BE' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 是否弱点_28_6C8AACBB4B6D68FF9409CF85EA53D4E2) == 0x000040, "Member 'FSCharacterPart::是否弱点_28_6C8AACBB4B6D68FF9409CF85EA53D4E2' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 弱点攻击类型_38_B44245454F03B67F7B9720AC632C55A8) == 0x000048, "Member 'FSCharacterPart::弱点攻击类型_38_B44245454F03B67F7B9720AC632C55A8' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 弱点受击角度_34_02644BFB40E4F421B0444EBD980BE344) == 0x000098, "Member 'FSCharacterPart::弱点受击角度_34_02644BFB40E4F421B0444EBD980BE344' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 是否盾牌_50_C6329D80406FFD88EF6664B040CCC15C) == 0x00009C, "Member 'FSCharacterPart::是否盾牌_50_C6329D80406FFD88EF6664B040CCC15C' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 格挡判定角度_53_E92C679B42F3EC2949407A8BB73649C0) == 0x0000A0, "Member 'FSCharacterPart::格挡判定角度_53_E92C679B42F3EC2949407A8BB73649C0' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 是否传递伤害_56_4227F4124093B8725B7F14A9E2F16607) == 0x0000A4, "Member 'FSCharacterPart::是否传递伤害_56_4227F4124093B8725B7F14A9E2F16607' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 部位状态条骨骼插槽_45_C79E7AA94E2ED746B826F28630D76DFD) == 0x0000A8, "Member 'FSCharacterPart::部位状态条骨骼插槽_45_C79E7AA94E2ED746B826F28630D76DFD' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 是否在目标创建时显示部位状态条_46_9D882A9A4BEEC5534C7C59A87AB3B2B1) == 0x0000B4, "Member 'FSCharacterPart::是否在目标创建时显示部位状态条_46_9D882A9A4BEEC5534C7C59A87AB3B2B1' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 属性快照Buff列表_61_37032C9442C4C285A7FF8CAD48EC3719) == 0x0000B8, "Member 'FSCharacterPart::属性快照Buff列表_61_37032C9442C4C285A7FF8CAD48EC3719' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 扫描特效_75_88FDB5514FC905F24EBDB69ACE40B87A) == 0x0000C8, "Member 'FSCharacterPart::扫描特效_75_88FDB5514FC905F24EBDB69ACE40B87A' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 被扫描播放特效_74_22B564E4464F7F409528FDA4534A9A25) == 0x0000D0, "Member 'FSCharacterPart::被扫描播放特效_74_22B564E4464F7F409528FDA4534A9A25' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 扫描特效绑定骨骼名_68_850DA0084A00F63CD5EF59A35623CCBC) == 0x0000F0, "Member 'FSCharacterPart::扫描特效绑定骨骼名_68_850DA0084A00F63CD5EF59A35623CCBC' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 扫描材质特效_71_60B296F542BE89890DF6A1AFFB8E6DEF) == 0x000100, "Member 'FSCharacterPart::扫描材质特效_71_60B296F542BE89890DF6A1AFFB8E6DEF' has a wrong offset!");
static_assert(offsetof(FSCharacterPart, 合体骨骼名_79_68A02C4E4D9C34C73DD2D2AA6950F1DF) == 0x000108, "Member 'FSCharacterPart::合体骨骼名_79_68A02C4E4D9C34C73DD2D2AA6950F1DF' has a wrong offset!");

}

