#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroVolumeCloud_Global

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SD_KuroTraceCloudData_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KuroVolumeCloud_Global.BP_KuroVolumeCloud_Global_C
// 0x01E8 (0x0498 - 0x02B0)
class ABP_KuroVolumeCloud_Global_C final : public AUKuroCustomCookActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Cube;                                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CloudRange;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSD_KuroTraceCloudData>         Data;                                              // 0x02D0(0x0010)(Edit, BlueprintVisible)
	struct FSD_KuroTraceCloudData                 LerpData;                                          // 0x02E0(0x0014)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEditorTick;                                       // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDirty;                                            // 0x02F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F6[0x2];                                      // 0x02F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BakeFlowSpeed;                                     // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     LastMaterial;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          LastPosition;                                      // 0x0310(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          LastScale;                                         // 0x0328(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLocal;                                            // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CloudSpeed;                                        // 0x0344(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LocalSpeed;                                        // 0x0354(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FadeGroup_0_2_;                                    // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalOpacity;                                      // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ThunderColor;                                      // 0x036C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThunderSpeed;                                      // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThunderTimeCounter;                                // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ThunderCurve;                                      // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ThunderCurve2;                                     // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ThunderCurve3;                                     // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, float>                      Scalar_Parameters;                                 // 0x03A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FLinearColor>        Vector_Parameters;                                 // 0x03F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class UTexture*>            Texture_Parameters;                                // 0x0440(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bUseGlobalSpeed;                                   // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void CleanMID();
	void CheckNeed_Update();
	void Update();
	void GetLerpGIData(float Time, struct FSD_KuroTraceCloudData* LerpData_0);
	void UpdateCloudLighting();
	void UpdateCloudTransform();
	void UserConstructionScript();
	void EditorTick();
	void ReceiveTick(float DeltaSeconds);
	void BeforeCookForMobile();
	void BeforeCookForPC();
	void BeforeSave();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_KuroVolumeCloud_Global(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KuroVolumeCloud_Global_C">();
	}
	static class ABP_KuroVolumeCloud_Global_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KuroVolumeCloud_Global_C>();
	}
};
static_assert(alignof(ABP_KuroVolumeCloud_Global_C) == 0x000008, "Wrong alignment on ABP_KuroVolumeCloud_Global_C");
static_assert(sizeof(ABP_KuroVolumeCloud_Global_C) == 0x000498, "Wrong size on ABP_KuroVolumeCloud_Global_C");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_KuroVolumeCloud_Global_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, Cube) == 0x0002B8, "Member 'ABP_KuroVolumeCloud_Global_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, CloudRange) == 0x0002C0, "Member 'ABP_KuroVolumeCloud_Global_C::CloudRange' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, DefaultSceneRoot) == 0x0002C8, "Member 'ABP_KuroVolumeCloud_Global_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, Data) == 0x0002D0, "Member 'ABP_KuroVolumeCloud_Global_C::Data' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, LerpData) == 0x0002E0, "Member 'ABP_KuroVolumeCloud_Global_C::LerpData' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, bEditorTick) == 0x0002F4, "Member 'ABP_KuroVolumeCloud_Global_C::bEditorTick' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, bDirty) == 0x0002F5, "Member 'ABP_KuroVolumeCloud_Global_C::bDirty' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, BakeFlowSpeed) == 0x0002F8, "Member 'ABP_KuroVolumeCloud_Global_C::BakeFlowSpeed' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, LastMaterial) == 0x000308, "Member 'ABP_KuroVolumeCloud_Global_C::LastMaterial' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, LastPosition) == 0x000310, "Member 'ABP_KuroVolumeCloud_Global_C::LastPosition' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, LastScale) == 0x000328, "Member 'ABP_KuroVolumeCloud_Global_C::LastScale' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, bLocal) == 0x000340, "Member 'ABP_KuroVolumeCloud_Global_C::bLocal' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, CloudSpeed) == 0x000344, "Member 'ABP_KuroVolumeCloud_Global_C::CloudSpeed' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, LocalSpeed) == 0x000354, "Member 'ABP_KuroVolumeCloud_Global_C::LocalSpeed' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, FadeGroup_0_2_) == 0x000364, "Member 'ABP_KuroVolumeCloud_Global_C::FadeGroup_0_2_' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, LocalOpacity) == 0x000368, "Member 'ABP_KuroVolumeCloud_Global_C::LocalOpacity' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, ThunderColor) == 0x00036C, "Member 'ABP_KuroVolumeCloud_Global_C::ThunderColor' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, ThunderSpeed) == 0x00037C, "Member 'ABP_KuroVolumeCloud_Global_C::ThunderSpeed' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, ThunderTimeCounter) == 0x000380, "Member 'ABP_KuroVolumeCloud_Global_C::ThunderTimeCounter' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, ThunderCurve) == 0x000388, "Member 'ABP_KuroVolumeCloud_Global_C::ThunderCurve' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, ThunderCurve2) == 0x000390, "Member 'ABP_KuroVolumeCloud_Global_C::ThunderCurve2' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, ThunderCurve3) == 0x000398, "Member 'ABP_KuroVolumeCloud_Global_C::ThunderCurve3' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, Scalar_Parameters) == 0x0003A0, "Member 'ABP_KuroVolumeCloud_Global_C::Scalar_Parameters' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, Vector_Parameters) == 0x0003F0, "Member 'ABP_KuroVolumeCloud_Global_C::Vector_Parameters' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, Texture_Parameters) == 0x000440, "Member 'ABP_KuroVolumeCloud_Global_C::Texture_Parameters' has a wrong offset!");
static_assert(offsetof(ABP_KuroVolumeCloud_Global_C, bUseGlobalSpeed) == 0x000490, "Member 'ABP_KuroVolumeCloud_Global_C::bUseGlobalSpeed' has a wrong offset!");

}

