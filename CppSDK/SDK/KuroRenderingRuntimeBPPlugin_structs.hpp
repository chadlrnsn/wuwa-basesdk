#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroRenderingRuntimeBPPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "KuroCurve_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum KuroRenderingRuntimeBPPlugin.EKuroClusteredStuffBlendMode
// NumValues: 0x0004
enum class EKuroClusteredStuffBlendMode : uint8
{
	EAdd                                     = 0,
	EOverlay                                 = 1,
	EMax                                     = 2,
	EKuroClusteredStuffBlendMode_MAX         = 3,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroDynamicCloudType
// NumValues: 0x003E
enum class EKuroDynamicCloudType : uint8
{
	Cloud_TianCheng                          = 0,
	Cloud_YiLuoYuanXiang                     = 1,
	Cloud_WuGuangZhiSen                      = 2,
	Cloud_ZhongQuTaiDi                       = 3,
	Cloud_Area05                             = 4,
	Cloud_ChengXiaoShan                      = 5,
	Cloud_HeiHaiAnUP                         = 6,
	Cloud_HeiHaiAnUpper                      = 7,
	Cloud_Area08                             = 8,
	Cloud_Area09                             = 9,
	Cloud_Area10                             = 10,
	Cloud_Area11                             = 11,
	Cloud_WuYinQu01                          = 12,
	Cloud_DengLuJieMian                      = 13,
	Cloud_WuYinQu02                          = 14,
	Cloud_WuYinQu03                          = 15,
	Cloud_WuYinQu04                          = 16,
	Cloud_WuYinQu05                          = 17,
	Cloud_WuYinQuInit                        = 18,
	Cloud_XuanWoYun                          = 19,
	Cloud_MingChaoTianQi                     = 20,
	Cloud_YinTianYiXiang                     = 21,
	Cloud_HuangHunYiXiang                    = 22,
	Cloud_YeWanYiXiang                       = 23,
	Cloud_ChengXiaoShanYiXiang               = 24,
	Cloud_Special01                          = 25,
	Cloud_Special02                          = 26,
	Cloud_FuBen01                            = 27,
	Cloud_FuBen02                            = 28,
	Cloud_HeiHaiAnNight                      = 29,
	Cloud_RogueMoon01                        = 30,
	Cloud_RogueMoon02                        = 31,
	Cloud_RogueMoon03                        = 32,
	Cloud_RogueMoon04                        = 33,
	Cloud_LiNaXiTa                           = 34,
	Cloud_PaErMiLuoMuDi                      = 35,
	Cloud_HuShengBanDao                      = 36,
	Cloud_DiShaLaiHaiJiYongYeJieMiQian       = 37,
	Cloud_DiShaLaiHaiJiYongYeJieMiHou        = 38,
	Cloud_JinKuShangCheng                    = 39,
	Cloud_RogueMoon05                        = 40,
	Cloud_HeiHaiAnTianQiYin                  = 41,
	Cloud_KuangHuanJie                       = 42,
	Cloud_HuShengBanDaoJieMiHou              = 43,
	Cloud_YunHaiQu                           = 44,
	Cloud_LiNaXiTaYin                        = 45,
	Cloud_LuoMuDaoYeWan                      = 46,
	Cloud_JinKuShangJieMiHou                 = 47,
	Cloud_FeiLuoLuoChuChang                  = 48,
	Cloud_ChaiHongTianQi                     = 49,
	Cloud_DianDaoTaBaiTian                   = 50,
	Cloud_DianDaoTaYeWan                     = 51,
	Cloud_DianDaoTaLiuXin                    = 52,
	Cloud_QiQiu                              = 53,
	Cloud_QiQiuYinTian                       = 54,
	Cloud_CanPoJingJiChang                   = 55,
	Cloud_JianCiShan                         = 56,
	Cloud_GuanCeTa                           = 57,
	Cloud_ChuJianQiQiu                       = 58,
	Cloud_QiQiuYeWan                         = 59,
	Cloud_Max                                = 60,
	Cloud_MAX                                = 61,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroRainType
// NumValues: 0x0011
enum class EKuroRainType : uint8
{
	EKuroRainType1                           = 0,
	EKuroRainType2                           = 1,
	EKuroRainType3                           = 2,
	EKuroRainType4                           = 3,
	EKuroRainType5                           = 4,
	EKuroRainType6                           = 5,
	EKuroRainType7                           = 6,
	EKuroRainType8                           = 7,
	EKuroRainType9                           = 8,
	EKuroRainType10                          = 9,
	EKuroRainType11                          = 10,
	EKuroRainType12                          = 11,
	EKuroRainType13                          = 12,
	EKuroRainType14                          = 13,
	EKuroRainType15                          = 14,
	EKuroRainType16                          = 15,
	EKuroRainType_MAX                        = 16,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroThunderType
// NumValues: 0x0012
enum class EKuroThunderType : uint8
{
	EKuroThunderType1                        = 0,
	EKuroThunderType2                        = 1,
	EKuroThunderType3                        = 2,
	EKuroThunderType4                        = 3,
	EKuroThunderType5                        = 4,
	EKuroThunderType6                        = 5,
	EKuroThunderType7                        = 6,
	EKuroThunderType8                        = 7,
	EKuroThunderType9                        = 8,
	EKuroThunderType10                       = 9,
	EKuroThunderType11                       = 10,
	EKuroThunderType12                       = 11,
	EKuroThunderType13                       = 12,
	EKuroThunderType14                       = 13,
	EKuroThunderType15                       = 14,
	EKuroThunderType16                       = 15,
	EKuroThunderType_Max                     = 16,
	EKuroThunderType_MAX                     = 17,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroPPLensflareType
// NumValues: 0x0012
enum class EKuroPPLensflareType : uint8
{
	EKuroPPLensflareType1                    = 0,
	EKuroPPLensflareType2                    = 1,
	EKuroPPLensflareType3                    = 2,
	EKuroPPLensflareType4                    = 3,
	EKuroPPLensflareType5                    = 4,
	EKuroPPLensflareType6                    = 5,
	EKuroPPLensflareType7                    = 6,
	EKuroPPLensflareType8                    = 7,
	EKuroPPLensflareType9                    = 8,
	EKuroPPLensflareType10                   = 9,
	EKuroPPLensflareType11                   = 10,
	EKuroPPLensflareType12                   = 11,
	EKuroPPLensflareType13                   = 12,
	EKuroPPLensflareType14                   = 13,
	EKuroPPLensflareType15                   = 14,
	EKuroPPLensflareType16                   = 15,
	EKuroPPLensflareType_Max                 = 16,
	EKuroPPLensflareType_MAX                 = 17,
};

// Enum KuroRenderingRuntimeBPPlugin.EBillboardMode
// NumValues: 0x0005
enum class EBillboardMode : uint8
{
	Free                                     = 0,
	UpWard                                   = 1,
	Right                                    = 2,
	Max                                      = 3,
	EBillboardMode_MAX                       = 4,
};

// Enum KuroRenderingRuntimeBPPlugin.ECaptureMode
// NumValues: 0x0003
enum class ECaptureMode : uint8
{
	Default                                  = 0,
	VertexColor                              = 1,
	ECaptureMode_MAX                         = 2,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroDebugDrawComponentType
// NumValues: 0x0004
enum class EKuroDebugDrawComponentType : uint8
{
	Box                                      = 0,
	Sphere                                   = 1,
	Cone                                     = 2,
	EKuroDebugDrawComponentType_MAX          = 3,
};

// Enum KuroRenderingRuntimeBPPlugin.ECurveSourceType
// NumValues: 0x0003
enum class ECurveSourceType : uint8
{
	Function                                 = 0,
	CurveFloat                               = 1,
	ECurveSourceType_MAX                     = 2,
};

// Enum KuroRenderingRuntimeBPPlugin.EFloatLightMovement
// NumValues: 0x0004
enum class EFloatLightMovement : uint8
{
	ENoMovement                              = 0,
	ESwing                                   = 1,
	EJump                                    = 2,
	EFloatLightMovement_MAX                  = 3,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroUI3DState
// NumValues: 0x0004
enum class EKuroUI3DState : uint8
{
	NotLoaded                                = 0,
	Loading                                  = 1,
	Loaded                                   = 2,
	EKuroUI3DState_MAX                       = 3,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroCharacterControllerApplyType
// NumValues: 0x0004
enum class EKuroCharacterControllerApplyType : uint8
{
	ModifyProperty                           = 0,
	ReplaceMaterial                          = 1,
	ECharacterControllerApplyType_Max        = 2,
	EKuroCharacterControllerApplyType_MAX    = 3,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroCharMeshPart
// NumValues: 0x0013
enum class EKuroCharMeshPart : uint8
{
	Bangs                                    = 0,
	Hair                                     = 1,
	Head                                     = 2,
	Face                                     = 3,
	Eye                                      = 4,
	Body                                     = 5,
	Up                                       = 6,
	Down                                     = 7,
	Leg                                      = 8,
	Cloth                                    = 9,
	Skirt                                    = 10,
	Star                                     = 11,
	Core                                     = 12,
	Hand                                     = 13,
	Wings                                    = 14,
	Prop                                     = 15,
	Weapon                                   = 16,
	ECharacterMeshPart_Max                   = 17,
	EKuroCharMeshPart_MAX                    = 18,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroCharSlotSpecifiedType
// NumValues: 0x0006
enum class EKuroCharSlotSpecifiedType : uint8
{
	All                                      = 0,
	BodyAndOutline                           = 1,
	Body                                     = 2,
	Outline                                  = 3,
	ECharacterSlotSpecifiedType_Max          = 4,
	EKuroCharSlotSpecifiedType_MAX           = 5,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroCharSlotType
// NumValues: 0x0007
enum class EKuroCharSlotType : uint8
{
	Body                                     = 0,
	Outline                                  = 1,
	EyeMask                                  = 2,
	HairEyeTransparent                       = 3,
	FaceShadow                               = 4,
	ECharacterSlotType_Max                   = 5,
	EKuroCharSlotType_MAX                    = 6,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroCharBodySpecifiedType
// NumValues: 0x000A
enum class EKuroCharBodySpecifiedType : uint8
{
	All                                      = 0,
	Body                                     = 1,
	Weapon                                   = 2,
	Hulu                                     = 3,
	WeaponAndHulu                            = 4,
	Other                                    = 5,
	ExtraBody                                = 6,
	External                                 = 7,
	ECharacterBodySpecifiedType_Max          = 8,
	EKuroCharBodySpecifiedType_MAX           = 9,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroCharBodyType
// NumValues: 0x0007
enum class EKuroCharBodyType : uint8
{
	Body                                     = 0,
	Weapon                                   = 1,
	Hulu                                     = 2,
	Other                                    = 3,
	ExtraBody                                = 4,
	EKuroCharBodyType_Max                    = 5,
	EKuroCharBodyType_MAX                    = 6,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroInterpolateRangeType
// NumValues: 0x0004
enum class EKuroInterpolateRangeType : uint8
{
	Start                                    = 0,
	Loop                                     = 1,
	End                                      = 2,
	EKuroInterpolateRangeType_MAX            = 3,
};

// Enum KuroRenderingRuntimeBPPlugin.ECharacterControllerUVSwitch
// NumValues: 0x0007
enum class KuroRenderingRuntimeBPPlugin::ECharacterControllerUVSwitch : uint8
{
	UV1                                      = 0,
	UV2                                      = 1,
	UV3                                      = 2,
	UV4                                      = 3,
	ScreenUV                                 = 4,
	ECharacterControllerUVSwitch_Max         = 5,
	ECharacterControllerUVSwitch_MAX         = 6,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroCharacterControllerChannelSwitch
// NumValues: 0x0007
enum class EKuroCharacterControllerChannelSwitch : uint8
{
	RGB                                      = 0,
	R                                        = 1,
	G                                        = 2,
	B                                        = 3,
	A                                        = 4,
	EKuroCharacterControllerChannelSwitch_Max = 5,
	EKuroCharacterControllerChannelSwitch_MAX = 6,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroSceneInteractionState
// NumValues: 0x0017
enum class EKuroSceneInteractionState : uint8
{
	State1                                   = 0,
	State2                                   = 1,
	State3                                   = 2,
	State4                                   = 3,
	State5                                   = 4,
	State6                                   = 5,
	State7                                   = 6,
	State8                                   = 7,
	State9                                   = 8,
	State10                                  = 9,
	State11                                  = 10,
	State12                                  = 11,
	State13                                  = 12,
	State14                                  = 13,
	State15                                  = 14,
	State16                                  = 15,
	State17                                  = 16,
	State18                                  = 17,
	State19                                  = 18,
	State20                                  = 19,
	ConcealedState                           = 20,
	Error                                    = 21,
	EKuroSceneInteractionState_MAX           = 22,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroInterpolateRangeType_SI
// NumValues: 0x0004
enum class EKuroInterpolateRangeType_SI : uint8
{
	Start                                    = 0,
	Loop                                     = 1,
	End                                      = 2,
	EKuroInterpolateRangeType_MAX            = 3,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroPerformanceMode
// NumValues: 0x0003
enum class EKuroPerformanceMode : uint8
{
	EPM_OutPerformanceMode                   = 0,
	EPM_InPerformanceMode                    = 1,
	EPM_MAX                                  = 2,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroSmartLightActorDetectType
// NumValues: 0x0003
enum class EKuroSmartLightActorDetectType : uint8
{
	Box                                      = 0,
	Sphere                                   = 1,
	EKuroSmartLightActorDetectType_MAX       = 2,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroUiSceneLoadingState
// NumValues: 0x0005
enum class EKuroUiSceneLoadingState : uint8
{
	NotLoaded                                = 0,
	Loading                                  = 1,
	LoadedNotVisible                         = 2,
	LoadedAndVisible                         = 3,
	EKuroUiSceneLoadingState_MAX             = 4,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroWorldRainCustomRandomDriver
// NumValues: 0x0005
enum class EKuroWorldRainCustomRandomDriver : uint8
{
	CustomRandomDriver_None                  = 0,
	CustomRandomDriver_NormalizedAge         = 1,
	CustomRandomDriver_Velocity              = 2,
	CustomRandomDriver_VelocityMultiTimeScale = 3,
	CustomRandomDriver_MAX                   = 4,
};

// Enum KuroRenderingRuntimeBPPlugin.KuroFeatureLevel
// NumValues: 0x0003
enum class EKuroFeatureLevel : uint8
{
	ES3_1                                    = 0,
	SM5                                      = 1,
	KuroFeatureLevel_MAX                     = 2,
};

// Enum KuroRenderingRuntimeBPPlugin.BP_EWorldType
// NumValues: 0x0009
enum class EBP_EWorldType : uint8
{
	None                                     = 0,
	Game                                     = 1,
	Editor                                   = 2,
	PIE                                      = 3,
	EditorPreview                            = 4,
	GamePreview                              = 5,
	GameRPC                                  = 6,
	Inactive                                 = 7,
	BP_MAX                                   = 8,
};

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroRainMaterialColorParameter
// 0x0230 (0x0230 - 0x0000)
struct FKuroRainMaterialColorParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  Value;                                             // 0x0010(0x0220)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroRainMaterialColorParameter) == 0x000008, "Wrong alignment on FKuroRainMaterialColorParameter");
static_assert(sizeof(FKuroRainMaterialColorParameter) == 0x000230, "Wrong size on FKuroRainMaterialColorParameter");
static_assert(offsetof(FKuroRainMaterialColorParameter, ParameterName) == 0x000000, "Member 'FKuroRainMaterialColorParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(FKuroRainMaterialColorParameter, Value) == 0x000010, "Member 'FKuroRainMaterialColorParameter::Value' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.GIMiscSetting
// 0x0250 (0x0250 - 0x0000)
struct FGIMiscSetting final
{
public:
	uint8                                         bOverride_ThunderType : 1;                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ThunderGenerateChanceScale : 1;          // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ThunderAttackChance : 1;                 // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ThunderColor : 1;                        // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ThunderLightBrightness : 1;              // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ThunderLightColor : 1;                   // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ThunderCloudBrightness : 1;              // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EKuroThunderType                              ThunderType;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThunderGenerateChanceScale;                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThunderAttackChance;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ThunderColor;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThunderLightBrightness;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ThunderLightColor;                                 // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThunderCloudBrightness;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_RainType : 1;                            // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainDensity : 1;                         // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainLerpTime : 1;                        // 0x0038(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainLerpData : 1;                        // 0x0038(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainFogDensity : 1;                      // 0x0038(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainDensityChangeSpeed : 1;              // 0x0038(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bRainAffactPointLight : 1;               // 0x0038(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EKuroRainType                                 RainType;                                          // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RainDensity;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainLerpTime;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               RainLerpData;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainFogDensity;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDensityChangeSpeed;                            // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRainAffectPointLight;                             // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverride_RainWindSize : 1;                        // 0x006C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainGravity : 1;                         // 0x006C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainDrag : 1;                            // 0x006C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainTimeDilation : 1;                    // 0x006C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RainWindSizeOverride;                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RainGravityOverride;                               // 0x0074(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDragOverride;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainTimeDilationOverride;                          // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_RoughnessDensity : 1;                    // 0x0088(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MixRoughness : 1;                        // 0x0088(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MixRoughness_Mobile : 1;                 // 0x0088(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EffectGravity : 1;                       // 0x0088(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightFunctionIntensity : 1;              // 0x0088(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightFunctionMapUVScaleBias : 1;         // 0x0088(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightFunctionSpeed : 1;                  // 0x0088(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightFunctionTexture : 1;                // 0x0088(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightFunctionPerShadowTexture : 1;       // 0x0089(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroDynamicCloudType : 1;                // 0x0089(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SequenceCloudTimeControl : 1;            // 0x0089(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SequenceCloudTimeOffset : 1;             // 0x0089(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OverrideCloudRotation : 1;               // 0x0089(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SequenceGlobalTimeControl : 1;           // 0x0089(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MaterialDynamicReflectionTexture : 1;    // 0x0089(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogVisibilityCulling : 1;                // 0x0089(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoughnessDensity;                                  // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MixRoughness;                                      // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MixRoughness_Mobile;                               // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectGravity;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionIntensity;                            // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               LightFunctionMapUVScaleBias;                       // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionSpeed;                                // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             LightFunctionTexture;                              // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             LightFunctionPerShadowTexture;                     // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroDynamicCloudType                         KuroDynamicCloudType;                              // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SequenceCloudTimeControl;                          // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SequenceCloudTimeOffset;                           // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCloudRotation;                            // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SequenceGlobalTimeControl;                         // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           MaterialDynamicReflectionTexture;                  // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableGlobalGIQualityLow : 1;                     // 0x00E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogVisibilityCulling;                              // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_PauseEffects : 1;                        // 0x00F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPauseEffects;                                     // 0x00F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_BurstDissolveTexture : 1;                // 0x00F5(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             BurstDissolveTexture;                              // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_BurstDissolveThreshold : 1;              // 0x0100(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BurstDissolveThreshold;                            // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_BurstDissolveSmooth : 1;                 // 0x0108(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BurstDissolveSmooth;                               // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_BurstClipThreshold : 1;                  // 0x0110(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BurstClipThreshold;                                // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ForbidWeatherWhenTakeOver : 1;           // 0x0118(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          ForbidWeatherWhenTakeOver;                         // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_GlobalFootstepMaterial : 1;              // 0x011A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11B[0x5];                                      // 0x011B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      GlobalFootstepMaterial;                            // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveUsePolarPattern : 1;                 // 0x0128(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          WaveUsePolarPattern;                               // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WavePatternTexture : 1;                  // 0x012A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_12B[0x5];                                      // 0x012B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             WavePatternTexture;                                // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WavePatternScaleBias : 1;                // 0x0138(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               WavePatternScaleBias;                              // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveCenter : 1;                          // 0x0150(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WaveCenter;                                        // 0x0154(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveFront : 1;                           // 0x0160(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              WaveFront;                                         // 0x0164(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveRadius : 1;                          // 0x016C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveRadius;                                        // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveRadiusSmooth : 1;                    // 0x0174(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveRadiusSmooth;                                  // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveHeight : 1;                          // 0x017C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveHeight;                                        // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveHeightSmooth : 1;                    // 0x0184(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveHeightSmooth;                                  // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveNormalSize : 1;                      // 0x018C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveNormalSize;                                    // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveRoughness : 1;                       // 0x0194(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveRoughness;                                     // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveDissolveTexture : 1;                 // 0x019C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             WaveDissolveTexture;                               // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveDissolveScaleBias : 1;               // 0x01A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               WaveDissolveScaleBias;                             // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveDissolveProgress : 1;                // 0x01C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveDissolveProgress;                              // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveDissolveSmooth : 1;                  // 0x01C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveDissolveSmooth;                                // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveColorTexture : 1;                    // 0x01D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             WaveColorTexture;                                  // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveColorScaleBias : 1;                  // 0x01E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1E1[0xF];                                      // 0x01E1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               WaveColorScaleBias;                                // 0x01F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveColorTextureTint : 1;                // 0x0200(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           WaveColorTextureTint;                              // 0x0204(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveWiggleAmplitude : 1;                 // 0x0214(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveWiggleAmplitude;                               // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveColorTint : 1;                       // 0x021C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           WaveColorTint;                                     // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveColorAdd : 1;                        // 0x0230(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           WaveColorAdd;                                      // 0x0234(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WaveOverallDensity : 1;                  // 0x0244(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveOverallDensity;                                // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGIMiscSetting) == 0x000010, "Wrong alignment on FGIMiscSetting");
static_assert(sizeof(FGIMiscSetting) == 0x000250, "Wrong size on FGIMiscSetting");
static_assert(offsetof(FGIMiscSetting, ThunderType) == 0x000004, "Member 'FGIMiscSetting::ThunderType' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, ThunderGenerateChanceScale) == 0x000008, "Member 'FGIMiscSetting::ThunderGenerateChanceScale' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, ThunderAttackChance) == 0x00000C, "Member 'FGIMiscSetting::ThunderAttackChance' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, ThunderColor) == 0x000010, "Member 'FGIMiscSetting::ThunderColor' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, ThunderLightBrightness) == 0x000020, "Member 'FGIMiscSetting::ThunderLightBrightness' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, ThunderLightColor) == 0x000024, "Member 'FGIMiscSetting::ThunderLightColor' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, ThunderCloudBrightness) == 0x000034, "Member 'FGIMiscSetting::ThunderCloudBrightness' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainType) == 0x00003C, "Member 'FGIMiscSetting::RainType' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainDensity) == 0x000040, "Member 'FGIMiscSetting::RainDensity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainLerpTime) == 0x000044, "Member 'FGIMiscSetting::RainLerpTime' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainLerpData) == 0x000050, "Member 'FGIMiscSetting::RainLerpData' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainFogDensity) == 0x000060, "Member 'FGIMiscSetting::RainFogDensity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainDensityChangeSpeed) == 0x000064, "Member 'FGIMiscSetting::RainDensityChangeSpeed' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, bRainAffectPointLight) == 0x000068, "Member 'FGIMiscSetting::bRainAffectPointLight' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainWindSizeOverride) == 0x000070, "Member 'FGIMiscSetting::RainWindSizeOverride' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainGravityOverride) == 0x000074, "Member 'FGIMiscSetting::RainGravityOverride' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainDragOverride) == 0x000080, "Member 'FGIMiscSetting::RainDragOverride' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainTimeDilationOverride) == 0x000084, "Member 'FGIMiscSetting::RainTimeDilationOverride' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RoughnessDensity) == 0x00008C, "Member 'FGIMiscSetting::RoughnessDensity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, MixRoughness) == 0x000090, "Member 'FGIMiscSetting::MixRoughness' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, MixRoughness_Mobile) == 0x000094, "Member 'FGIMiscSetting::MixRoughness_Mobile' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, EffectGravity) == 0x000098, "Member 'FGIMiscSetting::EffectGravity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, LightFunctionIntensity) == 0x00009C, "Member 'FGIMiscSetting::LightFunctionIntensity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, LightFunctionMapUVScaleBias) == 0x0000A0, "Member 'FGIMiscSetting::LightFunctionMapUVScaleBias' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, LightFunctionSpeed) == 0x0000B0, "Member 'FGIMiscSetting::LightFunctionSpeed' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, LightFunctionTexture) == 0x0000B8, "Member 'FGIMiscSetting::LightFunctionTexture' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, LightFunctionPerShadowTexture) == 0x0000C0, "Member 'FGIMiscSetting::LightFunctionPerShadowTexture' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, KuroDynamicCloudType) == 0x0000C8, "Member 'FGIMiscSetting::KuroDynamicCloudType' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, SequenceCloudTimeControl) == 0x0000CC, "Member 'FGIMiscSetting::SequenceCloudTimeControl' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, SequenceCloudTimeOffset) == 0x0000D0, "Member 'FGIMiscSetting::SequenceCloudTimeOffset' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, bOverrideCloudRotation) == 0x0000D4, "Member 'FGIMiscSetting::bOverrideCloudRotation' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, SequenceGlobalTimeControl) == 0x0000D8, "Member 'FGIMiscSetting::SequenceGlobalTimeControl' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, MaterialDynamicReflectionTexture) == 0x0000E0, "Member 'FGIMiscSetting::MaterialDynamicReflectionTexture' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, FogVisibilityCulling) == 0x0000EC, "Member 'FGIMiscSetting::FogVisibilityCulling' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, bPauseEffects) == 0x0000F4, "Member 'FGIMiscSetting::bPauseEffects' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, BurstDissolveTexture) == 0x0000F8, "Member 'FGIMiscSetting::BurstDissolveTexture' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, BurstDissolveThreshold) == 0x000104, "Member 'FGIMiscSetting::BurstDissolveThreshold' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, BurstDissolveSmooth) == 0x00010C, "Member 'FGIMiscSetting::BurstDissolveSmooth' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, BurstClipThreshold) == 0x000114, "Member 'FGIMiscSetting::BurstClipThreshold' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, ForbidWeatherWhenTakeOver) == 0x000119, "Member 'FGIMiscSetting::ForbidWeatherWhenTakeOver' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, GlobalFootstepMaterial) == 0x000120, "Member 'FGIMiscSetting::GlobalFootstepMaterial' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveUsePolarPattern) == 0x000129, "Member 'FGIMiscSetting::WaveUsePolarPattern' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WavePatternTexture) == 0x000130, "Member 'FGIMiscSetting::WavePatternTexture' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WavePatternScaleBias) == 0x000140, "Member 'FGIMiscSetting::WavePatternScaleBias' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveCenter) == 0x000154, "Member 'FGIMiscSetting::WaveCenter' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveFront) == 0x000164, "Member 'FGIMiscSetting::WaveFront' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveRadius) == 0x000170, "Member 'FGIMiscSetting::WaveRadius' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveRadiusSmooth) == 0x000178, "Member 'FGIMiscSetting::WaveRadiusSmooth' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveHeight) == 0x000180, "Member 'FGIMiscSetting::WaveHeight' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveHeightSmooth) == 0x000188, "Member 'FGIMiscSetting::WaveHeightSmooth' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveNormalSize) == 0x000190, "Member 'FGIMiscSetting::WaveNormalSize' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveRoughness) == 0x000198, "Member 'FGIMiscSetting::WaveRoughness' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveDissolveTexture) == 0x0001A0, "Member 'FGIMiscSetting::WaveDissolveTexture' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveDissolveScaleBias) == 0x0001B0, "Member 'FGIMiscSetting::WaveDissolveScaleBias' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveDissolveProgress) == 0x0001C4, "Member 'FGIMiscSetting::WaveDissolveProgress' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveDissolveSmooth) == 0x0001CC, "Member 'FGIMiscSetting::WaveDissolveSmooth' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveColorTexture) == 0x0001D8, "Member 'FGIMiscSetting::WaveColorTexture' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveColorScaleBias) == 0x0001F0, "Member 'FGIMiscSetting::WaveColorScaleBias' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveColorTextureTint) == 0x000204, "Member 'FGIMiscSetting::WaveColorTextureTint' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveWiggleAmplitude) == 0x000218, "Member 'FGIMiscSetting::WaveWiggleAmplitude' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveColorTint) == 0x000220, "Member 'FGIMiscSetting::WaveColorTint' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveColorAdd) == 0x000234, "Member 'FGIMiscSetting::WaveColorAdd' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, WaveOverallDensity) == 0x000248, "Member 'FGIMiscSetting::WaveOverallDensity' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialCurveFloatGroup
// 0x01B0 (0x01B0 - 0x0000)
struct FKuroMaterialCurveFloatGroup final
{
public:
	struct FKuroCurveFloat                        StartCurve;                                        // 0x0000(0x0090)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKuroCurveFloat                        LoopCurve;                                         // 0x0090(0x0090)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKuroCurveFloat                        EndCurve;                                          // 0x0120(0x0090)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialCurveFloatGroup) == 0x000008, "Wrong alignment on FKuroMaterialCurveFloatGroup");
static_assert(sizeof(FKuroMaterialCurveFloatGroup) == 0x0001B0, "Wrong size on FKuroMaterialCurveFloatGroup");
static_assert(offsetof(FKuroMaterialCurveFloatGroup, StartCurve) == 0x000000, "Member 'FKuroMaterialCurveFloatGroup::StartCurve' has a wrong offset!");
static_assert(offsetof(FKuroMaterialCurveFloatGroup, LoopCurve) == 0x000090, "Member 'FKuroMaterialCurveFloatGroup::LoopCurve' has a wrong offset!");
static_assert(offsetof(FKuroMaterialCurveFloatGroup, EndCurve) == 0x000120, "Member 'FKuroMaterialCurveFloatGroup::EndCurve' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialNamedFloatGroup
// 0x01C0 (0x01C0 - 0x0000)
struct FKuroMaterialNamedFloatGroup final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroMaterialCurveFloatGroup           Group;                                             // 0x0010(0x01B0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialNamedFloatGroup) == 0x000008, "Wrong alignment on FKuroMaterialNamedFloatGroup");
static_assert(sizeof(FKuroMaterialNamedFloatGroup) == 0x0001C0, "Wrong size on FKuroMaterialNamedFloatGroup");
static_assert(offsetof(FKuroMaterialNamedFloatGroup, Name) == 0x000000, "Member 'FKuroMaterialNamedFloatGroup::Name' has a wrong offset!");
static_assert(offsetof(FKuroMaterialNamedFloatGroup, Group) == 0x000010, "Member 'FKuroMaterialNamedFloatGroup::Group' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialCurveColorGroup
// 0x0660 (0x0660 - 0x0000)
struct FKuroMaterialCurveColorGroup final
{
public:
	struct FKuroCurveLinearColor                  StartCurve;                                        // 0x0000(0x0220)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKuroCurveLinearColor                  LoopCurve;                                         // 0x0220(0x0220)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKuroCurveLinearColor                  EndCurve;                                          // 0x0440(0x0220)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialCurveColorGroup) == 0x000008, "Wrong alignment on FKuroMaterialCurveColorGroup");
static_assert(sizeof(FKuroMaterialCurveColorGroup) == 0x000660, "Wrong size on FKuroMaterialCurveColorGroup");
static_assert(offsetof(FKuroMaterialCurveColorGroup, StartCurve) == 0x000000, "Member 'FKuroMaterialCurveColorGroup::StartCurve' has a wrong offset!");
static_assert(offsetof(FKuroMaterialCurveColorGroup, LoopCurve) == 0x000220, "Member 'FKuroMaterialCurveColorGroup::LoopCurve' has a wrong offset!");
static_assert(offsetof(FKuroMaterialCurveColorGroup, EndCurve) == 0x000440, "Member 'FKuroMaterialCurveColorGroup::EndCurve' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialNamedColorGroup
// 0x0670 (0x0670 - 0x0000)
struct FKuroMaterialNamedColorGroup final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroMaterialCurveColorGroup           Group;                                             // 0x0010(0x0660)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialNamedColorGroup) == 0x000008, "Wrong alignment on FKuroMaterialNamedColorGroup");
static_assert(sizeof(FKuroMaterialNamedColorGroup) == 0x000670, "Wrong size on FKuroMaterialNamedColorGroup");
static_assert(offsetof(FKuroMaterialNamedColorGroup, Name) == 0x000000, "Member 'FKuroMaterialNamedColorGroup::Name' has a wrong offset!");
static_assert(offsetof(FKuroMaterialNamedColorGroup, Group) == 0x000010, "Member 'FKuroMaterialNamedColorGroup::Group' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialTextureGroup
// 0x0018 (0x0018 - 0x0000)
struct FKuroMaterialTextureGroup final
{
public:
	class UTexture*                               StartValue;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               LoopValue;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               EndValue;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialTextureGroup) == 0x000008, "Wrong alignment on FKuroMaterialTextureGroup");
static_assert(sizeof(FKuroMaterialTextureGroup) == 0x000018, "Wrong size on FKuroMaterialTextureGroup");
static_assert(offsetof(FKuroMaterialTextureGroup, StartValue) == 0x000000, "Member 'FKuroMaterialTextureGroup::StartValue' has a wrong offset!");
static_assert(offsetof(FKuroMaterialTextureGroup, LoopValue) == 0x000008, "Member 'FKuroMaterialTextureGroup::LoopValue' has a wrong offset!");
static_assert(offsetof(FKuroMaterialTextureGroup, EndValue) == 0x000010, "Member 'FKuroMaterialTextureGroup::EndValue' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialNamedTextureGroup
// 0x0028 (0x0028 - 0x0000)
struct FKuroMaterialNamedTextureGroup final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroMaterialTextureGroup              Group;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialNamedTextureGroup) == 0x000008, "Wrong alignment on FKuroMaterialNamedTextureGroup");
static_assert(sizeof(FKuroMaterialNamedTextureGroup) == 0x000028, "Wrong size on FKuroMaterialNamedTextureGroup");
static_assert(offsetof(FKuroMaterialNamedTextureGroup, Name) == 0x000000, "Member 'FKuroMaterialNamedTextureGroup::Name' has a wrong offset!");
static_assert(offsetof(FKuroMaterialNamedTextureGroup, Group) == 0x000010, "Member 'FKuroMaterialNamedTextureGroup::Group' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_Custom
// 0x0030 (0x0030 - 0x0000)
struct FKuroMaterialControllerParam_Custom final
{
public:
	TArray<struct FKuroMaterialNamedFloatGroup>   CustomFloatParameters;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKuroMaterialNamedColorGroup>   CustomColorParameters;                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKuroMaterialNamedTextureGroup> CustomTextureParameters;                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_Custom) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_Custom");
static_assert(sizeof(FKuroMaterialControllerParam_Custom) == 0x000030, "Wrong size on FKuroMaterialControllerParam_Custom");
static_assert(offsetof(FKuroMaterialControllerParam_Custom, CustomFloatParameters) == 0x000000, "Member 'FKuroMaterialControllerParam_Custom::CustomFloatParameters' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Custom, CustomColorParameters) == 0x000010, "Member 'FKuroMaterialControllerParam_Custom::CustomColorParameters' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Custom, CustomTextureParameters) == 0x000020, "Member 'FKuroMaterialControllerParam_Custom::CustomTextureParameters' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.MainLightSetting
// 0x006C (0x006C - 0x0000)
struct FMainLightSetting final
{
public:
	uint8                                         bOverride_MainLightIntensity : 1;                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MainLightTint : 1;                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MobileMainLightTintSaturation : 1;       // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MobileMainLightTintValueMut : 1;         // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MainLightTemperature : 1;                // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MainLightSpecularIntensity : 1;          // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowTintIntensity : 1;                 // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowTintColor : 1;                     // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NearMainLightColorPC : 1;                // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NearMainLightDistancePC : 1;             // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_UseSeperateMobileNearMainLight : 1;      // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NearMainLightColorMobile : 1;            // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NearMainLightDistanceMobile : 1;         // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MainLightIntensity;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInCave : 1;                                       // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPCInCave : 1;                                     // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           MainLightTint;                                     // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MobileMainLightTintSaturation;                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MobileMainLightTintValueMut;                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MainLightTemperature;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MainLightSpecularIntensity;                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowTintIntensity;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowTintColor;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NearMainLightColorPC;                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearMainLightDistancePC;                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSepMobileNearMainLight;                         // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           NearMainLightColorMobile;                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearMainLightDistanceMobile;                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMainLightSetting) == 0x000004, "Wrong alignment on FMainLightSetting");
static_assert(sizeof(FMainLightSetting) == 0x00006C, "Wrong size on FMainLightSetting");
static_assert(offsetof(FMainLightSetting, MainLightIntensity) == 0x000004, "Member 'FMainLightSetting::MainLightIntensity' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, MainLightTint) == 0x00000C, "Member 'FMainLightSetting::MainLightTint' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, MobileMainLightTintSaturation) == 0x00001C, "Member 'FMainLightSetting::MobileMainLightTintSaturation' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, MobileMainLightTintValueMut) == 0x000020, "Member 'FMainLightSetting::MobileMainLightTintValueMut' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, MainLightTemperature) == 0x000024, "Member 'FMainLightSetting::MainLightTemperature' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, MainLightSpecularIntensity) == 0x000028, "Member 'FMainLightSetting::MainLightSpecularIntensity' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, ShadowTintIntensity) == 0x00002C, "Member 'FMainLightSetting::ShadowTintIntensity' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, ShadowTintColor) == 0x000030, "Member 'FMainLightSetting::ShadowTintColor' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, NearMainLightColorPC) == 0x000040, "Member 'FMainLightSetting::NearMainLightColorPC' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, NearMainLightDistancePC) == 0x000050, "Member 'FMainLightSetting::NearMainLightDistancePC' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, UseSepMobileNearMainLight) == 0x000054, "Member 'FMainLightSetting::UseSepMobileNearMainLight' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, NearMainLightColorMobile) == 0x000058, "Member 'FMainLightSetting::NearMainLightColorMobile' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, NearMainLightDistanceMobile) == 0x000068, "Member 'FMainLightSetting::NearMainLightDistanceMobile' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.SkyLightSetting
// 0x0150 (0x0150 - 0x0000)
struct alignas(0x10) FSkyLightSetting final
{
public:
	uint8                                         bOverride_SkyLightColor : 1;                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MobileSkyLightColorSaturation : 1;       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MobileSkyLightValueMut : 1;              // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightIntensity : 1;                   // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightSpecularIntensity : 1;           // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MobileSkyLightSpecularIntensityValueMut : 1; // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroSkyLightCubemap : 1;                 // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroSkyLightTranslucent : 1;             // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroInteriorSkyLightIntensity : 1;       // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroInteriorSkyLightColor : 1;           // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroNearSkyLightColorPC : 1;             // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroNearSkyLightDistancePC : 1;          // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroUseSeperateMobileNearSkyLight : 1;   // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroNearSkyLightColorMobile : 1;         // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroNearSkyLightDistanceMobile : 1;      // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AOColor : 1;                             // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SkyLightColor;                                     // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MobileSkyLightColorSaturation;                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MobileSkyLightValueMut;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLightIntensity;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLightSpecularIntensity;                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MobileSkyLightSpecularIntensityValueMut;           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroSkyLightTranslucent;                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroInteriorSkyLightIntensity;                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KuroInteriorSkyLightColor;                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KuroNearSkyLightColorPC;                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroNearSkyLightDistancePC;                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KuroUseSeperateMobileNearSkyLight;                 // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           KuroNearSkyLightColorMobile;                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroNearSkyLightDistanceMobile;                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AOColor;                                           // 0x006C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           KuroSkyLightCubemap;                               // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KuroSkyLightSH1;                                   // 0x0088(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KuroSkyLightSH2;                                   // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KuroSkyLightSH3;                                   // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KuroSkyLightSH4;                                   // 0x00AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KuroSkyLightSH5;                                   // 0x00B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KuroSkyLightSH6;                                   // 0x00C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x40];                                      // 0x00D0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseGradientColorTint;                             // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SkyColor;                                          // 0x0114(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x10];                                     // 0x0124(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           GroudColor;                                        // 0x0134(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0xC];                                      // 0x0144(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkyLightSetting) == 0x000010, "Wrong alignment on FSkyLightSetting");
static_assert(sizeof(FSkyLightSetting) == 0x000150, "Wrong size on FSkyLightSetting");
static_assert(offsetof(FSkyLightSetting, SkyLightColor) == 0x000004, "Member 'FSkyLightSetting::SkyLightColor' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, MobileSkyLightColorSaturation) == 0x000014, "Member 'FSkyLightSetting::MobileSkyLightColorSaturation' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, MobileSkyLightValueMut) == 0x000018, "Member 'FSkyLightSetting::MobileSkyLightValueMut' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, SkyLightIntensity) == 0x00001C, "Member 'FSkyLightSetting::SkyLightIntensity' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, SkyLightSpecularIntensity) == 0x000020, "Member 'FSkyLightSetting::SkyLightSpecularIntensity' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, MobileSkyLightSpecularIntensityValueMut) == 0x000024, "Member 'FSkyLightSetting::MobileSkyLightSpecularIntensityValueMut' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightTranslucent) == 0x000028, "Member 'FSkyLightSetting::KuroSkyLightTranslucent' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroInteriorSkyLightIntensity) == 0x00002C, "Member 'FSkyLightSetting::KuroInteriorSkyLightIntensity' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroInteriorSkyLightColor) == 0x000030, "Member 'FSkyLightSetting::KuroInteriorSkyLightColor' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroNearSkyLightColorPC) == 0x000040, "Member 'FSkyLightSetting::KuroNearSkyLightColorPC' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroNearSkyLightDistancePC) == 0x000050, "Member 'FSkyLightSetting::KuroNearSkyLightDistancePC' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroUseSeperateMobileNearSkyLight) == 0x000054, "Member 'FSkyLightSetting::KuroUseSeperateMobileNearSkyLight' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroNearSkyLightColorMobile) == 0x000058, "Member 'FSkyLightSetting::KuroNearSkyLightColorMobile' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroNearSkyLightDistanceMobile) == 0x000068, "Member 'FSkyLightSetting::KuroNearSkyLightDistanceMobile' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, AOColor) == 0x00006C, "Member 'FSkyLightSetting::AOColor' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightCubemap) == 0x000080, "Member 'FSkyLightSetting::KuroSkyLightCubemap' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightSH1) == 0x000088, "Member 'FSkyLightSetting::KuroSkyLightSH1' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightSH2) == 0x000094, "Member 'FSkyLightSetting::KuroSkyLightSH2' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightSH3) == 0x0000A0, "Member 'FSkyLightSetting::KuroSkyLightSH3' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightSH4) == 0x0000AC, "Member 'FSkyLightSetting::KuroSkyLightSH4' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightSH5) == 0x0000B8, "Member 'FSkyLightSetting::KuroSkyLightSH5' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightSH6) == 0x0000C4, "Member 'FSkyLightSetting::KuroSkyLightSH6' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, bUseGradientColorTint) == 0x000110, "Member 'FSkyLightSetting::bUseGradientColorTint' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, SkyColor) == 0x000114, "Member 'FSkyLightSetting::SkyColor' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, GroudColor) == 0x000134, "Member 'FSkyLightSetting::GroudColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.ShadowTintSetting
// 0x0018 (0x0018 - 0x0000)
struct FShadowTintSetting final
{
public:
	uint8                                         bOverride_ShadowTintOffset : 1;                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShadowTintOffset;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ShadowTintLutRamp : 1;                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ShadowTintLutRamp;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShadowTintSetting) == 0x000008, "Wrong alignment on FShadowTintSetting");
static_assert(sizeof(FShadowTintSetting) == 0x000018, "Wrong size on FShadowTintSetting");
static_assert(offsetof(FShadowTintSetting, ShadowTintOffset) == 0x000004, "Member 'FShadowTintSetting::ShadowTintOffset' has a wrong offset!");
static_assert(offsetof(FShadowTintSetting, ShadowTintLutRamp) == 0x000010, "Member 'FShadowTintSetting::ShadowTintLutRamp' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.CharacterSetting
// 0x005C (0x005C - 0x0000)
struct FCharacterSetting final
{
public:
	uint8                                         bOverride_CustomCharacterLightingIntensity : 1;    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightHorizontalAngle : 1;                // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterDirectionMixIntensity : 1;      // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MixCharacterLightingIntensity : 1;       // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterAmbientColor : 1;               // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterMainLightColor : 1;             // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterSkinShadowColorIntensity : 1;   // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterSSSIntensity : 1;               // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterRimColor : 1;                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_GlobalShadowIntensity : 1;               // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_UseNewCharacterRim : 1;                  // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_GlobalBossShadowIntensity : 1;           // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_GlobalBossShadowRange : 1;               // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomCharacterLightingIntensity;                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterDirectionMixIntensity;                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightHorizontalAngle;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MixCharacterLightingIntensity;                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CharacterMainLightColor;                           // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CharacterAmbientColor;                             // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterSSSIntensity;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CharacterRimColor;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalShadowIntensity;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseNewCharacterRim;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalBossShadowIntensity;                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GlobalBossShadowRange;                             // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterSetting) == 0x000004, "Wrong alignment on FCharacterSetting");
static_assert(sizeof(FCharacterSetting) == 0x00005C, "Wrong size on FCharacterSetting");
static_assert(offsetof(FCharacterSetting, CustomCharacterLightingIntensity) == 0x000004, "Member 'FCharacterSetting::CustomCharacterLightingIntensity' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, CharacterDirectionMixIntensity) == 0x000008, "Member 'FCharacterSetting::CharacterDirectionMixIntensity' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, LightHorizontalAngle) == 0x00000C, "Member 'FCharacterSetting::LightHorizontalAngle' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, MixCharacterLightingIntensity) == 0x000010, "Member 'FCharacterSetting::MixCharacterLightingIntensity' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, CharacterMainLightColor) == 0x000014, "Member 'FCharacterSetting::CharacterMainLightColor' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, CharacterAmbientColor) == 0x000024, "Member 'FCharacterSetting::CharacterAmbientColor' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, CharacterSSSIntensity) == 0x000034, "Member 'FCharacterSetting::CharacterSSSIntensity' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, CharacterRimColor) == 0x000038, "Member 'FCharacterSetting::CharacterRimColor' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, GlobalShadowIntensity) == 0x000048, "Member 'FCharacterSetting::GlobalShadowIntensity' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, UseNewCharacterRim) == 0x00004C, "Member 'FCharacterSetting::UseNewCharacterRim' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, GlobalBossShadowIntensity) == 0x000050, "Member 'FCharacterSetting::GlobalBossShadowIntensity' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, GlobalBossShadowRange) == 0x000054, "Member 'FCharacterSetting::GlobalBossShadowRange' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroHeightFogSetting
// 0x0118 (0x0118 - 0x0000)
struct FKuroHeightFogSetting final
{
public:
	uint8                                         bOverride_DirectionalInscatteringAmount : 1;       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DirectionalInscatteringExponent : 1;     // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DirectionalInscatteringStartDistance : 1; // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DirectionalInscatteringColor : 1;        // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Fog1Density : 1;                         // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Fog1HeightOffset : 1;                    // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Fog1Falloff : 1;                         // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Fog1FalloffFarSky : 1;                   // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StartDistance : 1;                       // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MaxOpacity : 1;                          // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogNearColor : 1;                        // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogFarColor : 1;                         // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogBaseColor : 1;                        // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogNearColorDistance : 1;                // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogFarColorDistance : 1;                 // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogNearFarColorRatio : 1;                // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogMixDistance : 1;                      // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogMixWidth : 1;                         // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LowPoint1 : 1;                           // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HighPoint1 : 1;                          // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LowFalloff1 : 1;                         // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LowSkyFalloff1 : 1;                      // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LowHighOffset1 : 1;                      // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SingleCloudOpacity : 1;                  // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudOceanHeight : 1;                    // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudOpacity : 1;                        // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudOceanMaterial : 1;                  // 0x0003(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeCloudPosition : 1;                 // 0x0003(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeCloudScale : 1;                    // 0x0003(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeCloudRange : 1;                    // 0x0003(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeCloudOpacity : 1;                  // 0x0003(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeCloudMaterial : 1;                 // 0x0003(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bUseVolumeCloudInsteadOfCloudOcean : 1;  // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeCloudCustomLighting : 1;           // 0x0004(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeCloudLight : 1;                    // 0x0004(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeCloudShadow : 1;                   // 0x0004(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeCloudSpeed : 1;                    // 0x0004(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeCloudNearFadeDistance : 1;         // 0x0004(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionalInscatteringAmount;                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fog1Density;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fog1HeightOffset;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fog1Falloff;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fog1FalloffFarSky;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOpacity;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogNearColor;                                      // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogFarColor;                                       // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogBaseColor;                                      // 0x005C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogNearColorDistance;                              // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogFarColorDistance;                               // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogNearFarColorRatio;                              // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMixDistance;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMixWidth;                                       // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowPoint1;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighPoint1;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowFalloff1;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowSkyFalloff1;                                    // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowHighOffset1;                                    // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SingleCloudOpacity;                                // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudOceanHeight;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudOpacity;                                      // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CloudOceanMaterial;                                // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VolumeCloudPosition;                               // 0x00A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VolumeCloudScale;                                  // 0x00B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              VolumeCloudRange;                                  // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeCloudOpacity;                                // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     VolumeCloudMaterial;                               // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVolumeCloudInsteadOfCloudOcean;                // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeCloudCustomLighting;                         // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumeCloudLight;                                  // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumeCloudShadow;                                 // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumeCloudSpeed;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeCloudNearFadeDistance;                       // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroHeightFogSetting) == 0x000008, "Wrong alignment on FKuroHeightFogSetting");
static_assert(sizeof(FKuroHeightFogSetting) == 0x000118, "Wrong size on FKuroHeightFogSetting");
static_assert(offsetof(FKuroHeightFogSetting, DirectionalInscatteringAmount) == 0x000008, "Member 'FKuroHeightFogSetting::DirectionalInscatteringAmount' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, DirectionalInscatteringExponent) == 0x00000C, "Member 'FKuroHeightFogSetting::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, DirectionalInscatteringStartDistance) == 0x000010, "Member 'FKuroHeightFogSetting::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, DirectionalInscatteringColor) == 0x000014, "Member 'FKuroHeightFogSetting::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, Fog1Density) == 0x000024, "Member 'FKuroHeightFogSetting::Fog1Density' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, Fog1HeightOffset) == 0x000028, "Member 'FKuroHeightFogSetting::Fog1HeightOffset' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, Fog1Falloff) == 0x00002C, "Member 'FKuroHeightFogSetting::Fog1Falloff' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, Fog1FalloffFarSky) == 0x000030, "Member 'FKuroHeightFogSetting::Fog1FalloffFarSky' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, StartDistance) == 0x000034, "Member 'FKuroHeightFogSetting::StartDistance' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, MaxOpacity) == 0x000038, "Member 'FKuroHeightFogSetting::MaxOpacity' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogNearColor) == 0x00003C, "Member 'FKuroHeightFogSetting::FogNearColor' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogFarColor) == 0x00004C, "Member 'FKuroHeightFogSetting::FogFarColor' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogBaseColor) == 0x00005C, "Member 'FKuroHeightFogSetting::FogBaseColor' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogNearColorDistance) == 0x00006C, "Member 'FKuroHeightFogSetting::FogNearColorDistance' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogFarColorDistance) == 0x000070, "Member 'FKuroHeightFogSetting::FogFarColorDistance' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogNearFarColorRatio) == 0x000074, "Member 'FKuroHeightFogSetting::FogNearFarColorRatio' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogMixDistance) == 0x000078, "Member 'FKuroHeightFogSetting::FogMixDistance' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogMixWidth) == 0x00007C, "Member 'FKuroHeightFogSetting::FogMixWidth' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, LowPoint1) == 0x000080, "Member 'FKuroHeightFogSetting::LowPoint1' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, HighPoint1) == 0x000084, "Member 'FKuroHeightFogSetting::HighPoint1' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, LowFalloff1) == 0x000088, "Member 'FKuroHeightFogSetting::LowFalloff1' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, LowSkyFalloff1) == 0x00008C, "Member 'FKuroHeightFogSetting::LowSkyFalloff1' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, LowHighOffset1) == 0x000090, "Member 'FKuroHeightFogSetting::LowHighOffset1' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, SingleCloudOpacity) == 0x000094, "Member 'FKuroHeightFogSetting::SingleCloudOpacity' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, CloudOceanHeight) == 0x000098, "Member 'FKuroHeightFogSetting::CloudOceanHeight' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, CloudOpacity) == 0x00009C, "Member 'FKuroHeightFogSetting::CloudOpacity' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, CloudOceanMaterial) == 0x0000A0, "Member 'FKuroHeightFogSetting::CloudOceanMaterial' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, VolumeCloudPosition) == 0x0000A8, "Member 'FKuroHeightFogSetting::VolumeCloudPosition' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, VolumeCloudScale) == 0x0000B4, "Member 'FKuroHeightFogSetting::VolumeCloudScale' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, VolumeCloudRange) == 0x0000C0, "Member 'FKuroHeightFogSetting::VolumeCloudRange' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, VolumeCloudOpacity) == 0x0000C8, "Member 'FKuroHeightFogSetting::VolumeCloudOpacity' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, VolumeCloudMaterial) == 0x0000D0, "Member 'FKuroHeightFogSetting::VolumeCloudMaterial' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, bUseVolumeCloudInsteadOfCloudOcean) == 0x0000D8, "Member 'FKuroHeightFogSetting::bUseVolumeCloudInsteadOfCloudOcean' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, VolumeCloudCustomLighting) == 0x0000DC, "Member 'FKuroHeightFogSetting::VolumeCloudCustomLighting' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, VolumeCloudLight) == 0x0000E0, "Member 'FKuroHeightFogSetting::VolumeCloudLight' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, VolumeCloudShadow) == 0x0000F0, "Member 'FKuroHeightFogSetting::VolumeCloudShadow' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, VolumeCloudSpeed) == 0x000100, "Member 'FKuroHeightFogSetting::VolumeCloudSpeed' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, VolumeCloudNearFadeDistance) == 0x000110, "Member 'FKuroHeightFogSetting::VolumeCloudNearFadeDistance' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroEffectFogSetting
// 0x0060 (0x0060 - 0x0000)
struct FKuroEffectFogSetting final
{
public:
	uint8                                         bOverride_KuroEffectFogSwitch : 1;                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogDensity : 1;                // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogFalloff : 1;                // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogFalloffFarSky : 1;          // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogStartDistance : 1;          // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogMaxOpacity : 1;             // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogNearColor : 1;              // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogFarColor : 1;               // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogBaseColor : 1;              // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogNearColorDistance : 1;      // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogFarColorDistance : 1;       // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogNearFarColorRatio : 1;      // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogMixDistance : 1;            // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroEffectFogMixWidth : 1;               // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KuroEffectFogSwitch;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroEffectFogDensity;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroEffectFogFalloff;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroEffectFogFalloffFarSky;                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroEffectFogStartDistance;                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroEffectFogMaxOpacity;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KuroEffectFogNearColor;                            // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KuroEffectFogFarColor;                             // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KuroEffectFogBaseColor;                            // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroEffectFogNearColorDistance;                    // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroEffectFogFarColorDistance;                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroEffectFogNearFarColorRatio;                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroEffectFogMixDistance;                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroEffectFogMixWidth;                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroEffectFogSetting) == 0x000004, "Wrong alignment on FKuroEffectFogSetting");
static_assert(sizeof(FKuroEffectFogSetting) == 0x000060, "Wrong size on FKuroEffectFogSetting");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogSwitch) == 0x000004, "Member 'FKuroEffectFogSetting::KuroEffectFogSwitch' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogDensity) == 0x000008, "Member 'FKuroEffectFogSetting::KuroEffectFogDensity' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogFalloff) == 0x00000C, "Member 'FKuroEffectFogSetting::KuroEffectFogFalloff' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogFalloffFarSky) == 0x000010, "Member 'FKuroEffectFogSetting::KuroEffectFogFalloffFarSky' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogStartDistance) == 0x000014, "Member 'FKuroEffectFogSetting::KuroEffectFogStartDistance' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogMaxOpacity) == 0x000018, "Member 'FKuroEffectFogSetting::KuroEffectFogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogNearColor) == 0x00001C, "Member 'FKuroEffectFogSetting::KuroEffectFogNearColor' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogFarColor) == 0x00002C, "Member 'FKuroEffectFogSetting::KuroEffectFogFarColor' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogBaseColor) == 0x00003C, "Member 'FKuroEffectFogSetting::KuroEffectFogBaseColor' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogNearColorDistance) == 0x00004C, "Member 'FKuroEffectFogSetting::KuroEffectFogNearColorDistance' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogFarColorDistance) == 0x000050, "Member 'FKuroEffectFogSetting::KuroEffectFogFarColorDistance' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogNearFarColorRatio) == 0x000054, "Member 'FKuroEffectFogSetting::KuroEffectFogNearFarColorRatio' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogMixDistance) == 0x000058, "Member 'FKuroEffectFogSetting::KuroEffectFogMixDistance' has a wrong offset!");
static_assert(offsetof(FKuroEffectFogSetting, KuroEffectFogMixWidth) == 0x00005C, "Member 'FKuroEffectFogSetting::KuroEffectFogMixWidth' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroTreeSetting
// 0x0038 (0x0038 - 0x0000)
struct FKuroTreeSetting final
{
public:
	uint8                                         bOverride_LineRadius : 1;                          // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DistanceRatio : 1;                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LinePower : 1;                           // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NearColor : 1;                           // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FarColor : 1;                            // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NearFarDistance : 1;                     // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Saturation : 1;                          // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineRadius;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceRatio;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinePower;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NearColor;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FarColor;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearFarDistance;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Saturation;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroTreeSetting) == 0x000004, "Wrong alignment on FKuroTreeSetting");
static_assert(sizeof(FKuroTreeSetting) == 0x000038, "Wrong size on FKuroTreeSetting");
static_assert(offsetof(FKuroTreeSetting, LineRadius) == 0x000004, "Member 'FKuroTreeSetting::LineRadius' has a wrong offset!");
static_assert(offsetof(FKuroTreeSetting, DistanceRatio) == 0x000008, "Member 'FKuroTreeSetting::DistanceRatio' has a wrong offset!");
static_assert(offsetof(FKuroTreeSetting, LinePower) == 0x00000C, "Member 'FKuroTreeSetting::LinePower' has a wrong offset!");
static_assert(offsetof(FKuroTreeSetting, NearColor) == 0x000010, "Member 'FKuroTreeSetting::NearColor' has a wrong offset!");
static_assert(offsetof(FKuroTreeSetting, FarColor) == 0x000020, "Member 'FKuroTreeSetting::FarColor' has a wrong offset!");
static_assert(offsetof(FKuroTreeSetting, NearFarDistance) == 0x000030, "Member 'FKuroTreeSetting::NearFarDistance' has a wrong offset!");
static_assert(offsetof(FKuroTreeSetting, Saturation) == 0x000034, "Member 'FKuroTreeSetting::Saturation' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.VolumetricFogSetting
// 0x0080 (0x0080 - 0x0000)
struct FVolumetricFogSetting final
{
public:
	uint8                                         bOverride_LocalLightScatteringMultiplier : 1;      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricScatteringIntensity : 1;       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ExtinctionScale : 1;                     // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScatteringDistribution : 1;              // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricFogAlbedo : 1;                 // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricFogEmssive : 1;                // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ViewDistance : 1;                        // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeMaterialSkyLightIntensity : 1;     // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeMaterialDirectionalLightIntensity : 1; // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumeMaterialOpacity : 1;               // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricLightFunctionTexture : 1;      // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricLightFunctionIntensity : 1;    // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricLightFunctionUVScale : 1;      // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricLightFunctionSpeed : 1;        // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricFogTransmittance : 1;          // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableVolumetriFog : 1;                           // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastVolumetricShadow : 1;                         // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bVolumetricLightFunction : 1;                      // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricLightFunctionIntensity;                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               VolumetricLightFunctionUVScale;                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricLightFunctionSpeed;                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             VolumetricLightFunctionTexture;                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricDensity;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogTransmittance;                        // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogAlbedo;                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalLightScatteringMultiplier;                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtinctionScale;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScatteringDistribution;                            // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewDistance;                                      // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMaterialSkyLightIntensity;                   // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMaterialDirectionalLightIntensity;           // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMaterialOpacity;                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVolumetricFogSetting) == 0x000010, "Wrong alignment on FVolumetricFogSetting");
static_assert(sizeof(FVolumetricFogSetting) == 0x000080, "Wrong size on FVolumetricFogSetting");
static_assert(offsetof(FVolumetricFogSetting, VolumetricLightFunctionIntensity) == 0x000004, "Member 'FVolumetricFogSetting::VolumetricLightFunctionIntensity' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, VolumetricLightFunctionUVScale) == 0x000010, "Member 'FVolumetricFogSetting::VolumetricLightFunctionUVScale' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, VolumetricLightFunctionSpeed) == 0x000020, "Member 'FVolumetricFogSetting::VolumetricLightFunctionSpeed' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, VolumetricLightFunctionTexture) == 0x000028, "Member 'FVolumetricFogSetting::VolumetricLightFunctionTexture' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, VolumetricDensity) == 0x000030, "Member 'FVolumetricFogSetting::VolumetricDensity' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, VolumetricFogTransmittance) == 0x000034, "Member 'FVolumetricFogSetting::VolumetricFogTransmittance' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, VolumetricScatteringIntensity) == 0x000044, "Member 'FVolumetricFogSetting::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, VolumetricFogAlbedo) == 0x000048, "Member 'FVolumetricFogSetting::VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, LocalLightScatteringMultiplier) == 0x000058, "Member 'FVolumetricFogSetting::LocalLightScatteringMultiplier' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, ExtinctionScale) == 0x00005C, "Member 'FVolumetricFogSetting::ExtinctionScale' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, ScatteringDistribution) == 0x000060, "Member 'FVolumetricFogSetting::ScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, ViewDistance) == 0x000064, "Member 'FVolumetricFogSetting::ViewDistance' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, VolumeMaterialSkyLightIntensity) == 0x000068, "Member 'FVolumetricFogSetting::VolumeMaterialSkyLightIntensity' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, VolumeMaterialDirectionalLightIntensity) == 0x00006C, "Member 'FVolumetricFogSetting::VolumeMaterialDirectionalLightIntensity' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, VolumeMaterialOpacity) == 0x000070, "Member 'FVolumetricFogSetting::VolumeMaterialOpacity' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.SkyAtmosphereSetting
// 0x0010 (0x0010 - 0x0000)
struct FSkyAtmosphereSetting final
{
public:
	uint8                                         bOverride_LightShaftBloomScale : 1;                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightShaftBloomThreshold : 1;            // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightShaftBloomMaxBrightness : 1;        // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightShaftBloomScale;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightShaftBloomThreshold;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightShaftBloomMaxBrightness;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyAtmosphereSetting) == 0x000004, "Wrong alignment on FSkyAtmosphereSetting");
static_assert(sizeof(FSkyAtmosphereSetting) == 0x000010, "Wrong size on FSkyAtmosphereSetting");
static_assert(offsetof(FSkyAtmosphereSetting, LightShaftBloomScale) == 0x000004, "Member 'FSkyAtmosphereSetting::LightShaftBloomScale' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereSetting, LightShaftBloomThreshold) == 0x000008, "Member 'FSkyAtmosphereSetting::LightShaftBloomThreshold' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereSetting, LightShaftBloomMaxBrightness) == 0x00000C, "Member 'FSkyAtmosphereSetting::LightShaftBloomMaxBrightness' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroOceanSetting
// 0x0080 (0x0080 - 0x0000)
struct FKuroOceanSetting final
{
public:
	uint8                                         bOverride_WaveTextureHeight : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WaveTextureDecodeNormal : 1;             // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WaveTextureFoamScale : 1;                // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WaveTextureWind : 1;                     // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OceanFoamColor : 1;                      // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScatteringColor : 1;                     // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScatteringShoreline : 1;                 // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AbsorptionColor : 1;                     // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorScaleBehindWater : 1;               // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WaterColorTint : 1;                      // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveTextureHeight;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveTextureDecodeNormal;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveTextureFoamScale;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WaveTextureWind;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OceanFoamColor;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ScatteringColor;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ScatteringShoreline;                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AbsorptionColor;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorScaleBehindWater;                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WaterColorTint;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroOceanSetting) == 0x000004, "Wrong alignment on FKuroOceanSetting");
static_assert(sizeof(FKuroOceanSetting) == 0x000080, "Wrong size on FKuroOceanSetting");
static_assert(offsetof(FKuroOceanSetting, WaveTextureHeight) == 0x000004, "Member 'FKuroOceanSetting::WaveTextureHeight' has a wrong offset!");
static_assert(offsetof(FKuroOceanSetting, WaveTextureDecodeNormal) == 0x000008, "Member 'FKuroOceanSetting::WaveTextureDecodeNormal' has a wrong offset!");
static_assert(offsetof(FKuroOceanSetting, WaveTextureFoamScale) == 0x00000C, "Member 'FKuroOceanSetting::WaveTextureFoamScale' has a wrong offset!");
static_assert(offsetof(FKuroOceanSetting, WaveTextureWind) == 0x000010, "Member 'FKuroOceanSetting::WaveTextureWind' has a wrong offset!");
static_assert(offsetof(FKuroOceanSetting, OceanFoamColor) == 0x000020, "Member 'FKuroOceanSetting::OceanFoamColor' has a wrong offset!");
static_assert(offsetof(FKuroOceanSetting, ScatteringColor) == 0x000030, "Member 'FKuroOceanSetting::ScatteringColor' has a wrong offset!");
static_assert(offsetof(FKuroOceanSetting, ScatteringShoreline) == 0x000040, "Member 'FKuroOceanSetting::ScatteringShoreline' has a wrong offset!");
static_assert(offsetof(FKuroOceanSetting, AbsorptionColor) == 0x000050, "Member 'FKuroOceanSetting::AbsorptionColor' has a wrong offset!");
static_assert(offsetof(FKuroOceanSetting, ColorScaleBehindWater) == 0x000060, "Member 'FKuroOceanSetting::ColorScaleBehindWater' has a wrong offset!");
static_assert(offsetof(FKuroOceanSetting, WaterColorTint) == 0x000070, "Member 'FKuroOceanSetting::WaterColorTint' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSkyboxSetting
// 0x0108 (0x0108 - 0x0000)
struct FKuroSkyboxSetting final
{
public:
	uint8                                         bOverride_ZenithColor : 1;                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NadirColor : 1;                          // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NadirFalloff : 1;                        // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NadirFalloff_Mobile : 1;                 // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HorizonColor : 1;                        // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HorizonFalloff : 1;                      // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_TopColor : 1;                            // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_TopFalloff : 1;                          // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_TopColorMobile : 1;                      // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_TopFalloffMobile : 1;                    // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunDiscColor : 1;                        // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunScatterColor : 1;                     // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunSize : 1;                             // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunScatterSize : 1;                      // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunMeshScale : 1;                        // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunMeshColor : 1;                        // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonTexture : 1;                         // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonPhase : 1;                           // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonDiscColor : 1;                       // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonScatterColor : 1;                    // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonSize : 1;                            // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonScatterSize : 1;                     // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ExtremeWeatherWeight : 1;                // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ST_TopColor : 1;                         // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ST_DomeColorTint : 1;                    // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ST_TopWidth : 1;                         // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	struct FLinearColor                           ZenithColor;                                       // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NadirColor;                                        // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NadirFalloff;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NadirFalloff_Mobile;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HorizonColor;                                      // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonFalloff;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TopColor;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopFalloff;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TopColorMobile;                                    // 0x0054(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopFalloffMobile;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunDiscColor;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunScatterColor;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunSize;                                           // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunScatterSize;                                    // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunMeshScale;                                      // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunMeshColor;                                      // 0x0094(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonDiscColor;                                     // 0x00A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MoonTexture;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonPhase;                                         // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonScatterColor;                                  // 0x00C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonSize;                                          // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonScatterSize;                                   // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtremeWeatherWeight;                              // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ST_TopColor;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ST_DomeColorTint;                                  // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ST_TopWidth;                                       // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroSkyboxSetting) == 0x000008, "Wrong alignment on FKuroSkyboxSetting");
static_assert(sizeof(FKuroSkyboxSetting) == 0x000108, "Wrong size on FKuroSkyboxSetting");
static_assert(offsetof(FKuroSkyboxSetting, ZenithColor) == 0x000004, "Member 'FKuroSkyboxSetting::ZenithColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, NadirColor) == 0x000014, "Member 'FKuroSkyboxSetting::NadirColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, NadirFalloff) == 0x000024, "Member 'FKuroSkyboxSetting::NadirFalloff' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, NadirFalloff_Mobile) == 0x000028, "Member 'FKuroSkyboxSetting::NadirFalloff_Mobile' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, HorizonColor) == 0x00002C, "Member 'FKuroSkyboxSetting::HorizonColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, HorizonFalloff) == 0x00003C, "Member 'FKuroSkyboxSetting::HorizonFalloff' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, TopColor) == 0x000040, "Member 'FKuroSkyboxSetting::TopColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, TopFalloff) == 0x000050, "Member 'FKuroSkyboxSetting::TopFalloff' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, TopColorMobile) == 0x000054, "Member 'FKuroSkyboxSetting::TopColorMobile' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, TopFalloffMobile) == 0x000064, "Member 'FKuroSkyboxSetting::TopFalloffMobile' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, SunDiscColor) == 0x000068, "Member 'FKuroSkyboxSetting::SunDiscColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, SunScatterColor) == 0x000078, "Member 'FKuroSkyboxSetting::SunScatterColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, SunSize) == 0x000088, "Member 'FKuroSkyboxSetting::SunSize' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, SunScatterSize) == 0x00008C, "Member 'FKuroSkyboxSetting::SunScatterSize' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, SunMeshScale) == 0x000090, "Member 'FKuroSkyboxSetting::SunMeshScale' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, SunMeshColor) == 0x000094, "Member 'FKuroSkyboxSetting::SunMeshColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, MoonDiscColor) == 0x0000A4, "Member 'FKuroSkyboxSetting::MoonDiscColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, MoonTexture) == 0x0000B8, "Member 'FKuroSkyboxSetting::MoonTexture' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, MoonPhase) == 0x0000C0, "Member 'FKuroSkyboxSetting::MoonPhase' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, MoonScatterColor) == 0x0000C4, "Member 'FKuroSkyboxSetting::MoonScatterColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, MoonSize) == 0x0000D4, "Member 'FKuroSkyboxSetting::MoonSize' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, MoonScatterSize) == 0x0000D8, "Member 'FKuroSkyboxSetting::MoonScatterSize' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, ExtremeWeatherWeight) == 0x0000DC, "Member 'FKuroSkyboxSetting::ExtremeWeatherWeight' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, ST_TopColor) == 0x0000E0, "Member 'FKuroSkyboxSetting::ST_TopColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, ST_DomeColorTint) == 0x0000F0, "Member 'FKuroSkyboxSetting::ST_DomeColorTint' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, ST_TopWidth) == 0x000100, "Member 'FKuroSkyboxSetting::ST_TopWidth' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroLensFlareSetting
// 0x0030 (0x0030 - 0x0000)
struct FKuroLensFlareSetting final
{
public:
	uint8                                         bOverride_LensFlareConfigData : 1;                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LensFlareTint : 1;                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LensFlareRampIndex : 1;                  // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LensFlareColorThreshold : 1;             // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USunLensFlareConfig*                    LensFlareConfigData;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LensFlareTint;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LensFlareRampIndex;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LensFlareColorThreshold;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_PPLensflareType : 1;                     // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EKuroPPLensflareType                          PPLensflareType;                                   // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroLensFlareSetting) == 0x000008, "Wrong alignment on FKuroLensFlareSetting");
static_assert(sizeof(FKuroLensFlareSetting) == 0x000030, "Wrong size on FKuroLensFlareSetting");
static_assert(offsetof(FKuroLensFlareSetting, LensFlareConfigData) == 0x000008, "Member 'FKuroLensFlareSetting::LensFlareConfigData' has a wrong offset!");
static_assert(offsetof(FKuroLensFlareSetting, LensFlareTint) == 0x000010, "Member 'FKuroLensFlareSetting::LensFlareTint' has a wrong offset!");
static_assert(offsetof(FKuroLensFlareSetting, LensFlareRampIndex) == 0x000020, "Member 'FKuroLensFlareSetting::LensFlareRampIndex' has a wrong offset!");
static_assert(offsetof(FKuroLensFlareSetting, LensFlareColorThreshold) == 0x000024, "Member 'FKuroLensFlareSetting::LensFlareColorThreshold' has a wrong offset!");
static_assert(offsetof(FKuroLensFlareSetting, PPLensflareType) == 0x000029, "Member 'FKuroLensFlareSetting::PPLensflareType' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.WindSetting
// 0x0028 (0x0028 - 0x0000)
struct FWindSetting final
{
public:
	uint8                                         bOverride_WindDirection : 1;                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindDirection;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WindSpeed : 1;                           // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SoundPower : 1;                          // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindSpeed;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WindPower : 1;                           // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindPower;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_SkyWind : 1;                             // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SkyWind;                                           // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundPower;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindSetting) == 0x000004, "Wrong alignment on FWindSetting");
static_assert(sizeof(FWindSetting) == 0x000028, "Wrong size on FWindSetting");
static_assert(offsetof(FWindSetting, WindDirection) == 0x000004, "Member 'FWindSetting::WindDirection' has a wrong offset!");
static_assert(offsetof(FWindSetting, WindSpeed) == 0x00000C, "Member 'FWindSetting::WindSpeed' has a wrong offset!");
static_assert(offsetof(FWindSetting, WindPower) == 0x000014, "Member 'FWindSetting::WindPower' has a wrong offset!");
static_assert(offsetof(FWindSetting, SkyWind) == 0x00001C, "Member 'FWindSetting::SkyWind' has a wrong offset!");
static_assert(offsetof(FWindSetting, SoundPower) == 0x000024, "Member 'FWindSetting::SoundPower' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.StarSetting
// 0x0070 (0x0070 - 0x0000)
struct FStarSetting final
{
public:
	uint8                                         bOverride_StarFieldColor : 1;                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarSize : 1;                            // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarSpeed : 1;                           // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarSwitch : 1;                          // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NoiseTexture : 1;                        // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NoiseSwitch : 1;                         // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_UVTillingU : 1;                          // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_UVTillingV : 1;                          // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarMap : 1;                             // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarMapPC : 1;                           // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           StarFieldColor;                                    // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_UseStarV2 : 1;                           // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarCloudFogColor : 1;                   // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarTex_V2 : 1;                          // 0x0014(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StarSize;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarSpeed;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarSwitch;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             NoiseTexture;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseSwitch;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UVTillingU;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UVTillingV;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               StarMap;                                           // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               StarMap_PC;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseStarV2;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           StarCloudFogColor;                                 // 0x0054(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               StarTex_V2;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStarSetting) == 0x000008, "Wrong alignment on FStarSetting");
static_assert(sizeof(FStarSetting) == 0x000070, "Wrong size on FStarSetting");
static_assert(offsetof(FStarSetting, StarFieldColor) == 0x000004, "Member 'FStarSetting::StarFieldColor' has a wrong offset!");
static_assert(offsetof(FStarSetting, StarSize) == 0x000018, "Member 'FStarSetting::StarSize' has a wrong offset!");
static_assert(offsetof(FStarSetting, StarSpeed) == 0x00001C, "Member 'FStarSetting::StarSpeed' has a wrong offset!");
static_assert(offsetof(FStarSetting, StarSwitch) == 0x000020, "Member 'FStarSetting::StarSwitch' has a wrong offset!");
static_assert(offsetof(FStarSetting, NoiseTexture) == 0x000028, "Member 'FStarSetting::NoiseTexture' has a wrong offset!");
static_assert(offsetof(FStarSetting, NoiseSwitch) == 0x000030, "Member 'FStarSetting::NoiseSwitch' has a wrong offset!");
static_assert(offsetof(FStarSetting, UVTillingU) == 0x000034, "Member 'FStarSetting::UVTillingU' has a wrong offset!");
static_assert(offsetof(FStarSetting, UVTillingV) == 0x000038, "Member 'FStarSetting::UVTillingV' has a wrong offset!");
static_assert(offsetof(FStarSetting, StarMap) == 0x000040, "Member 'FStarSetting::StarMap' has a wrong offset!");
static_assert(offsetof(FStarSetting, StarMap_PC) == 0x000048, "Member 'FStarSetting::StarMap_PC' has a wrong offset!");
static_assert(offsetof(FStarSetting, bUseStarV2) == 0x000050, "Member 'FStarSetting::bUseStarV2' has a wrong offset!");
static_assert(offsetof(FStarSetting, StarCloudFogColor) == 0x000054, "Member 'FStarSetting::StarCloudFogColor' has a wrong offset!");
static_assert(offsetof(FStarSetting, StarTex_V2) == 0x000068, "Member 'FStarSetting::StarTex_V2' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCloudCardSetting
// 0x0094 (0x0094 - 0x0000)
struct FKuroCloudCardSetting final
{
public:
	uint8                                         bOverride_AtmoLightScale : 1;                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Contrast : 1;                            // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogColorAmount : 1;                      // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DarkBrightness : 1;                      // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Exp : 1;                                 // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HorizonFalloff : 1;                      // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HorizonMax : 1;                          // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HorizonMin : 1;                          // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HorizonOffset : 1;                       // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightBrightness : 1;                     // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LitOffset : 1;                           // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Translucency : 1;                        // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BaseColor : 1;                           // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DarkColor : 1;                           // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Emissive : 1;                            // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightColor : 1;                          // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Offset : 1;                              // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BillboardCloudsNearFogDensity : 1;       // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BillboardCloudsFarFogDensity : 1;        // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BillboardCloudsBeginDistance : 1;        // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BillboardCloudsFadeDistance : 1;         // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AtmoLightScale;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogColorAmount;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DarkBrightness;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Exp;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonFalloff;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonMax;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonMin;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonOffset;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightBrightness;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LitOffset;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Translucency;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseColor;                                         // 0x0034(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DarkColor;                                         // 0x0044(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Emissive;                                          // 0x0054(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0064(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Offset;                                            // 0x0074(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BillboardCloudsNearFogDensity;                     // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BillboardCloudsFarFogDensity;                      // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BillboardCloudsBeginDistance;                      // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BillboardCloudsFadeDistance;                       // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCloudCardSetting) == 0x000004, "Wrong alignment on FKuroCloudCardSetting");
static_assert(sizeof(FKuroCloudCardSetting) == 0x000094, "Wrong size on FKuroCloudCardSetting");
static_assert(offsetof(FKuroCloudCardSetting, AtmoLightScale) == 0x000004, "Member 'FKuroCloudCardSetting::AtmoLightScale' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, Contrast) == 0x000008, "Member 'FKuroCloudCardSetting::Contrast' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, FogColorAmount) == 0x00000C, "Member 'FKuroCloudCardSetting::FogColorAmount' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, DarkBrightness) == 0x000010, "Member 'FKuroCloudCardSetting::DarkBrightness' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, Exp) == 0x000014, "Member 'FKuroCloudCardSetting::Exp' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, HorizonFalloff) == 0x000018, "Member 'FKuroCloudCardSetting::HorizonFalloff' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, HorizonMax) == 0x00001C, "Member 'FKuroCloudCardSetting::HorizonMax' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, HorizonMin) == 0x000020, "Member 'FKuroCloudCardSetting::HorizonMin' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, HorizonOffset) == 0x000024, "Member 'FKuroCloudCardSetting::HorizonOffset' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, LightBrightness) == 0x000028, "Member 'FKuroCloudCardSetting::LightBrightness' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, LitOffset) == 0x00002C, "Member 'FKuroCloudCardSetting::LitOffset' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, Translucency) == 0x000030, "Member 'FKuroCloudCardSetting::Translucency' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, BaseColor) == 0x000034, "Member 'FKuroCloudCardSetting::BaseColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, DarkColor) == 0x000044, "Member 'FKuroCloudCardSetting::DarkColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, Emissive) == 0x000054, "Member 'FKuroCloudCardSetting::Emissive' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, LightColor) == 0x000064, "Member 'FKuroCloudCardSetting::LightColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, Offset) == 0x000074, "Member 'FKuroCloudCardSetting::Offset' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, BillboardCloudsNearFogDensity) == 0x000084, "Member 'FKuroCloudCardSetting::BillboardCloudsNearFogDensity' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, BillboardCloudsFarFogDensity) == 0x000088, "Member 'FKuroCloudCardSetting::BillboardCloudsFarFogDensity' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, BillboardCloudsBeginDistance) == 0x00008C, "Member 'FKuroCloudCardSetting::BillboardCloudsBeginDistance' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, BillboardCloudsFadeDistance) == 0x000090, "Member 'FKuroCloudCardSetting::BillboardCloudsFadeDistance' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMultipleLayerSkySetting
// 0x0024 (0x0024 - 0x0000)
struct FKuroMultipleLayerSkySetting final
{
public:
	uint8                                         bOverride_Layer1BaseColor : 1;                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Layer2BaseColor : 1;                     // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Layer1BaseColor;                                   // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Layer2BaseColor;                                   // 0x0014(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMultipleLayerSkySetting) == 0x000004, "Wrong alignment on FKuroMultipleLayerSkySetting");
static_assert(sizeof(FKuroMultipleLayerSkySetting) == 0x000024, "Wrong size on FKuroMultipleLayerSkySetting");
static_assert(offsetof(FKuroMultipleLayerSkySetting, Layer1BaseColor) == 0x000004, "Member 'FKuroMultipleLayerSkySetting::Layer1BaseColor' has a wrong offset!");
static_assert(offsetof(FKuroMultipleLayerSkySetting, Layer2BaseColor) == 0x000014, "Member 'FKuroMultipleLayerSkySetting::Layer2BaseColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMilkyWaySetting
// 0x0088 (0x0088 - 0x0000)
struct FKuroMilkyWaySetting final
{
public:
	uint8                                         bOverride_MilkWayTexture : 1;                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MilkWayStarTexture : 1;                  // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DisortionTexture : 1;                    // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MilkyWayTint : 1;                        // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MilkyWayBrightness : 1;                  // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MilkyWayUV : 1;                          // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarTint : 1;                            // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarBrightness : 1;                      // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarUV : 1;                              // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DisortionStrength : 1;                   // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DisortionUV : 1;                         // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MilkyWayPosition : 1;                    // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MilkWayTexture;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MilkWayStarTexture;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DisortionTexture;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MilkyWayTint;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MilkyWayBrightness;                                // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MilkyWayUV;                                        // 0x0034(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StarTint;                                          // 0x0044(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarBrightness;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StarUV;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisortionStrength;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DisortionUV;                                       // 0x006C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MilkyWayPosition;                                  // 0x007C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMilkyWaySetting) == 0x000008, "Wrong alignment on FKuroMilkyWaySetting");
static_assert(sizeof(FKuroMilkyWaySetting) == 0x000088, "Wrong size on FKuroMilkyWaySetting");
static_assert(offsetof(FKuroMilkyWaySetting, MilkWayTexture) == 0x000008, "Member 'FKuroMilkyWaySetting::MilkWayTexture' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, MilkWayStarTexture) == 0x000010, "Member 'FKuroMilkyWaySetting::MilkWayStarTexture' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, DisortionTexture) == 0x000018, "Member 'FKuroMilkyWaySetting::DisortionTexture' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, MilkyWayTint) == 0x000020, "Member 'FKuroMilkyWaySetting::MilkyWayTint' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, MilkyWayBrightness) == 0x000030, "Member 'FKuroMilkyWaySetting::MilkyWayBrightness' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, MilkyWayUV) == 0x000034, "Member 'FKuroMilkyWaySetting::MilkyWayUV' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, StarTint) == 0x000044, "Member 'FKuroMilkyWaySetting::StarTint' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, StarBrightness) == 0x000054, "Member 'FKuroMilkyWaySetting::StarBrightness' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, StarUV) == 0x000058, "Member 'FKuroMilkyWaySetting::StarUV' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, DisortionStrength) == 0x000068, "Member 'FKuroMilkyWaySetting::DisortionStrength' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, DisortionUV) == 0x00006C, "Member 'FKuroMilkyWaySetting::DisortionUV' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, MilkyWayPosition) == 0x00007C, "Member 'FKuroMilkyWaySetting::MilkyWayPosition' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.GIClusteredStuffSetting
// 0x0030 (0x0030 - 0x0000)
struct FGIClusteredStuffSetting final
{
public:
	uint8                                         bOverride_ClusteredStuffAssets : 1;                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EKuroClusteredStuffBlendMode                  BlendMode;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClusteredStuffDataAsset*>       ClusteredStuffAssets;                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bOverride_AutoGrassEffectData : 1;                 // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoGrassDensity : 1;                    // 0x0018(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClusteredStuffDataAsset*               AutoGrassEffectData;                               // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoGrassDensity;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGIClusteredStuffSetting) == 0x000008, "Wrong alignment on FGIClusteredStuffSetting");
static_assert(sizeof(FGIClusteredStuffSetting) == 0x000030, "Wrong size on FGIClusteredStuffSetting");
static_assert(offsetof(FGIClusteredStuffSetting, BlendMode) == 0x000004, "Member 'FGIClusteredStuffSetting::BlendMode' has a wrong offset!");
static_assert(offsetof(FGIClusteredStuffSetting, ClusteredStuffAssets) == 0x000008, "Member 'FGIClusteredStuffSetting::ClusteredStuffAssets' has a wrong offset!");
static_assert(offsetof(FGIClusteredStuffSetting, AutoGrassEffectData) == 0x000020, "Member 'FGIClusteredStuffSetting::AutoGrassEffectData' has a wrong offset!");
static_assert(offsetof(FGIClusteredStuffSetting, AutoGrassDensity) == 0x000028, "Member 'FGIClusteredStuffSetting::AutoGrassDensity' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroGIMPCSetting
// 0x00B0 (0x00B0 - 0x0000)
struct FKuroGIMPCSetting final
{
public:
	uint8                                         bOverride_FloatParameters : 1;                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      FloatParameters;                                   // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ColorParameters : 1;                     // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FLinearColor>        ColorParameters;                                   // 0x0060(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroGIMPCSetting) == 0x000008, "Wrong alignment on FKuroGIMPCSetting");
static_assert(sizeof(FKuroGIMPCSetting) == 0x0000B0, "Wrong size on FKuroGIMPCSetting");
static_assert(offsetof(FKuroGIMPCSetting, FloatParameters) == 0x000008, "Member 'FKuroGIMPCSetting::FloatParameters' has a wrong offset!");
static_assert(offsetof(FKuroGIMPCSetting, ColorParameters) == 0x000060, "Member 'FKuroGIMPCSetting::ColorParameters' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroPostProcessSetting
// 0x00C0 (0x00C0 - 0x0000)
struct FKuroPostProcessSetting final
{
public:
	uint8                                         bOverride_KuroBloomIntensity : 1;                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LumenKuroBloomIntensityOffset : 1;       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomThreshold : 1;                  // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomStreakIntensity : 1;            // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomStreakThreshold : 1;            // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomStreakLength : 1;               // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomStreakMipLevel : 1;             // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomStreakRatio : 1;                // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomStreakOrientation : 1;          // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGradingIntensity : 1;               // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGradingLUT : 1;                     // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureDayBias : 1;                 // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureNightBias : 1;               // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LumenAutoExposureDayBias : 1;            // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LumenAutoExposureNightBias : 1;          // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_1_7 : 1;                                    // 0x0001(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverride_KuroVolumetricLightIntensity : 1;        // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroVolumetricLightColor : 1;            // 0x0004(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroVolumetricLightPhaseG : 1;           // 0x0004(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroVolumetricLightMaxDistance : 1;      // 0x0004(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_4_4 : 4;                                    // 0x0004(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverride_SSFSIntensity : 1;                       // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SSFSRadius : 1;                          // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SSFSLuminanceWeighting : 1;              // 0x0008(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SSFSVolumetricFogILSIntensity : 1;       // 0x0008(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalExposureHighlightContrastScale : 1; // 0x0008(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalExposureShadowContrastScale : 1;    // 0x0008(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalExposureHighlightThreshold : 1;     // 0x0008(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalExposureShadowThreshold : 1;        // 0x0008(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LumenLocalExposureHighlightContrastScale : 1; // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LumenLocalExposureShadowContrastScale : 1; // 0x0009(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LumenLocalExposureHighlightThreshold : 1; // 0x0009(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LumenLocalExposureShadowThreshold : 1;   // 0x0009(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScreenLeakIntensity : 1;                 // 0x0009(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScreenLeakThreshold : 1;                 // 0x0009(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScreenLeakDistance : 1;                  // 0x0009(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScreenLeakSkyBloomCompensation : 1;      // 0x0009(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScreenLeakTexture : 1;                   // 0x000A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScreenLeakTextureIntensity : 1;          // 0x000A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScreenLeakRange : 1;                     // 0x000A(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KuroBloomIntensity;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenKuroBloomIntensityOffset;                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomThreshold;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomStreakIntensity;                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomStreakThreshold;                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomStreakLength;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomStreakMipLevel;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomStreakRatio;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomStreakOrientation;                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorGradingIntensity;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ColorGradingLUT;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureDayBias;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureNightBias;                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenAutoExposureDayBias;                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenAutoExposureNightBias;                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroVolumetricLightIntensity;                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KuroVolumetricLightColor;                          // 0x0054(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroVolumetricLightPhaseG;                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroVolumetricLightMaxDistance;                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SSFSIntensity;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SSFSRadius;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SSFSLuminanceWeighting;                            // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SSFSVolumetricFogILSIntensity;                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureHighlightContrastScale;               // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureShadowContrastScale;                  // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureHighlightThreshold;                   // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureShadowThreshold;                      // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenLocalExposureHighlightContrastScale;          // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenLocalExposureShadowContrastScale;             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenLocalExposureHighlightThreshold;              // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenLocalExposureShadowThreshold;                 // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenLeakIntensity;                               // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenLeakThreshold;                               // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenLeakDistance;                                // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenLeakSkyBloomCompensation;                    // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ScreenLeakTexture;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenLeakTextureIntensity;                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenLeakRange;                                   // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroPostProcessSetting) == 0x000008, "Wrong alignment on FKuroPostProcessSetting");
static_assert(sizeof(FKuroPostProcessSetting) == 0x0000C0, "Wrong size on FKuroPostProcessSetting");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomIntensity) == 0x00000C, "Member 'FKuroPostProcessSetting::KuroBloomIntensity' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, LumenKuroBloomIntensityOffset) == 0x000010, "Member 'FKuroPostProcessSetting::LumenKuroBloomIntensityOffset' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomThreshold) == 0x000014, "Member 'FKuroPostProcessSetting::KuroBloomThreshold' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomStreakIntensity) == 0x000018, "Member 'FKuroPostProcessSetting::KuroBloomStreakIntensity' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomStreakThreshold) == 0x00001C, "Member 'FKuroPostProcessSetting::KuroBloomStreakThreshold' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomStreakLength) == 0x000020, "Member 'FKuroPostProcessSetting::KuroBloomStreakLength' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomStreakMipLevel) == 0x000024, "Member 'FKuroPostProcessSetting::KuroBloomStreakMipLevel' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomStreakRatio) == 0x000028, "Member 'FKuroPostProcessSetting::KuroBloomStreakRatio' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomStreakOrientation) == 0x00002C, "Member 'FKuroPostProcessSetting::KuroBloomStreakOrientation' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, ColorGradingIntensity) == 0x000030, "Member 'FKuroPostProcessSetting::ColorGradingIntensity' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, ColorGradingLUT) == 0x000038, "Member 'FKuroPostProcessSetting::ColorGradingLUT' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, AutoExposureDayBias) == 0x000040, "Member 'FKuroPostProcessSetting::AutoExposureDayBias' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, AutoExposureNightBias) == 0x000044, "Member 'FKuroPostProcessSetting::AutoExposureNightBias' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, LumenAutoExposureDayBias) == 0x000048, "Member 'FKuroPostProcessSetting::LumenAutoExposureDayBias' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, LumenAutoExposureNightBias) == 0x00004C, "Member 'FKuroPostProcessSetting::LumenAutoExposureNightBias' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroVolumetricLightIntensity) == 0x000050, "Member 'FKuroPostProcessSetting::KuroVolumetricLightIntensity' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroVolumetricLightColor) == 0x000054, "Member 'FKuroPostProcessSetting::KuroVolumetricLightColor' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroVolumetricLightPhaseG) == 0x000064, "Member 'FKuroPostProcessSetting::KuroVolumetricLightPhaseG' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroVolumetricLightMaxDistance) == 0x000068, "Member 'FKuroPostProcessSetting::KuroVolumetricLightMaxDistance' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, SSFSIntensity) == 0x00006C, "Member 'FKuroPostProcessSetting::SSFSIntensity' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, SSFSRadius) == 0x000070, "Member 'FKuroPostProcessSetting::SSFSRadius' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, SSFSLuminanceWeighting) == 0x000074, "Member 'FKuroPostProcessSetting::SSFSLuminanceWeighting' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, SSFSVolumetricFogILSIntensity) == 0x000078, "Member 'FKuroPostProcessSetting::SSFSVolumetricFogILSIntensity' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, LocalExposureHighlightContrastScale) == 0x00007C, "Member 'FKuroPostProcessSetting::LocalExposureHighlightContrastScale' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, LocalExposureShadowContrastScale) == 0x000080, "Member 'FKuroPostProcessSetting::LocalExposureShadowContrastScale' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, LocalExposureHighlightThreshold) == 0x000084, "Member 'FKuroPostProcessSetting::LocalExposureHighlightThreshold' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, LocalExposureShadowThreshold) == 0x000088, "Member 'FKuroPostProcessSetting::LocalExposureShadowThreshold' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, LumenLocalExposureHighlightContrastScale) == 0x00008C, "Member 'FKuroPostProcessSetting::LumenLocalExposureHighlightContrastScale' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, LumenLocalExposureShadowContrastScale) == 0x000090, "Member 'FKuroPostProcessSetting::LumenLocalExposureShadowContrastScale' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, LumenLocalExposureHighlightThreshold) == 0x000094, "Member 'FKuroPostProcessSetting::LumenLocalExposureHighlightThreshold' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, LumenLocalExposureShadowThreshold) == 0x000098, "Member 'FKuroPostProcessSetting::LumenLocalExposureShadowThreshold' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, ScreenLeakIntensity) == 0x00009C, "Member 'FKuroPostProcessSetting::ScreenLeakIntensity' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, ScreenLeakThreshold) == 0x0000A0, "Member 'FKuroPostProcessSetting::ScreenLeakThreshold' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, ScreenLeakDistance) == 0x0000A4, "Member 'FKuroPostProcessSetting::ScreenLeakDistance' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, ScreenLeakSkyBloomCompensation) == 0x0000A8, "Member 'FKuroPostProcessSetting::ScreenLeakSkyBloomCompensation' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, ScreenLeakTexture) == 0x0000B0, "Member 'FKuroPostProcessSetting::ScreenLeakTexture' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, ScreenLeakTextureIntensity) == 0x0000B8, "Member 'FKuroPostProcessSetting::ScreenLeakTextureIntensity' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, ScreenLeakRange) == 0x0000BC, "Member 'FKuroPostProcessSetting::ScreenLeakRange' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.GlobalLightSetting
// 0x0010 (0x0010 - 0x0000)
struct FGlobalLightSetting final
{
public:
	uint8                                         bOverride_GlobalLightIntensity : 1;                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_0_1 : 7;                                    // 0x0000(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableGlobalLightControl : 1;                     // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlobalLightIntensity;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableGlobalEmssiveDay : 1;                       // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableGlobalEmssiveNight : 1;                     // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGlobalLightSetting) == 0x000004, "Wrong alignment on FGlobalLightSetting");
static_assert(sizeof(FGlobalLightSetting) == 0x000010, "Wrong size on FGlobalLightSetting");
static_assert(offsetof(FGlobalLightSetting, GlobalLightIntensity) == 0x000008, "Member 'FGlobalLightSetting::GlobalLightIntensity' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.LumenGISettings
// 0x001C (0x001C - 0x0000)
struct FLumenGISettings final
{
public:
	uint8                                         bOverride_LumenDirectionalLightColorSaturation : 1; // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LumenDirectionalLightColorValueMut : 1;  // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LumenSkyLightColorSaturation : 1;        // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LumenSkyLightColorValueMut : 1;          // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LumenDirectionalIndirectLightingIntensity : 1; // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LumenSkylightLeaking : 1;                // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LumenDirectionalLightColorSaturation;              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenDirectionalLightColorValueMut;                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenSkyLightColorSaturation;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenSkyLightColorValueMut;                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenDirectionalIndirectLightingIntensity;         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenSkylightLeaking;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLumenGISettings) == 0x000004, "Wrong alignment on FLumenGISettings");
static_assert(sizeof(FLumenGISettings) == 0x00001C, "Wrong size on FLumenGISettings");
static_assert(offsetof(FLumenGISettings, LumenDirectionalLightColorSaturation) == 0x000004, "Member 'FLumenGISettings::LumenDirectionalLightColorSaturation' has a wrong offset!");
static_assert(offsetof(FLumenGISettings, LumenDirectionalLightColorValueMut) == 0x000008, "Member 'FLumenGISettings::LumenDirectionalLightColorValueMut' has a wrong offset!");
static_assert(offsetof(FLumenGISettings, LumenSkyLightColorSaturation) == 0x00000C, "Member 'FLumenGISettings::LumenSkyLightColorSaturation' has a wrong offset!");
static_assert(offsetof(FLumenGISettings, LumenSkyLightColorValueMut) == 0x000010, "Member 'FLumenGISettings::LumenSkyLightColorValueMut' has a wrong offset!");
static_assert(offsetof(FLumenGISettings, LumenDirectionalIndirectLightingIntensity) == 0x000014, "Member 'FLumenGISettings::LumenDirectionalIndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FLumenGISettings, LumenSkylightLeaking) == 0x000018, "Member 'FLumenGISettings::LumenSkylightLeaking' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.RayTracingSettings
// 0x001C (0x001C - 0x0000)
struct FRayTracingSettings final
{
public:
	struct FLumenGISettings                       LumenGISettings;                                   // 0x0000(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRayTracingSettings) == 0x000004, "Wrong alignment on FRayTracingSettings");
static_assert(sizeof(FRayTracingSettings) == 0x00001C, "Wrong size on FRayTracingSettings");
static_assert(offsetof(FRayTracingSettings, LumenGISettings) == 0x000000, "Member 'FRayTracingSettings::LumenGISettings' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroGISetting
// 0x0EF0 (0x0EF0 - 0x0000)
struct FKuroGISetting final
{
public:
	struct FMainLightSetting                      MainLightSetting;                                  // 0x0000(0x006C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkyLightSetting                       SkyLightSetting;                                   // 0x0070(0x0150)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FShadowTintSetting                     ShadowTintSetting;                                 // 0x01C0(0x0018)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterSetting                      CharacterSetting;                                  // 0x01D8(0x005C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroHeightFogSetting                  KuroFogSetting;                                    // 0x0238(0x0118)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroEffectFogSetting                  KuroEffectFogSetting;                              // 0x0350(0x0060)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroTreeSetting                       KuroTreeSetting;                                   // 0x03B0(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E8[0x8];                                      // 0x03E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVolumetricFogSetting                  VolumetricFogSetting;                              // 0x03F0(0x0080)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyAtmosphereSetting                  SkyAtmoSphereSetting;                              // 0x0470(0x0010)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroOceanSetting                      FKuroOceanSetting;                                 // 0x0480(0x0080)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroSkyboxSetting                     KuroSkybox;                                        // 0x0500(0x0108)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroLensFlareSetting                  LensFlareSetting;                                  // 0x0608(0x0030)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FWindSetting                           WindSetting;                                       // 0x0638(0x0028)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FStarSetting                           StarSetting;                                       // 0x0660(0x0070)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroCloudCardSetting                  CloudCardSetting;                                  // 0x06D0(0x0094)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroMultipleLayerSkySetting           MultipleLayerSkySetting;                           // 0x0764(0x0024)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroMilkyWaySetting                   MilkyWaySetting;                                   // 0x0788(0x0088)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FGIMiscSetting                         MiscSetting;                                       // 0x0810(0x0250)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FGIClusteredStuffSetting               ClusteredStuffSetting;                             // 0x0A60(0x0030)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKuroGIMPCSetting                      GIMPCSetting;                                      // 0x0A90(0x00B0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKuroPostProcessSetting                KuroPostProcess;                                   // 0x0B40(0x00C0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGlobalLightSetting                    GlobalLightSetting;                                // 0x0C00(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRayTracingSettings                    RayTracingSettings;                                // 0x0C10(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2C[0x2C4];                                    // 0x0C2C(0x02C4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroGISetting) == 0x000010, "Wrong alignment on FKuroGISetting");
static_assert(sizeof(FKuroGISetting) == 0x000EF0, "Wrong size on FKuroGISetting");
static_assert(offsetof(FKuroGISetting, MainLightSetting) == 0x000000, "Member 'FKuroGISetting::MainLightSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, SkyLightSetting) == 0x000070, "Member 'FKuroGISetting::SkyLightSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, ShadowTintSetting) == 0x0001C0, "Member 'FKuroGISetting::ShadowTintSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, CharacterSetting) == 0x0001D8, "Member 'FKuroGISetting::CharacterSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, KuroFogSetting) == 0x000238, "Member 'FKuroGISetting::KuroFogSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, KuroEffectFogSetting) == 0x000350, "Member 'FKuroGISetting::KuroEffectFogSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, KuroTreeSetting) == 0x0003B0, "Member 'FKuroGISetting::KuroTreeSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, VolumetricFogSetting) == 0x0003F0, "Member 'FKuroGISetting::VolumetricFogSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, SkyAtmoSphereSetting) == 0x000470, "Member 'FKuroGISetting::SkyAtmoSphereSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, FKuroOceanSetting) == 0x000480, "Member 'FKuroGISetting::FKuroOceanSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, KuroSkybox) == 0x000500, "Member 'FKuroGISetting::KuroSkybox' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, LensFlareSetting) == 0x000608, "Member 'FKuroGISetting::LensFlareSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, WindSetting) == 0x000638, "Member 'FKuroGISetting::WindSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, StarSetting) == 0x000660, "Member 'FKuroGISetting::StarSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, CloudCardSetting) == 0x0006D0, "Member 'FKuroGISetting::CloudCardSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, MultipleLayerSkySetting) == 0x000764, "Member 'FKuroGISetting::MultipleLayerSkySetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, MilkyWaySetting) == 0x000788, "Member 'FKuroGISetting::MilkyWaySetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, MiscSetting) == 0x000810, "Member 'FKuroGISetting::MiscSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, ClusteredStuffSetting) == 0x000A60, "Member 'FKuroGISetting::ClusteredStuffSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, GIMPCSetting) == 0x000A90, "Member 'FKuroGISetting::GIMPCSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, KuroPostProcess) == 0x000B40, "Member 'FKuroGISetting::KuroPostProcess' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, GlobalLightSetting) == 0x000C00, "Member 'FKuroGISetting::GlobalLightSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, RayTracingSettings) == 0x000C10, "Member 'FKuroGISetting::RayTracingSettings' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_TextureSample
// 0x1698 (0x1698 - 0x0000)
struct FKuroMaterialControllerParam_TextureSample final
{
public:
	class UTexture2D*                             MaskTexture;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup           TextureScaleAndOffset;                             // 0x0008(0x0660)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup           TextureSpeed;                                      // 0x0668(0x0660)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup           TextureColorTint;                                  // 0x0CC8(0x0660)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveFloatGroup           Rotation;                                          // 0x1328(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUseAlphaToMask;                                   // 0x14D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D9[0x7];                                     // 0x14D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroMaterialCurveFloatGroup           TextureMaskRange;                                  // 0x14E0(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	KuroRenderingRuntimeBPPlugin::ECharacterControllerUVSwitch UvSelection;                          // 0x1690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1691[0x7];                                     // 0x1691(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroMaterialControllerParam_TextureSample) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_TextureSample");
static_assert(sizeof(FKuroMaterialControllerParam_TextureSample) == 0x001698, "Wrong size on FKuroMaterialControllerParam_TextureSample");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSample, MaskTexture) == 0x000000, "Member 'FKuroMaterialControllerParam_TextureSample::MaskTexture' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSample, TextureScaleAndOffset) == 0x000008, "Member 'FKuroMaterialControllerParam_TextureSample::TextureScaleAndOffset' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSample, TextureSpeed) == 0x000668, "Member 'FKuroMaterialControllerParam_TextureSample::TextureSpeed' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSample, TextureColorTint) == 0x000CC8, "Member 'FKuroMaterialControllerParam_TextureSample::TextureColorTint' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSample, Rotation) == 0x001328, "Member 'FKuroMaterialControllerParam_TextureSample::Rotation' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSample, bUseAlphaToMask) == 0x0014D8, "Member 'FKuroMaterialControllerParam_TextureSample::bUseAlphaToMask' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSample, TextureMaskRange) == 0x0014E0, "Member 'FKuroMaterialControllerParam_TextureSample::TextureMaskRange' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSample, UvSelection) == 0x001690, "Member 'FKuroMaterialControllerParam_TextureSample::UvSelection' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.CloudCover
// 0x0018 (0x0018 - 0x0000)
struct FCloudCover final
{
public:
	class UMaterialInterface*                     CoverMaterial;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAngle;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudCover) == 0x000008, "Wrong alignment on FCloudCover");
static_assert(sizeof(FCloudCover) == 0x000018, "Wrong size on FCloudCover");
static_assert(offsetof(FCloudCover, CoverMaterial) == 0x000000, "Member 'FCloudCover::CoverMaterial' has a wrong offset!");
static_assert(offsetof(FCloudCover, Mesh) == 0x000008, "Member 'FCloudCover::Mesh' has a wrong offset!");
static_assert(offsetof(FCloudCover, CloudAngle) == 0x000010, "Member 'FCloudCover::CloudAngle' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_MotionOffset
// 0x01B8 (0x01B8 - 0x0000)
struct FKuroMaterialControllerParam_MotionOffset final
{
public:
	float                                         MotionAffectVertexRange;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotionOffsetLength;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveFloatGroup           MotionNoiseSpeed;                                  // 0x0008(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_MotionOffset) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_MotionOffset");
static_assert(sizeof(FKuroMaterialControllerParam_MotionOffset) == 0x0001B8, "Wrong size on FKuroMaterialControllerParam_MotionOffset");
static_assert(offsetof(FKuroMaterialControllerParam_MotionOffset, MotionAffectVertexRange) == 0x000000, "Member 'FKuroMaterialControllerParam_MotionOffset::MotionAffectVertexRange' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_MotionOffset, MotionOffsetLength) == 0x000004, "Member 'FKuroMaterialControllerParam_MotionOffset::MotionOffsetLength' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_MotionOffset, MotionNoiseSpeed) == 0x000008, "Member 'FKuroMaterialControllerParam_MotionOffset::MotionNoiseSpeed' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.MountainParameters
// 0x0001 (0x0001 - 0x0000)
struct FMountainParameters final
{
public:
	bool                                          bHasMountain;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountainParameters) == 0x000001, "Wrong alignment on FMountainParameters");
static_assert(sizeof(FMountainParameters) == 0x000001, "Wrong size on FMountainParameters");
static_assert(offsetof(FMountainParameters, bHasMountain) == 0x000000, "Member 'FMountainParameters::bHasMountain' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.BookPavingDataStruct
// 0x00C0 (0x00C0 - 0x0000)
struct FBookPavingDataStruct final
{
public:
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransformDouble                       TransformOld;                                      // 0x0010(0x0040)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransformDouble                       TransformNew;                                      // 0x0050(0x0040)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          PageTurning;                                       // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Tick_Add;                                          // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds_Add;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PavingState;                                       // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PageTimes;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PavingTime;                                        // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBookPavingDataStruct) == 0x000010, "Wrong alignment on FBookPavingDataStruct");
static_assert(sizeof(FBookPavingDataStruct) == 0x0000C0, "Wrong size on FBookPavingDataStruct");
static_assert(offsetof(FBookPavingDataStruct, MeshComponent) == 0x000000, "Member 'FBookPavingDataStruct::MeshComponent' has a wrong offset!");
static_assert(offsetof(FBookPavingDataStruct, TransformOld) == 0x000010, "Member 'FBookPavingDataStruct::TransformOld' has a wrong offset!");
static_assert(offsetof(FBookPavingDataStruct, TransformNew) == 0x000050, "Member 'FBookPavingDataStruct::TransformNew' has a wrong offset!");
static_assert(offsetof(FBookPavingDataStruct, PageTurning) == 0x000090, "Member 'FBookPavingDataStruct::PageTurning' has a wrong offset!");
static_assert(offsetof(FBookPavingDataStruct, Tick_Add) == 0x000094, "Member 'FBookPavingDataStruct::Tick_Add' has a wrong offset!");
static_assert(offsetof(FBookPavingDataStruct, DeltaSeconds_Add) == 0x000098, "Member 'FBookPavingDataStruct::DeltaSeconds_Add' has a wrong offset!");
static_assert(offsetof(FBookPavingDataStruct, PavingState) == 0x00009C, "Member 'FBookPavingDataStruct::PavingState' has a wrong offset!");
static_assert(offsetof(FBookPavingDataStruct, PageTimes) == 0x0000A0, "Member 'FBookPavingDataStruct::PageTimes' has a wrong offset!");
static_assert(offsetof(FBookPavingDataStruct, PavingTime) == 0x0000B0, "Member 'FBookPavingDataStruct::PavingTime' has a wrong offset!");
static_assert(offsetof(FBookPavingDataStruct, Speed) == 0x0000B4, "Member 'FBookPavingDataStruct::Speed' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.WPCoord
// 0x0008 (0x0008 - 0x0000)
struct FWPCoord final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWPCoord) == 0x000004, "Wrong alignment on FWPCoord");
static_assert(sizeof(FWPCoord) == 0x000008, "Wrong size on FWPCoord");
static_assert(offsetof(FWPCoord, X) == 0x000000, "Member 'FWPCoord::X' has a wrong offset!");
static_assert(offsetof(FWPCoord, Y) == 0x000004, "Member 'FWPCoord::Y' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroDestructiblePieceInfo
// 0x0050 (0x0050 - 0x0000)
struct FKuroDestructiblePieceInfo final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialTransform;                                  // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   RelativeBoneName;                                  // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroDestructiblePieceInfo) == 0x000010, "Wrong alignment on FKuroDestructiblePieceInfo");
static_assert(sizeof(FKuroDestructiblePieceInfo) == 0x000050, "Wrong size on FKuroDestructiblePieceInfo");
static_assert(offsetof(FKuroDestructiblePieceInfo, StaticMesh) == 0x000000, "Member 'FKuroDestructiblePieceInfo::StaticMesh' has a wrong offset!");
static_assert(offsetof(FKuroDestructiblePieceInfo, InitialTransform) == 0x000010, "Member 'FKuroDestructiblePieceInfo::InitialTransform' has a wrong offset!");
static_assert(offsetof(FKuroDestructiblePieceInfo, RelativeBoneName) == 0x000040, "Member 'FKuroDestructiblePieceInfo::RelativeBoneName' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCharMaterialControllerColorGroup
// 0x0660 (0x0660 - 0x0000)
struct FKuroCharMaterialControllerColorGroup final
{
public:
	struct FKuroCurveLinearColor                  Start;                                             // 0x0000(0x0220)(Edit, NativeAccessSpecifierPublic)
	struct FKuroCurveLinearColor                  Loop;                                              // 0x0220(0x0220)(Edit, NativeAccessSpecifierPublic)
	struct FKuroCurveLinearColor                  End;                                               // 0x0440(0x0220)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCharMaterialControllerColorGroup) == 0x000008, "Wrong alignment on FKuroCharMaterialControllerColorGroup");
static_assert(sizeof(FKuroCharMaterialControllerColorGroup) == 0x000660, "Wrong size on FKuroCharMaterialControllerColorGroup");
static_assert(offsetof(FKuroCharMaterialControllerColorGroup, Start) == 0x000000, "Member 'FKuroCharMaterialControllerColorGroup::Start' has a wrong offset!");
static_assert(offsetof(FKuroCharMaterialControllerColorGroup, Loop) == 0x000220, "Member 'FKuroCharMaterialControllerColorGroup::Loop' has a wrong offset!");
static_assert(offsetof(FKuroCharMaterialControllerColorGroup, End) == 0x000440, "Member 'FKuroCharMaterialControllerColorGroup::End' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCloudTopData
// 0x0040 (0x0040 - 0x0000)
struct FKuroCloudTopData final
{
public:
	struct FVector                                Rotator;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureIdx;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaControl;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaMax;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaMin;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStayTime;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisappearTime;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCloudTopData) == 0x000004, "Wrong alignment on FKuroCloudTopData");
static_assert(sizeof(FKuroCloudTopData) == 0x000040, "Wrong size on FKuroCloudTopData");
static_assert(offsetof(FKuroCloudTopData, Rotator) == 0x000000, "Member 'FKuroCloudTopData::Rotator' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, Offset) == 0x00000C, "Member 'FKuroCloudTopData::Offset' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, TextureIdx) == 0x000018, "Member 'FKuroCloudTopData::TextureIdx' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, Scale) == 0x00001C, "Member 'FKuroCloudTopData::Scale' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, AlphaControl) == 0x000020, "Member 'FKuroCloudTopData::AlphaControl' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, AlphaMax) == 0x000024, "Member 'FKuroCloudTopData::AlphaMax' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, AlphaMin) == 0x000028, "Member 'FKuroCloudTopData::AlphaMin' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, Brightness) == 0x00002C, "Member 'FKuroCloudTopData::Brightness' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, FadeOutTime) == 0x000030, "Member 'FKuroCloudTopData::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, FadeInTime) == 0x000034, "Member 'FKuroCloudTopData::FadeInTime' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, FullStayTime) == 0x000038, "Member 'FKuroCloudTopData::FullStayTime' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, DisappearTime) == 0x00003C, "Member 'FKuroCloudTopData::DisappearTime' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCloudLayerSetting
// 0x00D0 (0x00D0 - 0x0000)
struct FKuroCloudLayerSetting final
{
public:
	uint8                                         bOverride_CloudsDensity : 1;                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsBlend : 1;                         // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsBloom : 1;                         // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_UVScale : 1;                             // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WindForceScale : 1;                      // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BaseLayerSize : 1;                       // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondLayerSize : 1;                     // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudLayer1 : 1;                         // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudLayer2 : 1;                         // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsHardness : 1;                      // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsTranslucent : 1;                   // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsVertexDensity : 1;                 // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsFluffy : 1;                        // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsDistotion : 1;                     // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsScattering : 1;                    // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsAmbient : 1;                       // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsShadowSize : 1;                    // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsShadowSoft : 1;                    // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsUpperBrightness : 1;               // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsLowerBrightness : 1;               // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsUpperColor : 1;                    // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsLowerColor : 1;                    // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsBackgroundColor : 1;               // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsBackground : 1;                    // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsHorizonAlpha : 1;                  // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WindDynamic : 1;                         // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WindDispersing : 1;                      // 0x0003(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondLayerAlpha : 1;                    // 0x0003(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondLayerColor : 1;                    // 0x0003(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondLayerScale : 1;                    // 0x0003(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondLayerHardness : 1;                 // 0x0003(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondLayerWind : 1;                     // 0x0003(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	float                                         CloudsDensity;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsBlend;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsBloom;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UVScale;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindForceScale;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               BaseLayerSize;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               SecondLayerSize;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CloudLayer1;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CloudLayer2;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsHardness;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsTranslucent;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsVertexDensity;                               // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsFluffy;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsDistotion;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsScattering;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsAmbient;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsShadowSize;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsShadowSoft;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsUpperBrightness;                             // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsLowerBrightness;                             // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudsUpperColor;                                  // 0x007C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudsLowerColor;                                  // 0x008C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudsBackgroundColor;                             // 0x009C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsBackground;                                  // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsHorizonAlpha;                                // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDynamic;                                       // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDispersing;                                    // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondLayerAlpha;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondLayerColor;                                  // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondLayerScale;                                  // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondLayerHardness;                               // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondLayerWind;                                   // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCloudLayerSetting) == 0x000010, "Wrong alignment on FKuroCloudLayerSetting");
static_assert(sizeof(FKuroCloudLayerSetting) == 0x0000D0, "Wrong size on FKuroCloudLayerSetting");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsDensity) == 0x000004, "Member 'FKuroCloudLayerSetting::CloudsDensity' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsBlend) == 0x000008, "Member 'FKuroCloudLayerSetting::CloudsBlend' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsBloom) == 0x00000C, "Member 'FKuroCloudLayerSetting::CloudsBloom' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, UVScale) == 0x000010, "Member 'FKuroCloudLayerSetting::UVScale' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, WindForceScale) == 0x000014, "Member 'FKuroCloudLayerSetting::WindForceScale' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, BaseLayerSize) == 0x000020, "Member 'FKuroCloudLayerSetting::BaseLayerSize' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, SecondLayerSize) == 0x000030, "Member 'FKuroCloudLayerSetting::SecondLayerSize' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudLayer1) == 0x000040, "Member 'FKuroCloudLayerSetting::CloudLayer1' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudLayer2) == 0x000048, "Member 'FKuroCloudLayerSetting::CloudLayer2' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsHardness) == 0x000050, "Member 'FKuroCloudLayerSetting::CloudsHardness' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsTranslucent) == 0x000054, "Member 'FKuroCloudLayerSetting::CloudsTranslucent' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsVertexDensity) == 0x000058, "Member 'FKuroCloudLayerSetting::CloudsVertexDensity' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsFluffy) == 0x00005C, "Member 'FKuroCloudLayerSetting::CloudsFluffy' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsDistotion) == 0x000060, "Member 'FKuroCloudLayerSetting::CloudsDistotion' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsScattering) == 0x000064, "Member 'FKuroCloudLayerSetting::CloudsScattering' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsAmbient) == 0x000068, "Member 'FKuroCloudLayerSetting::CloudsAmbient' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsShadowSize) == 0x00006C, "Member 'FKuroCloudLayerSetting::CloudsShadowSize' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsShadowSoft) == 0x000070, "Member 'FKuroCloudLayerSetting::CloudsShadowSoft' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsUpperBrightness) == 0x000074, "Member 'FKuroCloudLayerSetting::CloudsUpperBrightness' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsLowerBrightness) == 0x000078, "Member 'FKuroCloudLayerSetting::CloudsLowerBrightness' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsUpperColor) == 0x00007C, "Member 'FKuroCloudLayerSetting::CloudsUpperColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsLowerColor) == 0x00008C, "Member 'FKuroCloudLayerSetting::CloudsLowerColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsBackgroundColor) == 0x00009C, "Member 'FKuroCloudLayerSetting::CloudsBackgroundColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsBackground) == 0x0000AC, "Member 'FKuroCloudLayerSetting::CloudsBackground' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsHorizonAlpha) == 0x0000B0, "Member 'FKuroCloudLayerSetting::CloudsHorizonAlpha' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, WindDynamic) == 0x0000B4, "Member 'FKuroCloudLayerSetting::WindDynamic' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, WindDispersing) == 0x0000B8, "Member 'FKuroCloudLayerSetting::WindDispersing' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, SecondLayerAlpha) == 0x0000BC, "Member 'FKuroCloudLayerSetting::SecondLayerAlpha' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, SecondLayerColor) == 0x0000C0, "Member 'FKuroCloudLayerSetting::SecondLayerColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, SecondLayerScale) == 0x0000C4, "Member 'FKuroCloudLayerSetting::SecondLayerScale' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, SecondLayerHardness) == 0x0000C8, "Member 'FKuroCloudLayerSetting::SecondLayerHardness' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, SecondLayerWind) == 0x0000CC, "Member 'FKuroCloudLayerSetting::SecondLayerWind' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.POICloudParameters
// 0x0040 (0x0040 - 0x0000)
struct FPOICloudParameters final
{
public:
	bool                                          bYesUV1NoUV2;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloudRotation;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSDF;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Mask;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               NoiseMap;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UVTiling;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAngle;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudSpeed;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseSpeed;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseStrength;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseTilling;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      OverrideMaterial;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPOICloudParameters) == 0x000008, "Wrong alignment on FPOICloudParameters");
static_assert(sizeof(FPOICloudParameters) == 0x000040, "Wrong size on FPOICloudParameters");
static_assert(offsetof(FPOICloudParameters, bYesUV1NoUV2) == 0x000000, "Member 'FPOICloudParameters::bYesUV1NoUV2' has a wrong offset!");
static_assert(offsetof(FPOICloudParameters, bCloudRotation) == 0x000001, "Member 'FPOICloudParameters::bCloudRotation' has a wrong offset!");
static_assert(offsetof(FPOICloudParameters, bSDF) == 0x000002, "Member 'FPOICloudParameters::bSDF' has a wrong offset!");
static_assert(offsetof(FPOICloudParameters, Mask) == 0x000008, "Member 'FPOICloudParameters::Mask' has a wrong offset!");
static_assert(offsetof(FPOICloudParameters, NoiseMap) == 0x000010, "Member 'FPOICloudParameters::NoiseMap' has a wrong offset!");
static_assert(offsetof(FPOICloudParameters, Mesh) == 0x000018, "Member 'FPOICloudParameters::Mesh' has a wrong offset!");
static_assert(offsetof(FPOICloudParameters, UVTiling) == 0x000020, "Member 'FPOICloudParameters::UVTiling' has a wrong offset!");
static_assert(offsetof(FPOICloudParameters, CloudAngle) == 0x000024, "Member 'FPOICloudParameters::CloudAngle' has a wrong offset!");
static_assert(offsetof(FPOICloudParameters, CloudSpeed) == 0x000028, "Member 'FPOICloudParameters::CloudSpeed' has a wrong offset!");
static_assert(offsetof(FPOICloudParameters, NoiseSpeed) == 0x00002C, "Member 'FPOICloudParameters::NoiseSpeed' has a wrong offset!");
static_assert(offsetof(FPOICloudParameters, NoiseStrength) == 0x000030, "Member 'FPOICloudParameters::NoiseStrength' has a wrong offset!");
static_assert(offsetof(FPOICloudParameters, NoiseTilling) == 0x000034, "Member 'FPOICloudParameters::NoiseTilling' has a wrong offset!");
static_assert(offsetof(FPOICloudParameters, OverrideMaterial) == 0x000038, "Member 'FPOICloudParameters::OverrideMaterial' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCharMaterialControllerColorParameter
// 0x0230 (0x0230 - 0x0000)
struct FKuroCharMaterialControllerColorParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  ParameterValue;                                    // 0x0010(0x0220)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCharMaterialControllerColorParameter) == 0x000008, "Wrong alignment on FKuroCharMaterialControllerColorParameter");
static_assert(sizeof(FKuroCharMaterialControllerColorParameter) == 0x000230, "Wrong size on FKuroCharMaterialControllerColorParameter");
static_assert(offsetof(FKuroCharMaterialControllerColorParameter, ParameterName) == 0x000000, "Member 'FKuroCharMaterialControllerColorParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(FKuroCharMaterialControllerColorParameter, ParameterValue) == 0x000010, "Member 'FKuroCharMaterialControllerColorParameter::ParameterValue' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCharMaterialControllerFloatParameter
// 0x00A0 (0x00A0 - 0x0000)
struct FKuroCharMaterialControllerFloatParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        ParameterValue;                                    // 0x0010(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCharMaterialControllerFloatParameter) == 0x000008, "Wrong alignment on FKuroCharMaterialControllerFloatParameter");
static_assert(sizeof(FKuroCharMaterialControllerFloatParameter) == 0x0000A0, "Wrong size on FKuroCharMaterialControllerFloatParameter");
static_assert(offsetof(FKuroCharMaterialControllerFloatParameter, ParameterName) == 0x000000, "Member 'FKuroCharMaterialControllerFloatParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(FKuroCharMaterialControllerFloatParameter, ParameterValue) == 0x000010, "Member 'FKuroCharMaterialControllerFloatParameter::ParameterValue' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCharMaterialControllerFloatGroup
// 0x01B0 (0x01B0 - 0x0000)
struct FKuroCharMaterialControllerFloatGroup final
{
public:
	struct FKuroCurveFloat                        Start;                                             // 0x0000(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FKuroCurveFloat                        Loop;                                              // 0x0090(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FKuroCurveFloat                        End;                                               // 0x0120(0x0090)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCharMaterialControllerFloatGroup) == 0x000008, "Wrong alignment on FKuroCharMaterialControllerFloatGroup");
static_assert(sizeof(FKuroCharMaterialControllerFloatGroup) == 0x0001B0, "Wrong size on FKuroCharMaterialControllerFloatGroup");
static_assert(offsetof(FKuroCharMaterialControllerFloatGroup, Start) == 0x000000, "Member 'FKuroCharMaterialControllerFloatGroup::Start' has a wrong offset!");
static_assert(offsetof(FKuroCharMaterialControllerFloatGroup, Loop) == 0x000090, "Member 'FKuroCharMaterialControllerFloatGroup::Loop' has a wrong offset!");
static_assert(offsetof(FKuroCharMaterialControllerFloatGroup, End) == 0x000120, "Member 'FKuroCharMaterialControllerFloatGroup::End' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.AnomaliesParameters
// 0x0038 (0x0038 - 0x0000)
struct FAnomaliesParameters final
{
public:
	bool                                          bRotation;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Color;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               NoiseMap;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAngle;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseSpeed;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseStrength;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseTilling;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Luminance;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnomaliesParameters) == 0x000008, "Wrong alignment on FAnomaliesParameters");
static_assert(sizeof(FAnomaliesParameters) == 0x000038, "Wrong size on FAnomaliesParameters");
static_assert(offsetof(FAnomaliesParameters, bRotation) == 0x000000, "Member 'FAnomaliesParameters::bRotation' has a wrong offset!");
static_assert(offsetof(FAnomaliesParameters, Color) == 0x000008, "Member 'FAnomaliesParameters::Color' has a wrong offset!");
static_assert(offsetof(FAnomaliesParameters, NoiseMap) == 0x000010, "Member 'FAnomaliesParameters::NoiseMap' has a wrong offset!");
static_assert(offsetof(FAnomaliesParameters, Mesh) == 0x000018, "Member 'FAnomaliesParameters::Mesh' has a wrong offset!");
static_assert(offsetof(FAnomaliesParameters, CloudAngle) == 0x000020, "Member 'FAnomaliesParameters::CloudAngle' has a wrong offset!");
static_assert(offsetof(FAnomaliesParameters, NoiseSpeed) == 0x000024, "Member 'FAnomaliesParameters::NoiseSpeed' has a wrong offset!");
static_assert(offsetof(FAnomaliesParameters, NoiseStrength) == 0x000028, "Member 'FAnomaliesParameters::NoiseStrength' has a wrong offset!");
static_assert(offsetof(FAnomaliesParameters, NoiseTilling) == 0x00002C, "Member 'FAnomaliesParameters::NoiseTilling' has a wrong offset!");
static_assert(offsetof(FAnomaliesParameters, Luminance) == 0x000030, "Member 'FAnomaliesParameters::Luminance' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.CloudParameters
// 0x00C0 (0x00C0 - 0x0000)
struct FCloudParameters final
{
public:
	bool                                          bYesUV1NoUV2;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloudRotation;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSDF;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Mask;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               NoiseMap;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UVTiling;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAngle;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudSpeed;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseSpeed;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseStrength;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseTilling;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKuroCurveFloat                        SDFTime;                                           // 0x0030(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudParameters) == 0x000008, "Wrong alignment on FCloudParameters");
static_assert(sizeof(FCloudParameters) == 0x0000C0, "Wrong size on FCloudParameters");
static_assert(offsetof(FCloudParameters, bYesUV1NoUV2) == 0x000000, "Member 'FCloudParameters::bYesUV1NoUV2' has a wrong offset!");
static_assert(offsetof(FCloudParameters, bCloudRotation) == 0x000001, "Member 'FCloudParameters::bCloudRotation' has a wrong offset!");
static_assert(offsetof(FCloudParameters, bSDF) == 0x000002, "Member 'FCloudParameters::bSDF' has a wrong offset!");
static_assert(offsetof(FCloudParameters, Mask) == 0x000008, "Member 'FCloudParameters::Mask' has a wrong offset!");
static_assert(offsetof(FCloudParameters, NoiseMap) == 0x000010, "Member 'FCloudParameters::NoiseMap' has a wrong offset!");
static_assert(offsetof(FCloudParameters, UVTiling) == 0x000018, "Member 'FCloudParameters::UVTiling' has a wrong offset!");
static_assert(offsetof(FCloudParameters, CloudAngle) == 0x00001C, "Member 'FCloudParameters::CloudAngle' has a wrong offset!");
static_assert(offsetof(FCloudParameters, CloudSpeed) == 0x000020, "Member 'FCloudParameters::CloudSpeed' has a wrong offset!");
static_assert(offsetof(FCloudParameters, NoiseSpeed) == 0x000024, "Member 'FCloudParameters::NoiseSpeed' has a wrong offset!");
static_assert(offsetof(FCloudParameters, NoiseStrength) == 0x000028, "Member 'FCloudParameters::NoiseStrength' has a wrong offset!");
static_assert(offsetof(FCloudParameters, NoiseTilling) == 0x00002C, "Member 'FCloudParameters::NoiseTilling' has a wrong offset!");
static_assert(offsetof(FCloudParameters, SDFTime) == 0x000030, "Member 'FCloudParameters::SDFTime' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.PostprocessGIDebugInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FPostprocessGIDebugInfo final
{
public:
	TWeakObjectPtr<class AActor>                  OwnerActor;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerActorName;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorFolderPath;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActorLabel;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVolume;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ComponentName;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldPriority;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalBlendWeight;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnbound;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WeatherDAPath;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UKuroWeatherDataAsset>   WeatherDAData;                                     // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TodDAPath;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UKuroTODData>            TodDAData;                                         // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OverridedProperties;                               // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PostProcessMaterialPath;                           // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPostprocessGIDebugInfo) == 0x000008, "Wrong alignment on FPostprocessGIDebugInfo");
static_assert(sizeof(FPostprocessGIDebugInfo) == 0x0000B8, "Wrong size on FPostprocessGIDebugInfo");
static_assert(offsetof(FPostprocessGIDebugInfo, OwnerActor) == 0x000000, "Member 'FPostprocessGIDebugInfo::OwnerActor' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, OwnerActorName) == 0x000008, "Member 'FPostprocessGIDebugInfo::OwnerActorName' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, ActorFolderPath) == 0x000018, "Member 'FPostprocessGIDebugInfo::ActorFolderPath' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, ActorLabel) == 0x000028, "Member 'FPostprocessGIDebugInfo::ActorLabel' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, IsVolume) == 0x000038, "Member 'FPostprocessGIDebugInfo::IsVolume' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, ComponentName) == 0x000040, "Member 'FPostprocessGIDebugInfo::ComponentName' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, Priority) == 0x000050, "Member 'FPostprocessGIDebugInfo::Priority' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, WorldPriority) == 0x000054, "Member 'FPostprocessGIDebugInfo::WorldPriority' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, LocalBlendWeight) == 0x000058, "Member 'FPostprocessGIDebugInfo::LocalBlendWeight' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, BlendWeight) == 0x00005C, "Member 'FPostprocessGIDebugInfo::BlendWeight' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, IsUnbound) == 0x000060, "Member 'FPostprocessGIDebugInfo::IsUnbound' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, WeatherDAPath) == 0x000068, "Member 'FPostprocessGIDebugInfo::WeatherDAPath' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, WeatherDAData) == 0x000078, "Member 'FPostprocessGIDebugInfo::WeatherDAData' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, TodDAPath) == 0x000080, "Member 'FPostprocessGIDebugInfo::TodDAPath' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, TodDAData) == 0x000090, "Member 'FPostprocessGIDebugInfo::TodDAData' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, OverridedProperties) == 0x000098, "Member 'FPostprocessGIDebugInfo::OverridedProperties' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, PostProcessMaterialPath) == 0x0000A8, "Member 'FPostprocessGIDebugInfo::PostProcessMaterialPath' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCloudCircleData
// 0x0048 (0x0048 - 0x0000)
struct FKuroCloudCircleData final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Rotator;                                           // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureIdx;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalOffset;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaControl;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaMax;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaMin;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStayTime;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisappearTime;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCloudCircleData) == 0x000004, "Wrong alignment on FKuroCloudCircleData");
static_assert(sizeof(FKuroCloudCircleData) == 0x000048, "Wrong size on FKuroCloudCircleData");
static_assert(offsetof(FKuroCloudCircleData, Distance) == 0x000000, "Member 'FKuroCloudCircleData::Distance' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, Rotator) == 0x000004, "Member 'FKuroCloudCircleData::Rotator' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, TextureIdx) == 0x000010, "Member 'FKuroCloudCircleData::TextureIdx' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, HorizontalOffset) == 0x000014, "Member 'FKuroCloudCircleData::HorizontalOffset' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, Scale) == 0x000018, "Member 'FKuroCloudCircleData::Scale' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, Offset) == 0x00001C, "Member 'FKuroCloudCircleData::Offset' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, AlphaControl) == 0x000028, "Member 'FKuroCloudCircleData::AlphaControl' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, AlphaMax) == 0x00002C, "Member 'FKuroCloudCircleData::AlphaMax' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, AlphaMin) == 0x000030, "Member 'FKuroCloudCircleData::AlphaMin' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, Brightness) == 0x000034, "Member 'FKuroCloudCircleData::Brightness' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, FadeOutTime) == 0x000038, "Member 'FKuroCloudCircleData::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, FadeInTime) == 0x00003C, "Member 'FKuroCloudCircleData::FadeInTime' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, FullStayTime) == 0x000040, "Member 'FKuroCloudCircleData::FullStayTime' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, DisappearTime) == 0x000044, "Member 'FKuroCloudCircleData::DisappearTime' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroTODEntryData
// 0x000C (0x000C - 0x0000)
struct FKuroTODEntryData final
{
public:
	struct FVector2D                              StartEndTime;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataIndex;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroTODEntryData) == 0x000004, "Wrong alignment on FKuroTODEntryData");
static_assert(sizeof(FKuroTODEntryData) == 0x00000C, "Wrong size on FKuroTODEntryData");
static_assert(offsetof(FKuroTODEntryData, StartEndTime) == 0x000000, "Member 'FKuroTODEntryData::StartEndTime' has a wrong offset!");
static_assert(offsetof(FKuroTODEntryData, DataIndex) == 0x000008, "Member 'FKuroTODEntryData::DataIndex' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroGPUParticleMeshInfo
// 0x0028 (0x0028 - 0x0000)
struct FKuroGPUParticleMeshInfo final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoundsCenter;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoundsSize;                                        // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroGPUParticleMeshInfo) == 0x000008, "Wrong alignment on FKuroGPUParticleMeshInfo");
static_assert(sizeof(FKuroGPUParticleMeshInfo) == 0x000028, "Wrong size on FKuroGPUParticleMeshInfo");
static_assert(offsetof(FKuroGPUParticleMeshInfo, StartFrame) == 0x000000, "Member 'FKuroGPUParticleMeshInfo::StartFrame' has a wrong offset!");
static_assert(offsetof(FKuroGPUParticleMeshInfo, EndFrame) == 0x000004, "Member 'FKuroGPUParticleMeshInfo::EndFrame' has a wrong offset!");
static_assert(offsetof(FKuroGPUParticleMeshInfo, BoundsCenter) == 0x000008, "Member 'FKuroGPUParticleMeshInfo::BoundsCenter' has a wrong offset!");
static_assert(offsetof(FKuroGPUParticleMeshInfo, BoundsSize) == 0x000014, "Member 'FKuroGPUParticleMeshInfo::BoundsSize' has a wrong offset!");
static_assert(offsetof(FKuroGPUParticleMeshInfo, Mesh) == 0x000020, "Member 'FKuroGPUParticleMeshInfo::Mesh' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControlFilter
// 0x0068 (0x0068 - 0x0000)
struct FKuroMaterialControlFilter final
{
public:
	EKuroCharBodySpecifiedType                    BodySpecifiedType;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroCharSlotSpecifiedType                    SlotSpecifiedType;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           WeaponCases;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	TArray<class FName>                           OtherCases;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExtraBodyNames;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	TArray<EKuroCharMeshPart>                     SpecifiedParts;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	TArray<class FString>                         CustomParts;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	TArray<class FString>                         CustomExcludeParts;                                // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControlFilter) == 0x000008, "Wrong alignment on FKuroMaterialControlFilter");
static_assert(sizeof(FKuroMaterialControlFilter) == 0x000068, "Wrong size on FKuroMaterialControlFilter");
static_assert(offsetof(FKuroMaterialControlFilter, BodySpecifiedType) == 0x000000, "Member 'FKuroMaterialControlFilter::BodySpecifiedType' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControlFilter, SlotSpecifiedType) == 0x000001, "Member 'FKuroMaterialControlFilter::SlotSpecifiedType' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControlFilter, WeaponCases) == 0x000008, "Member 'FKuroMaterialControlFilter::WeaponCases' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControlFilter, OtherCases) == 0x000018, "Member 'FKuroMaterialControlFilter::OtherCases' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControlFilter, ExtraBodyNames) == 0x000028, "Member 'FKuroMaterialControlFilter::ExtraBodyNames' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControlFilter, SpecifiedParts) == 0x000038, "Member 'FKuroMaterialControlFilter::SpecifiedParts' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControlFilter, CustomParts) == 0x000048, "Member 'FKuroMaterialControlFilter::CustomParts' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControlFilter, CustomExcludeParts) == 0x000058, "Member 'FKuroMaterialControlFilter::CustomExcludeParts' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_MaterialReplace
// 0x0030 (0x0030 - 0x0000)
struct FKuroMaterialControllerParam_MaterialReplace final
{
public:
	class UMaterialInterface*                     ReplaceMaterial;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReplaceMaterialMobile;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKuroMaterialNamedFloatGroup>   ReplaceMaterialFloatParameters;                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKuroMaterialNamedColorGroup>   ReplaceMaterialColorParameters;                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_MaterialReplace) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_MaterialReplace");
static_assert(sizeof(FKuroMaterialControllerParam_MaterialReplace) == 0x000030, "Wrong size on FKuroMaterialControllerParam_MaterialReplace");
static_assert(offsetof(FKuroMaterialControllerParam_MaterialReplace, ReplaceMaterial) == 0x000000, "Member 'FKuroMaterialControllerParam_MaterialReplace::ReplaceMaterial' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_MaterialReplace, ReplaceMaterialMobile) == 0x000008, "Member 'FKuroMaterialControllerParam_MaterialReplace::ReplaceMaterialMobile' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_MaterialReplace, ReplaceMaterialFloatParameters) == 0x000010, "Member 'FKuroMaterialControllerParam_MaterialReplace::ReplaceMaterialFloatParameters' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_MaterialReplace, ReplaceMaterialColorParameters) == 0x000020, "Member 'FKuroMaterialControllerParam_MaterialReplace::ReplaceMaterialColorParameters' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialNamedFloat
// 0x0010 (0x0010 - 0x0000)
struct FKuroMaterialNamedFloat final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialNamedFloat) == 0x000004, "Wrong alignment on FKuroMaterialNamedFloat");
static_assert(sizeof(FKuroMaterialNamedFloat) == 0x000010, "Wrong size on FKuroMaterialNamedFloat");
static_assert(offsetof(FKuroMaterialNamedFloat, Name) == 0x000000, "Member 'FKuroMaterialNamedFloat::Name' has a wrong offset!");
static_assert(offsetof(FKuroMaterialNamedFloat, Value) == 0x00000C, "Member 'FKuroMaterialNamedFloat::Value' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialNamedColor
// 0x001C (0x001C - 0x0000)
struct FKuroMaterialNamedColor final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialNamedColor) == 0x000004, "Wrong alignment on FKuroMaterialNamedColor");
static_assert(sizeof(FKuroMaterialNamedColor) == 0x00001C, "Wrong size on FKuroMaterialNamedColor");
static_assert(offsetof(FKuroMaterialNamedColor, Name) == 0x000000, "Member 'FKuroMaterialNamedColor::Name' has a wrong offset!");
static_assert(offsetof(FKuroMaterialNamedColor, Value) == 0x00000C, "Member 'FKuroMaterialNamedColor::Value' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_MaterialReplaceConst
// 0x0030 (0x0030 - 0x0000)
struct FKuroMaterialControllerParam_MaterialReplaceConst final
{
public:
	class UMaterialInterface*                     ReplaceMaterial;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReplaceMaterialMobile;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKuroMaterialNamedFloat>        ReplaceMaterialFloatParameters;                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	TArray<struct FKuroMaterialNamedColor>        ReplaceMaterialColorParameters;                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_MaterialReplaceConst) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_MaterialReplaceConst");
static_assert(sizeof(FKuroMaterialControllerParam_MaterialReplaceConst) == 0x000030, "Wrong size on FKuroMaterialControllerParam_MaterialReplaceConst");
static_assert(offsetof(FKuroMaterialControllerParam_MaterialReplaceConst, ReplaceMaterial) == 0x000000, "Member 'FKuroMaterialControllerParam_MaterialReplaceConst::ReplaceMaterial' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_MaterialReplaceConst, ReplaceMaterialMobile) == 0x000008, "Member 'FKuroMaterialControllerParam_MaterialReplaceConst::ReplaceMaterialMobile' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_MaterialReplaceConst, ReplaceMaterialFloatParameters) == 0x000010, "Member 'FKuroMaterialControllerParam_MaterialReplaceConst::ReplaceMaterialFloatParameters' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_MaterialReplaceConst, ReplaceMaterialColorParameters) == 0x000020, "Member 'FKuroMaterialControllerParam_MaterialReplaceConst::ReplaceMaterialColorParameters' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialNamedTexture
// 0x0018 (0x0018 - 0x0000)
struct FKuroMaterialNamedTexture final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Value;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialNamedTexture) == 0x000008, "Wrong alignment on FKuroMaterialNamedTexture");
static_assert(sizeof(FKuroMaterialNamedTexture) == 0x000018, "Wrong size on FKuroMaterialNamedTexture");
static_assert(offsetof(FKuroMaterialNamedTexture, Name) == 0x000000, "Member 'FKuroMaterialNamedTexture::Name' has a wrong offset!");
static_assert(offsetof(FKuroMaterialNamedTexture, Value) == 0x000010, "Member 'FKuroMaterialNamedTexture::Value' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_CustomConst
// 0x0030 (0x0030 - 0x0000)
struct FKuroMaterialControllerParam_CustomConst final
{
public:
	TArray<struct FKuroMaterialNamedFloat>        CustomFloatParameters;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	TArray<struct FKuroMaterialNamedColor>        CustomColorParameters;                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	TArray<struct FKuroMaterialNamedTexture>      CustomTextureParameterMap;                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_CustomConst) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_CustomConst");
static_assert(sizeof(FKuroMaterialControllerParam_CustomConst) == 0x000030, "Wrong size on FKuroMaterialControllerParam_CustomConst");
static_assert(offsetof(FKuroMaterialControllerParam_CustomConst, CustomFloatParameters) == 0x000000, "Member 'FKuroMaterialControllerParam_CustomConst::CustomFloatParameters' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_CustomConst, CustomColorParameters) == 0x000010, "Member 'FKuroMaterialControllerParam_CustomConst::CustomColorParameters' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_CustomConst, CustomTextureParameterMap) == 0x000020, "Member 'FKuroMaterialControllerParam_CustomConst::CustomTextureParameterMap' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_Dither
// 0x01B0 (0x01B0 - 0x0000)
struct FKuroMaterialControllerParam_Dither final
{
public:
	struct FKuroMaterialCurveFloatGroup           DitherValue;                                       // 0x0000(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_Dither) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_Dither");
static_assert(sizeof(FKuroMaterialControllerParam_Dither) == 0x0001B0, "Wrong size on FKuroMaterialControllerParam_Dither");
static_assert(offsetof(FKuroMaterialControllerParam_Dither, DitherValue) == 0x000000, "Member 'FKuroMaterialControllerParam_Dither::DitherValue' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_DitherConst
// 0x0004 (0x0004 - 0x0000)
struct FKuroMaterialControllerParam_DitherConst final
{
public:
	float                                         DitherValue;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_DitherConst) == 0x000004, "Wrong alignment on FKuroMaterialControllerParam_DitherConst");
static_assert(sizeof(FKuroMaterialControllerParam_DitherConst) == 0x000004, "Wrong size on FKuroMaterialControllerParam_DitherConst");
static_assert(offsetof(FKuroMaterialControllerParam_DitherConst, DitherValue) == 0x000000, "Member 'FKuroMaterialControllerParam_DitherConst::DitherValue' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_MotionOffsetConst
// 0x000C (0x000C - 0x0000)
struct FKuroMaterialControllerParam_MotionOffsetConst final
{
public:
	float                                         MotionAffectVertexRange;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotionOffsetLength;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotionNoiseSpeed;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_MotionOffsetConst) == 0x000004, "Wrong alignment on FKuroMaterialControllerParam_MotionOffsetConst");
static_assert(sizeof(FKuroMaterialControllerParam_MotionOffsetConst) == 0x00000C, "Wrong size on FKuroMaterialControllerParam_MotionOffsetConst");
static_assert(offsetof(FKuroMaterialControllerParam_MotionOffsetConst, MotionAffectVertexRange) == 0x000000, "Member 'FKuroMaterialControllerParam_MotionOffsetConst::MotionAffectVertexRange' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_MotionOffsetConst, MotionOffsetLength) == 0x000004, "Member 'FKuroMaterialControllerParam_MotionOffsetConst::MotionOffsetLength' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_MotionOffsetConst, MotionNoiseSpeed) == 0x000008, "Member 'FKuroMaterialControllerParam_MotionOffsetConst::MotionNoiseSpeed' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_TextureSampleConst
// 0x0048 (0x0048 - 0x0000)
struct FKuroMaterialControllerParam_TextureSampleConst final
{
public:
	class UTexture2D*                             MaskTexture;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextureScaleAndOffset;                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextureSpeed;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextureColorTint;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAlphaToMask;                                   // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TextureMaskRange;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	KuroRenderingRuntimeBPPlugin::ECharacterControllerUVSwitch UvSelection;                          // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroMaterialControllerParam_TextureSampleConst) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_TextureSampleConst");
static_assert(sizeof(FKuroMaterialControllerParam_TextureSampleConst) == 0x000048, "Wrong size on FKuroMaterialControllerParam_TextureSampleConst");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSampleConst, MaskTexture) == 0x000000, "Member 'FKuroMaterialControllerParam_TextureSampleConst::MaskTexture' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSampleConst, TextureScaleAndOffset) == 0x000008, "Member 'FKuroMaterialControllerParam_TextureSampleConst::TextureScaleAndOffset' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSampleConst, TextureSpeed) == 0x000018, "Member 'FKuroMaterialControllerParam_TextureSampleConst::TextureSpeed' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSampleConst, TextureColorTint) == 0x000028, "Member 'FKuroMaterialControllerParam_TextureSampleConst::TextureColorTint' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSampleConst, Rotation) == 0x000038, "Member 'FKuroMaterialControllerParam_TextureSampleConst::Rotation' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSampleConst, bUseAlphaToMask) == 0x00003C, "Member 'FKuroMaterialControllerParam_TextureSampleConst::bUseAlphaToMask' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSampleConst, TextureMaskRange) == 0x000040, "Member 'FKuroMaterialControllerParam_TextureSampleConst::TextureMaskRange' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_TextureSampleConst, UvSelection) == 0x000044, "Member 'FKuroMaterialControllerParam_TextureSampleConst::UvSelection' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_Color
// 0x1028 (0x1028 - 0x0000)
struct FKuroMaterialControllerParam_Color final
{
public:
	struct FKuroMaterialCurveColorGroup           BaseColor;                                         // 0x0000(0x0660)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveFloatGroup           BaseIntensity;                                     // 0x0660(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup           EmissionColor;                                     // 0x0810(0x0660)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveFloatGroup           EmissionIntensity;                                 // 0x0E70(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bBaseUseTex;                                       // 0x1020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEmissionUseTex;                                   // 0x1021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1022[0x6];                                     // 0x1022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroMaterialControllerParam_Color) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_Color");
static_assert(sizeof(FKuroMaterialControllerParam_Color) == 0x001028, "Wrong size on FKuroMaterialControllerParam_Color");
static_assert(offsetof(FKuroMaterialControllerParam_Color, BaseColor) == 0x000000, "Member 'FKuroMaterialControllerParam_Color::BaseColor' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Color, BaseIntensity) == 0x000660, "Member 'FKuroMaterialControllerParam_Color::BaseIntensity' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Color, EmissionColor) == 0x000810, "Member 'FKuroMaterialControllerParam_Color::EmissionColor' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Color, EmissionIntensity) == 0x000E70, "Member 'FKuroMaterialControllerParam_Color::EmissionIntensity' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Color, bBaseUseTex) == 0x001020, "Member 'FKuroMaterialControllerParam_Color::bBaseUseTex' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Color, bEmissionUseTex) == 0x001021, "Member 'FKuroMaterialControllerParam_Color::bEmissionUseTex' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_ColorConst
// 0x002C (0x002C - 0x0000)
struct FKuroMaterialControllerParam_ColorConst final
{
public:
	struct FLinearColor                           BaseColor;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseIntensity;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EmissionColor;                                     // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmissionIntensity;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBaseUseTex;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEmissionUseTex;                                   // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroMaterialControllerParam_ColorConst) == 0x000004, "Wrong alignment on FKuroMaterialControllerParam_ColorConst");
static_assert(sizeof(FKuroMaterialControllerParam_ColorConst) == 0x00002C, "Wrong size on FKuroMaterialControllerParam_ColorConst");
static_assert(offsetof(FKuroMaterialControllerParam_ColorConst, BaseColor) == 0x000000, "Member 'FKuroMaterialControllerParam_ColorConst::BaseColor' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_ColorConst, BaseIntensity) == 0x000010, "Member 'FKuroMaterialControllerParam_ColorConst::BaseIntensity' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_ColorConst, EmissionColor) == 0x000014, "Member 'FKuroMaterialControllerParam_ColorConst::EmissionColor' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_ColorConst, EmissionIntensity) == 0x000024, "Member 'FKuroMaterialControllerParam_ColorConst::EmissionIntensity' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_ColorConst, bBaseUseTex) == 0x000028, "Member 'FKuroMaterialControllerParam_ColorConst::bBaseUseTex' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_ColorConst, bEmissionUseTex) == 0x000029, "Member 'FKuroMaterialControllerParam_ColorConst::bEmissionUseTex' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_Outline
// 0x09C8 (0x09C8 - 0x0000)
struct FKuroMaterialControllerParam_Outline final
{
public:
	bool                                          bOutlineUseTex;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOuterOutlineEffect;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroMaterialCurveFloatGroup           OutlineWidth;                                      // 0x0008(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup           OutlineColor;                                      // 0x01B8(0x0660)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveFloatGroup           OutlineIntensity;                                  // 0x0818(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_Outline) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_Outline");
static_assert(sizeof(FKuroMaterialControllerParam_Outline) == 0x0009C8, "Wrong size on FKuroMaterialControllerParam_Outline");
static_assert(offsetof(FKuroMaterialControllerParam_Outline, bOutlineUseTex) == 0x000000, "Member 'FKuroMaterialControllerParam_Outline::bOutlineUseTex' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Outline, bUseOuterOutlineEffect) == 0x000001, "Member 'FKuroMaterialControllerParam_Outline::bUseOuterOutlineEffect' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Outline, OutlineWidth) == 0x000008, "Member 'FKuroMaterialControllerParam_Outline::OutlineWidth' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Outline, OutlineColor) == 0x0001B8, "Member 'FKuroMaterialControllerParam_Outline::OutlineColor' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Outline, OutlineIntensity) == 0x000818, "Member 'FKuroMaterialControllerParam_Outline::OutlineIntensity' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_OutlineConst
// 0x001C (0x001C - 0x0000)
struct FKuroMaterialControllerParam_OutlineConst final
{
public:
	bool                                          bOutlineUseTex;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOuterOutlineEffect;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutlineWidth;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlineIntensity;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_OutlineConst) == 0x000004, "Wrong alignment on FKuroMaterialControllerParam_OutlineConst");
static_assert(sizeof(FKuroMaterialControllerParam_OutlineConst) == 0x00001C, "Wrong size on FKuroMaterialControllerParam_OutlineConst");
static_assert(offsetof(FKuroMaterialControllerParam_OutlineConst, bOutlineUseTex) == 0x000000, "Member 'FKuroMaterialControllerParam_OutlineConst::bOutlineUseTex' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_OutlineConst, bUseOuterOutlineEffect) == 0x000001, "Member 'FKuroMaterialControllerParam_OutlineConst::bUseOuterOutlineEffect' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_OutlineConst, OutlineWidth) == 0x000004, "Member 'FKuroMaterialControllerParam_OutlineConst::OutlineWidth' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_OutlineConst, OutlineColor) == 0x000008, "Member 'FKuroMaterialControllerParam_OutlineConst::OutlineColor' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_OutlineConst, OutlineIntensity) == 0x000018, "Member 'FKuroMaterialControllerParam_OutlineConst::OutlineIntensity' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_Dissolve
// 0x0B78 (0x0B78 - 0x0000)
struct FKuroMaterialControllerParam_Dissolve final
{
public:
	EKuroCharacterControllerChannelSwitch         DissolveChannel;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroMaterialCurveFloatGroup           DissolveProgress;                                  // 0x0008(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveFloatGroup           DissolveSmooth;                                    // 0x01B8(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveFloatGroup           DissolveColorIntensity;                            // 0x0368(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup           DissolveColor;                                     // 0x0518(0x0660)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_Dissolve) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_Dissolve");
static_assert(sizeof(FKuroMaterialControllerParam_Dissolve) == 0x000B78, "Wrong size on FKuroMaterialControllerParam_Dissolve");
static_assert(offsetof(FKuroMaterialControllerParam_Dissolve, DissolveChannel) == 0x000000, "Member 'FKuroMaterialControllerParam_Dissolve::DissolveChannel' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Dissolve, DissolveProgress) == 0x000008, "Member 'FKuroMaterialControllerParam_Dissolve::DissolveProgress' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Dissolve, DissolveSmooth) == 0x0001B8, "Member 'FKuroMaterialControllerParam_Dissolve::DissolveSmooth' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Dissolve, DissolveColorIntensity) == 0x000368, "Member 'FKuroMaterialControllerParam_Dissolve::DissolveColorIntensity' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Dissolve, DissolveColor) == 0x000518, "Member 'FKuroMaterialControllerParam_Dissolve::DissolveColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_DissolveConst
// 0x0020 (0x0020 - 0x0000)
struct FKuroMaterialControllerParam_DissolveConst final
{
public:
	EKuroCharacterControllerChannelSwitch         DissolveChannel;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DissolveProgress;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolveSmooth;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolveColorIntensity;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DissolveColor;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_DissolveConst) == 0x000004, "Wrong alignment on FKuroMaterialControllerParam_DissolveConst");
static_assert(sizeof(FKuroMaterialControllerParam_DissolveConst) == 0x000020, "Wrong size on FKuroMaterialControllerParam_DissolveConst");
static_assert(offsetof(FKuroMaterialControllerParam_DissolveConst, DissolveChannel) == 0x000000, "Member 'FKuroMaterialControllerParam_DissolveConst::DissolveChannel' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_DissolveConst, DissolveProgress) == 0x000004, "Member 'FKuroMaterialControllerParam_DissolveConst::DissolveProgress' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_DissolveConst, DissolveSmooth) == 0x000008, "Member 'FKuroMaterialControllerParam_DissolveConst::DissolveSmooth' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_DissolveConst, DissolveColorIntensity) == 0x00000C, "Member 'FKuroMaterialControllerParam_DissolveConst::DissolveColorIntensity' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_DissolveConst, DissolveColor) == 0x000010, "Member 'FKuroMaterialControllerParam_DissolveConst::DissolveColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_Rim
// 0x09C8 (0x09C8 - 0x0000)
struct FKuroMaterialControllerParam_Rim final
{
public:
	struct FKuroMaterialCurveFloatGroup           RimRange;                                          // 0x0000(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup           RimColor;                                          // 0x01B0(0x0660)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveFloatGroup           RimIntensity;                                      // 0x0810(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bRimUseTex;                                        // 0x09C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroCharacterControllerChannelSwitch         RimChannel;                                        // 0x09C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C2[0x6];                                      // 0x09C2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroMaterialControllerParam_Rim) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_Rim");
static_assert(sizeof(FKuroMaterialControllerParam_Rim) == 0x0009C8, "Wrong size on FKuroMaterialControllerParam_Rim");
static_assert(offsetof(FKuroMaterialControllerParam_Rim, RimRange) == 0x000000, "Member 'FKuroMaterialControllerParam_Rim::RimRange' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Rim, RimColor) == 0x0001B0, "Member 'FKuroMaterialControllerParam_Rim::RimColor' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Rim, RimIntensity) == 0x000810, "Member 'FKuroMaterialControllerParam_Rim::RimIntensity' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Rim, bRimUseTex) == 0x0009C0, "Member 'FKuroMaterialControllerParam_Rim::bRimUseTex' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_Rim, RimChannel) == 0x0009C1, "Member 'FKuroMaterialControllerParam_Rim::RimChannel' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_RimConst
// 0x001C (0x001C - 0x0000)
struct FKuroMaterialControllerParam_RimConst final
{
public:
	float                                         RimRange;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimColor;                                          // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimIntensity;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRimUseTex;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroCharacterControllerChannelSwitch         RimChannel;                                        // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroMaterialControllerParam_RimConst) == 0x000004, "Wrong alignment on FKuroMaterialControllerParam_RimConst");
static_assert(sizeof(FKuroMaterialControllerParam_RimConst) == 0x00001C, "Wrong size on FKuroMaterialControllerParam_RimConst");
static_assert(offsetof(FKuroMaterialControllerParam_RimConst, RimRange) == 0x000000, "Member 'FKuroMaterialControllerParam_RimConst::RimRange' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_RimConst, RimColor) == 0x000004, "Member 'FKuroMaterialControllerParam_RimConst::RimColor' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_RimConst, RimIntensity) == 0x000014, "Member 'FKuroMaterialControllerParam_RimConst::RimIntensity' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_RimConst, bRimUseTex) == 0x000018, "Member 'FKuroMaterialControllerParam_RimConst::bRimUseTex' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_RimConst, RimChannel) == 0x000019, "Member 'FKuroMaterialControllerParam_RimConst::RimChannel' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroInterpolateRangeTime
// 0x000C (0x000C - 0x0000)
struct FKuroInterpolateRangeTime final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Loop;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroInterpolateRangeTime) == 0x000004, "Wrong alignment on FKuroInterpolateRangeTime");
static_assert(sizeof(FKuroInterpolateRangeTime) == 0x00000C, "Wrong size on FKuroInterpolateRangeTime");
static_assert(offsetof(FKuroInterpolateRangeTime, Start) == 0x000000, "Member 'FKuroInterpolateRangeTime::Start' has a wrong offset!");
static_assert(offsetof(FKuroInterpolateRangeTime, Loop) == 0x000004, "Member 'FKuroInterpolateRangeTime::Loop' has a wrong offset!");
static_assert(offsetof(FKuroInterpolateRangeTime, End) == 0x000008, "Member 'FKuroInterpolateRangeTime::End' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroDynamicMaterialCache
// 0x0020 (0x0020 - 0x0000)
struct FKuroDynamicMaterialCache final
{
public:
	TArray<class FName>                           Keyword;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      OriginalVariationMaterialInstance;                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroDynamicMaterialCache) == 0x000008, "Wrong alignment on FKuroDynamicMaterialCache");
static_assert(sizeof(FKuroDynamicMaterialCache) == 0x000020, "Wrong size on FKuroDynamicMaterialCache");
static_assert(offsetof(FKuroDynamicMaterialCache, Keyword) == 0x000000, "Member 'FKuroDynamicMaterialCache::Keyword' has a wrong offset!");
static_assert(offsetof(FKuroDynamicMaterialCache, OriginalVariationMaterialInstance) == 0x000010, "Member 'FKuroDynamicMaterialCache::OriginalVariationMaterialInstance' has a wrong offset!");
static_assert(offsetof(FKuroDynamicMaterialCache, DynamicMaterial) == 0x000018, "Member 'FKuroDynamicMaterialCache::DynamicMaterial' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialVariationRuntimeInfo
// 0x0250 (0x0250 - 0x0000)
struct FKuroMaterialVariationRuntimeInfo final
{
public:
	TArray<class FName>                           ActiveKeyword;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class UKuroMaterialVariationCollection*       MaterialVariationData;                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKuroDynamicMaterialCache>      DynamicMaterialCache;                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      FloatPropertyCache;                                // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        LinearColorPropertyCache;                          // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, class UTexture*>            TexturePropertyCache;                              // 0x00C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      OriginalFloatPropertyCache;                        // 0x0118(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        OriginalLinearColorPropertyCache;                  // 0x0168(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, class UTexture*>            OriginalTexturePropertyCache;                      // 0x01B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CurrentUseMaterial;                                // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CurrentReplaceMaterial;                            // 0x0210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkelComp;                                          // 0x0218(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticComp;                                        // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialSlotIndex;                                 // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C[0x24];                                     // 0x022C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroMaterialVariationRuntimeInfo) == 0x000008, "Wrong alignment on FKuroMaterialVariationRuntimeInfo");
static_assert(sizeof(FKuroMaterialVariationRuntimeInfo) == 0x000250, "Wrong size on FKuroMaterialVariationRuntimeInfo");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, ActiveKeyword) == 0x000000, "Member 'FKuroMaterialVariationRuntimeInfo::ActiveKeyword' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, MaterialVariationData) == 0x000010, "Member 'FKuroMaterialVariationRuntimeInfo::MaterialVariationData' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, DynamicMaterialCache) == 0x000018, "Member 'FKuroMaterialVariationRuntimeInfo::DynamicMaterialCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, FloatPropertyCache) == 0x000028, "Member 'FKuroMaterialVariationRuntimeInfo::FloatPropertyCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, LinearColorPropertyCache) == 0x000078, "Member 'FKuroMaterialVariationRuntimeInfo::LinearColorPropertyCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, TexturePropertyCache) == 0x0000C8, "Member 'FKuroMaterialVariationRuntimeInfo::TexturePropertyCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, OriginalFloatPropertyCache) == 0x000118, "Member 'FKuroMaterialVariationRuntimeInfo::OriginalFloatPropertyCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, OriginalLinearColorPropertyCache) == 0x000168, "Member 'FKuroMaterialVariationRuntimeInfo::OriginalLinearColorPropertyCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, OriginalTexturePropertyCache) == 0x0001B8, "Member 'FKuroMaterialVariationRuntimeInfo::OriginalTexturePropertyCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, CurrentUseMaterial) == 0x000208, "Member 'FKuroMaterialVariationRuntimeInfo::CurrentUseMaterial' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, CurrentReplaceMaterial) == 0x000210, "Member 'FKuroMaterialVariationRuntimeInfo::CurrentReplaceMaterial' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, SkelComp) == 0x000218, "Member 'FKuroMaterialVariationRuntimeInfo::SkelComp' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, StaticComp) == 0x000220, "Member 'FKuroMaterialVariationRuntimeInfo::StaticComp' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, MaterialSlotIndex) == 0x000228, "Member 'FKuroMaterialVariationRuntimeInfo::MaterialSlotIndex' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.MaterialStackElement
// 0x0018 (0x0018 - 0x0000)
struct FMaterialStackElement final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaterialStackElement) == 0x000008, "Wrong alignment on FMaterialStackElement");
static_assert(sizeof(FMaterialStackElement) == 0x000018, "Wrong size on FMaterialStackElement");
static_assert(offsetof(FMaterialStackElement, Material) == 0x000008, "Member 'FMaterialStackElement::Material' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroPostprocessMaterialManager
// 0x0030 (0x0030 - 0x0000)
struct FKuroPostprocessMaterialManager final
{
public:
	TArray<struct FMaterialStackElement>          MaterialStack;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostprocessComponentDisableRadialBlur;             // 0x0010(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostprocessComponent;                              // 0x0018(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKuroGISystem*                          ParentGISystem;                                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroPostprocessMaterialManager) == 0x000008, "Wrong alignment on FKuroPostprocessMaterialManager");
static_assert(sizeof(FKuroPostprocessMaterialManager) == 0x000030, "Wrong size on FKuroPostprocessMaterialManager");
static_assert(offsetof(FKuroPostprocessMaterialManager, MaterialStack) == 0x000000, "Member 'FKuroPostprocessMaterialManager::MaterialStack' has a wrong offset!");
static_assert(offsetof(FKuroPostprocessMaterialManager, PostprocessComponentDisableRadialBlur) == 0x000010, "Member 'FKuroPostprocessMaterialManager::PostprocessComponentDisableRadialBlur' has a wrong offset!");
static_assert(offsetof(FKuroPostprocessMaterialManager, PostprocessComponent) == 0x000018, "Member 'FKuroPostprocessMaterialManager::PostprocessComponent' has a wrong offset!");
static_assert(offsetof(FKuroPostprocessMaterialManager, ParentGISystem) == 0x000020, "Member 'FKuroPostprocessMaterialManager::ParentGISystem' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroRainMaterialFloatParameter
// 0x00A0 (0x00A0 - 0x0000)
struct FKuroRainMaterialFloatParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        Value;                                             // 0x0010(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroRainMaterialFloatParameter) == 0x000008, "Wrong alignment on FKuroRainMaterialFloatParameter");
static_assert(sizeof(FKuroRainMaterialFloatParameter) == 0x0000A0, "Wrong size on FKuroRainMaterialFloatParameter");
static_assert(offsetof(FKuroRainMaterialFloatParameter, ParameterName) == 0x000000, "Member 'FKuroRainMaterialFloatParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(FKuroRainMaterialFloatParameter, Value) == 0x000010, "Member 'FKuroRainMaterialFloatParameter::Value' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.NiagaraDiKuroRenderingFloatParam
// 0x0010 (0x0010 - 0x0000)
struct FNiagaraDiKuroRenderingFloatParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Val;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNiagaraDiKuroRenderingFloatParam) == 0x000004, "Wrong alignment on FNiagaraDiKuroRenderingFloatParam");
static_assert(sizeof(FNiagaraDiKuroRenderingFloatParam) == 0x000010, "Wrong size on FNiagaraDiKuroRenderingFloatParam");
static_assert(offsetof(FNiagaraDiKuroRenderingFloatParam, Name) == 0x000000, "Member 'FNiagaraDiKuroRenderingFloatParam::Name' has a wrong offset!");
static_assert(offsetof(FNiagaraDiKuroRenderingFloatParam, Val) == 0x00000C, "Member 'FNiagaraDiKuroRenderingFloatParam::Val' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.NiagaraDiKuroRenderingVectorParam
// 0x0018 (0x0018 - 0x0000)
struct FNiagaraDiKuroRenderingVectorParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Val;                                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNiagaraDiKuroRenderingVectorParam) == 0x000004, "Wrong alignment on FNiagaraDiKuroRenderingVectorParam");
static_assert(sizeof(FNiagaraDiKuroRenderingVectorParam) == 0x000018, "Wrong size on FNiagaraDiKuroRenderingVectorParam");
static_assert(offsetof(FNiagaraDiKuroRenderingVectorParam, Name) == 0x000000, "Member 'FNiagaraDiKuroRenderingVectorParam::Name' has a wrong offset!");
static_assert(offsetof(FNiagaraDiKuroRenderingVectorParam, Val) == 0x00000C, "Member 'FNiagaraDiKuroRenderingVectorParam::Val' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.NiagaraDiKuroRenderingLinearColorParam
// 0x001C (0x001C - 0x0000)
struct FNiagaraDiKuroRenderingLinearColorParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Val;                                               // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNiagaraDiKuroRenderingLinearColorParam) == 0x000004, "Wrong alignment on FNiagaraDiKuroRenderingLinearColorParam");
static_assert(sizeof(FNiagaraDiKuroRenderingLinearColorParam) == 0x00001C, "Wrong size on FNiagaraDiKuroRenderingLinearColorParam");
static_assert(offsetof(FNiagaraDiKuroRenderingLinearColorParam, Name) == 0x000000, "Member 'FNiagaraDiKuroRenderingLinearColorParam::Name' has a wrong offset!");
static_assert(offsetof(FNiagaraDiKuroRenderingLinearColorParam, Val) == 0x00000C, "Member 'FNiagaraDiKuroRenderingLinearColorParam::Val' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.NiagaraDiKuroRenderingParameters
// 0x0030 (0x0030 - 0x0000)
struct FNiagaraDiKuroRenderingParameters final
{
public:
	TArray<struct FNiagaraDiKuroRenderingFloatParam> FloatParameters;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNiagaraDiKuroRenderingVectorParam> VectorParameters;                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNiagaraDiKuroRenderingLinearColorParam> ColorParameters;                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNiagaraDiKuroRenderingParameters) == 0x000008, "Wrong alignment on FNiagaraDiKuroRenderingParameters");
static_assert(sizeof(FNiagaraDiKuroRenderingParameters) == 0x000030, "Wrong size on FNiagaraDiKuroRenderingParameters");
static_assert(offsetof(FNiagaraDiKuroRenderingParameters, FloatParameters) == 0x000000, "Member 'FNiagaraDiKuroRenderingParameters::FloatParameters' has a wrong offset!");
static_assert(offsetof(FNiagaraDiKuroRenderingParameters, VectorParameters) == 0x000010, "Member 'FNiagaraDiKuroRenderingParameters::VectorParameters' has a wrong offset!");
static_assert(offsetof(FNiagaraDiKuroRenderingParameters, ColorParameters) == 0x000020, "Member 'FNiagaraDiKuroRenderingParameters::ColorParameters' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSceneEffectActorManager
// 0x0028 (0x0028 - 0x0000)
struct FKuroSceneEffectActorManager final
{
public:
	TArray<class AKuroSceneEffectActor*>          SceneEffectActorsHiding;                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AKuroSceneEffectActor*>          SceneEffectActorsShowing;                          // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroSceneEffectActorManager) == 0x000008, "Wrong alignment on FKuroSceneEffectActorManager");
static_assert(sizeof(FKuroSceneEffectActorManager) == 0x000028, "Wrong size on FKuroSceneEffectActorManager");
static_assert(offsetof(FKuroSceneEffectActorManager, SceneEffectActorsHiding) == 0x000000, "Member 'FKuroSceneEffectActorManager::SceneEffectActorsHiding' has a wrong offset!");
static_assert(offsetof(FKuroSceneEffectActorManager, SceneEffectActorsShowing) == 0x000010, "Member 'FKuroSceneEffectActorManager::SceneEffectActorsShowing' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialCurveFloatGroup_SI
// 0x0090 (0x0090 - 0x0000)
struct FKuroMaterialCurveFloatGroup_SI final
{
public:
	struct FKuroCurveFloat                        Curve;                                             // 0x0000(0x0090)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialCurveFloatGroup_SI) == 0x000008, "Wrong alignment on FKuroMaterialCurveFloatGroup_SI");
static_assert(sizeof(FKuroMaterialCurveFloatGroup_SI) == 0x000090, "Wrong size on FKuroMaterialCurveFloatGroup_SI");
static_assert(offsetof(FKuroMaterialCurveFloatGroup_SI, Curve) == 0x000000, "Member 'FKuroMaterialCurveFloatGroup_SI::Curve' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialCurveColorGroup_SI
// 0x0220 (0x0220 - 0x0000)
struct FKuroMaterialCurveColorGroup_SI final
{
public:
	struct FKuroCurveLinearColor                  Curve;                                             // 0x0000(0x0220)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialCurveColorGroup_SI) == 0x000008, "Wrong alignment on FKuroMaterialCurveColorGroup_SI");
static_assert(sizeof(FKuroMaterialCurveColorGroup_SI) == 0x000220, "Wrong size on FKuroMaterialCurveColorGroup_SI");
static_assert(offsetof(FKuroMaterialCurveColorGroup_SI, Curve) == 0x000000, "Member 'FKuroMaterialCurveColorGroup_SI::Curve' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_SI_Dissolve
// 0x08A0 (0x08A0 - 0x0000)
struct FKuroMaterialControllerParam_SI_Dissolve final
{
public:
	struct FKuroMaterialCurveFloatGroup_SI        DissolveProgress;                                  // 0x0000(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveFloatGroup_SI        DissolveEdageWidth;                                // 0x0090(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveFloatGroup_SI        DissolveEdageStrength;                             // 0x0120(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveFloatGroup_SI        DissolveAdjustment;                                // 0x01B0(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup_SI        DissolveEdageColor;                                // 0x0240(0x0220)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup_SI        DissolveTexScaleOffset;                            // 0x0460(0x0220)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup_SI        DissolveTexSpeed;                                  // 0x0680(0x0220)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_SI_Dissolve) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_SI_Dissolve");
static_assert(sizeof(FKuroMaterialControllerParam_SI_Dissolve) == 0x0008A0, "Wrong size on FKuroMaterialControllerParam_SI_Dissolve");
static_assert(offsetof(FKuroMaterialControllerParam_SI_Dissolve, DissolveProgress) == 0x000000, "Member 'FKuroMaterialControllerParam_SI_Dissolve::DissolveProgress' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_Dissolve, DissolveEdageWidth) == 0x000090, "Member 'FKuroMaterialControllerParam_SI_Dissolve::DissolveEdageWidth' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_Dissolve, DissolveEdageStrength) == 0x000120, "Member 'FKuroMaterialControllerParam_SI_Dissolve::DissolveEdageStrength' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_Dissolve, DissolveAdjustment) == 0x0001B0, "Member 'FKuroMaterialControllerParam_SI_Dissolve::DissolveAdjustment' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_Dissolve, DissolveEdageColor) == 0x000240, "Member 'FKuroMaterialControllerParam_SI_Dissolve::DissolveEdageColor' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_Dissolve, DissolveTexScaleOffset) == 0x000460, "Member 'FKuroMaterialControllerParam_SI_Dissolve::DissolveTexScaleOffset' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_Dissolve, DissolveTexSpeed) == 0x000680, "Member 'FKuroMaterialControllerParam_SI_Dissolve::DissolveTexSpeed' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_SI_DissolveConst
// 0x0040 (0x0040 - 0x0000)
struct FKuroMaterialControllerParam_SI_DissolveConst final
{
public:
	float                                         DissolveProgress;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolveEdageWidth;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolveEdageStrength;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolveAdjustment;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DissolveEdageColor;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DissolveTexScaleOffset;                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DissolveTexSpeed;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_SI_DissolveConst) == 0x000004, "Wrong alignment on FKuroMaterialControllerParam_SI_DissolveConst");
static_assert(sizeof(FKuroMaterialControllerParam_SI_DissolveConst) == 0x000040, "Wrong size on FKuroMaterialControllerParam_SI_DissolveConst");
static_assert(offsetof(FKuroMaterialControllerParam_SI_DissolveConst, DissolveProgress) == 0x000000, "Member 'FKuroMaterialControllerParam_SI_DissolveConst::DissolveProgress' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_DissolveConst, DissolveEdageWidth) == 0x000004, "Member 'FKuroMaterialControllerParam_SI_DissolveConst::DissolveEdageWidth' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_DissolveConst, DissolveEdageStrength) == 0x000008, "Member 'FKuroMaterialControllerParam_SI_DissolveConst::DissolveEdageStrength' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_DissolveConst, DissolveAdjustment) == 0x00000C, "Member 'FKuroMaterialControllerParam_SI_DissolveConst::DissolveAdjustment' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_DissolveConst, DissolveEdageColor) == 0x000010, "Member 'FKuroMaterialControllerParam_SI_DissolveConst::DissolveEdageColor' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_DissolveConst, DissolveTexScaleOffset) == 0x000020, "Member 'FKuroMaterialControllerParam_SI_DissolveConst::DissolveTexScaleOffset' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_DissolveConst, DissolveTexSpeed) == 0x000030, "Member 'FKuroMaterialControllerParam_SI_DissolveConst::DissolveTexSpeed' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_SI_EmissionChange
// 0x0340 (0x0340 - 0x0000)
struct FKuroMaterialControllerParam_SI_EmissionChange final
{
public:
	struct FKuroMaterialCurveFloatGroup_SI        EmissionLightColorChangeProgress;                  // 0x0000(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveFloatGroup_SI        EmissionLightColorChangeStrength;                  // 0x0090(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup_SI        EmissionLightColorChangeColor;                     // 0x0120(0x0220)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_SI_EmissionChange) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_SI_EmissionChange");
static_assert(sizeof(FKuroMaterialControllerParam_SI_EmissionChange) == 0x000340, "Wrong size on FKuroMaterialControllerParam_SI_EmissionChange");
static_assert(offsetof(FKuroMaterialControllerParam_SI_EmissionChange, EmissionLightColorChangeProgress) == 0x000000, "Member 'FKuroMaterialControllerParam_SI_EmissionChange::EmissionLightColorChangeProgress' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_EmissionChange, EmissionLightColorChangeStrength) == 0x000090, "Member 'FKuroMaterialControllerParam_SI_EmissionChange::EmissionLightColorChangeStrength' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_EmissionChange, EmissionLightColorChangeColor) == 0x000120, "Member 'FKuroMaterialControllerParam_SI_EmissionChange::EmissionLightColorChangeColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_SI_EmissionChangeConst
// 0x0018 (0x0018 - 0x0000)
struct FKuroMaterialControllerParam_SI_EmissionChangeConst final
{
public:
	float                                         EmissionLightColorChangeProgress;                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmissionLightColorChangeStrength;                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EmissionLightColorChangeColor;                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_SI_EmissionChangeConst) == 0x000004, "Wrong alignment on FKuroMaterialControllerParam_SI_EmissionChangeConst");
static_assert(sizeof(FKuroMaterialControllerParam_SI_EmissionChangeConst) == 0x000018, "Wrong size on FKuroMaterialControllerParam_SI_EmissionChangeConst");
static_assert(offsetof(FKuroMaterialControllerParam_SI_EmissionChangeConst, EmissionLightColorChangeProgress) == 0x000000, "Member 'FKuroMaterialControllerParam_SI_EmissionChangeConst::EmissionLightColorChangeProgress' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_EmissionChangeConst, EmissionLightColorChangeStrength) == 0x000004, "Member 'FKuroMaterialControllerParam_SI_EmissionChangeConst::EmissionLightColorChangeStrength' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_EmissionChangeConst, EmissionLightColorChangeColor) == 0x000008, "Member 'FKuroMaterialControllerParam_SI_EmissionChangeConst::EmissionLightColorChangeColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_SI_AddEmission
// 0x0220 (0x0220 - 0x0000)
struct FKuroMaterialControllerParam_SI_AddEmission final
{
public:
	struct FKuroMaterialCurveColorGroup_SI        AddEmissionColor;                                  // 0x0000(0x0220)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_SI_AddEmission) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_SI_AddEmission");
static_assert(sizeof(FKuroMaterialControllerParam_SI_AddEmission) == 0x000220, "Wrong size on FKuroMaterialControllerParam_SI_AddEmission");
static_assert(offsetof(FKuroMaterialControllerParam_SI_AddEmission, AddEmissionColor) == 0x000000, "Member 'FKuroMaterialControllerParam_SI_AddEmission::AddEmissionColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_SI_AddEmissionConst
// 0x0010 (0x0010 - 0x0000)
struct FKuroMaterialControllerParam_SI_AddEmissionConst final
{
public:
	struct FLinearColor                           AddEmissionColor;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_SI_AddEmissionConst) == 0x000004, "Wrong alignment on FKuroMaterialControllerParam_SI_AddEmissionConst");
static_assert(sizeof(FKuroMaterialControllerParam_SI_AddEmissionConst) == 0x000010, "Wrong size on FKuroMaterialControllerParam_SI_AddEmissionConst");
static_assert(offsetof(FKuroMaterialControllerParam_SI_AddEmissionConst, AddEmissionColor) == 0x000000, "Member 'FKuroMaterialControllerParam_SI_AddEmissionConst::AddEmissionColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_SI_BaseColor
// 0x02B0 (0x02B0 - 0x0000)
struct FKuroMaterialControllerParam_SI_BaseColor final
{
public:
	struct FKuroMaterialCurveFloatGroup_SI        BaseColorScale;                                    // 0x0000(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup_SI        BaseColor;                                         // 0x0090(0x0220)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_SI_BaseColor) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_SI_BaseColor");
static_assert(sizeof(FKuroMaterialControllerParam_SI_BaseColor) == 0x0002B0, "Wrong size on FKuroMaterialControllerParam_SI_BaseColor");
static_assert(offsetof(FKuroMaterialControllerParam_SI_BaseColor, BaseColorScale) == 0x000000, "Member 'FKuroMaterialControllerParam_SI_BaseColor::BaseColorScale' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_BaseColor, BaseColor) == 0x000090, "Member 'FKuroMaterialControllerParam_SI_BaseColor::BaseColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_SI_BaseColorConst
// 0x0014 (0x0014 - 0x0000)
struct FKuroMaterialControllerParam_SI_BaseColorConst final
{
public:
	float                                         BaseColorScale;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseColor;                                         // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_SI_BaseColorConst) == 0x000004, "Wrong alignment on FKuroMaterialControllerParam_SI_BaseColorConst");
static_assert(sizeof(FKuroMaterialControllerParam_SI_BaseColorConst) == 0x000014, "Wrong size on FKuroMaterialControllerParam_SI_BaseColorConst");
static_assert(offsetof(FKuroMaterialControllerParam_SI_BaseColorConst, BaseColorScale) == 0x000000, "Member 'FKuroMaterialControllerParam_SI_BaseColorConst::BaseColorScale' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_BaseColorConst, BaseColor) == 0x000004, "Member 'FKuroMaterialControllerParam_SI_BaseColorConst::BaseColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_SI_Rim
// 0x02B0 (0x02B0 - 0x0000)
struct FKuroMaterialControllerParam_SI_Rim final
{
public:
	struct FKuroMaterialCurveFloatGroup_SI        RimPow;                                            // 0x0000(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKuroMaterialCurveColorGroup_SI        RimLightColor;                                     // 0x0090(0x0220)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_SI_Rim) == 0x000008, "Wrong alignment on FKuroMaterialControllerParam_SI_Rim");
static_assert(sizeof(FKuroMaterialControllerParam_SI_Rim) == 0x0002B0, "Wrong size on FKuroMaterialControllerParam_SI_Rim");
static_assert(offsetof(FKuroMaterialControllerParam_SI_Rim, RimPow) == 0x000000, "Member 'FKuroMaterialControllerParam_SI_Rim::RimPow' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_Rim, RimLightColor) == 0x000090, "Member 'FKuroMaterialControllerParam_SI_Rim::RimLightColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialControllerParam_SI_RimConst
// 0x0014 (0x0014 - 0x0000)
struct FKuroMaterialControllerParam_SI_RimConst final
{
public:
	float                                         RimPow;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimLightColor;                                     // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialControllerParam_SI_RimConst) == 0x000004, "Wrong alignment on FKuroMaterialControllerParam_SI_RimConst");
static_assert(sizeof(FKuroMaterialControllerParam_SI_RimConst) == 0x000014, "Wrong size on FKuroMaterialControllerParam_SI_RimConst");
static_assert(offsetof(FKuroMaterialControllerParam_SI_RimConst, RimPow) == 0x000000, "Member 'FKuroMaterialControllerParam_SI_RimConst::RimPow' has a wrong offset!");
static_assert(offsetof(FKuroMaterialControllerParam_SI_RimConst, RimLightColor) == 0x000004, "Member 'FKuroMaterialControllerParam_SI_RimConst::RimLightColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialNamedColor_SI
// 0x001C (0x001C - 0x0000)
struct FKuroMaterialNamedColor_SI final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialNamedColor_SI) == 0x000004, "Wrong alignment on FKuroMaterialNamedColor_SI");
static_assert(sizeof(FKuroMaterialNamedColor_SI) == 0x00001C, "Wrong size on FKuroMaterialNamedColor_SI");
static_assert(offsetof(FKuroMaterialNamedColor_SI, Name) == 0x000000, "Member 'FKuroMaterialNamedColor_SI::Name' has a wrong offset!");
static_assert(offsetof(FKuroMaterialNamedColor_SI, Value) == 0x00000C, "Member 'FKuroMaterialNamedColor_SI::Value' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialNamedFloat_SI
// 0x0010 (0x0010 - 0x0000)
struct FKuroMaterialNamedFloat_SI final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMaterialNamedFloat_SI) == 0x000004, "Wrong alignment on FKuroMaterialNamedFloat_SI");
static_assert(sizeof(FKuroMaterialNamedFloat_SI) == 0x000010, "Wrong size on FKuroMaterialNamedFloat_SI");
static_assert(offsetof(FKuroMaterialNamedFloat_SI, Name) == 0x000000, "Member 'FKuroMaterialNamedFloat_SI::Name' has a wrong offset!");
static_assert(offsetof(FKuroMaterialNamedFloat_SI, Value) == 0x00000C, "Member 'FKuroMaterialNamedFloat_SI::Value' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroInterpolateRangeTime_SI
// 0x000C (0x000C - 0x0000)
struct FKuroInterpolateRangeTime_SI final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Loop;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroInterpolateRangeTime_SI) == 0x000004, "Wrong alignment on FKuroInterpolateRangeTime_SI");
static_assert(sizeof(FKuroInterpolateRangeTime_SI) == 0x00000C, "Wrong size on FKuroInterpolateRangeTime_SI");
static_assert(offsetof(FKuroInterpolateRangeTime_SI, Start) == 0x000000, "Member 'FKuroInterpolateRangeTime_SI::Start' has a wrong offset!");
static_assert(offsetof(FKuroInterpolateRangeTime_SI, Loop) == 0x000004, "Member 'FKuroInterpolateRangeTime_SI::Loop' has a wrong offset!");
static_assert(offsetof(FKuroInterpolateRangeTime_SI, End) == 0x000008, "Member 'FKuroInterpolateRangeTime_SI::End' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroRainActorSpawnProperties
// 0x0048 (0x0048 - 0x0000)
struct FKuroRainActorSpawnProperties final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRate;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnInnerRadius;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnOuterRadius;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTimeMin;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTimeMax;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VelocityMin;                                       // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VelocityMax;                                       // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMin;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMax;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseMass;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroRainActorSpawnProperties) == 0x000008, "Wrong alignment on FKuroRainActorSpawnProperties");
static_assert(sizeof(FKuroRainActorSpawnProperties) == 0x000048, "Wrong size on FKuroRainActorSpawnProperties");
static_assert(offsetof(FKuroRainActorSpawnProperties, Mesh) == 0x000000, "Member 'FKuroRainActorSpawnProperties::Mesh' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, Material) == 0x000008, "Member 'FKuroRainActorSpawnProperties::Material' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, SpawnRate) == 0x000010, "Member 'FKuroRainActorSpawnProperties::SpawnRate' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, SpawnInnerRadius) == 0x000014, "Member 'FKuroRainActorSpawnProperties::SpawnInnerRadius' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, SpawnOuterRadius) == 0x000018, "Member 'FKuroRainActorSpawnProperties::SpawnOuterRadius' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, LifeTimeMin) == 0x00001C, "Member 'FKuroRainActorSpawnProperties::LifeTimeMin' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, LifeTimeMax) == 0x000020, "Member 'FKuroRainActorSpawnProperties::LifeTimeMax' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, VelocityMin) == 0x000024, "Member 'FKuroRainActorSpawnProperties::VelocityMin' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, VelocityMax) == 0x000030, "Member 'FKuroRainActorSpawnProperties::VelocityMax' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, ScaleMin) == 0x00003C, "Member 'FKuroRainActorSpawnProperties::ScaleMin' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, ScaleMax) == 0x000040, "Member 'FKuroRainActorSpawnProperties::ScaleMax' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, BaseMass) == 0x000044, "Member 'FKuroRainActorSpawnProperties::BaseMass' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroPoseSequence
// 0x0018 (0x0018 - 0x0000)
struct FKuroPoseSequence final
{
public:
	TArray<class UPoseableMeshComponent*>         PoseableMeshComponents;                            // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroPoseSequence) == 0x000008, "Wrong alignment on FKuroPoseSequence");
static_assert(sizeof(FKuroPoseSequence) == 0x000018, "Wrong size on FKuroPoseSequence");
static_assert(offsetof(FKuroPoseSequence, PoseableMeshComponents) == 0x000000, "Member 'FKuroPoseSequence::PoseableMeshComponents' has a wrong offset!");
static_assert(offsetof(FKuroPoseSequence, SkeletalMeshComponent) == 0x000010, "Member 'FKuroPoseSequence::SkeletalMeshComponent' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSmartLightCustomParameterLinearColor
// 0x002C (0x002C - 0x0000)
struct FKuroSmartLightCustomParameterLinearColor final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightOffValue;                                     // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightOnValue;                                      // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroSmartLightCustomParameterLinearColor) == 0x000004, "Wrong alignment on FKuroSmartLightCustomParameterLinearColor");
static_assert(sizeof(FKuroSmartLightCustomParameterLinearColor) == 0x00002C, "Wrong size on FKuroSmartLightCustomParameterLinearColor");
static_assert(offsetof(FKuroSmartLightCustomParameterLinearColor, ParamName) == 0x000000, "Member 'FKuroSmartLightCustomParameterLinearColor::ParamName' has a wrong offset!");
static_assert(offsetof(FKuroSmartLightCustomParameterLinearColor, LightOffValue) == 0x00000C, "Member 'FKuroSmartLightCustomParameterLinearColor::LightOffValue' has a wrong offset!");
static_assert(offsetof(FKuroSmartLightCustomParameterLinearColor, LightOnValue) == 0x00001C, "Member 'FKuroSmartLightCustomParameterLinearColor::LightOnValue' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSmartLightCustomParameterFloat
// 0x0014 (0x0014 - 0x0000)
struct FKuroSmartLightCustomParameterFloat final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightOffValue;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightOnValue;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroSmartLightCustomParameterFloat) == 0x000004, "Wrong alignment on FKuroSmartLightCustomParameterFloat");
static_assert(sizeof(FKuroSmartLightCustomParameterFloat) == 0x000014, "Wrong size on FKuroSmartLightCustomParameterFloat");
static_assert(offsetof(FKuroSmartLightCustomParameterFloat, ParamName) == 0x000000, "Member 'FKuroSmartLightCustomParameterFloat::ParamName' has a wrong offset!");
static_assert(offsetof(FKuroSmartLightCustomParameterFloat, LightOffValue) == 0x00000C, "Member 'FKuroSmartLightCustomParameterFloat::LightOffValue' has a wrong offset!");
static_assert(offsetof(FKuroSmartLightCustomParameterFloat, LightOnValue) == 0x000010, "Member 'FKuroSmartLightCustomParameterFloat::LightOnValue' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSplitTextureStreamer
// 0x0040 (0x0040 - 0x0000)
struct FKuroSplitTextureStreamer final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UKuroSplitTextureStreamerSettings*      Settings;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UObject*>                        StreamedTextures;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20[0x20];                                      // 0x0020(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroSplitTextureStreamer) == 0x000008, "Wrong alignment on FKuroSplitTextureStreamer");
static_assert(sizeof(FKuroSplitTextureStreamer) == 0x000040, "Wrong size on FKuroSplitTextureStreamer");
static_assert(offsetof(FKuroSplitTextureStreamer, Settings) == 0x000008, "Member 'FKuroSplitTextureStreamer::Settings' has a wrong offset!");
static_assert(offsetof(FKuroSplitTextureStreamer, StreamedTextures) == 0x000010, "Member 'FKuroSplitTextureStreamer::StreamedTextures' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSunLensflareInfo
// 0x0058 (0x0058 - 0x0000)
struct FKuroSunLensflareInfo final
{
public:
	class USunLensFlareConfig*                    LensFlareConfig;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LensFlareActor;                                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   HaloComponent;                                     // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   GhostComponent;                                    // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   GlareComponent;                                    // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               HaloMaterialDynamic;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               GhostMaterialDynamic;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               GlareMaterialDynamic;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroSunLensflareInfo) == 0x000008, "Wrong alignment on FKuroSunLensflareInfo");
static_assert(sizeof(FKuroSunLensflareInfo) == 0x000058, "Wrong size on FKuroSunLensflareInfo");
static_assert(offsetof(FKuroSunLensflareInfo, LensFlareConfig) == 0x000000, "Member 'FKuroSunLensflareInfo::LensFlareConfig' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, LensFlareActor) == 0x000020, "Member 'FKuroSunLensflareInfo::LensFlareActor' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, HaloComponent) == 0x000028, "Member 'FKuroSunLensflareInfo::HaloComponent' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, GhostComponent) == 0x000030, "Member 'FKuroSunLensflareInfo::GhostComponent' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, GlareComponent) == 0x000038, "Member 'FKuroSunLensflareInfo::GlareComponent' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, HaloMaterialDynamic) == 0x000040, "Member 'FKuroSunLensflareInfo::HaloMaterialDynamic' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, GhostMaterialDynamic) == 0x000048, "Member 'FKuroSunLensflareInfo::GhostMaterialDynamic' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, GlareMaterialDynamic) == 0x000050, "Member 'FKuroSunLensflareInfo::GlareMaterialDynamic' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSunLensflareManager
// 0x0088 (0x0088 - 0x0000)
struct FKuroSunLensflareManager final
{
public:
	struct FKuroSunLensflareInfo                  CurrentInfo;                                       // 0x0000(0x0058)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x18];                                      // 0x0058(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 CachedWorld;                                       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UKuroGISystem*                          CachedGISystem;                                    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroSunLensflareManager) == 0x000008, "Wrong alignment on FKuroSunLensflareManager");
static_assert(sizeof(FKuroSunLensflareManager) == 0x000088, "Wrong size on FKuroSunLensflareManager");
static_assert(offsetof(FKuroSunLensflareManager, CurrentInfo) == 0x000000, "Member 'FKuroSunLensflareManager::CurrentInfo' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareManager, CachedWorld) == 0x000070, "Member 'FKuroSunLensflareManager::CachedWorld' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareManager, CachedGISystem) == 0x000078, "Member 'FKuroSunLensflareManager::CachedGISystem' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSuperFarFogLayer
// 0x0020 (0x0020 - 0x0000)
struct FKuroSuperFarFogLayer final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            StaticMesh;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroSuperFarFogLayer) == 0x000008, "Wrong alignment on FKuroSuperFarFogLayer");
static_assert(sizeof(FKuroSuperFarFogLayer) == 0x000020, "Wrong size on FKuroSuperFarFogLayer");
static_assert(offsetof(FKuroSuperFarFogLayer, Distance) == 0x000000, "Member 'FKuroSuperFarFogLayer::Distance' has a wrong offset!");
static_assert(offsetof(FKuroSuperFarFogLayer, StaticMesh) == 0x000008, "Member 'FKuroSuperFarFogLayer::StaticMesh' has a wrong offset!");
static_assert(offsetof(FKuroSuperFarFogLayer, Materials) == 0x000010, "Member 'FKuroSuperFarFogLayer::Materials' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroStreamingLevelInfo
// 0x0030 (0x0030 - 0x0000)
struct FKuroStreamingLevelInfo final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LayerName;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDistance;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShowDistance;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTileBaseOnLandscape;                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTile;                                           // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              TileXY;                                            // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHLOD;                                          // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBakeShadow;                                       // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDynamicShadow;                                    // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroStreamingLevelInfo) == 0x000004, "Wrong alignment on FKuroStreamingLevelInfo");
static_assert(sizeof(FKuroStreamingLevelInfo) == 0x000030, "Wrong size on FKuroStreamingLevelInfo");
static_assert(offsetof(FKuroStreamingLevelInfo, PackageName) == 0x000000, "Member 'FKuroStreamingLevelInfo::PackageName' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, LayerName) == 0x00000C, "Member 'FKuroStreamingLevelInfo::LayerName' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, bEnableDistance) == 0x000018, "Member 'FKuroStreamingLevelInfo::bEnableDistance' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, ShowDistance) == 0x00001C, "Member 'FKuroStreamingLevelInfo::ShowDistance' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, bTileBaseOnLandscape) == 0x000020, "Member 'FKuroStreamingLevelInfo::bTileBaseOnLandscape' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, bIsTile) == 0x000021, "Member 'FKuroStreamingLevelInfo::bIsTile' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, TileXY) == 0x000024, "Member 'FKuroStreamingLevelInfo::TileXY' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, bUseHLOD) == 0x00002C, "Member 'FKuroStreamingLevelInfo::bUseHLOD' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, bBakeShadow) == 0x00002D, "Member 'FKuroStreamingLevelInfo::bBakeShadow' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, bDynamicShadow) == 0x00002E, "Member 'FKuroStreamingLevelInfo::bDynamicShadow' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroLandscapeInfo
// 0x0058 (0x0058 - 0x0000)
struct FKuroLandscapeInfo final
{
public:
	int32                                         TotalTileNumber;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalComponentNumber;                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSectionNumber;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileRow;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileCol;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentNumberPerTile;                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionNumberPerComponent;                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              PerSectionResolution;                              // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              PerComponentResolution;                            // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              PerTileResolution;                                 // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              TotalResolution;                                   // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x003C(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroLandscapeInfo) == 0x000004, "Wrong alignment on FKuroLandscapeInfo");
static_assert(sizeof(FKuroLandscapeInfo) == 0x000058, "Wrong size on FKuroLandscapeInfo");
static_assert(offsetof(FKuroLandscapeInfo, TotalTileNumber) == 0x000000, "Member 'FKuroLandscapeInfo::TotalTileNumber' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, TotalComponentNumber) == 0x000004, "Member 'FKuroLandscapeInfo::TotalComponentNumber' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, TotalSectionNumber) == 0x000008, "Member 'FKuroLandscapeInfo::TotalSectionNumber' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, TileRow) == 0x00000C, "Member 'FKuroLandscapeInfo::TileRow' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, TileCol) == 0x000010, "Member 'FKuroLandscapeInfo::TileCol' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, ComponentNumberPerTile) == 0x000014, "Member 'FKuroLandscapeInfo::ComponentNumberPerTile' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, SectionNumberPerComponent) == 0x000018, "Member 'FKuroLandscapeInfo::SectionNumberPerComponent' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, PerSectionResolution) == 0x00001C, "Member 'FKuroLandscapeInfo::PerSectionResolution' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, PerComponentResolution) == 0x000024, "Member 'FKuroLandscapeInfo::PerComponentResolution' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, PerTileResolution) == 0x00002C, "Member 'FKuroLandscapeInfo::PerTileResolution' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, TotalResolution) == 0x000034, "Member 'FKuroLandscapeInfo::TotalResolution' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, Bounds) == 0x00003C, "Member 'FKuroLandscapeInfo::Bounds' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroWorldRainCustomData
// 0x00A8 (0x00A8 - 0x0000)
struct FKuroWorldRainCustomData final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomRandomIndex;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroWorldRainCustomRandomDriver              Driver;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        Curve;                                             // 0x0018(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroWorldRainCustomData) == 0x000008, "Wrong alignment on FKuroWorldRainCustomData");
static_assert(sizeof(FKuroWorldRainCustomData) == 0x0000A8, "Wrong size on FKuroWorldRainCustomData");
static_assert(offsetof(FKuroWorldRainCustomData, CurveName) == 0x000000, "Member 'FKuroWorldRainCustomData::CurveName' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainCustomData, CustomRandomIndex) == 0x00000C, "Member 'FKuroWorldRainCustomData::CustomRandomIndex' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainCustomData, Driver) == 0x000010, "Member 'FKuroWorldRainCustomData::Driver' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainCustomData, Curve) == 0x000018, "Member 'FKuroWorldRainCustomData::Curve' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroWorldRainSpawnInfo
// 0x0058 (0x0058 - 0x0000)
struct FKuroWorldRainSpawnInfo final
{
public:
	class UStaticMesh*                            RainMesh;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RainMaterial;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RainMaterialDesktop;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArraySizeXY;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArraySizeZ;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRangeXY;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRangeZ;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRateSingle;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnTimeWiggleNormalized;                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnPositionWiggleNormalized;                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LifeTimeRange;                                     // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScaleRange;                                        // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MassRange;                                         // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TimeScaleRange;                                    // 0x004C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MobileSpawnScale;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroWorldRainSpawnInfo) == 0x000008, "Wrong alignment on FKuroWorldRainSpawnInfo");
static_assert(sizeof(FKuroWorldRainSpawnInfo) == 0x000058, "Wrong size on FKuroWorldRainSpawnInfo");
static_assert(offsetof(FKuroWorldRainSpawnInfo, RainMesh) == 0x000000, "Member 'FKuroWorldRainSpawnInfo::RainMesh' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, RainMaterial) == 0x000008, "Member 'FKuroWorldRainSpawnInfo::RainMaterial' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, RainMaterialDesktop) == 0x000010, "Member 'FKuroWorldRainSpawnInfo::RainMaterialDesktop' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, ArraySizeXY) == 0x000018, "Member 'FKuroWorldRainSpawnInfo::ArraySizeXY' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, ArraySizeZ) == 0x00001C, "Member 'FKuroWorldRainSpawnInfo::ArraySizeZ' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, SpawnRangeXY) == 0x000020, "Member 'FKuroWorldRainSpawnInfo::SpawnRangeXY' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, SpawnRangeZ) == 0x000024, "Member 'FKuroWorldRainSpawnInfo::SpawnRangeZ' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, SpawnRateSingle) == 0x000028, "Member 'FKuroWorldRainSpawnInfo::SpawnRateSingle' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, SpawnTimeWiggleNormalized) == 0x00002C, "Member 'FKuroWorldRainSpawnInfo::SpawnTimeWiggleNormalized' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, SpawnPositionWiggleNormalized) == 0x000030, "Member 'FKuroWorldRainSpawnInfo::SpawnPositionWiggleNormalized' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, LifeTimeRange) == 0x000034, "Member 'FKuroWorldRainSpawnInfo::LifeTimeRange' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, ScaleRange) == 0x00003C, "Member 'FKuroWorldRainSpawnInfo::ScaleRange' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, MassRange) == 0x000044, "Member 'FKuroWorldRainSpawnInfo::MassRange' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, TimeScaleRange) == 0x00004C, "Member 'FKuroWorldRainSpawnInfo::TimeScaleRange' has a wrong offset!");
static_assert(offsetof(FKuroWorldRainSpawnInfo, MobileSpawnScale) == 0x000054, "Member 'FKuroWorldRainSpawnInfo::MobileSpawnScale' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.LensflareSamplerActorGlareParameter
// 0x0050 (0x0050 - 0x0000)
struct FLensflareSamplerActorGlareParameter final
{
public:
	bool                                          bCustomGlare;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              GlareSize;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GlareColorTint;                                    // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlareOpacity;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlareRot;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlareFixRot;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlareBgInfluence;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlareViewAtt;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomGlareTexture;                               // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             GlareTexture;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GlareUvScaleBias;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLensflareSamplerActorGlareParameter) == 0x000008, "Wrong alignment on FLensflareSamplerActorGlareParameter");
static_assert(sizeof(FLensflareSamplerActorGlareParameter) == 0x000050, "Wrong size on FLensflareSamplerActorGlareParameter");
static_assert(offsetof(FLensflareSamplerActorGlareParameter, bCustomGlare) == 0x000000, "Member 'FLensflareSamplerActorGlareParameter::bCustomGlare' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGlareParameter, GlareSize) == 0x000004, "Member 'FLensflareSamplerActorGlareParameter::GlareSize' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGlareParameter, GlareColorTint) == 0x00000C, "Member 'FLensflareSamplerActorGlareParameter::GlareColorTint' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGlareParameter, GlareOpacity) == 0x00001C, "Member 'FLensflareSamplerActorGlareParameter::GlareOpacity' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGlareParameter, GlareRot) == 0x000020, "Member 'FLensflareSamplerActorGlareParameter::GlareRot' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGlareParameter, GlareFixRot) == 0x000024, "Member 'FLensflareSamplerActorGlareParameter::GlareFixRot' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGlareParameter, GlareBgInfluence) == 0x000028, "Member 'FLensflareSamplerActorGlareParameter::GlareBgInfluence' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGlareParameter, GlareViewAtt) == 0x00002C, "Member 'FLensflareSamplerActorGlareParameter::GlareViewAtt' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGlareParameter, bCustomGlareTexture) == 0x000030, "Member 'FLensflareSamplerActorGlareParameter::bCustomGlareTexture' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGlareParameter, GlareTexture) == 0x000038, "Member 'FLensflareSamplerActorGlareParameter::GlareTexture' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGlareParameter, GlareUvScaleBias) == 0x000040, "Member 'FLensflareSamplerActorGlareParameter::GlareUvScaleBias' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.LensflareSamplerActorHaloParameter
// 0x0048 (0x0048 - 0x0000)
struct FLensflareSamplerActorHaloParameter final
{
public:
	bool                                          bCustomHalo;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HaloAtt;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HaloSize;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HaloOffset;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HaloRange;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HaloColorTint;                                     // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HaloOpacity;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HaloBgInfluence;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HaloViewAtt;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HaloUseFixRot;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HaloFixRot;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomHaloTexture;                                // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             HaloTexture;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLensflareSamplerActorHaloParameter) == 0x000008, "Wrong alignment on FLensflareSamplerActorHaloParameter");
static_assert(sizeof(FLensflareSamplerActorHaloParameter) == 0x000048, "Wrong size on FLensflareSamplerActorHaloParameter");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, bCustomHalo) == 0x000000, "Member 'FLensflareSamplerActorHaloParameter::bCustomHalo' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, HaloAtt) == 0x000004, "Member 'FLensflareSamplerActorHaloParameter::HaloAtt' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, HaloSize) == 0x000008, "Member 'FLensflareSamplerActorHaloParameter::HaloSize' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, HaloOffset) == 0x00000C, "Member 'FLensflareSamplerActorHaloParameter::HaloOffset' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, HaloRange) == 0x000010, "Member 'FLensflareSamplerActorHaloParameter::HaloRange' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, HaloColorTint) == 0x000014, "Member 'FLensflareSamplerActorHaloParameter::HaloColorTint' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, HaloOpacity) == 0x000024, "Member 'FLensflareSamplerActorHaloParameter::HaloOpacity' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, HaloBgInfluence) == 0x000028, "Member 'FLensflareSamplerActorHaloParameter::HaloBgInfluence' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, HaloViewAtt) == 0x00002C, "Member 'FLensflareSamplerActorHaloParameter::HaloViewAtt' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, HaloUseFixRot) == 0x000030, "Member 'FLensflareSamplerActorHaloParameter::HaloUseFixRot' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, HaloFixRot) == 0x000034, "Member 'FLensflareSamplerActorHaloParameter::HaloFixRot' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, bCustomHaloTexture) == 0x000038, "Member 'FLensflareSamplerActorHaloParameter::bCustomHaloTexture' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorHaloParameter, HaloTexture) == 0x000040, "Member 'FLensflareSamplerActorHaloParameter::HaloTexture' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.LensflareSamplerActorGhostParameter
// 0x0040 (0x0040 - 0x0000)
struct FLensflareSamplerActorGhostParameter final
{
public:
	bool                                          bCustomGhost;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GhostSize;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostOffset;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostRange;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GhostColorTint;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostOpacity;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostBgInfluence;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostViewAtt;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GhostUseFixRot;                                    // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GhostFixRot;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomGhostTexture;                               // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             GhostTexture;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLensflareSamplerActorGhostParameter) == 0x000008, "Wrong alignment on FLensflareSamplerActorGhostParameter");
static_assert(sizeof(FLensflareSamplerActorGhostParameter) == 0x000040, "Wrong size on FLensflareSamplerActorGhostParameter");
static_assert(offsetof(FLensflareSamplerActorGhostParameter, bCustomGhost) == 0x000000, "Member 'FLensflareSamplerActorGhostParameter::bCustomGhost' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGhostParameter, GhostSize) == 0x000004, "Member 'FLensflareSamplerActorGhostParameter::GhostSize' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGhostParameter, GhostOffset) == 0x000008, "Member 'FLensflareSamplerActorGhostParameter::GhostOffset' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGhostParameter, GhostRange) == 0x00000C, "Member 'FLensflareSamplerActorGhostParameter::GhostRange' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGhostParameter, GhostColorTint) == 0x000010, "Member 'FLensflareSamplerActorGhostParameter::GhostColorTint' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGhostParameter, GhostOpacity) == 0x000020, "Member 'FLensflareSamplerActorGhostParameter::GhostOpacity' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGhostParameter, GhostBgInfluence) == 0x000024, "Member 'FLensflareSamplerActorGhostParameter::GhostBgInfluence' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGhostParameter, GhostViewAtt) == 0x000028, "Member 'FLensflareSamplerActorGhostParameter::GhostViewAtt' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGhostParameter, GhostUseFixRot) == 0x00002C, "Member 'FLensflareSamplerActorGhostParameter::GhostUseFixRot' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGhostParameter, GhostFixRot) == 0x000030, "Member 'FLensflareSamplerActorGhostParameter::GhostFixRot' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGhostParameter, bCustomGhostTexture) == 0x000034, "Member 'FLensflareSamplerActorGhostParameter::bCustomGhostTexture' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorGhostParameter, GhostTexture) == 0x000038, "Member 'FLensflareSamplerActorGhostParameter::GhostTexture' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.LensflareSamplerActorParameter
// 0x0008 (0x0008 - 0x0000)
struct FLensflareSamplerActorParameter final
{
public:
	float                                         Falloff;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenSizeCullRatio;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLensflareSamplerActorParameter) == 0x000004, "Wrong alignment on FLensflareSamplerActorParameter");
static_assert(sizeof(FLensflareSamplerActorParameter) == 0x000008, "Wrong size on FLensflareSamplerActorParameter");
static_assert(offsetof(FLensflareSamplerActorParameter, Falloff) == 0x000000, "Member 'FLensflareSamplerActorParameter::Falloff' has a wrong offset!");
static_assert(offsetof(FLensflareSamplerActorParameter, ScreenSizeCullRatio) == 0x000004, "Member 'FLensflareSamplerActorParameter::ScreenSizeCullRatio' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.MovieSceneKuroMaterialContainerTrackImplementation
// 0x0028 (0x0038 - 0x0010)
struct FMovieSceneKuroMaterialContainerTrackImplementation final : public FMovieSceneTrackImplementation
{
public:
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0010(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0014(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UKuroMaterialControllerDataAsset*       MaterialDataAsset;                                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TrackObjectName;                                   // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bLoop;                                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEndImmediate;                                     // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSkipToEnd;                                        // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F[0x9];                                       // 0x002F(0x0009)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneKuroMaterialContainerTrackImplementation) == 0x000008, "Wrong alignment on FMovieSceneKuroMaterialContainerTrackImplementation");
static_assert(sizeof(FMovieSceneKuroMaterialContainerTrackImplementation) == 0x000038, "Wrong size on FMovieSceneKuroMaterialContainerTrackImplementation");
static_assert(offsetof(FMovieSceneKuroMaterialContainerTrackImplementation, SectionStartFrame) == 0x000010, "Member 'FMovieSceneKuroMaterialContainerTrackImplementation::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FMovieSceneKuroMaterialContainerTrackImplementation, SectionEndFrame) == 0x000014, "Member 'FMovieSceneKuroMaterialContainerTrackImplementation::SectionEndFrame' has a wrong offset!");
static_assert(offsetof(FMovieSceneKuroMaterialContainerTrackImplementation, MaterialDataAsset) == 0x000018, "Member 'FMovieSceneKuroMaterialContainerTrackImplementation::MaterialDataAsset' has a wrong offset!");
static_assert(offsetof(FMovieSceneKuroMaterialContainerTrackImplementation, TrackObjectName) == 0x000020, "Member 'FMovieSceneKuroMaterialContainerTrackImplementation::TrackObjectName' has a wrong offset!");
static_assert(offsetof(FMovieSceneKuroMaterialContainerTrackImplementation, bLoop) == 0x00002C, "Member 'FMovieSceneKuroMaterialContainerTrackImplementation::bLoop' has a wrong offset!");
static_assert(offsetof(FMovieSceneKuroMaterialContainerTrackImplementation, bEndImmediate) == 0x00002D, "Member 'FMovieSceneKuroMaterialContainerTrackImplementation::bEndImmediate' has a wrong offset!");
static_assert(offsetof(FMovieSceneKuroMaterialContainerTrackImplementation, bSkipToEnd) == 0x00002E, "Member 'FMovieSceneKuroMaterialContainerTrackImplementation::bSkipToEnd' has a wrong offset!");

}

