#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroSeqEvent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SSeqCharacterBlend_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KuroSeqEvent.BP_KuroSeqEvent_C
// 0x0088 (0x0338 - 0x02B0)
class ABP_KuroSeqEvent_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____0__Direction_D5AF32B047C17E633B8B4FBCA8F1E7AB; // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_0;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveLocation;                                      // 0x02D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Move;                                           // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Move_Rotation;                                     // 0x02E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          isRotate;                                          // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         BlendActorList;                                    // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FTransform>                     BlendTargetTransform;                              // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIsBlending;                                       // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 lerpAlpha;                                         // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSSeqCharacterBlend>            CharacterBlendGroup;                               // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_KuroSeqEvent(int32 EntryPoint);
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void 时间轴_0__UpdateFunc();
	void 时间轴_0__FinishedFunc();
	void Play_Subtitle(const struct FSSubtitleSettings& inSubtitle);
	void JumpToSequenceNode(class FName inSeqNodeID);
	void PauseSequence();
	void ResumeSequnece();
	void EnableUIInput();
	void JumpToSequenceNodeWithOption();
	void JumpToOtherSeqNetwrok(class FName inRowName, class UDataTable* inSeqNetworks);
	void Interaction(const struct FSSubtitleSettings& inSubtitleSettings);
	void GeneralEvent(class FName inEventID);
	void NPC_Rotate(float 角度);
	void PlayerUIMovie(class UFileMediaSource* MediaSource, bool IsMove, const struct FVector& inlocation, bool isTotate, const struct FRotator& inRotation);
	void MoveAfterMoviePlay();
	void DirectInteraction(class FName InteractionID);
	void SetCharacterBinding(const class FString& InTag);
	void BlendingCharacter(const struct FSSeqCharacterBlendGroup& inSettings);
	void BlendHelper();
	void Set_Motion_Blur(bool 启用);
	void ChangeWeather(int32 天气Id, bool 继承, float 过渡时间);
	void ChangeTimeOfDay(bool 继承, int32 小时, int32 分钟, int32 过渡帧数, int32 最终小时, int32 最终分钟);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KuroSeqEvent_C">();
	}
	static class ABP_KuroSeqEvent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KuroSeqEvent_C>();
	}
};
static_assert(alignof(ABP_KuroSeqEvent_C) == 0x000008, "Wrong alignment on ABP_KuroSeqEvent_C");
static_assert(sizeof(ABP_KuroSeqEvent_C) == 0x000338, "Wrong size on ABP_KuroSeqEvent_C");
static_assert(offsetof(ABP_KuroSeqEvent_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_KuroSeqEvent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_KuroSeqEvent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, ____0__Direction_D5AF32B047C17E633B8B4FBCA8F1E7AB) == 0x0002C0, "Member 'ABP_KuroSeqEvent_C::____0__Direction_D5AF32B047C17E633B8B4FBCA8F1E7AB' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, 时间轴_0) == 0x0002C8, "Member 'ABP_KuroSeqEvent_C::时间轴_0' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, MoveLocation) == 0x0002D0, "Member 'ABP_KuroSeqEvent_C::MoveLocation' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, Is_Move) == 0x0002DC, "Member 'ABP_KuroSeqEvent_C::Is_Move' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, Move_Rotation) == 0x0002E0, "Member 'ABP_KuroSeqEvent_C::Move_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, isRotate) == 0x0002EC, "Member 'ABP_KuroSeqEvent_C::isRotate' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, BlendActorList) == 0x0002F0, "Member 'ABP_KuroSeqEvent_C::BlendActorList' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, BlendTargetTransform) == 0x000300, "Member 'ABP_KuroSeqEvent_C::BlendTargetTransform' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, bIsBlending) == 0x000310, "Member 'ABP_KuroSeqEvent_C::bIsBlending' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, lerpAlpha) == 0x000318, "Member 'ABP_KuroSeqEvent_C::lerpAlpha' has a wrong offset!");
static_assert(offsetof(ABP_KuroSeqEvent_C, CharacterBlendGroup) == 0x000328, "Member 'ABP_KuroSeqEvent_C::CharacterBlendGroup' has a wrong offset!");

}

