#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LogicDataForce

#include "Basic.hpp"

#include "LogicDataBase_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass LogicDataForce.LogicDataForce_C
// 0x0060 (0x00A0 - 0x0040)
class ULogicDataForce_C final : public ULogicDataBase_C
{
public:
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceBase;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForceDampingRatio;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InnerRadius;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OuterRadius;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LimitWeight;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ConstantForce;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TowardsBullet;                                     // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HaveTopArea;                                       // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TopAreaHeight;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ContinueTime;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ContinueTimeCurve;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLaunching;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  WorkHaveTag;                                       // 0x0070(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsResetOnLast;                                     // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Group;                                             // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImmuneStopDuration;                                // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LogicDataForce_C">();
	}
	static class ULogicDataForce_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULogicDataForce_C>();
	}
};
static_assert(alignof(ULogicDataForce_C) == 0x000008, "Wrong alignment on ULogicDataForce_C");
static_assert(sizeof(ULogicDataForce_C) == 0x0000A0, "Wrong size on ULogicDataForce_C");
static_assert(offsetof(ULogicDataForce_C, ForceBase) == 0x00003C, "Member 'ULogicDataForce_C::ForceBase' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, ForceDampingRatio) == 0x000040, "Member 'ULogicDataForce_C::ForceDampingRatio' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, InnerRadius) == 0x000044, "Member 'ULogicDataForce_C::InnerRadius' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, OuterRadius) == 0x000048, "Member 'ULogicDataForce_C::OuterRadius' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, LimitWeight) == 0x00004C, "Member 'ULogicDataForce_C::LimitWeight' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, ConstantForce) == 0x000050, "Member 'ULogicDataForce_C::ConstantForce' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, TowardsBullet) == 0x000051, "Member 'ULogicDataForce_C::TowardsBullet' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, HaveTopArea) == 0x000052, "Member 'ULogicDataForce_C::HaveTopArea' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, TopAreaHeight) == 0x000054, "Member 'ULogicDataForce_C::TopAreaHeight' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, ContinueTime) == 0x000058, "Member 'ULogicDataForce_C::ContinueTime' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, ContinueTimeCurve) == 0x000060, "Member 'ULogicDataForce_C::ContinueTimeCurve' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, IsLaunching) == 0x000068, "Member 'ULogicDataForce_C::IsLaunching' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, WorkHaveTag) == 0x000070, "Member 'ULogicDataForce_C::WorkHaveTag' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, IsResetOnLast) == 0x000090, "Member 'ULogicDataForce_C::IsResetOnLast' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, Group) == 0x000094, "Member 'ULogicDataForce_C::Group' has a wrong offset!");
static_assert(offsetof(ULogicDataForce_C, ImmuneStopDuration) == 0x000098, "Member 'ULogicDataForce_C::ImmuneStopDuration' has a wrong offset!");

}

