#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroPerformance

#include "Basic.hpp"


namespace SDK
{

// Enum KuroPerformance.EKuroPerformanceAdvice
// NumValues: 0x0009
enum class EKuroPerformanceAdvice : uint8
{
	Pa_Error                                 = 18446744073709551614,
	Pa_None                                  = 18446744073709551615,
	Pa_Free                                  = 0,
	Pa_CBound                                = 1,
	Pa_GBound                                = 2,
	Pa_CGBound                               = 3,
	Pa_Downgrade                             = 4,
	Pa_Upgrade                               = 5,
	Pa_MAX                                   = 6,
};

// Enum KuroPerformance.EKuroThermalStatus
// NumValues: 0x0006
enum class EKuroThermalStatus : uint8
{
	Ts_None                                  = 0,
	Ts_Light                                 = 1,
	Ts_Moderate                              = 2,
	Ts_Severe                                = 3,
	Ts_Critical                              = 4,
	Ts_MAX                                   = 5,
};

// Enum KuroPerformance.EKuroProcessorLoad
// NumValues: 0x0006
enum class EKuroProcessorLoad : uint8
{
	PL_UnKnown                               = 18446744073709551615,
	PL_Low                                   = 0,
	PL_Medium                                = 1,
	PL_High                                  = 2,
	PL_Max                                   = 3,
	PL_MAX                                   = 4,
};

// Enum KuroPerformance.EKuroModuleStatus
// NumValues: 0x0006
enum class EKuroModuleStatus : uint8
{
	MS_NotAvailable                          = 0,
	MS_Ready                                 = 1,
	MS_Running                               = 2,
	MS_Stop                                  = 3,
	MS_ShutDown                              = 4,
	MS_MAX                                   = 5,
};

// Enum KuroPerformance.EKuroGameConfigLevel
// NumValues: 0x0004
enum class EKuroGameConfigLevel : uint8
{
	GCL_Low                                  = 0,
	GCL_Middle                               = 1,
	GCL_High                                 = 2,
	GCL_MAX                                  = 3,
};

// Enum KuroPerformance.EKuroModuleType
// NumValues: 0x0003
enum class EKuroModuleType : uint8
{
	MT_None                                  = 0,
	MT_MAGT                                  = 1,
	MT_MAX                                   = 2,
};

// Enum KuroPerformance.EKuroBoostFlags
// NumValues: 0x0007
enum class EKuroBoostFlags : uint8
{
	Boost_None                               = 0,
	Boost_CPU                                = 1,
	Boost_CPUMemory                          = 2,
	Boost_GPU                                = 4,
	Boost_GPUMemory                          = 8,
	Boost_All                                = 15,
	Boost_MAX                                = 16,
};

// ScriptStruct KuroPerformance.KuroGameConfig
// 0x000C (0x000C - 0x0000)
struct FKuroGameConfig final
{
public:
	int32                                         FPS;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Resolution;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMSAA;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroGameConfigLevel                          RenderLevel;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroGameConfigLevel                          ModelLevel;                                        // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSceneTransition;                                  // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroGameConfig) == 0x000004, "Wrong alignment on FKuroGameConfig");
static_assert(sizeof(FKuroGameConfig) == 0x00000C, "Wrong size on FKuroGameConfig");
static_assert(offsetof(FKuroGameConfig, FPS) == 0x000000, "Member 'FKuroGameConfig::FPS' has a wrong offset!");
static_assert(offsetof(FKuroGameConfig, Resolution) == 0x000004, "Member 'FKuroGameConfig::Resolution' has a wrong offset!");
static_assert(offsetof(FKuroGameConfig, bMSAA) == 0x000008, "Member 'FKuroGameConfig::bMSAA' has a wrong offset!");
static_assert(offsetof(FKuroGameConfig, RenderLevel) == 0x000009, "Member 'FKuroGameConfig::RenderLevel' has a wrong offset!");
static_assert(offsetof(FKuroGameConfig, ModelLevel) == 0x00000A, "Member 'FKuroGameConfig::ModelLevel' has a wrong offset!");
static_assert(offsetof(FKuroGameConfig, bSceneTransition) == 0x00000B, "Member 'FKuroGameConfig::bSceneTransition' has a wrong offset!");

// ScriptStruct KuroPerformance.KuroPerformanceReport
// 0x0034 (0x0034 - 0x0000)
struct FKuroPerformanceReport final
{
public:
	EKuroProcessorLoad                            CPULoadStatus;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroProcessorLoad                            GPULoadStatus;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetFPS;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CPUPerfIndex;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CPULoadIndex;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GPUPerfIndex;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GPULoadIndex;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameID;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CPUFrameTime;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GPUFrameTime;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurTemperature;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroThermalStatus                            ThermalStatus;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThermalTempBudget;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroPerformanceAdvice                        PerformanceAdvice;                                 // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroPerformanceReport) == 0x000004, "Wrong alignment on FKuroPerformanceReport");
static_assert(sizeof(FKuroPerformanceReport) == 0x000034, "Wrong size on FKuroPerformanceReport");
static_assert(offsetof(FKuroPerformanceReport, CPULoadStatus) == 0x000000, "Member 'FKuroPerformanceReport::CPULoadStatus' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, GPULoadStatus) == 0x000001, "Member 'FKuroPerformanceReport::GPULoadStatus' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, TargetFPS) == 0x000004, "Member 'FKuroPerformanceReport::TargetFPS' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, CPUPerfIndex) == 0x000008, "Member 'FKuroPerformanceReport::CPUPerfIndex' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, CPULoadIndex) == 0x00000C, "Member 'FKuroPerformanceReport::CPULoadIndex' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, GPUPerfIndex) == 0x000010, "Member 'FKuroPerformanceReport::GPUPerfIndex' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, GPULoadIndex) == 0x000014, "Member 'FKuroPerformanceReport::GPULoadIndex' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, FrameID) == 0x000018, "Member 'FKuroPerformanceReport::FrameID' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, CPUFrameTime) == 0x00001C, "Member 'FKuroPerformanceReport::CPUFrameTime' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, GPUFrameTime) == 0x000020, "Member 'FKuroPerformanceReport::GPUFrameTime' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, CurTemperature) == 0x000024, "Member 'FKuroPerformanceReport::CurTemperature' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, ThermalStatus) == 0x000028, "Member 'FKuroPerformanceReport::ThermalStatus' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, ThermalTempBudget) == 0x00002C, "Member 'FKuroPerformanceReport::ThermalTempBudget' has a wrong offset!");
static_assert(offsetof(FKuroPerformanceReport, PerformanceAdvice) == 0x000030, "Member 'FKuroPerformanceReport::PerformanceAdvice' has a wrong offset!");

// ScriptStruct KuroPerformance.KuroBoostQueryResult
// 0x0010 (0x0010 - 0x0000)
struct FKuroBoostQueryResult final
{
public:
	int32                                         mode;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         target;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         percentage;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         durationLeftInMillisecond;                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroBoostQueryResult) == 0x000004, "Wrong alignment on FKuroBoostQueryResult");
static_assert(sizeof(FKuroBoostQueryResult) == 0x000010, "Wrong size on FKuroBoostQueryResult");
static_assert(offsetof(FKuroBoostQueryResult, mode) == 0x000000, "Member 'FKuroBoostQueryResult::mode' has a wrong offset!");
static_assert(offsetof(FKuroBoostQueryResult, target) == 0x000004, "Member 'FKuroBoostQueryResult::target' has a wrong offset!");
static_assert(offsetof(FKuroBoostQueryResult, percentage) == 0x000008, "Member 'FKuroBoostQueryResult::percentage' has a wrong offset!");
static_assert(offsetof(FKuroBoostQueryResult, durationLeftInMillisecond) == 0x00000C, "Member 'FKuroBoostQueryResult::durationLeftInMillisecond' has a wrong offset!");

}

