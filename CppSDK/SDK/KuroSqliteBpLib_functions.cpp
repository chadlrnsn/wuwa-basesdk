#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroSqliteBpLib

#include "Basic.hpp"

#include "KuroSqliteBpLib_classes.hpp"
#include "KuroSqliteBpLib_parameters.hpp"


namespace SDK
{

// Function KuroSqliteBpLib.KuroQueryStatLibrary.AppendString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Content                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroQueryStatLibrary::AppendString(const class FString& Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroQueryStatLibrary", "AppendString");

	Params::KuroQueryStatLibrary_AppendString Parms{};

	Parms.Content = std::move(Content);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSqliteBpLib.KuroQueryStatLibrary.CloseTestDataFile
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroQueryStatLibrary::CloseTestDataFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroQueryStatLibrary", "CloseTestDataFile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSqliteBpLib.KuroQueryStatLibrary.InvokeCloseSaveQueryArgsFileAction
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroQueryStatLibrary::InvokeCloseSaveQueryArgsFileAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroQueryStatLibrary", "InvokeCloseSaveQueryArgsFileAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSqliteBpLib.KuroQueryStatLibrary.InvokeTestSqliteAction
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroQueryStatLibrary::InvokeTestSqliteAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroQueryStatLibrary", "InvokeTestSqliteAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSqliteBpLib.KuroQueryStatLibrary.SetCloseSaveQueryArgsFileAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FJsObject&                 Action                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UKuroQueryStatLibrary::SetCloseSaveQueryArgsFileAction(const struct FJsObject& Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroQueryStatLibrary", "SetCloseSaveQueryArgsFileAction");

	Params::KuroQueryStatLibrary_SetCloseSaveQueryArgsFileAction Parms{};

	Parms.Action = std::move(Action);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSqliteBpLib.KuroQueryStatLibrary.SetTestDataSavePath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroQueryStatLibrary::SetTestDataSavePath(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroQueryStatLibrary", "SetTestDataSavePath");

	Params::KuroQueryStatLibrary_SetTestDataSavePath Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSqliteBpLib.KuroQueryStatLibrary.SetTestSqliteAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FJsObject&                 Action                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UKuroQueryStatLibrary::SetTestSqliteAction(const struct FJsObject& Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroQueryStatLibrary", "SetTestSqliteAction");

	Params::KuroQueryStatLibrary_SetTestSqliteAction Parms{};

	Parms.Action = std::move(Action);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSqliteBpLib.KuroSqliteLibrary.CloseAllConnections
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSqliteLibrary::CloseAllConnections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSqliteLibrary", "CloseAllConnections");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSqliteBpLib.KuroSqliteLibrary.Execute
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DbPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Sql                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSqliteLibrary::Execute(const class FString& DbPath, const class FString& Sql)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSqliteLibrary", "Execute");

	Params::KuroSqliteLibrary_Execute Parms{};

	Parms.DbPath = std::move(DbPath);
	Parms.Sql = std::move(Sql);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteLibrary.ExecuteAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DbPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Sql                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSqliteLibrary::ExecuteAsync(const class FString& DbPath, const class FString& Sql)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSqliteLibrary", "ExecuteAsync");

	Params::KuroSqliteLibrary_ExecuteAsync Parms{};

	Parms.DbPath = std::move(DbPath);
	Parms.Sql = std::move(Sql);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSqliteBpLib.KuroSqliteLibrary.OpenCreateDB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DbPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bUseThread                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSqliteLibrary::OpenCreateDB(const class FString& DbPath, const bool bUseThread)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSqliteLibrary", "OpenCreateDB");

	Params::KuroSqliteLibrary_OpenCreateDB Parms{};

	Parms.DbPath = std::move(DbPath);
	Parms.bUseThread = bUseThread;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteLibrary.Query
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DbPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Sql                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UKuroSqliteResultSet*             ResultSet                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSqliteLibrary::Query(const class FString& DbPath, const class FString& Sql, class UKuroSqliteResultSet* ResultSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSqliteLibrary", "Query");

	Params::KuroSqliteLibrary_Query Parms{};

	Parms.DbPath = std::move(DbPath);
	Parms.Sql = std::move(Sql);
	Parms.ResultSet = ResultSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteLibrary.QueryValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    DbPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Sql                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutValue                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UKuroSqliteLibrary::QueryValue(const class FString& DbPath, const class FString& Sql, class FString* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSqliteLibrary", "QueryValue");

	Params::KuroSqliteLibrary_QueryValue Parms{};

	Parms.DbPath = std::move(DbPath);
	Parms.Sql = std::move(Sql);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteLibrary.SetDBKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DBKey                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSqliteLibrary::SetDBKey(const class FString& DBKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSqliteLibrary", "SetDBKey");

	Params::KuroSqliteLibrary_SetDBKey Parms{};

	Parms.DBKey = std::move(DBKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSqliteBpLib.KuroSqliteLibrary.SqliteStatusGetCurrent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const int32                             StatusOp                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UKuroSqliteLibrary::SqliteStatusGetCurrent(const int32 StatusOp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSqliteLibrary", "SqliteStatusGetCurrent");

	Params::KuroSqliteLibrary_SqliteStatusGetCurrent Parms{};

	Parms.StatusOp = StatusOp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteLibrary.SqliteStatusGetHighWater
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const int32                             StatusOp                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              ResetHighWater                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UKuroSqliteLibrary::SqliteStatusGetHighWater(const int32 StatusOp, const bool ResetHighWater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSqliteLibrary", "SqliteStatusGetHighWater");

	Params::KuroSqliteLibrary_SqliteStatusGetHighWater Parms{};

	Parms.StatusOp = StatusOp;
	Parms.ResetHighWater = ResetHighWater;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteResultSet.Release
// (Final, Native, Public)

void UKuroSqliteResultSet::Release()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSqliteResultSet", "Release");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSqliteBpLib.KuroSqliteResultSet.GetBigInt
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const class FString&                    Column                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSqliteResultSet::GetBigInt(const class FString& Column, int64* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSqliteResultSet", "GetBigInt");

	Params::KuroSqliteResultSet_GetBigInt Parms{};

	Parms.Column = std::move(Column);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteResultSet.GetBool
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const class FString&                    Column                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSqliteResultSet::GetBool(const class FString& Column, bool* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSqliteResultSet", "GetBool");

	Params::KuroSqliteResultSet_GetBool Parms{};

	Parms.Column = std::move(Column);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteResultSet.GetBytes
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const class FString&                    Column                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FArrayBuffer*                    Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSqliteResultSet::GetBytes(const class FString& Column, struct FArrayBuffer* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSqliteResultSet", "GetBytes");

	Params::KuroSqliteResultSet_GetBytes Parms{};

	Parms.Column = std::move(Column);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = std::move(Parms.Value);

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteResultSet.GetFloat
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const class FString&                    Column                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSqliteResultSet::GetFloat(const class FString& Column, float* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSqliteResultSet", "GetFloat");

	Params::KuroSqliteResultSet_GetFloat Parms{};

	Parms.Column = std::move(Column);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteResultSet.GetInt
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const class FString&                    Column                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSqliteResultSet::GetInt(const class FString& Column, int32* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSqliteResultSet", "GetInt");

	Params::KuroSqliteResultSet_GetInt Parms{};

	Parms.Column = std::move(Column);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteResultSet.GetString
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const class FString&                    Column                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSqliteResultSet::GetString(const class FString& Column, class FString* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSqliteResultSet", "GetString");

	Params::KuroSqliteResultSet_GetString Parms{};

	Parms.Column = std::move(Column);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = std::move(Parms.Value);

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteResultSet.HasValue
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSqliteResultSet::HasValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSqliteResultSet", "HasValue");

	Params::KuroSqliteResultSet_HasValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSqliteBpLib.KuroSqliteResultSet.MoveToNext
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSqliteResultSet::MoveToNext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSqliteResultSet", "MoveToNext");

	Params::KuroSqliteResultSet_MoveToNext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

