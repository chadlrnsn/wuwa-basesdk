#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsAnimNotifyStateAddLocationBlackboard

#include "Basic.hpp"

#include "EAnsBlackboardType_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsAnimNotifyStateAddLocationBlackboard.TsAnimNotifyStateAddLocationBlackboard_C
// 0x0028 (0x0070 - 0x0048)
class UTsAnimNotifyStateAddLocationBlackboard_C final : public UKuroAnimNotifyState
{
public:
	class UCurveFloat*                            Curve;                                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedChangeToFlying;                                // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AddLocationKey;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	EAnsBlackboardType                            黑板类型;                                          // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool K2_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	bool K2_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	bool K2_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);

	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsAnimNotifyStateAddLocationBlackboard_C">();
	}
	static class UTsAnimNotifyStateAddLocationBlackboard_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsAnimNotifyStateAddLocationBlackboard_C>();
	}
};
static_assert(alignof(UTsAnimNotifyStateAddLocationBlackboard_C) == 0x000008, "Wrong alignment on UTsAnimNotifyStateAddLocationBlackboard_C");
static_assert(sizeof(UTsAnimNotifyStateAddLocationBlackboard_C) == 0x000070, "Wrong size on UTsAnimNotifyStateAddLocationBlackboard_C");
static_assert(offsetof(UTsAnimNotifyStateAddLocationBlackboard_C, Curve) == 0x000048, "Member 'UTsAnimNotifyStateAddLocationBlackboard_C::Curve' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateAddLocationBlackboard_C, NeedChangeToFlying) == 0x000050, "Member 'UTsAnimNotifyStateAddLocationBlackboard_C::NeedChangeToFlying' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateAddLocationBlackboard_C, AddLocationKey) == 0x000058, "Member 'UTsAnimNotifyStateAddLocationBlackboard_C::AddLocationKey' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateAddLocationBlackboard_C, 黑板类型) == 0x000068, "Member 'UTsAnimNotifyStateAddLocationBlackboard_C::黑板类型' has a wrong offset!");

}

