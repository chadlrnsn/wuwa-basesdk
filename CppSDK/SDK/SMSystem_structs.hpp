#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SMSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SMSystem.ESMNetworkConfigurationType
// NumValues: 0x0004
enum class ESMNetworkConfigurationType : uint8
{
	SM_Client                                = 0,
	SM_Server                                = 1,
	SM_ClientAndServer                       = 2,
	SM_MAX                                   = 3,
};

// Enum SMSystem.ESMConditionalEvaluationType
// NumValues: 0x0005
enum class ESMConditionalEvaluationType : uint8
{
	SM_Graph                                 = 0,
	SM_NodeInstance                          = 1,
	SM_AlwaysFalse                           = 2,
	SM_AlwaysTrue                            = 3,
	SM_MAX                                   = 4,
};

// Enum SMSystem.ESMExposedFunctionExecutionType
// NumValues: 0x0004
enum class ESMExposedFunctionExecutionType : uint8
{
	SM_Graph                                 = 0,
	SM_NodeInstance                          = 1,
	SM_None                                  = 2,
	SM_MAX                                   = 3,
};

// Enum SMSystem.ETransitionRule
// NumValues: 0x0003
enum class ETransitionRule : uint8
{
	TransitionRule_Priority                  = 0,
	TransitionRule_Weight                    = 1,
	TransitionRule_MAX                       = 2,
};

// Enum SMSystem.ETakeControlType
// NumValues: 0x0003
enum class ETakeControlType : uint8
{
	TakeControl_Default                      = 0,
	TakeControl_ReEnter                      = 1,
	TakeControl_MAX                          = 2,
};

// Enum SMSystem.ESMTransactionType
// NumValues: 0x0009
enum class ESMTransactionType : uint8
{
	SM_Unknown                               = 0,
	SM_Transition                            = 1,
	SM_State                                 = 2,
	SM_FullSync                              = 3,
	SM_Start                                 = 4,
	SM_Stop                                  = 5,
	SM_Initialize                            = 6,
	SM_Shutdown                              = 7,
	SM_MAX                                   = 8,
};

// Enum SMSystem.ETransitionPredictionType
// NumValues: 0x0004
enum class ETransitionPredictionType : uint8
{
	Prediction_Server                        = 0,
	Prediction_Autonomous                    = 1,
	Prediction_Simulated                     = 2,
	Prediction_MAX                           = 3,
};

// ScriptStruct SMSystem.SMReferenceContainer
// 0x0018 (0x0018 - 0x0000)
struct FSMReferenceContainer final
{
public:
	struct FGuid                                  PathGuid;                                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMInstance*                            Reference;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSMReferenceContainer) == 0x000008, "Wrong alignment on FSMReferenceContainer");
static_assert(sizeof(FSMReferenceContainer) == 0x000018, "Wrong size on FSMReferenceContainer");
static_assert(offsetof(FSMReferenceContainer, PathGuid) == 0x000000, "Member 'FSMReferenceContainer::PathGuid' has a wrong offset!");
static_assert(offsetof(FSMReferenceContainer, Reference) == 0x000010, "Member 'FSMReferenceContainer::Reference' has a wrong offset!");

// ScriptStruct SMSystem.SMInfo_Base
// 0x0060 (0x0060 - 0x0000)
struct FSMInfo_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NodeName;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OwnerGuid;                                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  NodeGuid;                                          // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OwnerNodeGuid;                                     // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USMNodeInstance*                        NodeInstance;                                      // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSMInfo_Base) == 0x000008, "Wrong alignment on FSMInfo_Base");
static_assert(sizeof(FSMInfo_Base) == 0x000060, "Wrong size on FSMInfo_Base");
static_assert(offsetof(FSMInfo_Base, NodeName) == 0x000008, "Member 'FSMInfo_Base::NodeName' has a wrong offset!");
static_assert(offsetof(FSMInfo_Base, Guid) == 0x000018, "Member 'FSMInfo_Base::Guid' has a wrong offset!");
static_assert(offsetof(FSMInfo_Base, OwnerGuid) == 0x000028, "Member 'FSMInfo_Base::OwnerGuid' has a wrong offset!");
static_assert(offsetof(FSMInfo_Base, NodeGuid) == 0x000038, "Member 'FSMInfo_Base::NodeGuid' has a wrong offset!");
static_assert(offsetof(FSMInfo_Base, OwnerNodeGuid) == 0x000048, "Member 'FSMInfo_Base::OwnerNodeGuid' has a wrong offset!");
static_assert(offsetof(FSMInfo_Base, NodeInstance) == 0x000058, "Member 'FSMInfo_Base::NodeInstance' has a wrong offset!");

// ScriptStruct SMSystem.SMTransitionInfo
// 0x0038 (0x0098 - 0x0060)
struct FSMTransitionInfo final : public FSMInfo_Base
{
public:
	struct FGuid                                  FromStateGuid;                                     // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ToStateGuid;                                       // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastNetworkTimestamp;                              // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMTransitionInfo) == 0x000008, "Wrong alignment on FSMTransitionInfo");
static_assert(sizeof(FSMTransitionInfo) == 0x000098, "Wrong size on FSMTransitionInfo");
static_assert(offsetof(FSMTransitionInfo, FromStateGuid) == 0x000060, "Member 'FSMTransitionInfo::FromStateGuid' has a wrong offset!");
static_assert(offsetof(FSMTransitionInfo, ToStateGuid) == 0x000070, "Member 'FSMTransitionInfo::ToStateGuid' has a wrong offset!");
static_assert(offsetof(FSMTransitionInfo, Priority) == 0x000080, "Member 'FSMTransitionInfo::Priority' has a wrong offset!");
static_assert(offsetof(FSMTransitionInfo, LastNetworkTimestamp) == 0x000088, "Member 'FSMTransitionInfo::LastNetworkTimestamp' has a wrong offset!");

// ScriptStruct SMSystem.SMExposedFunctionHandler
// 0x0028 (0x0028 - 0x0000)
struct FSMExposedFunctionHandler final
{
public:
	class FName                                   BoundFunction;                                     // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESMExposedFunctionExecutionType               ExecutionType;                                     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFunction*                              Function;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                OwnerObject;                                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMExposedFunctionHandler) == 0x000008, "Wrong alignment on FSMExposedFunctionHandler");
static_assert(sizeof(FSMExposedFunctionHandler) == 0x000028, "Wrong size on FSMExposedFunctionHandler");
static_assert(offsetof(FSMExposedFunctionHandler, BoundFunction) == 0x000000, "Member 'FSMExposedFunctionHandler::BoundFunction' has a wrong offset!");
static_assert(offsetof(FSMExposedFunctionHandler, ExecutionType) == 0x00000C, "Member 'FSMExposedFunctionHandler::ExecutionType' has a wrong offset!");
static_assert(offsetof(FSMExposedFunctionHandler, Function) == 0x000010, "Member 'FSMExposedFunctionHandler::Function' has a wrong offset!");
static_assert(offsetof(FSMExposedFunctionHandler, OwnerObject) == 0x000018, "Member 'FSMExposedFunctionHandler::OwnerObject' has a wrong offset!");

// ScriptStruct SMSystem.SMNode_Base
// 0x00D0 (0x00D0 - 0x0000)
struct FSMNode_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSMExposedFunctionHandler>      TransitionInitializedGraphEvaluators;              // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      TransitionShutdownGraphEvaluators;                 // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      OnRootStateMachineStartedGraphEvaluator;           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      OnRootStateMachineStoppedGraphEvaluator;           // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TimeInState;                                       // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInEndState;                                     // 0x004C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasUpdated;                                       // 0x004D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DuplicateId;                                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0054(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  OwnerGuid;                                         // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  PathGuid;                                          // 0x0074(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_84[0xC];                                       // 0x0084(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NodeName;                                          // 0x0090(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TemplateName;                                      // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USMInstance*                            OwningInstance;                                    // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USMNodeInstance*                        NodeInstance;                                      // 0x00B8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                 NodeInstanceClass;                                 // 0x00C0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMNode_Base) == 0x000008, "Wrong alignment on FSMNode_Base");
static_assert(sizeof(FSMNode_Base) == 0x0000D0, "Wrong size on FSMNode_Base");
static_assert(offsetof(FSMNode_Base, TransitionInitializedGraphEvaluators) == 0x000008, "Member 'FSMNode_Base::TransitionInitializedGraphEvaluators' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, TransitionShutdownGraphEvaluators) == 0x000018, "Member 'FSMNode_Base::TransitionShutdownGraphEvaluators' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, OnRootStateMachineStartedGraphEvaluator) == 0x000028, "Member 'FSMNode_Base::OnRootStateMachineStartedGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, OnRootStateMachineStoppedGraphEvaluator) == 0x000038, "Member 'FSMNode_Base::OnRootStateMachineStoppedGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, TimeInState) == 0x000048, "Member 'FSMNode_Base::TimeInState' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, bIsInEndState) == 0x00004C, "Member 'FSMNode_Base::bIsInEndState' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, bHasUpdated) == 0x00004D, "Member 'FSMNode_Base::bHasUpdated' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, DuplicateId) == 0x000050, "Member 'FSMNode_Base::DuplicateId' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, Guid) == 0x000054, "Member 'FSMNode_Base::Guid' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, OwnerGuid) == 0x000064, "Member 'FSMNode_Base::OwnerGuid' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, PathGuid) == 0x000074, "Member 'FSMNode_Base::PathGuid' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, NodeName) == 0x000090, "Member 'FSMNode_Base::NodeName' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, TemplateName) == 0x0000A0, "Member 'FSMNode_Base::TemplateName' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, OwningInstance) == 0x0000B0, "Member 'FSMNode_Base::OwningInstance' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, NodeInstance) == 0x0000B8, "Member 'FSMNode_Base::NodeInstance' has a wrong offset!");
static_assert(offsetof(FSMNode_Base, NodeInstanceClass) == 0x0000C0, "Member 'FSMNode_Base::NodeInstanceClass' has a wrong offset!");

// ScriptStruct SMSystem.SMState_Base
// 0x0050 (0x0120 - 0x00D0)
struct FSMState_Base : public FSMNode_Base
{
public:
	uint8                                         bIsRootNode : 1;                                   // 0x00D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlwaysUpdate : 1;                                 // 0x00D0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvalTransitionsOnStart : 1;                       // 0x00D0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableTickTransitionEvaluation : 1;              // 0x00D0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStayActiveOnStateChange : 1;                      // 0x00D0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowParallelReentry : 1;                         // 0x00D0(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D1[0x4F];                                      // 0x00D1(0x004F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMState_Base) == 0x000008, "Wrong alignment on FSMState_Base");
static_assert(sizeof(FSMState_Base) == 0x000120, "Wrong size on FSMState_Base");

// ScriptStruct SMSystem.SMConduit
// 0x0030 (0x0150 - 0x0120)
struct FSMConduit final : public FSMState_Base
{
public:
	uint8                                         bCanEnterTransition : 1;                           // 0x0120(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanEvaluate : 1;                                  // 0x0120(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvalWithTransitions : 1;                          // 0x0120(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSMExposedFunctionHandler>      CanEnterConduitGraphEvaluator;                     // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      ConduitEnteredGraphEvaluator;                      // 0x0138(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	ESMConditionalEvaluationType                  ConditionalEvaluationType;                         // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMConduit) == 0x000008, "Wrong alignment on FSMConduit");
static_assert(sizeof(FSMConduit) == 0x000150, "Wrong size on FSMConduit");
static_assert(offsetof(FSMConduit, CanEnterConduitGraphEvaluator) == 0x000128, "Member 'FSMConduit::CanEnterConduitGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMConduit, ConduitEnteredGraphEvaluator) == 0x000138, "Member 'FSMConduit::ConduitEnteredGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMConduit, ConditionalEvaluationType) == 0x000148, "Member 'FSMConduit::ConditionalEvaluationType' has a wrong offset!");

// ScriptStruct SMSystem.SMStateInfo
// 0x0020 (0x0080 - 0x0060)
struct FSMStateInfo final : public FSMInfo_Base
{
public:
	TArray<struct FSMTransitionInfo>              OutgoingTransitions;                               // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsEndState;                                       // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMStateInfo) == 0x000008, "Wrong alignment on FSMStateInfo");
static_assert(sizeof(FSMStateInfo) == 0x000080, "Wrong size on FSMStateInfo");
static_assert(offsetof(FSMStateInfo, OutgoingTransitions) == 0x000060, "Member 'FSMStateInfo::OutgoingTransitions' has a wrong offset!");
static_assert(offsetof(FSMStateInfo, bIsEndState) == 0x000070, "Member 'FSMStateInfo::bIsEndState' has a wrong offset!");

// ScriptStruct SMSystem.SMDebugStateMachine
// 0x0001 (0x0001 - 0x0000)
struct FSMDebugStateMachine final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMDebugStateMachine) == 0x000001, "Wrong alignment on FSMDebugStateMachine");
static_assert(sizeof(FSMDebugStateMachine) == 0x000001, "Wrong size on FSMDebugStateMachine");

// ScriptStruct SMSystem.SMStateHistory
// 0x0020 (0x0020 - 0x0000)
struct FSMStateHistory final
{
public:
	struct FGuid                                  StateGuid;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartTime;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInState;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTimeInState;                                 // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSMStateHistory) == 0x000008, "Wrong alignment on FSMStateHistory");
static_assert(sizeof(FSMStateHistory) == 0x000020, "Wrong size on FSMStateHistory");
static_assert(offsetof(FSMStateHistory, StateGuid) == 0x000000, "Member 'FSMStateHistory::StateGuid' has a wrong offset!");
static_assert(offsetof(FSMStateHistory, StartTime) == 0x000010, "Member 'FSMStateHistory::StartTime' has a wrong offset!");
static_assert(offsetof(FSMStateHistory, TimeInState) == 0x000018, "Member 'FSMStateHistory::TimeInState' has a wrong offset!");
static_assert(offsetof(FSMStateHistory, ServerTimeInState) == 0x00001C, "Member 'FSMStateHistory::ServerTimeInState' has a wrong offset!");

// ScriptStruct SMSystem.SMNodeDescription
// 0x0040 (0x0040 - 0x0000)
struct FSMNodeDescription final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Category;                                          // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSMNodeDescription) == 0x000008, "Wrong alignment on FSMNodeDescription");
static_assert(sizeof(FSMNodeDescription) == 0x000040, "Wrong size on FSMNodeDescription");
static_assert(offsetof(FSMNodeDescription, Name) == 0x000000, "Member 'FSMNodeDescription::Name' has a wrong offset!");
static_assert(offsetof(FSMNodeDescription, Category) == 0x000010, "Member 'FSMNodeDescription::Category' has a wrong offset!");
static_assert(offsetof(FSMNodeDescription, Description) == 0x000028, "Member 'FSMNodeDescription::Description' has a wrong offset!");

// ScriptStruct SMSystem.SMState
// 0x0030 (0x0150 - 0x0120)
struct FSMState final : public FSMState_Base
{
public:
	TArray<struct FSMExposedFunctionHandler>      BeginStateGraphEvaluator;                          // 0x0120(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      UpdateStateGraphEvaluator;                         // 0x0130(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      EndStateGraphEvaluator;                            // 0x0140(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSMState) == 0x000008, "Wrong alignment on FSMState");
static_assert(sizeof(FSMState) == 0x000150, "Wrong size on FSMState");
static_assert(offsetof(FSMState, BeginStateGraphEvaluator) == 0x000120, "Member 'FSMState::BeginStateGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMState, UpdateStateGraphEvaluator) == 0x000130, "Member 'FSMState::UpdateStateGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMState, EndStateGraphEvaluator) == 0x000140, "Member 'FSMState::EndStateGraphEvaluator' has a wrong offset!");

// ScriptStruct SMSystem.SMStateMachine
// 0x0178 (0x0298 - 0x0120)
struct FSMStateMachine final : public FSMState_Base
{
public:
	bool                                          bHasAdditionalLogic;                               // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReuseCurrentState;                                // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyReuseIfNotEndState;                           // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowIndependentTick;                             // 0x0123(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallReferenceTickOnManualUpdate;                  // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bWaitForEndState : 1;                              // 0x0125(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_126[0x2];                                      // 0x0126(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSMExposedFunctionHandler>      BeginStateGraphEvaluator;                          // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      UpdateStateGraphEvaluator;                         // 0x0138(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      EndStateGraphEvaluator;                            // 0x0148(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TScriptInterface<class ISMStateMachineNetworkedInterface> NetworkedInterface;                                // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_168[0xF0];                                     // 0x0168(0x00F0)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ReferencedStateMachineClass;                       // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ReferencedTemplateName;                            // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DynamicStateMachineReferenceVariable;              // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USMInstance*                            ReferencedStateMachine;                            // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USMInstance*                            IsReferencedByInstance;                            // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_288[0x10];                                     // 0x0288(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMStateMachine) == 0x000008, "Wrong alignment on FSMStateMachine");
static_assert(sizeof(FSMStateMachine) == 0x000298, "Wrong size on FSMStateMachine");
static_assert(offsetof(FSMStateMachine, bHasAdditionalLogic) == 0x000120, "Member 'FSMStateMachine::bHasAdditionalLogic' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, bReuseCurrentState) == 0x000121, "Member 'FSMStateMachine::bReuseCurrentState' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, bOnlyReuseIfNotEndState) == 0x000122, "Member 'FSMStateMachine::bOnlyReuseIfNotEndState' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, bAllowIndependentTick) == 0x000123, "Member 'FSMStateMachine::bAllowIndependentTick' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, bCallReferenceTickOnManualUpdate) == 0x000124, "Member 'FSMStateMachine::bCallReferenceTickOnManualUpdate' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, BeginStateGraphEvaluator) == 0x000128, "Member 'FSMStateMachine::BeginStateGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, UpdateStateGraphEvaluator) == 0x000138, "Member 'FSMStateMachine::UpdateStateGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, EndStateGraphEvaluator) == 0x000148, "Member 'FSMStateMachine::EndStateGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, NetworkedInterface) == 0x000158, "Member 'FSMStateMachine::NetworkedInterface' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, ReferencedStateMachineClass) == 0x000258, "Member 'FSMStateMachine::ReferencedStateMachineClass' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, ReferencedTemplateName) == 0x000260, "Member 'FSMStateMachine::ReferencedTemplateName' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, DynamicStateMachineReferenceVariable) == 0x00026C, "Member 'FSMStateMachine::DynamicStateMachineReferenceVariable' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, ReferencedStateMachine) == 0x000278, "Member 'FSMStateMachine::ReferencedStateMachine' has a wrong offset!");
static_assert(offsetof(FSMStateMachine, IsReferencedByInstance) == 0x000280, "Member 'FSMStateMachine::IsReferencedByInstance' has a wrong offset!");

// ScriptStruct SMSystem.SMTransaction_Base
// 0x0003 (0x0003 - 0x0000)
struct FSMTransaction_Base
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ESMTransactionType                            TransactionType;                                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOriginatedFromServer : 1;                         // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FSMTransaction_Base) == 0x000001, "Wrong alignment on FSMTransaction_Base");
static_assert(sizeof(FSMTransaction_Base) == 0x000003, "Wrong size on FSMTransaction_Base");
static_assert(offsetof(FSMTransaction_Base, TransactionType) == 0x000001, "Member 'FSMTransaction_Base::TransactionType' has a wrong offset!");

// ScriptStruct SMSystem.SMFullSyncStateTransaction
// 0x0015 (0x0018 - 0x0003)
struct FSMFullSyncStateTransaction final : public FSMTransaction_Base
{
public:
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  BaseGuid;                                          // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInState;                                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSMFullSyncStateTransaction) == 0x000004, "Wrong alignment on FSMFullSyncStateTransaction");
static_assert(sizeof(FSMFullSyncStateTransaction) == 0x000018, "Wrong size on FSMFullSyncStateTransaction");
static_assert(offsetof(FSMFullSyncStateTransaction, BaseGuid) == 0x000004, "Member 'FSMFullSyncStateTransaction::BaseGuid' has a wrong offset!");
static_assert(offsetof(FSMFullSyncStateTransaction, TimeInState) == 0x000014, "Member 'FSMFullSyncStateTransaction::TimeInState' has a wrong offset!");

// ScriptStruct SMSystem.SMFullSyncTransaction
// 0x001D (0x0020 - 0x0003)
struct FSMFullSyncTransaction final : public FSMTransaction_Base
{
public:
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSMFullSyncStateTransaction>    ActiveStates;                                      // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bHasStarted : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFromUserLoad : 1;                                 // 0x0018(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMFullSyncTransaction) == 0x000008, "Wrong alignment on FSMFullSyncTransaction");
static_assert(sizeof(FSMFullSyncTransaction) == 0x000020, "Wrong size on FSMFullSyncTransaction");
static_assert(offsetof(FSMFullSyncTransaction, ActiveStates) == 0x000008, "Member 'FSMFullSyncTransaction::ActiveStates' has a wrong offset!");

// ScriptStruct SMSystem.SMActivateStateTransaction
// 0x0019 (0x001C - 0x0003)
struct FSMActivateStateTransaction final : public FSMTransaction_Base
{
public:
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  BaseGuid;                                          // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInState;                                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsActive : 1;                                     // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSetAllParents : 1;                                // 0x0018(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMActivateStateTransaction) == 0x000004, "Wrong alignment on FSMActivateStateTransaction");
static_assert(sizeof(FSMActivateStateTransaction) == 0x00001C, "Wrong size on FSMActivateStateTransaction");
static_assert(offsetof(FSMActivateStateTransaction, BaseGuid) == 0x000004, "Member 'FSMActivateStateTransaction::BaseGuid' has a wrong offset!");
static_assert(offsetof(FSMActivateStateTransaction, TimeInState) == 0x000014, "Member 'FSMActivateStateTransaction::TimeInState' has a wrong offset!");

// ScriptStruct SMSystem.SMTransitionTransaction
// 0x0035 (0x0038 - 0x0003)
struct FSMTransitionTransaction final : public FSMTransaction_Base
{
public:
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  BaseGuid;                                          // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          AdditionalGuids;                                   // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveTime;                                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMTransitionTransaction) == 0x000008, "Wrong alignment on FSMTransitionTransaction");
static_assert(sizeof(FSMTransitionTransaction) == 0x000038, "Wrong size on FSMTransitionTransaction");
static_assert(offsetof(FSMTransitionTransaction, BaseGuid) == 0x000004, "Member 'FSMTransitionTransaction::BaseGuid' has a wrong offset!");
static_assert(offsetof(FSMTransitionTransaction, AdditionalGuids) == 0x000018, "Member 'FSMTransitionTransaction::AdditionalGuids' has a wrong offset!");
static_assert(offsetof(FSMTransitionTransaction, Timestamp) == 0x000028, "Member 'FSMTransitionTransaction::Timestamp' has a wrong offset!");
static_assert(offsetof(FSMTransitionTransaction, ActiveTime) == 0x000030, "Member 'FSMTransitionTransaction::ActiveTime' has a wrong offset!");

// ScriptStruct SMSystem.SMInitializeTransaction
// 0x000D (0x0010 - 0x0003)
struct FSMInitializeTransaction final : public FSMTransaction_Base
{
public:
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Context;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSMInitializeTransaction) == 0x000008, "Wrong alignment on FSMInitializeTransaction");
static_assert(sizeof(FSMInitializeTransaction) == 0x000010, "Wrong size on FSMInitializeTransaction");
static_assert(offsetof(FSMInitializeTransaction, Context) == 0x000008, "Member 'FSMInitializeTransaction::Context' has a wrong offset!");

// ScriptStruct SMSystem.SMTransition
// 0x0098 (0x0168 - 0x00D0)
struct FSMTransition final : public FSMNode_Base
{
public:
	TArray<struct FSMExposedFunctionHandler>      CanEnterTransitionGraphEvaluator;                  // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      TransitionEnteredGraphEvaluator;                   // 0x00E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      TransitionPreEvaluateGraphEvaluator;               // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSMExposedFunctionHandler>      TransitionPostEvaluateGraphEvaluator;              // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCanEnterTransition : 1;                           // 0x0114(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanEnterTransitionFromEvent : 1;                  // 0x0114(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsEvaluating : 1;                                 // 0x0114(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanEvaluate : 1;                                  // 0x0114(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanEvaluateFromEvent : 1;                         // 0x0114(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRunParallel : 1;                                  // 0x0114(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvalIfNextStateActive : 1;                        // 0x0114(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanEvalWithStartState : 1;                        // 0x0114(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlwaysFalse : 1;                                  // 0x0115(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFromAnyState : 1;                                 // 0x0115(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  FromGuid;                                          // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ToGuid;                                            // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESMConditionalEvaluationType                  ConditionalEvaluationType;                         // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x2F];                                     // 0x0139(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMTransition) == 0x000008, "Wrong alignment on FSMTransition");
static_assert(sizeof(FSMTransition) == 0x000168, "Wrong size on FSMTransition");
static_assert(offsetof(FSMTransition, CanEnterTransitionGraphEvaluator) == 0x0000D0, "Member 'FSMTransition::CanEnterTransitionGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMTransition, TransitionEnteredGraphEvaluator) == 0x0000E0, "Member 'FSMTransition::TransitionEnteredGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMTransition, TransitionPreEvaluateGraphEvaluator) == 0x0000F0, "Member 'FSMTransition::TransitionPreEvaluateGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMTransition, TransitionPostEvaluateGraphEvaluator) == 0x000100, "Member 'FSMTransition::TransitionPostEvaluateGraphEvaluator' has a wrong offset!");
static_assert(offsetof(FSMTransition, Priority) == 0x000110, "Member 'FSMTransition::Priority' has a wrong offset!");
static_assert(offsetof(FSMTransition, FromGuid) == 0x000118, "Member 'FSMTransition::FromGuid' has a wrong offset!");
static_assert(offsetof(FSMTransition, ToGuid) == 0x000128, "Member 'FSMTransition::ToGuid' has a wrong offset!");
static_assert(offsetof(FSMTransition, ConditionalEvaluationType) == 0x000138, "Member 'FSMTransition::ConditionalEvaluationType' has a wrong offset!");

}

