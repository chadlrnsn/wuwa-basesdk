#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsAnimNotifyStatePositionBranchTarget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "EAnsBranchTargetBlackboardType_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsAnimNotifyStatePositionBranchTarget.TsAnimNotifyStatePositionBranchTarget_C
// 0x0050 (0x0098 - 0x0048)
class UTsAnimNotifyStatePositionBranchTarget_C final : public UKuroAnimNotifyState
{
public:
	class UCurveFloat*                            MoveCurve;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeed;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否永远面向目标;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          忽略Z轴方向;                                       // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          永远修正Z轴;                                       // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          忽略双方半径;                                      // 0x005B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsShareTarget;                                     // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetOffset;                                      // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          允许反向移动;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          允许正向移动;                                      // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 黑板值;                                            // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	float                                         MinHeightFromTargetFloor;                          // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnsBranchTargetBlackboardType                黑板类型;                                          // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Initialize();
	bool K2_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	bool K2_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	bool K2_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);

	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsAnimNotifyStatePositionBranchTarget_C">();
	}
	static class UTsAnimNotifyStatePositionBranchTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsAnimNotifyStatePositionBranchTarget_C>();
	}
};
static_assert(alignof(UTsAnimNotifyStatePositionBranchTarget_C) == 0x000008, "Wrong alignment on UTsAnimNotifyStatePositionBranchTarget_C");
static_assert(sizeof(UTsAnimNotifyStatePositionBranchTarget_C) == 0x000098, "Wrong size on UTsAnimNotifyStatePositionBranchTarget_C");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, MoveCurve) == 0x000048, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::MoveCurve' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, Distance) == 0x000050, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::Distance' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, MaxSpeed) == 0x000054, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::MaxSpeed' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, 是否永远面向目标) == 0x000058, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::是否永远面向目标' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, 忽略Z轴方向) == 0x000059, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::忽略Z轴方向' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, 永远修正Z轴) == 0x00005A, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::永远修正Z轴' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, 忽略双方半径) == 0x00005B, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::忽略双方半径' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, IsShareTarget) == 0x00005C, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::IsShareTarget' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, TargetOffset) == 0x000060, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::TargetOffset' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, TargetRotation) == 0x00006C, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, 允许反向移动) == 0x000078, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::允许反向移动' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, 允许正向移动) == 0x000079, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::允许正向移动' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, 黑板值) == 0x000080, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::黑板值' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, MinHeightFromTargetFloor) == 0x000090, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::MinHeightFromTargetFloor' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionBranchTarget_C, 黑板类型) == 0x000094, "Member 'UTsAnimNotifyStatePositionBranchTarget_C::黑板类型' has a wrong offset!");

}

