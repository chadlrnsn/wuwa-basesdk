#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroCurve

#include "Basic.hpp"

#include "KuroCurve_classes.hpp"
#include "KuroCurve_parameters.hpp"


namespace SDK
{

// Function KuroCurve.KuroCurveLibrary.CreateCurveFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bUseCurve                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Constant                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FVector2D>&         KeyValues                                              (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FKuroCurveFloat                  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FKuroCurveFloat UKuroCurveLibrary::CreateCurveFloat(bool bUseCurve, float Constant, const TArray<struct FVector2D>& KeyValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroCurveLibrary", "CreateCurveFloat");

	Params::KuroCurveLibrary_CreateCurveFloat Parms{};

	Parms.bUseCurve = bUseCurve;
	Parms.Constant = Constant;
	Parms.KeyValues = std::move(KeyValues);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroCurve.KuroCurveLibrary.GetValue_Float
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKuroCurveFloat&           CurveFloat                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UKuroCurveLibrary::GetValue_Float(const struct FKuroCurveFloat& CurveFloat, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroCurveLibrary", "GetValue_Float");

	Params::KuroCurveLibrary_GetValue_Float Parms{};

	Parms.CurveFloat = std::move(CurveFloat);
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroCurve.KuroCurveLibrary.GetValue_LinearColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FKuroCurveLinearColor&     CurveLinearColor                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UKuroCurveLibrary::GetValue_LinearColor(const struct FKuroCurveLinearColor& CurveLinearColor, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroCurveLibrary", "GetValue_LinearColor");

	Params::KuroCurveLibrary_GetValue_LinearColor Parms{};

	Parms.CurveLinearColor = std::move(CurveLinearColor);
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroCurve.KuroCurveLibrary.GetValue_Vector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FKuroCurveVector&          CurveVector                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UKuroCurveLibrary::GetValue_Vector(const struct FKuroCurveVector& CurveVector, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroCurveLibrary", "GetValue_Vector");

	Params::KuroCurveLibrary_GetValue_Vector Parms{};

	Parms.CurveVector = std::move(CurveVector);
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroCurve.KuroCurveLibrary.GetValue_Vector2D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FKuroCurveVector2D&        CurveVector2D                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UKuroCurveLibrary::GetValue_Vector2D(const struct FKuroCurveVector2D& CurveVector2D, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroCurveLibrary", "GetValue_Vector2D");

	Params::KuroCurveLibrary_GetValue_Vector2D Parms{};

	Parms.CurveVector2D = std::move(CurveVector2D);
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroCurve.KuroCurveLibrary.UseCurve_Float
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKuroCurveFloat&           CurveFloat                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroCurveLibrary::UseCurve_Float(const struct FKuroCurveFloat& CurveFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroCurveLibrary", "UseCurve_Float");

	Params::KuroCurveLibrary_UseCurve_Float Parms{};

	Parms.CurveFloat = std::move(CurveFloat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroCurve.KuroCurveLibrary.UseCurve_LinearColor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKuroCurveLinearColor&     CurveLinearColor                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroCurveLibrary::UseCurve_LinearColor(const struct FKuroCurveLinearColor& CurveLinearColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroCurveLibrary", "UseCurve_LinearColor");

	Params::KuroCurveLibrary_UseCurve_LinearColor Parms{};

	Parms.CurveLinearColor = std::move(CurveLinearColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroCurve.KuroCurveLibrary.UseCurve_Vector
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKuroCurveVector&          CurveVector                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroCurveLibrary::UseCurve_Vector(const struct FKuroCurveVector& CurveVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroCurveLibrary", "UseCurve_Vector");

	Params::KuroCurveLibrary_UseCurve_Vector Parms{};

	Parms.CurveVector = std::move(CurveVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroCurve.KuroCurveLibrary.UseCurve_Vector2D
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKuroCurveVector2D&        CurveVector2D                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroCurveLibrary::UseCurve_Vector2D(const struct FKuroCurveVector2D& CurveVector2D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroCurveLibrary", "UseCurve_Vector2D");

	Params::KuroCurveLibrary_UseCurve_Vector2D Parms{};

	Parms.CurveVector2D = std::move(CurveVector2D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

