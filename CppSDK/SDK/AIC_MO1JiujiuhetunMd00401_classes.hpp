#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIC_MO1JiujiuhetunMd00401

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SAiConditions_structs.hpp"
#include "AIC_AICommon_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AIC_MO1JiujiuhetunMd00401.AIC_MO1JiujiuhetunMd00401_C
// 0x0238 (0x09C0 - 0x0788)
class AAIC_MO1JiujiuhetunMd00401_C final : public AAIC_AICommon_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_AIC_MO1JiujiuhetunMd00401_C;        // 0x0788(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ATsBaseCharacter_C*                     啾啾河豚;                                          // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSAiConditions                         无敌检测;                                          // 0x0798(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         出隐身检测;                                        // 0x0850(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSAiConditions                         进隐身检测;                                        // 0x0908(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void OnStart();
	void 进隐身监控(bool bContent);
	void 出隐身监控(bool bContent);
	void 无敌监控(bool bContent);
	void 受击(class ATsBaseCharacter_C* 角色, const struct FSHitInformation& 受击数据);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_AIC_MO1JiujiuhetunMd00401(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AIC_MO1JiujiuhetunMd00401_C">();
	}
	static class AAIC_MO1JiujiuhetunMd00401_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAIC_MO1JiujiuhetunMd00401_C>();
	}
};
static_assert(alignof(AAIC_MO1JiujiuhetunMd00401_C) == 0x000008, "Wrong alignment on AAIC_MO1JiujiuhetunMd00401_C");
static_assert(sizeof(AAIC_MO1JiujiuhetunMd00401_C) == 0x0009C0, "Wrong size on AAIC_MO1JiujiuhetunMd00401_C");
static_assert(offsetof(AAIC_MO1JiujiuhetunMd00401_C, UberGraphFrame_AIC_MO1JiujiuhetunMd00401_C) == 0x000788, "Member 'AAIC_MO1JiujiuhetunMd00401_C::UberGraphFrame_AIC_MO1JiujiuhetunMd00401_C' has a wrong offset!");
static_assert(offsetof(AAIC_MO1JiujiuhetunMd00401_C, 啾啾河豚) == 0x000790, "Member 'AAIC_MO1JiujiuhetunMd00401_C::啾啾河豚' has a wrong offset!");
static_assert(offsetof(AAIC_MO1JiujiuhetunMd00401_C, 无敌检测) == 0x000798, "Member 'AAIC_MO1JiujiuhetunMd00401_C::无敌检测' has a wrong offset!");
static_assert(offsetof(AAIC_MO1JiujiuhetunMd00401_C, 出隐身检测) == 0x000850, "Member 'AAIC_MO1JiujiuhetunMd00401_C::出隐身检测' has a wrong offset!");
static_assert(offsetof(AAIC_MO1JiujiuhetunMd00401_C, 进隐身检测) == 0x000908, "Member 'AAIC_MO1JiujiuhetunMd00401_C::进隐身检测' has a wrong offset!");

}

