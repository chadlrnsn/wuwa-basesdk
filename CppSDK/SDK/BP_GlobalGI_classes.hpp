#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalGI

#include "Basic.hpp"

#include "SD_KuroTraceCloudData_structs.hpp"
#include "KuroCurve_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"
#include "E_Cloud_Presents_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GlobalGI.BP_GlobalGI_C
// 0x04A0 (0x3300 - 0x2E60)
class ABP_GlobalGI_C final : public AKuroGlobalGI
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x2E60(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneRayTracingGICaptureComponentCube* SceneRayTracingGICaptureComponentCube;             // 0x2E68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   KuroVolumeCloudGlobal;                             // 0x2E70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   RainOverrider;                                     // 0x2E78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroGlobalHeightMapComponent*          KuroGlobalHeightMap;                               // 0x2E80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CloudOcean;                                        // 0x2E88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroGlobalColorMapComponent*           KuroGlobalColorMap;                                // 0x2E90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_MilkyWay;                                       // 0x2E98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_UiSceneRenderingComponent_C*        BP_UiSceneRenderingComponent;                      // 0x2EA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroPostProcessComponent*              GlobalUiScenePostProcess;                          // 0x2EA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ImposterManager;                                   // 0x2EB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS6;                                  // 0x2EB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS5;                                  // 0x2EC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS4;                                  // 0x2EC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS3;                                  // 0x2ED0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS2;                                  // 0x2ED8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS1;                                  // 0x2EE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS;                                   // 0x2EE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroPostProcessComponent*              LUTPostProcess;                                    // 0x2EF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Stars;                                          // 0x2EF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Skybox;                                            // 0x2F00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  GlobalPostProcessVolume;                           // 0x2F08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             SceneLight;                                        // 0x2F10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AtmoMoonLight;                                     // 0x2F18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AtmoSunLight;                                      // 0x2F20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x2F28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x2F30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x2F38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterLightHorizontal;                          // 0x2F40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrTimeOfDay;                                     // 0x2F44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableTODCycle;                                    // 0x2F48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PauseTOD;                                          // 0x2F49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	bool                                          编辑器下更新;                                      // 0x2F4A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F4B[0x1];                                     // 0x2F4B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TODCycleTime;                                      // 0x2F4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SenenDirLightRot;                                  // 0x2F50(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MainLightAngleLimit;                               // 0x2F5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGIEnable;                                        // 0x2F60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          使用随机的昼夜循环天气组;                          // 0x2F61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F62[0x2];                                     // 0x2F62(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         当前的天气组索引值;                                // 0x2F64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           太阳颜色;                                          // 0x2F68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      SunLightExistTime;                                 // 0x2F78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      MoonLightExistTime;                                // 0x2F88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          运行时自动开始循环;                                // 0x2F98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UISceneRendering;                                  // 0x2F99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRootGI;                                          // 0x2F9A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DEBUG_使用角色预览方向光;                          // 0x2F9B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                         DEBUG_角色预览方向光方向;                          // 0x2F9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalDaysElapsed;                                  // 0x2FA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonFade;                                          // 0x2FA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoonVisibleTime;                                   // 0x2FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          编辑器下关闭LensFlare;                             // 0x2FB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                          关闭雾效;                                          // 0x2FB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RuntimeTimeEnable;                                 // 0x2FB2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_2FB3[0x1];                                     // 0x2FB3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MainLightTickSecond;                               // 0x2FB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightTickCounter;                              // 0x2FB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceUpdateMainLightDir;                           // 0x2FBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FBD[0x3];                                     // 0x2FBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindDir;                                           // 0x2FC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          使用临时雾效;                                      // 0x2FC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FC5[0x3];                                     // 0x2FC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      TempFogMaterial;                                   // 0x2FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TempFogDMI;                                        // 0x2FD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      SkyboxMaterial;                                    // 0x2FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunDiscColor;                                      // 0x2FE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunScatterColor;                                   // 0x2FF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunSize;                                           // 0x3000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonDiscColor;                                     // 0x3004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonScatterColor;                                  // 0x3014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonSize;                                          // 0x3024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HorizonColor;                                      // 0x3028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizonFalloff;                                    // 0x3038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ZenithColor;                                       // 0x303C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExtremWeatherWeight;                               // 0x304C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ST_TopColor;                                       // 0x3050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ST_DomeColorTint;                                  // 0x3060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ST_TopWidth;                                       // 0x3070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3074[0x4];                                     // 0x3074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharMainLightCurve;                                // 0x3078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CharSkyLightCurve;                                 // 0x3080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCharCustomLighting;                             // 0x3088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3089[0x3];                                     // 0x3089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CharAmbientColor;                                  // 0x308C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CharSkinAmbientColor;                              // 0x309C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30AC[0x4];                                     // 0x30AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharShadowCurve;                                   // 0x30B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      LightFunctionMaterial;                             // 0x30B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightFunctionIntensity;                            // 0x30C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C4[0x4];                                     // 0x30C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               LightFunctionDMI;                                  // 0x30C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG开启无音区特殊地表;                           // 0x30D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_30D1[0x7];                                     // 0x30D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      LensFlareMI;                                       // 0x30D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LensFlareDMI;                                      // 0x30E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MobileLensFlareMI_Ghost;                           // 0x30E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Nadir_Color;                                       // 0x30F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Nadir_Falloff;                                     // 0x3100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Scatter_Size;                                  // 0x3104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Moon_Scatter_Size;                                 // 0x3108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_310C[0x4];                                     // 0x310C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      StarsMaterial;                                     // 0x3110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainDirectionLightUpdateThreshold_Mobile;          // 0x3118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainDirectionLightUpdateThreshold;                 // 0x311C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWindDirection;                               // 0x3120(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWindRightDirection;                          // 0x312C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DEBUG无音区特殊地表强度;                           // 0x3138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_313C[0x4];                                     // 0x313C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ControlTodTime_C*                   TodTimeController;                                 // 0x3140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RealTimeOfDay;                                     // 0x3148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314C[0x4];                                     // 0x314C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Clouds_C*                           DynamicCloudsActor;                                // 0x3150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroDynamicCloudType                         LocalDynamicCloudsType;                            // 0x3158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3159[0x3];                                     // 0x3159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RainDensityChangeSpeed;                            // 0x315C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainDensity;                                       // 0x3160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SnowDensity;                                       // 0x3164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainGravity;                                       // 0x3168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainGravityChangeSpeed;                            // 0x316C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainWindPower;                                     // 0x3170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainWindPowerChangeSpeed;                          // 0x3174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSpawnEffect;                                    // 0x3178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3179[0x3];                                     // 0x3179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FinalSnowDensity;                                  // 0x317C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalRainDensity;                                  // 0x3180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalRainGravity;                                  // 0x3184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSkyLightShadowSupplement;                   // 0x3188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSkyLightReflectionAddIntensity;             // 0x318C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MobileLensFlareMI_Halo;                            // 0x3190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MobileLensFlareDMI_Ghost;                          // 0x3198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MobileLensFlareDMI_Halo;                           // 0x31A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             HeightMapTexture;                                  // 0x31A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HeightMapUpdated;                                  // 0x31B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B1[0x3];                                     // 0x31B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SunLightDirection;                                 // 0x31B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsComponentsEnable;                                // 0x31C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C1[0x7];                                     // 0x31C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Last_LightFunction_Map;                            // 0x31C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               InitLightFunctionMap;                              // 0x31D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TODLightLoadingWait;                               // 0x31D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DayLightLoadingTime;                               // 0x31DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NightLightLoadingTime;                             // 0x31E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ComputeLightGridSkipFrames;                        // 0x31E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MilkyWayMaterial;                                  // 0x31E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          使用主角位置;                                      // 0x31F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31F1[0x3];                                     // 0x31F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DEBUG_角色预览方向光垂直方向;                      // 0x31F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(E_Cloud_Presents CloudPresents, float ChangeSpeed, bool IsinEditor)> CallCloudChange; // 0x31F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FKuroCurveFloat                        FogTImeControl;                                    // 0x3208(0x0090)(Edit, BlueprintVisible)
	bool                                          Is_Editor_Update;                                  // 0x3298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableImposterUpdate;                              // 0x3299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329A[0x2];                                     // 0x329A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Clouds_Change_CD;                                  // 0x329C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clouds_Change_Time;                                // 0x32A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clouds_Change_Time_0;                              // 0x32A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          启用时间参数写入;                                  // 0x32A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UINeedLerpData;                                    // 0x32A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bEnableLumen;                                      // 0x32AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32AB[0x5];                                     // 0x32AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      LightFunctionMaterial_seq;                         // 0x32B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Cloud_Rotation;                           // 0x32B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32B9[0x3];                                     // 0x32B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Sequence_Cloud_Time_Control;                       // 0x32BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sequence_Cloud_Time_Offset;                        // 0x32C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C4[0x4];                                     // 0x32C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      VolumetricLightFunctionMaterial;                   // 0x32C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PerformanceLightExist;                             // 0x32D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PerformanceLightExist_MP4;                         // 0x32D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BPScreenFilter;                                    // 0x32D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32D3[0x5];                                     // 0x32D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      Star_Material_V2;                                  // 0x32D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKuroScreenFilterSystemData*            ScreenFilterAsset;                                 // 0x32E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSD_KuroTraceCloudData>         Data;                                              // 0x32E8(0x0010)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_BP_GlobalGI(int32 EntryPoint);
	void OnKuroTickEditor(float DeltaTime);
	void OnKuroTick(float DeltaTime);
	void OnKuroEndUiScene();
	void OnKuroStartUiScene(const class FString& InName, class ULevel* InUILevel);
	void OnKuroSetRuntimeTime(float CurrentTime);
	void OnKuroRuntimeDestroy();
	void ReceiveBeginPlay();
	void OnKuroInit();
	void UserConstructionScript();
	void UpdateCharacterGI();
	void UpdateGIData(bool Skip_Lerp_Data);
	void UpdateFog();
	void Update_Env();
	void Get2SkyboxLerpWeight(float startSetting, float EndSetting, float CurrentTime, float* Weight);
	void UpdateWind();
	void InitMaterials();
	void InitGICompoemnt();
	void Get_Scene_Light_Direction(struct FVector* LightDir);
	void UpdateSkyLight();
	void UpdateAtmosphere();
	void CalculateLightDirection(float Vertical, float Horizontal, float Time, struct FRotator* NewParam);
	void CalculateLightDirectionWithLimit(float V, float H, float Time, struct FRotator* NewParam);
	void InitFeature();
	void GetViewLocation(struct FVector* WorldPosition, bool* Suc);
	void UpdateTime();
	void Update_UI_Env();
	void Update_Main_Light();
	void Update_Light_Direction();
	void UpdateLightParameters();
	void UpdatePostProcessVolume();
	void GetLightDirectionFromVH(float Vertical, float Horizontal, struct FRotator* Result);
	void UpdateLightShaft();
	void Set_All_Components_States(bool IsEnable);
	void InitGI();
	void UpdateSkyDome();
	void 清晨();
	void 中午();
	void 黄昏();
	void 黄昏到夜晚();
	void 夜晚到清晨();
	void 夜晚();
	void UpdateCloudCard(struct FKuroCloudCardSetting& CloudCardSetting);
	void Update_Day_Night_Data_Layer();
	void 辰时();
	void 上午();
	void 下午();
	void 申时();
	void UpdateFlowmapSkybox();
	void UpdateMisc();
	void UpdateSkybox();
	void GetSkyboxDMI(class UMaterialInstanceDynamic** DMIRet);
	void UpdateClusteredStuff();
	void GetStarsDMI(class UMaterialInstanceDynamic** DMIRet);
	void SetLevelSequenceTimeControl(class ABP_ControlTodTime_C* TodTimeControl);
	void Update_Dynamic_Clouds();
	struct FVector EulerToForward(float Pitch, float Yaw);
	struct FLinearColor Clamp_Luminance(const struct FLinearColor& InColor, float Min, float Max);
	void GetParallaxCorrectCachedShadowDirection(struct FRotator* NewParam);
	void GetTODCharacterLighting(const struct FLinearColor& mainLight, float mainLightIntensity, const struct FLinearColor& skyLight, float skyLightIntensity, struct FLinearColor* FrontSideLight, struct FLinearColor* BackSideLight);
	void GetParallaxCorrectCachedCrossFadeShadowDirection(struct FRotator* NewParam);
	void updateLightFunctions();
	void GetMilkyWayDMI(class UMaterialInstanceDynamic** DMIRet);
	void UpdateMilkWay(class UMaterialInstanceDynamic*& MilkyWay_DMI, struct FKuroMilkyWaySetting& CloudCardSetting);
	void UpdateBigWorld();
	void OnGlobalGITick();
	void UpdateEditor();
	void UpdateOcean();
	void IsPerformanceLightExist();
	void UpdateVolumeCloudLightWeight();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GlobalGI_C">();
	}
	static class ABP_GlobalGI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GlobalGI_C>();
	}
};
static_assert(alignof(ABP_GlobalGI_C) == 0x000010, "Wrong alignment on ABP_GlobalGI_C");
static_assert(sizeof(ABP_GlobalGI_C) == 0x003300, "Wrong size on ABP_GlobalGI_C");
static_assert(offsetof(ABP_GlobalGI_C, UberGraphFrame) == 0x002E60, "Member 'ABP_GlobalGI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SceneRayTracingGICaptureComponentCube) == 0x002E68, "Member 'ABP_GlobalGI_C::SceneRayTracingGICaptureComponentCube' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, KuroVolumeCloudGlobal) == 0x002E70, "Member 'ABP_GlobalGI_C::KuroVolumeCloudGlobal' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainOverrider) == 0x002E78, "Member 'ABP_GlobalGI_C::RainOverrider' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, KuroGlobalHeightMap) == 0x002E80, "Member 'ABP_GlobalGI_C::KuroGlobalHeightMap' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CloudOcean) == 0x002E88, "Member 'ABP_GlobalGI_C::CloudOcean' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, KuroGlobalColorMap) == 0x002E90, "Member 'ABP_GlobalGI_C::KuroGlobalColorMap' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_MilkyWay) == 0x002E98, "Member 'ABP_GlobalGI_C::SM_MilkyWay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, BP_UiSceneRenderingComponent) == 0x002EA0, "Member 'ABP_GlobalGI_C::BP_UiSceneRenderingComponent' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, GlobalUiScenePostProcess) == 0x002EA8, "Member 'ABP_GlobalGI_C::GlobalUiScenePostProcess' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ImposterManager) == 0x002EB0, "Member 'ABP_GlobalGI_C::ImposterManager' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS6) == 0x002EB8, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS6' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS5) == 0x002EC0, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS5' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS4) == 0x002EC8, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS4' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS3) == 0x002ED0, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS3' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS2) == 0x002ED8, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS2' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS1) == 0x002EE0, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS1' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS) == 0x002EE8, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LUTPostProcess) == 0x002EF0, "Member 'ABP_GlobalGI_C::LUTPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Stars) == 0x002EF8, "Member 'ABP_GlobalGI_C::SM_Stars' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Skybox) == 0x002F00, "Member 'ABP_GlobalGI_C::Skybox' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, GlobalPostProcessVolume) == 0x002F08, "Member 'ABP_GlobalGI_C::GlobalPostProcessVolume' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SceneLight) == 0x002F10, "Member 'ABP_GlobalGI_C::SceneLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, AtmoMoonLight) == 0x002F18, "Member 'ABP_GlobalGI_C::AtmoMoonLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, AtmoSunLight) == 0x002F20, "Member 'ABP_GlobalGI_C::AtmoSunLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SkyLight) == 0x002F28, "Member 'ABP_GlobalGI_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HeightFog) == 0x002F30, "Member 'ABP_GlobalGI_C::HeightFog' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DefaultSceneRoot) == 0x002F38, "Member 'ABP_GlobalGI_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharacterLightHorizontal) == 0x002F40, "Member 'ABP_GlobalGI_C::CharacterLightHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CurrTimeOfDay) == 0x002F44, "Member 'ABP_GlobalGI_C::CurrTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, EnableTODCycle) == 0x002F48, "Member 'ABP_GlobalGI_C::EnableTODCycle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, PauseTOD) == 0x002F49, "Member 'ABP_GlobalGI_C::PauseTOD' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, 编辑器下更新) == 0x002F4A, "Member 'ABP_GlobalGI_C::编辑器下更新' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TODCycleTime) == 0x002F4C, "Member 'ABP_GlobalGI_C::TODCycleTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SenenDirLightRot) == 0x002F50, "Member 'ABP_GlobalGI_C::SenenDirLightRot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainLightAngleLimit) == 0x002F5C, "Member 'ABP_GlobalGI_C::MainLightAngleLimit' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, IsGIEnable) == 0x002F60, "Member 'ABP_GlobalGI_C::IsGIEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, 使用随机的昼夜循环天气组) == 0x002F61, "Member 'ABP_GlobalGI_C::使用随机的昼夜循环天气组' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, 当前的天气组索引值) == 0x002F64, "Member 'ABP_GlobalGI_C::当前的天气组索引值' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, 太阳颜色) == 0x002F68, "Member 'ABP_GlobalGI_C::太阳颜色' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunLightExistTime) == 0x002F78, "Member 'ABP_GlobalGI_C::SunLightExistTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonLightExistTime) == 0x002F88, "Member 'ABP_GlobalGI_C::MoonLightExistTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, 运行时自动开始循环) == 0x002F98, "Member 'ABP_GlobalGI_C::运行时自动开始循环' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, UISceneRendering) == 0x002F99, "Member 'ABP_GlobalGI_C::UISceneRendering' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, IsRootGI) == 0x002F9A, "Member 'ABP_GlobalGI_C::IsRootGI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG_使用角色预览方向光) == 0x002F9B, "Member 'ABP_GlobalGI_C::DEBUG_使用角色预览方向光' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG_角色预览方向光方向) == 0x002F9C, "Member 'ABP_GlobalGI_C::DEBUG_角色预览方向光方向' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TotalDaysElapsed) == 0x002FA0, "Member 'ABP_GlobalGI_C::TotalDaysElapsed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonFade) == 0x002FA4, "Member 'ABP_GlobalGI_C::MoonFade' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonVisibleTime) == 0x002FA8, "Member 'ABP_GlobalGI_C::MoonVisibleTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, 编辑器下关闭LensFlare) == 0x002FB0, "Member 'ABP_GlobalGI_C::编辑器下关闭LensFlare' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, 关闭雾效) == 0x002FB1, "Member 'ABP_GlobalGI_C::关闭雾效' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RuntimeTimeEnable) == 0x002FB2, "Member 'ABP_GlobalGI_C::RuntimeTimeEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainLightTickSecond) == 0x002FB4, "Member 'ABP_GlobalGI_C::MainLightTickSecond' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainLightTickCounter) == 0x002FB8, "Member 'ABP_GlobalGI_C::MainLightTickCounter' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ForceUpdateMainLightDir) == 0x002FBC, "Member 'ABP_GlobalGI_C::ForceUpdateMainLightDir' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, WindDir) == 0x002FC0, "Member 'ABP_GlobalGI_C::WindDir' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, 使用临时雾效) == 0x002FC4, "Member 'ABP_GlobalGI_C::使用临时雾效' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TempFogMaterial) == 0x002FC8, "Member 'ABP_GlobalGI_C::TempFogMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TempFogDMI) == 0x002FD0, "Member 'ABP_GlobalGI_C::TempFogDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SkyboxMaterial) == 0x002FD8, "Member 'ABP_GlobalGI_C::SkyboxMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunDiscColor) == 0x002FE0, "Member 'ABP_GlobalGI_C::SunDiscColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunScatterColor) == 0x002FF0, "Member 'ABP_GlobalGI_C::SunScatterColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunSize) == 0x003000, "Member 'ABP_GlobalGI_C::SunSize' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonDiscColor) == 0x003004, "Member 'ABP_GlobalGI_C::MoonDiscColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonScatterColor) == 0x003014, "Member 'ABP_GlobalGI_C::MoonScatterColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonSize) == 0x003024, "Member 'ABP_GlobalGI_C::MoonSize' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HorizonColor) == 0x003028, "Member 'ABP_GlobalGI_C::HorizonColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HorizonFalloff) == 0x003038, "Member 'ABP_GlobalGI_C::HorizonFalloff' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ZenithColor) == 0x00303C, "Member 'ABP_GlobalGI_C::ZenithColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ExtremWeatherWeight) == 0x00304C, "Member 'ABP_GlobalGI_C::ExtremWeatherWeight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ST_TopColor) == 0x003050, "Member 'ABP_GlobalGI_C::ST_TopColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ST_DomeColorTint) == 0x003060, "Member 'ABP_GlobalGI_C::ST_DomeColorTint' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ST_TopWidth) == 0x003070, "Member 'ABP_GlobalGI_C::ST_TopWidth' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharMainLightCurve) == 0x003078, "Member 'ABP_GlobalGI_C::CharMainLightCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharSkyLightCurve) == 0x003080, "Member 'ABP_GlobalGI_C::CharSkyLightCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, UseCharCustomLighting) == 0x003088, "Member 'ABP_GlobalGI_C::UseCharCustomLighting' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharAmbientColor) == 0x00308C, "Member 'ABP_GlobalGI_C::CharAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharSkinAmbientColor) == 0x00309C, "Member 'ABP_GlobalGI_C::CharSkinAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharShadowCurve) == 0x0030B0, "Member 'ABP_GlobalGI_C::CharShadowCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LightFunctionMaterial) == 0x0030B8, "Member 'ABP_GlobalGI_C::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LightFunctionIntensity) == 0x0030C0, "Member 'ABP_GlobalGI_C::LightFunctionIntensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LightFunctionDMI) == 0x0030C8, "Member 'ABP_GlobalGI_C::LightFunctionDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG开启无音区特殊地表) == 0x0030D0, "Member 'ABP_GlobalGI_C::DEBUG开启无音区特殊地表' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LensFlareMI) == 0x0030D8, "Member 'ABP_GlobalGI_C::LensFlareMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LensFlareDMI) == 0x0030E0, "Member 'ABP_GlobalGI_C::LensFlareDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MobileLensFlareMI_Ghost) == 0x0030E8, "Member 'ABP_GlobalGI_C::MobileLensFlareMI_Ghost' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Nadir_Color) == 0x0030F0, "Member 'ABP_GlobalGI_C::Nadir_Color' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Nadir_Falloff) == 0x003100, "Member 'ABP_GlobalGI_C::Nadir_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Sun_Scatter_Size) == 0x003104, "Member 'ABP_GlobalGI_C::Sun_Scatter_Size' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Moon_Scatter_Size) == 0x003108, "Member 'ABP_GlobalGI_C::Moon_Scatter_Size' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, StarsMaterial) == 0x003110, "Member 'ABP_GlobalGI_C::StarsMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainDirectionLightUpdateThreshold_Mobile) == 0x003118, "Member 'ABP_GlobalGI_C::MainDirectionLightUpdateThreshold_Mobile' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainDirectionLightUpdateThreshold) == 0x00311C, "Member 'ABP_GlobalGI_C::MainDirectionLightUpdateThreshold' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, GlobalWindDirection) == 0x003120, "Member 'ABP_GlobalGI_C::GlobalWindDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, GlobalWindRightDirection) == 0x00312C, "Member 'ABP_GlobalGI_C::GlobalWindRightDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG无音区特殊地表强度) == 0x003138, "Member 'ABP_GlobalGI_C::DEBUG无音区特殊地表强度' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TodTimeController) == 0x003140, "Member 'ABP_GlobalGI_C::TodTimeController' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RealTimeOfDay) == 0x003148, "Member 'ABP_GlobalGI_C::RealTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DynamicCloudsActor) == 0x003150, "Member 'ABP_GlobalGI_C::DynamicCloudsActor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LocalDynamicCloudsType) == 0x003158, "Member 'ABP_GlobalGI_C::LocalDynamicCloudsType' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainDensityChangeSpeed) == 0x00315C, "Member 'ABP_GlobalGI_C::RainDensityChangeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainDensity) == 0x003160, "Member 'ABP_GlobalGI_C::RainDensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SnowDensity) == 0x003164, "Member 'ABP_GlobalGI_C::SnowDensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainGravity) == 0x003168, "Member 'ABP_GlobalGI_C::RainGravity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainGravityChangeSpeed) == 0x00316C, "Member 'ABP_GlobalGI_C::RainGravityChangeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainWindPower) == 0x003170, "Member 'ABP_GlobalGI_C::RainWindPower' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainWindPowerChangeSpeed) == 0x003174, "Member 'ABP_GlobalGI_C::RainWindPowerChangeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CanSpawnEffect) == 0x003178, "Member 'ABP_GlobalGI_C::CanSpawnEffect' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, FinalSnowDensity) == 0x00317C, "Member 'ABP_GlobalGI_C::FinalSnowDensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, FinalRainDensity) == 0x003180, "Member 'ABP_GlobalGI_C::FinalRainDensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, FinalRainGravity) == 0x003184, "Member 'ABP_GlobalGI_C::FinalRainGravity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DefaultSkyLightShadowSupplement) == 0x003188, "Member 'ABP_GlobalGI_C::DefaultSkyLightShadowSupplement' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DefaultSkyLightReflectionAddIntensity) == 0x00318C, "Member 'ABP_GlobalGI_C::DefaultSkyLightReflectionAddIntensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MobileLensFlareMI_Halo) == 0x003190, "Member 'ABP_GlobalGI_C::MobileLensFlareMI_Halo' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MobileLensFlareDMI_Ghost) == 0x003198, "Member 'ABP_GlobalGI_C::MobileLensFlareDMI_Ghost' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MobileLensFlareDMI_Halo) == 0x0031A0, "Member 'ABP_GlobalGI_C::MobileLensFlareDMI_Halo' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HeightMapTexture) == 0x0031A8, "Member 'ABP_GlobalGI_C::HeightMapTexture' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HeightMapUpdated) == 0x0031B0, "Member 'ABP_GlobalGI_C::HeightMapUpdated' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunLightDirection) == 0x0031B4, "Member 'ABP_GlobalGI_C::SunLightDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, IsComponentsEnable) == 0x0031C0, "Member 'ABP_GlobalGI_C::IsComponentsEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Last_LightFunction_Map) == 0x0031C8, "Member 'ABP_GlobalGI_C::Last_LightFunction_Map' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, InitLightFunctionMap) == 0x0031D0, "Member 'ABP_GlobalGI_C::InitLightFunctionMap' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TODLightLoadingWait) == 0x0031D8, "Member 'ABP_GlobalGI_C::TODLightLoadingWait' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DayLightLoadingTime) == 0x0031DC, "Member 'ABP_GlobalGI_C::DayLightLoadingTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, NightLightLoadingTime) == 0x0031E0, "Member 'ABP_GlobalGI_C::NightLightLoadingTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ComputeLightGridSkipFrames) == 0x0031E4, "Member 'ABP_GlobalGI_C::ComputeLightGridSkipFrames' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MilkyWayMaterial) == 0x0031E8, "Member 'ABP_GlobalGI_C::MilkyWayMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, 使用主角位置) == 0x0031F0, "Member 'ABP_GlobalGI_C::使用主角位置' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG_角色预览方向光垂直方向) == 0x0031F4, "Member 'ABP_GlobalGI_C::DEBUG_角色预览方向光垂直方向' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CallCloudChange) == 0x0031F8, "Member 'ABP_GlobalGI_C::CallCloudChange' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, FogTImeControl) == 0x003208, "Member 'ABP_GlobalGI_C::FogTImeControl' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Is_Editor_Update) == 0x003298, "Member 'ABP_GlobalGI_C::Is_Editor_Update' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, EnableImposterUpdate) == 0x003299, "Member 'ABP_GlobalGI_C::EnableImposterUpdate' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Clouds_Change_CD) == 0x00329C, "Member 'ABP_GlobalGI_C::Clouds_Change_CD' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Clouds_Change_Time) == 0x0032A0, "Member 'ABP_GlobalGI_C::Clouds_Change_Time' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Clouds_Change_Time_0) == 0x0032A4, "Member 'ABP_GlobalGI_C::Clouds_Change_Time_0' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, 启用时间参数写入) == 0x0032A8, "Member 'ABP_GlobalGI_C::启用时间参数写入' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, UINeedLerpData) == 0x0032A9, "Member 'ABP_GlobalGI_C::UINeedLerpData' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, bEnableLumen) == 0x0032AA, "Member 'ABP_GlobalGI_C::bEnableLumen' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LightFunctionMaterial_seq) == 0x0032B0, "Member 'ABP_GlobalGI_C::LightFunctionMaterial_seq' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Override_Cloud_Rotation) == 0x0032B8, "Member 'ABP_GlobalGI_C::Override_Cloud_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Sequence_Cloud_Time_Control) == 0x0032BC, "Member 'ABP_GlobalGI_C::Sequence_Cloud_Time_Control' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Sequence_Cloud_Time_Offset) == 0x0032C0, "Member 'ABP_GlobalGI_C::Sequence_Cloud_Time_Offset' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, VolumetricLightFunctionMaterial) == 0x0032C8, "Member 'ABP_GlobalGI_C::VolumetricLightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, PerformanceLightExist) == 0x0032D0, "Member 'ABP_GlobalGI_C::PerformanceLightExist' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, PerformanceLightExist_MP4) == 0x0032D1, "Member 'ABP_GlobalGI_C::PerformanceLightExist_MP4' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, BPScreenFilter) == 0x0032D2, "Member 'ABP_GlobalGI_C::BPScreenFilter' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Star_Material_V2) == 0x0032D8, "Member 'ABP_GlobalGI_C::Star_Material_V2' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ScreenFilterAsset) == 0x0032E0, "Member 'ABP_GlobalGI_C::ScreenFilterAsset' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Data) == 0x0032E8, "Member 'ABP_GlobalGI_C::Data' has a wrong offset!");

}

