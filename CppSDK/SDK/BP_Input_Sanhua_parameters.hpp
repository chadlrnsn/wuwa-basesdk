#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Input_Sanhua

#include "Basic.hpp"

#include "sInputCommand_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Input_Sanhua.BP_Input_Sanhua_C.攻击按下
// 0x0258 (0x0258 - 0x0000)
struct BP_Input_Sanhua_C_攻击按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0018(0x0020)()
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0038(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0050(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x006C(0x000C)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable;                                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_1;          // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B[0x1];                                       // 0x008B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x008C(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x00A0(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_1;                     // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x00B8(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x00CC(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E3[0x1];                                       // 0x00E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_1;                                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_2;                                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_3;                                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x0108(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x0120(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_1; // 0x0140(0x0010)(ReferenceParm)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1;  // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x0164(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_176[0x2];                                      // 0x0176(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x0178(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2;  // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AA[0x2];                                      // 0x01AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x01B0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_6;         // 0x01C4(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_3;  // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_3;     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_4;  // 0x01F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_4;     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20A[0x6];                                      // 0x020A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_5;  // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_5;     // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x0228(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_3;                         // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_6;  // 0x0240(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_6;     // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Sanhua_C_攻击按下) == 0x000008, "Wrong alignment on BP_Input_Sanhua_C_攻击按下");
static_assert(sizeof(BP_Input_Sanhua_C_攻击按下) == 0x000258, "Wrong size on BP_Input_Sanhua_C_攻击按下");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, time) == 0x000000, "Member 'BP_Input_Sanhua_C_攻击按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, ReturnValue) == 0x000004, "Member 'BP_Input_Sanhua_C_攻击按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000018, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc______ReturnValue) == 0x000038, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000050, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, ___bool_True_if_break_was_hit_Variable) == 0x000064, "Member 'BP_Input_Sanhua_C_攻击按下::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, ___int_Array_Index_Variable) == 0x000068, "Member 'BP_Input_Sanhua_C_攻击按下::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Array_Get_Item) == 0x00006C, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Not_PreBool_ReturnValue) == 0x000078, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, ___int_Variable) == 0x00007C, "Member 'BP_Input_Sanhua_C_攻击按下::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, ___int_Loop_Counter_Variable) == 0x000080, "Member 'BP_Input_Sanhua_C_攻击按下::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_CanResponseInput_ReturnValue) == 0x000088, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, ___bool_True_if_break_was_hit_Variable_1) == 0x000089, "Member 'BP_Input_Sanhua_C_攻击按下::___bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_1) == 0x00008A, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x00008C, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x0000A0, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, ___int_Array_Index_Variable_1) == 0x0000B4, "Member 'BP_Input_Sanhua_C_攻击按下::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x0000B8, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x0000CC, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000E0, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x0000E1, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000E2, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, ___int_Variable_1) == 0x0000E4, "Member 'BP_Input_Sanhua_C_攻击按下::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_BooleanAND_ReturnValue) == 0x0000E8, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_BooleanOR_ReturnValue) == 0x0000E9, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, ___int_Variable_2) == 0x0000EC, "Member 'BP_Input_Sanhua_C_攻击按下::___int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x0000F0, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000100, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, ___int_Variable_3) == 0x000104, "Member 'BP_Input_Sanhua_C_攻击按下::___int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x000108, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x000120, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_1) == 0x000140, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000150, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000160, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Array_Get_Item_1) == 0x000164, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Array_Length_ReturnValue_1) == 0x000170, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Less_IntInt_ReturnValue) == 0x000174, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_BooleanAND_ReturnValue_1) == 0x000175, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x000178, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, ___int_Loop_Counter_Variable_1) == 0x00018C, "Member 'BP_Input_Sanhua_C_攻击按下::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_1) == 0x000190, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x000198, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x0001A8, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_BooleanAND_ReturnValue_2) == 0x0001A9, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001AC, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, K2Node_MakeArray_Array) == 0x0001B0, "Member 'BP_Input_Sanhua_C_攻击按下::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Array_Get_Item_2) == 0x0001C0, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_6) == 0x0001C4, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0001D8, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_3) == 0x0001E0, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_3) == 0x0001F0, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_4) == 0x0001F8, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_4) == 0x000208, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x000209, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_5) == 0x000210, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_5) == 0x000220, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, K2Node_MakeArray_Array_1) == 0x000228, "Member 'BP_Input_Sanhua_C_攻击按下::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Array_Get_Item_3) == 0x000238, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_6) == 0x000240, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_6) == 0x000250, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000251, "Member 'BP_Input_Sanhua_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");

// Function BP_Input_Sanhua.BP_Input_Sanhua_C.攻击长按
// 0x0070 (0x0070 - 0x0000)
struct BP_Input_Sanhua_C_攻击长按 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Sanhua_C_攻击长按) == 0x000008, "Wrong alignment on BP_Input_Sanhua_C_攻击长按");
static_assert(sizeof(BP_Input_Sanhua_C_攻击长按) == 0x000070, "Wrong size on BP_Input_Sanhua_C_攻击长按");
static_assert(offsetof(BP_Input_Sanhua_C_攻击长按, time) == 0x000000, "Member 'BP_Input_Sanhua_C_攻击长按::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击长按, ReturnValue) == 0x000004, "Member 'BP_Input_Sanhua_C_攻击长按::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击长按, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_Sanhua_C_攻击长按::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue) == 0x00002C, "Member 'BP_Input_Sanhua_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击长按, CallFunc_Conv_IntToString_ReturnValue) == 0x000040, "Member 'BP_Input_Sanhua_C_攻击长按::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击长按, CallFunc_CanResponseInput_ReturnValue) == 0x000050, "Member 'BP_Input_Sanhua_C_攻击长按::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000058, "Member 'BP_Input_Sanhua_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000068, "Member 'BP_Input_Sanhua_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function BP_Input_Sanhua.BP_Input_Sanhua_C.攻击抬起事件
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Input_Sanhua_C_攻击抬起事件 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0004(0x000C)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBuffCountById_ReturnValue;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1;  // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc__________NewParam;                        // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0048(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0098(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Input_Sanhua_C_攻击抬起事件) == 0x000008, "Wrong alignment on BP_Input_Sanhua_C_攻击抬起事件");
static_assert(sizeof(BP_Input_Sanhua_C_攻击抬起事件) == 0x0000C0, "Wrong size on BP_Input_Sanhua_C_攻击抬起事件");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, time) == 0x000000, "Member 'BP_Input_Sanhua_C_攻击抬起事件::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000004, "Member 'BP_Input_Sanhua_C_攻击抬起事件::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x000010, "Member 'BP_Input_Sanhua_C_攻击抬起事件::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, CallFunc_GetBuffCountById_ReturnValue) == 0x000014, "Member 'BP_Input_Sanhua_C_攻击抬起事件::CallFunc_GetBuffCountById_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000018, "Member 'BP_Input_Sanhua_C_攻击抬起事件::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000028, "Member 'BP_Input_Sanhua_C_攻击抬起事件::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000030, "Member 'BP_Input_Sanhua_C_攻击抬起事件::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000040, "Member 'BP_Input_Sanhua_C_攻击抬起事件::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, CallFunc__________NewParam) == 0x000041, "Member 'BP_Input_Sanhua_C_攻击抬起事件::CallFunc__________NewParam' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, K2Node_MakeStruct_FormatArgumentData) == 0x000048, "Member 'BP_Input_Sanhua_C_攻击抬起事件::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, K2Node_MakeArray_Array) == 0x000088, "Member 'BP_Input_Sanhua_C_攻击抬起事件::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, CallFunc_Format_ReturnValue) == 0x000098, "Member 'BP_Input_Sanhua_C_攻击抬起事件::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起事件, CallFunc_Conv_TextToString_ReturnValue) == 0x0000B0, "Member 'BP_Input_Sanhua_C_攻击抬起事件::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function BP_Input_Sanhua.BP_Input_Sanhua_C.攻击抬起
// 0x0060 (0x0060 - 0x0000)
struct BP_Input_Sanhua_C_攻击抬起 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc__________NewParam;                        // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0030(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0044(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Sanhua_C_攻击抬起) == 0x000004, "Wrong alignment on BP_Input_Sanhua_C_攻击抬起");
static_assert(sizeof(BP_Input_Sanhua_C_攻击抬起) == 0x000060, "Wrong size on BP_Input_Sanhua_C_攻击抬起");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, time) == 0x000000, "Member 'BP_Input_Sanhua_C_攻击抬起::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, ReturnValue) == 0x000004, "Member 'BP_Input_Sanhua_C_攻击抬起::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc__________NewParam) == 0x00002D, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc__________NewParam' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc_CreateSkillCommand_ReturnValue) == 0x000030, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000044, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc_Greater_IntInt_ReturnValue) == 0x000058, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000059, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc_CanResponseInput_ReturnValue) == 0x00005A, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00005B, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00005C, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc_IsMovingOnGround_ReturnValue) == 0x00005D, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc_BooleanAND_ReturnValue) == 0x00005E, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_攻击抬起, CallFunc_BooleanOR_ReturnValue) == 0x00005F, "Member 'BP_Input_Sanhua_C_攻击抬起::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Input_Sanhua.BP_Input_Sanhua_C.技能1按下
// 0x004C (0x004C - 0x0000)
struct BP_Input_Sanhua_C_技能1按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc___1___ReturnValue;                        // 0x0020(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0038(0x0014)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Input_Sanhua_C_技能1按下) == 0x000004, "Wrong alignment on BP_Input_Sanhua_C_技能1按下");
static_assert(sizeof(BP_Input_Sanhua_C_技能1按下) == 0x00004C, "Wrong size on BP_Input_Sanhua_C_技能1按下");
static_assert(offsetof(BP_Input_Sanhua_C_技能1按下, time) == 0x000000, "Member 'BP_Input_Sanhua_C_技能1按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_技能1按下, ReturnValue) == 0x000004, "Member 'BP_Input_Sanhua_C_技能1按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_技能1按下, CallFunc_CanResponseInput_ReturnValue) == 0x000018, "Member 'BP_Input_Sanhua_C_技能1按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'BP_Input_Sanhua_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001A, "Member 'BP_Input_Sanhua_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_技能1按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x00001B, "Member 'BP_Input_Sanhua_C_技能1按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_技能1按下, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'BP_Input_Sanhua_C_技能1按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_技能1按下, CallFunc___1___ReturnValue) == 0x000020, "Member 'BP_Input_Sanhua_C_技能1按下::CallFunc___1___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_技能1按下, CallFunc_BooleanOR_ReturnValue) == 0x000034, "Member 'BP_Input_Sanhua_C_技能1按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000038, "Member 'BP_Input_Sanhua_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");

// Function BP_Input_Sanhua.BP_Input_Sanhua_C.大招按下
// 0x0040 (0x0040 - 0x0000)
struct BP_Input_Sanhua_C_大招按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0020(0x0014)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_1;   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Sanhua_C_大招按下) == 0x000004, "Wrong alignment on BP_Input_Sanhua_C_大招按下");
static_assert(sizeof(BP_Input_Sanhua_C_大招按下) == 0x000040, "Wrong size on BP_Input_Sanhua_C_大招按下");
static_assert(offsetof(BP_Input_Sanhua_C_大招按下, time) == 0x000000, "Member 'BP_Input_Sanhua_C_大招按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_大招按下, ReturnValue) == 0x000004, "Member 'BP_Input_Sanhua_C_大招按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_大招按下, CallFunc_CanResponseInput_ReturnValue) == 0x000018, "Member 'BP_Input_Sanhua_C_大招按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_大招按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'BP_Input_Sanhua_C_大招按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_大招按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x00001A, "Member 'BP_Input_Sanhua_C_大招按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_大招按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001B, "Member 'BP_Input_Sanhua_C_大招按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_大招按下, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'BP_Input_Sanhua_C_大招按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_大招按下, CallFunc_BooleanOR_ReturnValue) == 0x00001D, "Member 'BP_Input_Sanhua_C_大招按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000020, "Member 'BP_Input_Sanhua_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x000034, "Member 'BP_Input_Sanhua_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue_1) == 0x000038, "Member 'BP_Input_Sanhua_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_大招按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_Input_Sanhua_C_大招按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Input_Sanhua.BP_Input_Sanhua_C.幻象1长按
// 0x0018 (0x0018 - 0x0000)
struct BP_Input_Sanhua_C_幻象1长按 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Input_Sanhua_C_幻象1长按) == 0x000004, "Wrong alignment on BP_Input_Sanhua_C_幻象1长按");
static_assert(sizeof(BP_Input_Sanhua_C_幻象1长按) == 0x000018, "Wrong size on BP_Input_Sanhua_C_幻象1长按");
static_assert(offsetof(BP_Input_Sanhua_C_幻象1长按, time) == 0x000000, "Member 'BP_Input_Sanhua_C_幻象1长按::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_幻象1长按, ReturnValue) == 0x000004, "Member 'BP_Input_Sanhua_C_幻象1长按::ReturnValue' has a wrong offset!");

// Function BP_Input_Sanhua.BP_Input_Sanhua_C.闪避按下
// 0x0070 (0x0070 - 0x0000)
struct BP_Input_Sanhua_C_闪避按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x005C(0x0014)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Input_Sanhua_C_闪避按下) == 0x000008, "Wrong alignment on BP_Input_Sanhua_C_闪避按下");
static_assert(sizeof(BP_Input_Sanhua_C_闪避按下) == 0x000070, "Wrong size on BP_Input_Sanhua_C_闪避按下");
static_assert(offsetof(BP_Input_Sanhua_C_闪避按下, time) == 0x000000, "Member 'BP_Input_Sanhua_C_闪避按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_闪避按下, ReturnValue) == 0x000004, "Member 'BP_Input_Sanhua_C_闪避按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_闪避按下, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_Sanhua_C_闪避按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_闪避按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x00002C, "Member 'BP_Input_Sanhua_C_闪避按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_闪避按下, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000040, "Member 'BP_Input_Sanhua_C_闪避按下::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_闪避按下, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000041, "Member 'BP_Input_Sanhua_C_闪避按下::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_闪避按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000048, "Member 'BP_Input_Sanhua_C_闪避按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_闪避按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000058, "Member 'BP_Input_Sanhua_C_闪避按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_闪避按下, CallFunc_BooleanOR_ReturnValue) == 0x000059, "Member 'BP_Input_Sanhua_C_闪避按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_闪避按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x00005C, "Member 'BP_Input_Sanhua_C_闪避按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");

// Function BP_Input_Sanhua.BP_Input_Sanhua_C.散华蓄力成功判定
// 0x0005 (0x0005 - 0x0000)
struct BP_Input_Sanhua_C_散华蓄力成功判定 final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_2;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Sanhua_C_散华蓄力成功判定) == 0x000001, "Wrong alignment on BP_Input_Sanhua_C_散华蓄力成功判定");
static_assert(sizeof(BP_Input_Sanhua_C_散华蓄力成功判定) == 0x000005, "Wrong size on BP_Input_Sanhua_C_散华蓄力成功判定");
static_assert(offsetof(BP_Input_Sanhua_C_散华蓄力成功判定, NewParam) == 0x000000, "Member 'BP_Input_Sanhua_C_散华蓄力成功判定::NewParam' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_散华蓄力成功判定, K2Node_SwitchInteger_CmpSuccess) == 0x000001, "Member 'BP_Input_Sanhua_C_散华蓄力成功判定::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_散华蓄力成功判定, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000002, "Member 'BP_Input_Sanhua_C_散华蓄力成功判定::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_散华蓄力成功判定, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x000003, "Member 'BP_Input_Sanhua_C_散华蓄力成功判定::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_散华蓄力成功判定, CallFunc_InRange_FloatFloat_ReturnValue_2) == 0x000004, "Member 'BP_Input_Sanhua_C_散华蓄力成功判定::CallFunc_InRange_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function BP_Input_Sanhua.BP_Input_Sanhua_C.幻象2按下
// 0x0088 (0x0088 - 0x0000)
struct BP_Input_Sanhua_C_幻象2按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         按键信息;                                          // 0x0018(0x0014)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          找到专属半变身;                                    // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     当前玩家;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc___2___ReturnValue;                        // 0x0038(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetIntValueByEntity_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x006C(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Sanhua_C_幻象2按下) == 0x000008, "Wrong alignment on BP_Input_Sanhua_C_幻象2按下");
static_assert(sizeof(BP_Input_Sanhua_C_幻象2按下) == 0x000088, "Wrong size on BP_Input_Sanhua_C_幻象2按下");
static_assert(offsetof(BP_Input_Sanhua_C_幻象2按下, time) == 0x000000, "Member 'BP_Input_Sanhua_C_幻象2按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_幻象2按下, ReturnValue) == 0x000004, "Member 'BP_Input_Sanhua_C_幻象2按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_幻象2按下, 按键信息) == 0x000018, "Member 'BP_Input_Sanhua_C_幻象2按下::按键信息' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_幻象2按下, 找到专属半变身) == 0x00002C, "Member 'BP_Input_Sanhua_C_幻象2按下::找到专属半变身' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_幻象2按下, 当前玩家) == 0x000030, "Member 'BP_Input_Sanhua_C_幻象2按下::当前玩家' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_幻象2按下, CallFunc___2___ReturnValue) == 0x000038, "Member 'BP_Input_Sanhua_C_幻象2按下::CallFunc___2___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_幻象2按下, CallFunc_GetIntValueByEntity_ReturnValue) == 0x00004C, "Member 'BP_Input_Sanhua_C_幻象2按下::CallFunc_GetIntValueByEntity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_幻象2按下, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000050, "Member 'BP_Input_Sanhua_C_幻象2按下::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_幻象2按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000058, "Member 'BP_Input_Sanhua_C_幻象2按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_幻象2按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000068, "Member 'BP_Input_Sanhua_C_幻象2按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_幻象2按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x00006C, "Member 'BP_Input_Sanhua_C_幻象2按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Sanhua_C_幻象2按下, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000080, "Member 'BP_Input_Sanhua_C_幻象2按下::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");

}

