#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsTaskRandomFloat

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TsTaskAbortImmediatelyBase_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsTaskRandomFloat.TsTaskRandomFloat_C
// 0x0020 (0x00D8 - 0x00B8)
class UTsTaskRandomFloat_C final : public UTsTaskAbortImmediatelyBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_TsTaskRandomFloat_C;                // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Min;                                               // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max;                                               // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 BlackboardKeyWriteTo;                              // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)

public:
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ExecuteUbergraph_TsTaskRandomFloat(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsTaskRandomFloat_C">();
	}
	static class UTsTaskRandomFloat_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsTaskRandomFloat_C>();
	}
};
static_assert(alignof(UTsTaskRandomFloat_C) == 0x000008, "Wrong alignment on UTsTaskRandomFloat_C");
static_assert(sizeof(UTsTaskRandomFloat_C) == 0x0000D8, "Wrong size on UTsTaskRandomFloat_C");
static_assert(offsetof(UTsTaskRandomFloat_C, UberGraphFrame_TsTaskRandomFloat_C) == 0x0000B8, "Member 'UTsTaskRandomFloat_C::UberGraphFrame_TsTaskRandomFloat_C' has a wrong offset!");
static_assert(offsetof(UTsTaskRandomFloat_C, Min) == 0x0000C0, "Member 'UTsTaskRandomFloat_C::Min' has a wrong offset!");
static_assert(offsetof(UTsTaskRandomFloat_C, Max) == 0x0000C4, "Member 'UTsTaskRandomFloat_C::Max' has a wrong offset!");
static_assert(offsetof(UTsTaskRandomFloat_C, BlackboardKeyWriteTo) == 0x0000C8, "Member 'UTsTaskRandomFloat_C::BlackboardKeyWriteTo' has a wrong offset!");

}

