#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimNotifyEffect

#include "Basic.hpp"

#include "ESkillEffectType_structs.hpp"
#include "EAnimNotifyEffectLocationType_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass AnimNotifyEffect.AnimNotifyEffect_C
// 0x00B0 (0x0130 - 0x0080)
class UAnimNotifyEffect_C final : public UKuroEffectMakerAN
{
public:
	bool                                          UseSocketTransform;                                // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseClipboardTransform;                             // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DetachWhenSkillEnd;                                // 0x0082(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESkillEffectType                              WhenSkillEnd;                                      // 0x0083(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimNotifyEffectLocationType                 LocationType;                                      // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightOrLeftFoot;                                   // 0x0085(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UEffectModelBase>        EffectDataAssetRef;                                // 0x0088(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash)
	float                                         WhenSkillEndEnableTime;                            // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugTrace;                                        // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceFrom;                                         // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                TraceTo;                                           // 0x00CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TMap<struct FGameplayTag, bool>               PlayNeedTags;                                      // 0x00D8(0x0050)(Edit, BlueprintVisible)
	bool                                          NeedAnyTag;                                        // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          IgnoreWhenInvisible;                               // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	bool K2_ValidateAssets();
	bool K2_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	bool K2_PostChangeProperty(const class FName PropertyName);
	bool TraceDetectClimbStep(class ATsBaseCharacter_C* outer, const struct FTransform& outTrans);
	bool IsDisablePostProcess(class USkeletalMeshComponent* meshComp);
	void AttachEffectAndSetupTransform(class AActor* outer, float effectHandle);

	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimNotifyEffect_C">();
	}
	static class UAnimNotifyEffect_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyEffect_C>();
	}
};
static_assert(alignof(UAnimNotifyEffect_C) == 0x000008, "Wrong alignment on UAnimNotifyEffect_C");
static_assert(sizeof(UAnimNotifyEffect_C) == 0x000130, "Wrong size on UAnimNotifyEffect_C");
static_assert(offsetof(UAnimNotifyEffect_C, UseSocketTransform) == 0x000080, "Member 'UAnimNotifyEffect_C::UseSocketTransform' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, UseClipboardTransform) == 0x000081, "Member 'UAnimNotifyEffect_C::UseClipboardTransform' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, DetachWhenSkillEnd) == 0x000082, "Member 'UAnimNotifyEffect_C::DetachWhenSkillEnd' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, WhenSkillEnd) == 0x000083, "Member 'UAnimNotifyEffect_C::WhenSkillEnd' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, LocationType) == 0x000084, "Member 'UAnimNotifyEffect_C::LocationType' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, RightOrLeftFoot) == 0x000085, "Member 'UAnimNotifyEffect_C::RightOrLeftFoot' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, EffectDataAssetRef) == 0x000088, "Member 'UAnimNotifyEffect_C::EffectDataAssetRef' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, WhenSkillEndEnableTime) == 0x0000B8, "Member 'UAnimNotifyEffect_C::WhenSkillEndEnableTime' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, DebugTrace) == 0x0000BC, "Member 'UAnimNotifyEffect_C::DebugTrace' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, TraceFrom) == 0x0000C0, "Member 'UAnimNotifyEffect_C::TraceFrom' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, TraceTo) == 0x0000CC, "Member 'UAnimNotifyEffect_C::TraceTo' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, PlayNeedTags) == 0x0000D8, "Member 'UAnimNotifyEffect_C::PlayNeedTags' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, NeedAnyTag) == 0x000128, "Member 'UAnimNotifyEffect_C::NeedAnyTag' has a wrong offset!");
static_assert(offsetof(UAnimNotifyEffect_C, IgnoreWhenInvisible) == 0x000129, "Member 'UAnimNotifyEffect_C::IgnoreWhenInvisible' has a wrong offset!");

}

