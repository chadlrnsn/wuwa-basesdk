#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FightManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_ManagerBase_classes.hpp"
#include "ECamp_structs.hpp"
#include "ERelation_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FightManager.BP_FightManager_C
// 0x01A8 (0x01F0 - 0x0048)
class UBP_FightManager_C final : public UBP_ManagerBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0048(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ActorManager_C*                     角色管理器;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          初始化完成;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ATsBaseCharacter_C* 触发者)> 三消触发;                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ATsBaseCharacter_C* 触发者)> 击飞触发;                    // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ATsBaseCharacter_C* 触发者)> 破白条触发;                  // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ATsBaseCharacter_C* 触发者)> 三红触发;                    // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UDataTable*                             阵营关系数据;                                      // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              队伍角色加载完成;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<int32, class UObject*>                   BPai数组;                                          // 0x00B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UObject*>                        怪物临时BPAI数组;                                  // 0x0108(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          场景加载完成;                                      // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class ATsBaseCharacter_C*> Debug的对象集合;                                  // 0x0120(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(const class FString& Option)> 添加Debug的FightAttribute;           // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const class FString& Option)> 删除Debug的FightAttribute;           // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<int32, int32>                            站位怪物数量;                                      // 0x0190(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UDataTable*                             受击类型覆盖表;                                    // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         攻击位数量;                                        // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FightManager(int32 EntryPoint);
	void 当阵容加载完成时();
	void Tick(float DeltaSeconds);
	void 战斗初始化();
	void 初始化(class UBP_MainGameInstance_C* 游戏实例_0);
	void 阵营判断(ECamp 自身阵营, ECamp 目标阵营, ERelation* 关系, int32* 关系整数);
	void 烈度返回NPC();
	void 烈度获取所有Actor();
	void 注册BPai(class UObject* BPAI对象);
	void 添加Debug的对象(const class ATsBaseCharacter_C*& baseChar);
	void 删除Debug的对象(const class ATsBaseCharacter_C*& baseChar);
	void 站位控制(TArray<class UObject*>& 怪物数组);
	void 查询受击类型覆盖(int32 ID, struct FSHitMapping* 受击覆盖, bool* 是否找到);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FightManager_C">();
	}
	static class UBP_FightManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FightManager_C>();
	}
};
static_assert(alignof(UBP_FightManager_C) == 0x000008, "Wrong alignment on UBP_FightManager_C");
static_assert(sizeof(UBP_FightManager_C) == 0x0001F0, "Wrong size on UBP_FightManager_C");
static_assert(offsetof(UBP_FightManager_C, UberGraphFrame) == 0x000048, "Member 'UBP_FightManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 角色管理器) == 0x000050, "Member 'UBP_FightManager_C::角色管理器' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 初始化完成) == 0x000058, "Member 'UBP_FightManager_C::初始化完成' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 三消触发) == 0x000060, "Member 'UBP_FightManager_C::三消触发' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 击飞触发) == 0x000070, "Member 'UBP_FightManager_C::击飞触发' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 破白条触发) == 0x000080, "Member 'UBP_FightManager_C::破白条触发' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 三红触发) == 0x000090, "Member 'UBP_FightManager_C::三红触发' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 阵营关系数据) == 0x0000A0, "Member 'UBP_FightManager_C::阵营关系数据' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 队伍角色加载完成) == 0x0000A8, "Member 'UBP_FightManager_C::队伍角色加载完成' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, BPai数组) == 0x0000B8, "Member 'UBP_FightManager_C::BPai数组' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 怪物临时BPAI数组) == 0x000108, "Member 'UBP_FightManager_C::怪物临时BPAI数组' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 场景加载完成) == 0x000118, "Member 'UBP_FightManager_C::场景加载完成' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, Debug的对象集合) == 0x000120, "Member 'UBP_FightManager_C::Debug的对象集合' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 添加Debug的FightAttribute) == 0x000170, "Member 'UBP_FightManager_C::添加Debug的FightAttribute' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 删除Debug的FightAttribute) == 0x000180, "Member 'UBP_FightManager_C::删除Debug的FightAttribute' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 站位怪物数量) == 0x000190, "Member 'UBP_FightManager_C::站位怪物数量' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 受击类型覆盖表) == 0x0001E0, "Member 'UBP_FightManager_C::受击类型覆盖表' has a wrong offset!");
static_assert(offsetof(UBP_FightManager_C, 攻击位数量) == 0x0001E8, "Member 'UBP_FightManager_C::攻击位数量' has a wrong offset!");

}

