#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SMSystem

#include "Basic.hpp"

#include "SMSystem_classes.hpp"
#include "SMSystem_parameters.hpp"


namespace SDK
{

// Function SMSystem.SMStateMachineNetworkedInterface.HasAuthority
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISMStateMachineNetworkedInterface::HasAuthority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SMStateMachineNetworkedInterface", "HasAuthority");

	Params::SMStateMachineNetworkedInterface_HasAuthority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateMachineNetworkedInterface.IsConfiguredForNetworking
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISMStateMachineNetworkedInterface::IsConfiguredForNetworking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SMStateMachineNetworkedInterface", "IsConfiguredForNetworking");

	Params::SMStateMachineNetworkedInterface_IsConfiguredForNetworking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateMachineNetworkedInterface.IsSimulatedProxy
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISMStateMachineNetworkedInterface::IsSimulatedProxy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SMStateMachineNetworkedInterface", "IsSimulatedProxy");

	Params::SMStateMachineNetworkedInterface_IsSimulatedProxy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMNodeInstance.GetContext
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* USMNodeInstance::GetContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMNodeInstance", "GetContext");

	Params::SMNodeInstance_GetContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMNodeInstance.GetGuid
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGuid USMNodeInstance::GetGuid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMNodeInstance", "GetGuid");

	Params::SMNodeInstance_GetGuid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMNodeInstance.GetNetworkInterface
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class ISMStateMachineNetworkedInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class ISMStateMachineNetworkedInterface> USMNodeInstance::GetNetworkInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMNodeInstance", "GetNetworkInterface");

	Params::SMNodeInstance_GetNetworkInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMNodeInstance.GetNodeName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USMNodeInstance::GetNodeName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMNodeInstance", "GetNodeName");

	Params::SMNodeInstance_GetNodeName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMNodeInstance.GetOwningStateMachineNodeInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMStateMachineInstance*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateMachineInstance* USMNodeInstance::GetOwningStateMachineNodeInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMNodeInstance", "GetOwningStateMachineNodeInstance");

	Params::SMNodeInstance_GetOwningStateMachineNodeInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMNodeInstance.GetStateMachineInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bTopMostInstance                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMInstance*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMInstance* USMNodeInstance::GetStateMachineInstance(bool bTopMostInstance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMNodeInstance", "GetStateMachineInstance");

	Params::SMNodeInstance_GetStateMachineInstance Parms{};

	Parms.bTopMostInstance = bTopMostInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMNodeInstance.GetTimeInState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USMNodeInstance::GetTimeInState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMNodeInstance", "GetTimeInState");

	Params::SMNodeInstance_GetTimeInState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMNodeInstance.HasUpdated
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMNodeInstance::HasUpdated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMNodeInstance", "HasUpdated");

	Params::SMNodeInstance_HasUpdated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMNodeInstance.IsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMNodeInstance::IsActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMNodeInstance", "IsActive");

	Params::SMNodeInstance_IsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMNodeInstance.IsInEndState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMNodeInstance::IsInEndState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMNodeInstance", "IsInEndState");

	Params::SMNodeInstance_IsInEndState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.EvaluateTransitions
// (Final, Native, Public, BlueprintCallable)

void USMStateInstance_Base::EvaluateTransitions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "EvaluateTransitions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateInstance_Base.SetActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetAllParents                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bActivateNow                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateInstance_Base::SetActive(bool bValue, bool bSetAllParents, bool bActivateNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "SetActive");

	Params::SMStateInstance_Base_SetActive Parms{};

	Parms.bValue = bValue;
	Parms.bSetAllParents = bSetAllParents;
	Parms.bActivateNow = bActivateNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateInstance_Base.SetAlwaysUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateInstance_Base::SetAlwaysUpdate(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "SetAlwaysUpdate");

	Params::SMStateInstance_Base_SetAlwaysUpdate Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateInstance_Base.SetDisableTickTransitionEvaluation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateInstance_Base::SetDisableTickTransitionEvaluation(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "SetDisableTickTransitionEvaluation");

	Params::SMStateInstance_Base_SetDisableTickTransitionEvaluation Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateInstance_Base.SetEvalTransitionsOnStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateInstance_Base::SetEvalTransitionsOnStart(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "SetEvalTransitionsOnStart");

	Params::SMStateInstance_Base_SetEvalTransitionsOnStart Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateInstance_Base.SetExcludeFromAnyState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateInstance_Base::SetExcludeFromAnyState(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "SetExcludeFromAnyState");

	Params::SMStateInstance_Base_SetExcludeFromAnyState Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateInstance_Base.SwitchToLinkedState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USMStateInstance_Base*            NextStateInstance                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRequireTransitionToPass                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bActivateNow                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::SwitchToLinkedState(class USMStateInstance_Base* NextStateInstance, bool bRequireTransitionToPass, bool bActivateNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "SwitchToLinkedState");

	Params::SMStateInstance_Base_SwitchToLinkedState Parms{};

	Parms.NextStateInstance = NextStateInstance;
	Parms.bRequireTransitionToPass = bRequireTransitionToPass;
	Parms.bActivateNow = bActivateNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.SwitchToLinkedStateByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NextStateName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRequireTransitionToPass                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bActivateNow                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::SwitchToLinkedStateByName(const class FString& NextStateName, bool bRequireTransitionToPass, bool bActivateNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "SwitchToLinkedStateByName");

	Params::SMStateInstance_Base_SwitchToLinkedStateByName Parms{};

	Parms.NextStateName = std::move(NextStateName);
	Parms.bRequireTransitionToPass = bRequireTransitionToPass;
	Parms.bActivateNow = bActivateNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.SwitchToLinkedStateByTransition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USMTransitionInstance*            TransitionInstance                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRequireTransitionToPass                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bActivateNow                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::SwitchToLinkedStateByTransition(class USMTransitionInstance* TransitionInstance, bool bRequireTransitionToPass, bool bActivateNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "SwitchToLinkedStateByTransition");

	Params::SMStateInstance_Base_SwitchToLinkedStateByTransition Parms{};

	Parms.TransitionInstance = TransitionInstance;
	Parms.bRequireTransitionToPass = bRequireTransitionToPass;
	Parms.bActivateNow = bActivateNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.AreAllIncomingTransitionsFromAnAnyState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::AreAllIncomingTransitionsFromAnAnyState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "AreAllIncomingTransitionsFromAnAnyState");

	Params::SMStateInstance_Base_AreAllIncomingTransitionsFromAnAnyState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.AreAllOutgoingTransitionsFromAnAnyState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::AreAllOutgoingTransitionsFromAnAnyState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "AreAllOutgoingTransitionsFromAnAnyState");

	Params::SMStateInstance_Base_AreAllOutgoingTransitionsFromAnAnyState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetAlwaysUpdate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::GetAlwaysUpdate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetAlwaysUpdate");

	Params::SMStateInstance_Base_GetAlwaysUpdate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetDisableTickTransitionEvaluation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::GetDisableTickTransitionEvaluation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetDisableTickTransitionEvaluation");

	Params::SMStateInstance_Base_GetDisableTickTransitionEvaluation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetEvalTransitionsOnStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::GetEvalTransitionsOnStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetEvalTransitionsOnStart");

	Params::SMStateInstance_Base_GetEvalTransitionsOnStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetExcludeFromAnyState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::GetExcludeFromAnyState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetExcludeFromAnyState");

	Params::SMStateInstance_Base_GetExcludeFromAnyState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetIncomingTransitions
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USMTransitionInstance*>*   Transitions                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bExcludeAlwaysFalse                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::GetIncomingTransitions(TArray<class USMTransitionInstance*>* Transitions, bool bExcludeAlwaysFalse) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetIncomingTransitions");

	Params::SMStateInstance_Base_GetIncomingTransitions Parms{};

	Parms.bExcludeAlwaysFalse = bExcludeAlwaysFalse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Transitions != nullptr)
		*Transitions = std::move(Parms.Transitions);

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetNextStateByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    StateName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMStateInstance_Base::GetNextStateByName(const class FString& StateName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetNextStateByName");

	Params::SMStateInstance_Base_GetNextStateByName Parms{};

	Parms.StateName = std::move(StateName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetNextStateByTransitionIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMStateInstance_Base::GetNextStateByTransitionIndex(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetNextStateByTransitionIndex");

	Params::SMStateInstance_Base_GetNextStateByTransitionIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetOutgoingTransitions
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USMTransitionInstance*>*   Transitions                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bExcludeAlwaysFalse                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::GetOutgoingTransitions(TArray<class USMTransitionInstance*>* Transitions, bool bExcludeAlwaysFalse) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetOutgoingTransitions");

	Params::SMStateInstance_Base_GetOutgoingTransitions Parms{};

	Parms.bExcludeAlwaysFalse = bExcludeAlwaysFalse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Transitions != nullptr)
		*Transitions = std::move(Parms.Transitions);

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetPreviousActiveState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMStateInstance_Base::GetPreviousActiveState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetPreviousActiveState");

	Params::SMStateInstance_Base_GetPreviousActiveState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetPreviousActiveTransition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMTransitionInstance*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMTransitionInstance* USMStateInstance_Base::GetPreviousActiveTransition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetPreviousActiveTransition");

	Params::SMStateInstance_Base_GetPreviousActiveTransition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetPreviousStateByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    StateName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMStateInstance_Base::GetPreviousStateByName(const class FString& StateName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetPreviousStateByName");

	Params::SMStateInstance_Base_GetPreviousStateByName Parms{};

	Parms.StateName = std::move(StateName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetServerTimeInState
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool*                                   bOutUsedLocalTime                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USMStateInstance_Base::GetServerTimeInState(bool* bOutUsedLocalTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetServerTimeInState");

	Params::SMStateInstance_Base_GetServerTimeInState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutUsedLocalTime != nullptr)
		*bOutUsedLocalTime = Parms.bOutUsedLocalTime;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetStartTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FDateTime                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FDateTime USMStateInstance_Base::GetStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetStartTime");

	Params::SMStateInstance_Base_GetStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetStateInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSMStateInfo*                    State                                                  (Parm, OutParm, NativeAccessSpecifierPublic)

void USMStateInstance_Base::GetStateInfo(struct FSMStateInfo* State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetStateInfo");

	Params::SMStateInstance_Base_GetStateInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (State != nullptr)
		*State = std::move(Parms.State);
}


// Function SMSystem.SMStateInstance_Base.GetTransitionByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMTransitionInstance*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMTransitionInstance* USMStateInstance_Base::GetTransitionByIndex(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetTransitionByIndex");

	Params::SMStateInstance_Base_GetTransitionByIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.GetTransitionToTake
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMTransitionInstance*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMTransitionInstance* USMStateInstance_Base::GetTransitionToTake() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "GetTransitionToTake");

	Params::SMStateInstance_Base_GetTransitionToTake Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.IsEntryState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::IsEntryState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "IsEntryState");

	Params::SMStateInstance_Base_IsEntryState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateInstance_Base.IsStateMachine
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateInstance_Base::IsStateMachine() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateInstance_Base", "IsStateMachine");

	Params::SMStateInstance_Base_IsStateMachine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMConduitInstance.SetCanEvaluate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMConduitInstance::SetCanEvaluate(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMConduitInstance", "SetCanEvaluate");

	Params::SMConduitInstance_SetCanEvaluate Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMConduitInstance.SetEvalWithTransitions
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMConduitInstance::SetEvalWithTransitions(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMConduitInstance", "SetEvalWithTransitions");

	Params::SMConduitInstance_SetEvalWithTransitions Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMConduitInstance.GetCanEvaluate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMConduitInstance::GetCanEvaluate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMConduitInstance", "GetCanEvaluate");

	Params::SMConduitInstance_GetCanEvaluate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMConduitInstance.GetEvalWithTransitions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMConduitInstance::GetEvalWithTransitions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMConduitInstance", "GetEvalWithTransitions");

	Params::SMConduitInstance_GetEvalWithTransitions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.ClearLoadedStates
// (Final, Native, Public, BlueprintCallable)

void USMInstance::ClearLoadedStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "ClearLoadedStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.ClearStateHistory
// (Final, Native, Public, BlueprintCallable)

void USMInstance::ClearStateHistory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "ClearStateHistory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.EvaluateAndFindTransitionChain
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USMTransitionInstance*            InFirstTransitionInstance                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USMTransitionInstance*>*   OutTransitionChain                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class USMStateInstance_Base**           OutDestinationState                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRequirePreviousStateActive                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::EvaluateAndFindTransitionChain(class USMTransitionInstance* InFirstTransitionInstance, TArray<class USMTransitionInstance*>* OutTransitionChain, class USMStateInstance_Base** OutDestinationState, bool bRequirePreviousStateActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "EvaluateAndFindTransitionChain");

	Params::SMInstance_EvaluateAndFindTransitionChain Parms{};

	Parms.InFirstTransitionInstance = InFirstTransitionInstance;
	Parms.bRequirePreviousStateActive = bRequirePreviousStateActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransitionChain != nullptr)
		*OutTransitionChain = std::move(Parms.OutTransitionChain);

	if (OutDestinationState != nullptr)
		*OutDestinationState = Parms.OutDestinationState;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.EvaluateAndTakeTransitionChain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USMTransitionInstance*            InFirstTransitionInstance                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::EvaluateAndTakeTransitionChain(class USMTransitionInstance* InFirstTransitionInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "EvaluateAndTakeTransitionChain");

	Params::SMInstance_EvaluateAndTakeTransitionChain Parms{};

	Parms.InFirstTransitionInstance = InFirstTransitionInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.EvaluateTransitions
// (Final, Native, Public, BlueprintCallable)

void USMInstance::EvaluateTransitions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "EvaluateTransitions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.GetAllRootNodeInstance
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USMStateMachineInstance*>* Nodes                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USMInstance::GetAllRootNodeInstance(TArray<class USMStateMachineInstance*>* Nodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetAllRootNodeInstance");

	Params::SMInstance_GetAllRootNodeInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Nodes != nullptr)
		*Nodes = std::move(Parms.Nodes);
}


// Function SMSystem.SMInstance.GetGuidRedirectMap
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<struct FGuid, struct FGuid>        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<struct FGuid, struct FGuid> USMInstance::GetGuidRedirectMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetGuidRedirectMap");

	Params::SMInstance_GetGuidRedirectMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetMasterReferenceOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USMInstance*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMInstance* USMInstance::GetMasterReferenceOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetMasterReferenceOwner");

	Params::SMInstance_GetMasterReferenceOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetPrimaryReferenceOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USMInstance*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMInstance* USMInstance::GetPrimaryReferenceOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetPrimaryReferenceOwner");

	Params::SMInstance_GetPrimaryReferenceOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.Initialize
// (Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::Initialize(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "Initialize");

	Params::SMInstance_Initialize Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.Internal_EvaluateAndTakeTransitionChainByGuid
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGuid&                     PathGuid                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::Internal_EvaluateAndTakeTransitionChainByGuid(const struct FGuid& PathGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "Internal_EvaluateAndTakeTransitionChainByGuid");

	Params::SMInstance_Internal_EvaluateAndTakeTransitionChainByGuid Parms{};

	Parms.PathGuid = std::move(PathGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.Internal_EventCleanup
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGuid&                     PathGuid                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::Internal_EventCleanup(const struct FGuid& PathGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "Internal_EventCleanup");

	Params::SMInstance_Internal_EventCleanup Parms{};

	Parms.PathGuid = std::move(PathGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.Internal_EventUpdate
// (Final, Native, Protected, BlueprintCallable)

void USMInstance::Internal_EventUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "Internal_EventUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.Internal_Update
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::Internal_Update(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "Internal_Update");

	Params::SMInstance_Internal_Update Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.K2_TryGetNetworkInterface
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class ISMStateMachineNetworkedInterface>*Interface                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool*                                   bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::K2_TryGetNetworkInterface(TScriptInterface<class ISMStateMachineNetworkedInterface>* Interface, bool* bIsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "K2_TryGetNetworkInterface");

	Params::SMInstance_K2_TryGetNetworkInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Interface != nullptr)
		*Interface = Parms.Interface;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;
}


// Function SMSystem.SMInstance.LoadFromMultipleStates
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FGuid>&             FromGuids                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bNotify                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::LoadFromMultipleStates(const TArray<struct FGuid>& FromGuids, bool bNotify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "LoadFromMultipleStates");

	Params::SMInstance_LoadFromMultipleStates Parms{};

	Parms.FromGuids = std::move(FromGuids);
	Parms.bNotify = bNotify;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.LoadFromState
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGuid&                     FromGuid                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllParents                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNotify                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::LoadFromState(const struct FGuid& FromGuid, bool bAllParents, bool bNotify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "LoadFromState");

	Params::SMInstance_LoadFromState Parms{};

	Parms.FromGuid = std::move(FromGuid);
	Parms.bAllParents = bAllParents;
	Parms.bNotify = bNotify;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.OnPostCompile
// (Native, Event, Public, BlueprintEvent)

void USMInstance::OnPostCompile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "OnPostCompile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.OnPreStateMachineInitialized
// (Native, Event, Public, BlueprintEvent)

void USMInstance::OnPreStateMachineInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "OnPreStateMachineInitialized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.OnStateMachineInitialized
// (Native, Event, Public, BlueprintEvent)

void USMInstance::OnStateMachineInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "OnStateMachineInitialized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.OnStateMachineInitialStateLoaded
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FGuid&                     StateGuid                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::OnStateMachineInitialStateLoaded(const struct FGuid& StateGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "OnStateMachineInitialStateLoaded");

	Params::SMInstance_OnStateMachineInitialStateLoaded Parms{};

	Parms.StateGuid = std::move(StateGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.OnStateMachineStart
// (Native, Event, Public, BlueprintEvent)

void USMInstance::OnStateMachineStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "OnStateMachineStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.OnStateMachineStateChanged
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FSMStateInfo&              ToState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSMStateInfo&              FromState                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USMInstance::OnStateMachineStateChanged(const struct FSMStateInfo& ToState, const struct FSMStateInfo& FromState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "OnStateMachineStateChanged");

	Params::SMInstance_OnStateMachineStateChanged Parms{};

	Parms.ToState = std::move(ToState);
	Parms.FromState = std::move(FromState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.OnStateMachineStateStarted
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FSMStateInfo&              State                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USMInstance::OnStateMachineStateStarted(const struct FSMStateInfo& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "OnStateMachineStateStarted");

	Params::SMInstance_OnStateMachineStateStarted Parms{};

	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.OnStateMachineStop
// (Native, Event, Public, BlueprintEvent)

void USMInstance::OnStateMachineStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "OnStateMachineStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.OnStateMachineTransitionTaken
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FSMTransitionInfo&         Transition                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USMInstance::OnStateMachineTransitionTaken(const struct FSMTransitionInfo& Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "OnStateMachineTransitionTaken");

	Params::SMInstance_OnStateMachineTransitionTaken Parms{};

	Parms.Transition = std::move(Transition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.OnStateMachineUpdate
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::OnStateMachineUpdate(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "OnStateMachineUpdate");

	Params::SMInstance_OnStateMachineUpdate Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.PreloadAllNodeInstances
// (Final, Native, Public, BlueprintCallable)

void USMInstance::PreloadAllNodeInstances()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "PreloadAllNodeInstances");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.REP_OnReplicatedReferencesLoaded
// (Final, Native, Private)

void USMInstance::REP_OnReplicatedReferencesLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "REP_OnReplicatedReferencesLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.ReplicatedRestart
// (Final, Native, Public, BlueprintCallable)

void USMInstance::ReplicatedRestart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "ReplicatedRestart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.ReplicatedStart
// (Final, Native, Public, BlueprintCallable)

void USMInstance::ReplicatedStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "ReplicatedStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.ReplicatedStop
// (Final, Native, Public, BlueprintCallable)

void USMInstance::ReplicatedStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "ReplicatedStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.Restart
// (Native, Public, BlueprintCallable)

void USMInstance::Restart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "Restart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.RunUpdateAsReference
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::RunUpdateAsReference(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "RunUpdateAsReference");

	Params::SMInstance_RunUpdateAsReference Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SetAutoManageTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::SetAutoManageTime(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SetAutoManageTime");

	Params::SMInstance_SetAutoManageTime Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SetCanEverTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::SetCanEverTick(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SetCanEverTick");

	Params::SMInstance_SetCanEverTick Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SetCanTickWhenPaused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::SetCanTickWhenPaused(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SetCanTickWhenPaused");

	Params::SMInstance_SetCanTickWhenPaused Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SetContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::SetContext(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SetContext");

	Params::SMInstance_SetContext Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SetGuidRedirectMap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TMap<struct FGuid, struct FGuid>& InGuidMap                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USMInstance::SetGuidRedirectMap(const TMap<struct FGuid, struct FGuid>& InGuidMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SetGuidRedirectMap");

	Params::SMInstance_SetGuidRedirectMap Parms{};

	Parms.InGuidMap = std::move(InGuidMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SetStateHistoryMaxCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::SetStateHistoryMaxCount(int32 NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SetStateHistoryMaxCount");

	Params::SMInstance_SetStateHistoryMaxCount Parms{};

	Parms.NewSize = NewSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SetStateMachineClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USMStateMachineInstance>NewStateMachineClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::SetStateMachineClass(TSubclassOf<class USMStateMachineInstance> NewStateMachineClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SetStateMachineClass");

	Params::SMInstance_SetStateMachineClass Parms{};

	Parms.NewStateMachineClass = NewStateMachineClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SetStopOnEndState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::SetStopOnEndState(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SetStopOnEndState");

	Params::SMInstance_SetStopOnEndState Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SetTickBeforeBeginPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::SetTickBeforeBeginPlay(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SetTickBeforeBeginPlay");

	Params::SMInstance_SetTickBeforeBeginPlay Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SetTickInterval
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::SetTickInterval(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SetTickInterval");

	Params::SMInstance_SetTickInterval Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SetTickOnManualUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::SetTickOnManualUpdate(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SetTickOnManualUpdate");

	Params::SMInstance_SetTickOnManualUpdate Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.Shutdown
// (Native, Public, BlueprintCallable)

void USMInstance::Shutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "Shutdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.Start
// (Native, Public, BlueprintCallable)

void USMInstance::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "Start");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.StartWithNewContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::StartWithNewContext(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "StartWithNewContext");

	Params::SMInstance_StartWithNewContext Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.Stop
// (Native, Public, BlueprintCallable)

void USMInstance::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SwitchActiveState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USMStateInstance_Base*            NewStateInstance                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDeactivateOtherStates                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::SwitchActiveState(class USMStateInstance_Base* NewStateInstance, bool bDeactivateOtherStates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SwitchActiveState");

	Params::SMInstance_SwitchActiveState Parms{};

	Parms.NewStateInstance = NewStateInstance;
	Parms.bDeactivateOtherStates = bDeactivateOtherStates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.SwitchActiveStateByQualifiedName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InFullPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDeactivateOtherStates                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::SwitchActiveStateByQualifiedName(const class FString& InFullPath, bool bDeactivateOtherStates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "SwitchActiveStateByQualifiedName");

	Params::SMInstance_SwitchActiveStateByQualifiedName Parms{};

	Parms.InFullPath = std::move(InFullPath);
	Parms.bDeactivateOtherStates = bDeactivateOtherStates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.TakeTransitionChain
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class USMTransitionInstance*>&InTransitionChain                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::TakeTransitionChain(const TArray<class USMTransitionInstance*>& InTransitionChain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "TakeTransitionChain");

	Params::SMInstance_TakeTransitionChain Parms{};

	Parms.InTransitionChain = std::move(InTransitionChain);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.Tick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::Tick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "Tick");

	Params::SMInstance_Tick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.Update
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::Update(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "Update");

	Params::SMInstance_Update Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMInstance.AreInitialStatesSetFromLoad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::AreInitialStatesSetFromLoad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "AreInitialStatesSetFromLoad");

	Params::SMInstance_AreInitialStatesSetFromLoad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.CanAutoManageTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::CanAutoManageTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "CanAutoManageTime");

	Params::SMInstance_CanAutoManageTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.CanEverTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::CanEverTick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "CanEverTick");

	Params::SMInstance_CanEverTick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.CanTickOnManualUpdate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::CanTickOnManualUpdate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "CanTickOnManualUpdate");

	Params::SMInstance_CanTickOnManualUpdate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetActiveStateGuid
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGuid USMInstance::GetActiveStateGuid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetActiveStateGuid");

	Params::SMInstance_GetActiveStateGuid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetActiveStateInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bCheckNested                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMInstance::GetActiveStateInstance(bool bCheckNested) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetActiveStateInstance");

	Params::SMInstance_GetActiveStateInstance Parms{};

	Parms.bCheckNested = bCheckNested;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetActiveStateName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USMInstance::GetActiveStateName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetActiveStateName");

	Params::SMInstance_GetActiveStateName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetAllActiveStateGuids
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGuid>*                   ActiveGuids                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USMInstance::GetAllActiveStateGuids(TArray<struct FGuid>* ActiveGuids) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetAllActiveStateGuids");

	Params::SMInstance_GetAllActiveStateGuids Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ActiveGuids != nullptr)
		*ActiveGuids = std::move(Parms.ActiveGuids);
}


// Function SMSystem.SMInstance.GetAllActiveStateInstances
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USMStateInstance_Base*>*   ActiveStateInstances                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USMInstance::GetAllActiveStateInstances(TArray<class USMStateInstance_Base*>* ActiveStateInstances) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetAllActiveStateInstances");

	Params::SMInstance_GetAllActiveStateInstances Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ActiveStateInstances != nullptr)
		*ActiveStateInstances = std::move(Parms.ActiveStateInstances);
}


// Function SMSystem.SMInstance.GetAllCurrentStateGuids
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGuid>                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGuid> USMInstance::GetAllCurrentStateGuids() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetAllCurrentStateGuids");

	Params::SMInstance_GetAllCurrentStateGuids Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetAllReferencedInstances
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bIncludeChildren                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USMInstance*>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class USMInstance*> USMInstance::GetAllReferencedInstances(bool bIncludeChildren) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetAllReferencedInstances");

	Params::SMInstance_GetAllReferencedInstances Parms{};

	Parms.bIncludeChildren = bIncludeChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetAllStateInstances
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USMStateInstance_Base*>*   StateInstances                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USMInstance::GetAllStateInstances(TArray<class USMStateInstance_Base*>* StateInstances) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetAllStateInstances");

	Params::SMInstance_GetAllStateInstances Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (StateInstances != nullptr)
		*StateInstances = std::move(Parms.StateInstances);
}


// Function SMSystem.SMInstance.GetAllTransitionInstances
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USMTransitionInstance*>*   TransitionInstances                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USMInstance::GetAllTransitionInstances(TArray<class USMTransitionInstance*>* TransitionInstances) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetAllTransitionInstances");

	Params::SMInstance_GetAllTransitionInstances Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TransitionInstances != nullptr)
		*TransitionInstances = std::move(Parms.TransitionInstances);
}


// Function SMSystem.SMInstance.GetComponentOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMStateMachineComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateMachineComponent* USMInstance::GetComponentOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetComponentOwner");

	Params::SMInstance_GetComponentOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetContext
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* USMInstance::GetContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetContext");

	Params::SMInstance_GetContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetNestedActiveStateGuid
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGuid USMInstance::GetNestedActiveStateGuid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetNestedActiveStateGuid");

	Params::SMInstance_GetNestedActiveStateGuid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetNestedActiveStateName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USMInstance::GetNestedActiveStateName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetNestedActiveStateName");

	Params::SMInstance_GetNestedActiveStateName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetNetworkInterface
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class ISMStateMachineNetworkedInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class ISMStateMachineNetworkedInterface> USMInstance::GetNetworkInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetNetworkInterface");

	Params::SMInstance_GetNetworkInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetNodeInstanceByGuid
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMNodeInstance*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMNodeInstance* USMInstance::GetNodeInstanceByGuid(const struct FGuid& Guid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetNodeInstanceByGuid");

	Params::SMInstance_GetNodeInstanceByGuid Parms{};

	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetReferencedInstanceByGuid
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMInstance*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMInstance* USMInstance::GetReferencedInstanceByGuid(const struct FGuid& Guid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetReferencedInstanceByGuid");

	Params::SMInstance_GetReferencedInstanceByGuid Parms{};

	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetReferenceOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMInstance*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMInstance* USMInstance::GetReferenceOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetReferenceOwner");

	Params::SMInstance_GetReferenceOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetRootStateMachineInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMStateMachineInstance*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateMachineInstance* USMInstance::GetRootStateMachineInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetRootStateMachineInstance");

	Params::SMInstance_GetRootStateMachineInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetRootStateMachineNodeInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMStateMachineInstance*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateMachineInstance* USMInstance::GetRootStateMachineNodeInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetRootStateMachineNodeInstance");

	Params::SMInstance_GetRootStateMachineNodeInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetSingleActiveStateGuid
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bCheckNested                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGuid USMInstance::GetSingleActiveStateGuid(bool bCheckNested) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetSingleActiveStateGuid");

	Params::SMInstance_GetSingleActiveStateGuid Parms{};

	Parms.bCheckNested = bCheckNested;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetSingleActiveStateInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bCheckNested                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMInstance::GetSingleActiveStateInstance(bool bCheckNested) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetSingleActiveStateInstance");

	Params::SMInstance_GetSingleActiveStateInstance Parms{};

	Parms.bCheckNested = bCheckNested;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetStateHistory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FSMStateHistory>    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FSMStateHistory> USMInstance::GetStateHistory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetStateHistory");

	Params::SMInstance_GetStateHistory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetStateHistoryMaxCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USMInstance::GetStateHistoryMaxCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetStateHistoryMaxCount");

	Params::SMInstance_GetStateHistoryMaxCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetStateInstanceByGuid
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMInstance::GetStateInstanceByGuid(const struct FGuid& Guid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetStateInstanceByGuid");

	Params::SMInstance_GetStateInstanceByGuid Parms{};

	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetStateInstanceByQualifiedName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    InFullPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMInstance::GetStateInstanceByQualifiedName(const class FString& InFullPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetStateInstanceByQualifiedName");

	Params::SMInstance_GetStateInstanceByQualifiedName Parms{};

	Parms.InFullPath = std::move(InFullPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetStateMachineClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USMStateMachineInstance>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USMStateMachineInstance> USMInstance::GetStateMachineClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetStateMachineClass");

	Params::SMInstance_GetStateMachineClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetStopOnEndState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::GetStopOnEndState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetStopOnEndState");

	Params::SMInstance_GetStopOnEndState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetTickInterval
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USMInstance::GetTickInterval() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetTickInterval");

	Params::SMInstance_GetTickInterval Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.GetTransitionInstanceByGuid
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMTransitionInstance*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMTransitionInstance* USMInstance::GetTransitionInstanceByGuid(const struct FGuid& Guid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "GetTransitionInstanceByGuid");

	Params::SMInstance_GetTransitionInstanceByGuid Parms{};

	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.HasStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::HasStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "HasStarted");

	Params::SMInstance_HasStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.IsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::IsActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "IsActive");

	Params::SMInstance_IsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.IsInEndState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::IsInEndState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "IsInEndState");

	Params::SMInstance_IsInEndState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.IsInitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::IsInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "IsInitialized");

	Params::SMInstance_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.IsTickable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::IsTickable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "IsTickable");

	Params::SMInstance_IsTickable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.IsTickableWhenPaused
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMInstance::IsTickableWhenPaused() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "IsTickableWhenPaused");

	Params::SMInstance_IsTickableWhenPaused Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMInstance.TryGetNestedActiveState
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSMStateInfo*                    FoundState                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::TryGetNestedActiveState(struct FSMStateInfo* FoundState, bool* bSuccess) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "TryGetNestedActiveState");

	Params::SMInstance_TryGetNestedActiveState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FoundState != nullptr)
		*FoundState = std::move(Parms.FoundState);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function SMSystem.SMInstance.TryGetStateInfo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSMStateInfo*                    StateInfo                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::TryGetStateInfo(const struct FGuid& Guid, struct FSMStateInfo* StateInfo, bool* bSuccess) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "TryGetStateInfo");

	Params::SMInstance_TryGetStateInfo Parms{};

	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (StateInfo != nullptr)
		*StateInfo = std::move(Parms.StateInfo);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function SMSystem.SMInstance.TryGetTransitionInfo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     Guid                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSMTransitionInfo*               TransitionInfo                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMInstance::TryGetTransitionInfo(const struct FGuid& Guid, struct FSMTransitionInfo* TransitionInfo, bool* bSuccess) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMInstance", "TryGetTransitionInfo");

	Params::SMInstance_TryGetTransitionInfo Parms{};

	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TransitionInfo != nullptr)
		*TransitionInfo = std::move(Parms.TransitionInfo);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function SMSystem.SMStateMachineComponent.CLIENT_ActivateStates
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const TArray<struct FSMActivateStateTransaction>&StateTransactions                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USMStateMachineComponent::CLIENT_ActivateStates(const TArray<struct FSMActivateStateTransaction>& StateTransactions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "CLIENT_ActivateStates");

	Params::SMStateMachineComponent_CLIENT_ActivateStates Parms{};

	Parms.StateTransactions = std::move(StateTransactions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.CLIENT_FullSync
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const struct FSMFullSyncTransaction&    FullSyncTransaction                                    (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void USMStateMachineComponent::CLIENT_FullSync(const struct FSMFullSyncTransaction& FullSyncTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "CLIENT_FullSync");

	Params::SMStateMachineComponent_CLIENT_FullSync Parms{};

	Parms.FullSyncTransaction = std::move(FullSyncTransaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.CLIENT_Shutdown
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const struct FSMTransaction_Base&       Transaction                                            (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USMStateMachineComponent::CLIENT_Shutdown(const struct FSMTransaction_Base& Transaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "CLIENT_Shutdown");

	Params::SMStateMachineComponent_CLIENT_Shutdown Parms{};

	Parms.Transaction = std::move(Transaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.CLIENT_Start
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const struct FSMTransaction_Base&       Transaction                                            (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USMStateMachineComponent::CLIENT_Start(const struct FSMTransaction_Base& Transaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "CLIENT_Start");

	Params::SMStateMachineComponent_CLIENT_Start Parms{};

	Parms.Transaction = std::move(Transaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.CLIENT_Stop
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const struct FSMTransaction_Base&       Transaction                                            (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USMStateMachineComponent::CLIENT_Stop(const struct FSMTransaction_Base& Transaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "CLIENT_Stop");

	Params::SMStateMachineComponent_CLIENT_Stop Parms{};

	Parms.Transaction = std::move(Transaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.CLIENT_TakeTransitions
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const TArray<struct FSMTransitionTransaction>&Transactions                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USMStateMachineComponent::CLIENT_TakeTransitions(const TArray<struct FSMTransitionTransaction>& Transactions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "CLIENT_TakeTransitions");

	Params::SMStateMachineComponent_CLIENT_TakeTransitions Parms{};

	Parms.Transactions = std::move(Transactions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.CopySettingsFromOtherComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USMStateMachineComponent*         OtherComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateMachineComponent::CopySettingsFromOtherComponent(class USMStateMachineComponent* OtherComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "CopySettingsFromOtherComponent");

	Params::SMStateMachineComponent_CopySettingsFromOtherComponent Parms{};

	Parms.OtherComponent = OtherComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Initialize
// (Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateMachineComponent::Initialize(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Initialize");

	Params::SMStateMachineComponent_Initialize Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Internal_OnReplicatedInstanceInitialized
// (Final, Native, Protected)
// Parameters:
// class USMInstance*                      Instance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateMachineComponent::Internal_OnReplicatedInstanceInitialized(class USMInstance* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Internal_OnReplicatedInstanceInitialized");

	Params::SMStateMachineComponent_Internal_OnReplicatedInstanceInitialized Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Internal_OnStateMachineStarted
// (Final, Native, Protected)
// Parameters:
// class USMInstance*                      Instance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateMachineComponent::Internal_OnStateMachineStarted(class USMInstance* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Internal_OnStateMachineStarted");

	Params::SMStateMachineComponent_Internal_OnStateMachineStarted Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Internal_OnStateMachineStateChanged
// (Final, Native, Protected)
// Parameters:
// class USMInstance*                      Instance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSMStateInfo&              ToState                                                (Parm, NativeAccessSpecifierPublic)
// const struct FSMStateInfo&              FromState                                              (Parm, NativeAccessSpecifierPublic)

void USMStateMachineComponent::Internal_OnStateMachineStateChanged(class USMInstance* Instance, const struct FSMStateInfo& ToState, const struct FSMStateInfo& FromState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Internal_OnStateMachineStateChanged");

	Params::SMStateMachineComponent_Internal_OnStateMachineStateChanged Parms{};

	Parms.Instance = Instance;
	Parms.ToState = std::move(ToState);
	Parms.FromState = std::move(FromState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Internal_OnStateMachineStateStarted
// (Final, Native, Protected)
// Parameters:
// class USMInstance*                      Instance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSMStateInfo&              State                                                  (Parm, NativeAccessSpecifierPublic)

void USMStateMachineComponent::Internal_OnStateMachineStateStarted(class USMInstance* Instance, const struct FSMStateInfo& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Internal_OnStateMachineStateStarted");

	Params::SMStateMachineComponent_Internal_OnStateMachineStateStarted Parms{};

	Parms.Instance = Instance;
	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Internal_OnStateMachineStopped
// (Final, Native, Protected)
// Parameters:
// class USMInstance*                      Instance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateMachineComponent::Internal_OnStateMachineStopped(class USMInstance* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Internal_OnStateMachineStopped");

	Params::SMStateMachineComponent_Internal_OnStateMachineStopped Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Internal_OnStateMachineTransitionTaken
// (Final, Native, Protected)
// Parameters:
// class USMInstance*                      Instance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSMTransitionInfo&         Transition                                             (Parm, NativeAccessSpecifierPublic)

void USMStateMachineComponent::Internal_OnStateMachineTransitionTaken(class USMInstance* Instance, const struct FSMTransitionInfo& Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Internal_OnStateMachineTransitionTaken");

	Params::SMStateMachineComponent_Internal_OnStateMachineTransitionTaken Parms{};

	Parms.Instance = Instance;
	Parms.Transition = std::move(Transition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Internal_OnStateMachineUpdated
// (Final, Native, Protected)
// Parameters:
// class USMInstance*                      Instance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateMachineComponent::Internal_OnStateMachineUpdated(class USMInstance* Instance, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Internal_OnStateMachineUpdated");

	Params::SMStateMachineComponent_Internal_OnStateMachineUpdated Parms{};

	Parms.Instance = Instance;
	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.MULTICAST_ActivateStates
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// const TArray<struct FSMActivateStateTransaction>&StateTransactions                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USMStateMachineComponent::MULTICAST_ActivateStates(const TArray<struct FSMActivateStateTransaction>& StateTransactions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "MULTICAST_ActivateStates");

	Params::SMStateMachineComponent_MULTICAST_ActivateStates Parms{};

	Parms.StateTransactions = std::move(StateTransactions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.MULTICAST_FullSync
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// const struct FSMFullSyncTransaction&    FullSyncTransaction                                    (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void USMStateMachineComponent::MULTICAST_FullSync(const struct FSMFullSyncTransaction& FullSyncTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "MULTICAST_FullSync");

	Params::SMStateMachineComponent_MULTICAST_FullSync Parms{};

	Parms.FullSyncTransaction = std::move(FullSyncTransaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.MULTICAST_Shutdown
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// const struct FSMTransaction_Base&       Transaction                                            (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USMStateMachineComponent::MULTICAST_Shutdown(const struct FSMTransaction_Base& Transaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "MULTICAST_Shutdown");

	Params::SMStateMachineComponent_MULTICAST_Shutdown Parms{};

	Parms.Transaction = std::move(Transaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.MULTICAST_Start
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// const struct FSMTransaction_Base&       Transaction                                            (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USMStateMachineComponent::MULTICAST_Start(const struct FSMTransaction_Base& Transaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "MULTICAST_Start");

	Params::SMStateMachineComponent_MULTICAST_Start Parms{};

	Parms.Transaction = std::move(Transaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.MULTICAST_Stop
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// const struct FSMTransaction_Base&       Transaction                                            (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USMStateMachineComponent::MULTICAST_Stop(const struct FSMTransaction_Base& Transaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "MULTICAST_Stop");

	Params::SMStateMachineComponent_MULTICAST_Stop Parms{};

	Parms.Transaction = std::move(Transaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.MULTICAST_TakeTransitions
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// const TArray<struct FSMTransitionTransaction>&Transactions                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USMStateMachineComponent::MULTICAST_TakeTransitions(const TArray<struct FSMTransitionTransaction>& Transactions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "MULTICAST_TakeTransitions");

	Params::SMStateMachineComponent_MULTICAST_TakeTransitions Parms{};

	Parms.Transactions = std::move(Transactions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.OnPostInitialize
// (Event, Protected, BlueprintEvent)

void USMStateMachineComponent::OnPostInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "OnPostInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SMSystem.SMStateMachineComponent.REP_OnInstanceLoaded
// (Native, Protected)

void USMStateMachineComponent::REP_OnInstanceLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "REP_OnInstanceLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Restart
// (Native, Public, BlueprintCallable)

void USMStateMachineComponent::Restart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Restart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.SERVER_ActivateStates
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// const TArray<struct FSMActivateStateTransaction>&StateTransactions                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USMStateMachineComponent::SERVER_ActivateStates(const TArray<struct FSMActivateStateTransaction>& StateTransactions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "SERVER_ActivateStates");

	Params::SMStateMachineComponent_SERVER_ActivateStates Parms{};

	Parms.StateTransactions = std::move(StateTransactions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.SERVER_FullSync
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// const struct FSMFullSyncTransaction&    FullSyncTransaction                                    (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void USMStateMachineComponent::SERVER_FullSync(const struct FSMFullSyncTransaction& FullSyncTransaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "SERVER_FullSync");

	Params::SMStateMachineComponent_SERVER_FullSync Parms{};

	Parms.FullSyncTransaction = std::move(FullSyncTransaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.SERVER_Initialize
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// const struct FSMInitializeTransaction&  Transaction                                            (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USMStateMachineComponent::SERVER_Initialize(const struct FSMInitializeTransaction& Transaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "SERVER_Initialize");

	Params::SMStateMachineComponent_SERVER_Initialize Parms{};

	Parms.Transaction = std::move(Transaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.SERVER_RequestFullSync
// (Net, NetReliable, Native, Event, Protected, NetServer)

void USMStateMachineComponent::SERVER_RequestFullSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "SERVER_RequestFullSync");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.SERVER_Shutdown
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// const struct FSMTransaction_Base&       Transaction                                            (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USMStateMachineComponent::SERVER_Shutdown(const struct FSMTransaction_Base& Transaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "SERVER_Shutdown");

	Params::SMStateMachineComponent_SERVER_Shutdown Parms{};

	Parms.Transaction = std::move(Transaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.SERVER_Start
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// const struct FSMTransaction_Base&       Transaction                                            (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USMStateMachineComponent::SERVER_Start(const struct FSMTransaction_Base& Transaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "SERVER_Start");

	Params::SMStateMachineComponent_SERVER_Start Parms{};

	Parms.Transaction = std::move(Transaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.SERVER_Stop
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// const struct FSMTransaction_Base&       Transaction                                            (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USMStateMachineComponent::SERVER_Stop(const struct FSMTransaction_Base& Transaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "SERVER_Stop");

	Params::SMStateMachineComponent_SERVER_Stop Parms{};

	Parms.Transaction = std::move(Transaction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.SERVER_TakeTransitions
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// const TArray<struct FSMTransitionTransaction>&TransitionTransactions                                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USMStateMachineComponent::SERVER_TakeTransitions(const TArray<struct FSMTransitionTransaction>& TransitionTransactions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "SERVER_TakeTransitions");

	Params::SMStateMachineComponent_SERVER_TakeTransitions Parms{};

	Parms.TransitionTransactions = std::move(TransitionTransactions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.SERVER_Update
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateMachineComponent::SERVER_Update(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "SERVER_Update");

	Params::SMStateMachineComponent_SERVER_Update Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.SetCanInstanceNetworkTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCanEverTick_0                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateMachineComponent::SetCanInstanceNetworkTick(bool bCanEverTick_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "SetCanInstanceNetworkTick");

	Params::SMStateMachineComponent_SetCanInstanceNetworkTick Parms{};

	Parms.bCanEverTick_0 = bCanEverTick_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Shutdown
// (Native, Public, BlueprintCallable)

void USMStateMachineComponent::Shutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Shutdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Start
// (Native, Public, BlueprintCallable)

void USMStateMachineComponent::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Start");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Stop
// (Native, Public, BlueprintCallable)

void USMStateMachineComponent::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.Update
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateMachineComponent::Update(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "Update");

	Params::SMStateMachineComponent_Update Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineComponent.GetContextForInitialization
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* USMStateMachineComponent::GetContextForInitialization() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "GetContextForInitialization");

	Params::SMStateMachineComponent_GetContextForInitialization Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateMachineComponent.GetInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMInstance*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMInstance* USMStateMachineComponent::GetInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "GetInstance");

	Params::SMStateMachineComponent_GetInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateMachineComponent.GetTopMostParentActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USMStateMachineComponent::GetTopMostParentActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "GetTopMostParentActor");

	Params::SMStateMachineComponent_GetTopMostParentActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateMachineComponent.IsInitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateMachineComponent::IsInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "IsInitialized");

	Params::SMStateMachineComponent_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateMachineComponent.IsStateMachineActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateMachineComponent::IsStateMachineActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineComponent", "IsStateMachineActive");

	Params::SMStateMachineComponent_IsStateMachineActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateMachineInstance.SetReuseCurrentState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateMachineInstance::SetReuseCurrentState(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineInstance", "SetReuseCurrentState");

	Params::SMStateMachineInstance_SetReuseCurrentState Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineInstance.SetReuseIfNotEndState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateMachineInstance::SetReuseIfNotEndState(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineInstance", "SetReuseIfNotEndState");

	Params::SMStateMachineInstance_SetReuseIfNotEndState Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineInstance.SetWaitForEndState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMStateMachineInstance::SetWaitForEndState(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineInstance", "SetWaitForEndState");

	Params::SMStateMachineInstance_SetWaitForEndState Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMStateMachineInstance.GetActiveStates
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USMStateInstance_Base*>*   ActiveStates                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USMStateMachineInstance::GetActiveStates(TArray<class USMStateInstance_Base*>* ActiveStates) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineInstance", "GetActiveStates");

	Params::SMStateMachineInstance_GetActiveStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ActiveStates != nullptr)
		*ActiveStates = std::move(Parms.ActiveStates);
}


// Function SMSystem.SMStateMachineInstance.GetAllStateInstances
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USMStateInstance_Base*>*   StateInstances                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USMStateMachineInstance::GetAllStateInstances(TArray<class USMStateInstance_Base*>* StateInstances) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineInstance", "GetAllStateInstances");

	Params::SMStateMachineInstance_GetAllStateInstances Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (StateInstances != nullptr)
		*StateInstances = std::move(Parms.StateInstances);
}


// Function SMSystem.SMStateMachineInstance.GetContainedStateByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    StateName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMStateMachineInstance::GetContainedStateByName(const class FString& StateName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineInstance", "GetContainedStateByName");

	Params::SMStateMachineInstance_GetContainedStateByName Parms{};

	Parms.StateName = std::move(StateName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateMachineInstance.GetEntryStates
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USMStateInstance_Base*>*   EntryStates                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USMStateMachineInstance::GetEntryStates(TArray<class USMStateInstance_Base*>* EntryStates) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineInstance", "GetEntryStates");

	Params::SMStateMachineInstance_GetEntryStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (EntryStates != nullptr)
		*EntryStates = std::move(Parms.EntryStates);
}


// Function SMSystem.SMStateMachineInstance.GetReuseCurrentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateMachineInstance::GetReuseCurrentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineInstance", "GetReuseCurrentState");

	Params::SMStateMachineInstance_GetReuseCurrentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateMachineInstance.GetReuseIfNotEndState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateMachineInstance::GetReuseIfNotEndState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineInstance", "GetReuseIfNotEndState");

	Params::SMStateMachineInstance_GetReuseIfNotEndState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateMachineInstance.GetStateMachineReference
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMInstance*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMInstance* USMStateMachineInstance::GetStateMachineReference() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineInstance", "GetStateMachineReference");

	Params::SMStateMachineInstance_GetStateMachineReference Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMStateMachineInstance.GetWaitForEndState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMStateMachineInstance::GetWaitForEndState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMStateMachineInstance", "GetWaitForEndState");

	Params::SMStateMachineInstance_GetWaitForEndState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMTransitionInstance.EvaluateFromManuallyBoundEvent
// (Final, Native, Public, BlueprintCallable)

void USMTransitionInstance::EvaluateFromManuallyBoundEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "EvaluateFromManuallyBoundEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMTransitionInstance.SetCanEvaluate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMTransitionInstance::SetCanEvaluate(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "SetCanEvaluate");

	Params::SMTransitionInstance_SetCanEvaluate Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMTransitionInstance.SetCanEvaluateFromEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMTransitionInstance::SetCanEvaluateFromEvent(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "SetCanEvaluateFromEvent");

	Params::SMTransitionInstance_SetCanEvaluateFromEvent Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMTransitionInstance.SetCanEvalWithStartState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMTransitionInstance::SetCanEvalWithStartState(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "SetCanEvalWithStartState");

	Params::SMTransitionInstance_SetCanEvalWithStartState Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMTransitionInstance.SetPriorityOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USMTransitionInstance::SetPriorityOrder(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "SetPriorityOrder");

	Params::SMTransitionInstance_SetPriorityOrder Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SMSystem.SMTransitionInstance.DoesTransitionPass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMTransitionInstance::DoesTransitionPass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "DoesTransitionPass");

	Params::SMTransitionInstance_DoesTransitionPass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMTransitionInstance.GetCanEvaluate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMTransitionInstance::GetCanEvaluate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "GetCanEvaluate");

	Params::SMTransitionInstance_GetCanEvaluate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMTransitionInstance.GetCanEvaluateFromEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMTransitionInstance::GetCanEvaluateFromEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "GetCanEvaluateFromEvent");

	Params::SMTransitionInstance_GetCanEvaluateFromEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMTransitionInstance.GetCanEvalWithStartState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMTransitionInstance::GetCanEvalWithStartState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "GetCanEvalWithStartState");

	Params::SMTransitionInstance_GetCanEvalWithStartState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMTransitionInstance.GetDestinationStateForActiveTransition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMTransitionInstance::GetDestinationStateForActiveTransition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "GetDestinationStateForActiveTransition");

	Params::SMTransitionInstance_GetDestinationStateForActiveTransition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMTransitionInstance.GetNextStateInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMTransitionInstance::GetNextStateInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "GetNextStateInstance");

	Params::SMTransitionInstance_GetNextStateInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMTransitionInstance.GetPreviousStateInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMTransitionInstance::GetPreviousStateInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "GetPreviousStateInstance");

	Params::SMTransitionInstance_GetPreviousStateInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMTransitionInstance.GetPriorityOrder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USMTransitionInstance::GetPriorityOrder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "GetPriorityOrder");

	Params::SMTransitionInstance_GetPriorityOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMTransitionInstance.GetServerTimestamp
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FDateTime                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FDateTime USMTransitionInstance::GetServerTimestamp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "GetServerTimestamp");

	Params::SMTransitionInstance_GetServerTimestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMTransitionInstance.GetSourceStateForActiveTransition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USMStateInstance_Base*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMStateInstance_Base* USMTransitionInstance::GetSourceStateForActiveTransition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "GetSourceStateForActiveTransition");

	Params::SMTransitionInstance_GetSourceStateForActiveTransition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMTransitionInstance.GetTransitionInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSMTransitionInfo*               Transition                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void USMTransitionInstance::GetTransitionInfo(struct FSMTransitionInfo* Transition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "GetTransitionInfo");

	Params::SMTransitionInstance_GetTransitionInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Transition != nullptr)
		*Transition = std::move(Parms.Transition);
}


// Function SMSystem.SMTransitionInstance.IsTransitionFromAnyState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USMTransitionInstance::IsTransitionFromAnyState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SMTransitionInstance", "IsTransitionFromAnyState");

	Params::SMTransitionInstance_IsTransitionFromAnyState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMBlueprintUtils.CreateStateMachineInstanceFromTemplate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class USMInstance>          StateMachineClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMInstance*                      Template                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitializeNow                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMInstance*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMInstance* USMBlueprintUtils::CreateStateMachineInstanceFromTemplate(TSubclassOf<class USMInstance> StateMachineClass, class UObject* Context, class USMInstance* Template, bool bInitializeNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SMBlueprintUtils", "CreateStateMachineInstanceFromTemplate");

	Params::SMBlueprintUtils_CreateStateMachineInstanceFromTemplate Parms{};

	Parms.StateMachineClass = StateMachineClass;
	Parms.Context = Context;
	Parms.Template = Template;
	Parms.bInitializeNow = bInitializeNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMBlueprintUtils.K2_CreateStateMachineInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USMInstance>          StateMachineClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitializeNow                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMInstance*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMInstance* USMBlueprintUtils::K2_CreateStateMachineInstance(TSubclassOf<class USMInstance> StateMachineClass, class UObject* Context, bool bInitializeNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SMBlueprintUtils", "K2_CreateStateMachineInstance");

	Params::SMBlueprintUtils_K2_CreateStateMachineInstance Parms{};

	Parms.StateMachineClass = StateMachineClass;
	Parms.Context = Context;
	Parms.bInitializeNow = bInitializeNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SMSystem.SMBlueprintUtils.K2_CreateStateMachineInstancePure
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class USMInstance>          StateMachineClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitializeNow                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USMInstance*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USMInstance* USMBlueprintUtils::K2_CreateStateMachineInstancePure(TSubclassOf<class USMInstance> StateMachineClass, class UObject* Context, bool bInitializeNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SMBlueprintUtils", "K2_CreateStateMachineInstancePure");

	Params::SMBlueprintUtils_K2_CreateStateMachineInstancePure Parms{};

	Parms.StateMachineClass = StateMachineClass;
	Parms.Context = Context;
	Parms.bInitializeNow = bInitializeNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

