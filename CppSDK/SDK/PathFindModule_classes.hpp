#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PathFindModule

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "NavigationSystem_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class PathFindModule.KuroNavigationSetting
// 0x0030 (0x0060 - 0x0030)
class UKuroNavigationSetting final : public UObject
{
public:
	int32                                         MaxPathPoints;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPathPolygen;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothStepSize;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseXZRadius;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseHeight;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOfflineHeight;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultWorldHeight;                                // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWalkableError;                                  // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FinderHalfExtent;                                  // 0x0050(0x000C)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroNavigationSetting">();
	}
	static class UKuroNavigationSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroNavigationSetting>();
	}
};
static_assert(alignof(UKuroNavigationSetting) == 0x000008, "Wrong alignment on UKuroNavigationSetting");
static_assert(sizeof(UKuroNavigationSetting) == 0x000060, "Wrong size on UKuroNavigationSetting");
static_assert(offsetof(UKuroNavigationSetting, MaxPathPoints) == 0x000030, "Member 'UKuroNavigationSetting::MaxPathPoints' has a wrong offset!");
static_assert(offsetof(UKuroNavigationSetting, MaxPathPolygen) == 0x000034, "Member 'UKuroNavigationSetting::MaxPathPolygen' has a wrong offset!");
static_assert(offsetof(UKuroNavigationSetting, SmoothStepSize) == 0x000038, "Member 'UKuroNavigationSetting::SmoothStepSize' has a wrong offset!");
static_assert(offsetof(UKuroNavigationSetting, CloseXZRadius) == 0x00003C, "Member 'UKuroNavigationSetting::CloseXZRadius' has a wrong offset!");
static_assert(offsetof(UKuroNavigationSetting, CloseHeight) == 0x000040, "Member 'UKuroNavigationSetting::CloseHeight' has a wrong offset!");
static_assert(offsetof(UKuroNavigationSetting, MaxOfflineHeight) == 0x000044, "Member 'UKuroNavigationSetting::MaxOfflineHeight' has a wrong offset!");
static_assert(offsetof(UKuroNavigationSetting, DefaultWorldHeight) == 0x000048, "Member 'UKuroNavigationSetting::DefaultWorldHeight' has a wrong offset!");
static_assert(offsetof(UKuroNavigationSetting, MaxWalkableError) == 0x00004C, "Member 'UKuroNavigationSetting::MaxWalkableError' has a wrong offset!");
static_assert(offsetof(UKuroNavigationSetting, FinderHalfExtent) == 0x000050, "Member 'UKuroNavigationSetting::FinderHalfExtent' has a wrong offset!");

// Class PathFindModule.NavigationPartitionSystem
// 0x0030 (0x0060 - 0x0030)
class UNavigationPartitionSystem final : public UNavigationPartitionSystemBase
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 OwnerWorld;                                        // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationPartitionSystem">();
	}
	static class UNavigationPartitionSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationPartitionSystem>();
	}
};
static_assert(alignof(UNavigationPartitionSystem) == 0x000008, "Wrong alignment on UNavigationPartitionSystem");
static_assert(sizeof(UNavigationPartitionSystem) == 0x000060, "Wrong size on UNavigationPartitionSystem");
static_assert(offsetof(UNavigationPartitionSystem, OwnerWorld) == 0x000050, "Member 'UNavigationPartitionSystem::OwnerWorld' has a wrong offset!");

// Class PathFindModule.NavigationPartitionPath
// 0x0038 (0x0068 - 0x0030)
class UNavigationPartitionPath final : public UNavigationPartitionPathBase
{
public:
	uint8                                         Pad_30[0x38];                                      // 0x0030(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationPartitionPath">();
	}
	static class UNavigationPartitionPath* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationPartitionPath>();
	}
};
static_assert(alignof(UNavigationPartitionPath) == 0x000008, "Wrong alignment on UNavigationPartitionPath");
static_assert(sizeof(UNavigationPartitionPath) == 0x000068, "Wrong size on UNavigationPartitionPath");

}

