#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroCheatManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KuroCheatManager.BP_KuroCheatManager_C
// 0x00A0 (0x0120 - 0x0080)
class UBP_KuroCheatManager_C final : public UCheatManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0080(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_CharacterController_C*              CharacterController;                               // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   输入按键;                                          // 0x0090(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          按下;                                              // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LeftAlt;                                           // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LeftCtrl;                                          // 0x00B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3[0x1];                                       // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         全局TimeDilation倍数;                              // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastDebugPressTime;                                // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugSpeed;                                        // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          GhostMode;                                         // 0x00BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class ATsBaseCharacter_C*>               被销毁怪物缓存;                                    // 0x00C0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         TouchDebugSize;                                    // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          角色是否已强化;                                    // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RightCtrl;                                         // 0x0115(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DebugWin;                                          // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void 强化或还原角色(bool 是否需要强化);
	void TouchDebug();
	void PrintTimeScale();
	void UpdateFunctionKey();
	void 作弊指令(const struct FKey& 输入按键_0, bool 按下_0);
	void ReceiveInitCheatManager();
	void ExecuteUbergraph_BP_KuroCheatManager(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KuroCheatManager_C">();
	}
	static class UBP_KuroCheatManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_KuroCheatManager_C>();
	}
};
static_assert(alignof(UBP_KuroCheatManager_C) == 0x000008, "Wrong alignment on UBP_KuroCheatManager_C");
static_assert(sizeof(UBP_KuroCheatManager_C) == 0x000120, "Wrong size on UBP_KuroCheatManager_C");
static_assert(offsetof(UBP_KuroCheatManager_C, UberGraphFrame) == 0x000080, "Member 'UBP_KuroCheatManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, CharacterController) == 0x000088, "Member 'UBP_KuroCheatManager_C::CharacterController' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, 输入按键) == 0x000090, "Member 'UBP_KuroCheatManager_C::输入按键' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, 按下) == 0x0000B0, "Member 'UBP_KuroCheatManager_C::按下' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, LeftAlt) == 0x0000B1, "Member 'UBP_KuroCheatManager_C::LeftAlt' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, LeftCtrl) == 0x0000B2, "Member 'UBP_KuroCheatManager_C::LeftCtrl' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, 全局TimeDilation倍数) == 0x0000B4, "Member 'UBP_KuroCheatManager_C::全局TimeDilation倍数' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, LastDebugPressTime) == 0x0000B8, "Member 'UBP_KuroCheatManager_C::LastDebugPressTime' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, DebugSpeed) == 0x0000BC, "Member 'UBP_KuroCheatManager_C::DebugSpeed' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, GhostMode) == 0x0000BD, "Member 'UBP_KuroCheatManager_C::GhostMode' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, 被销毁怪物缓存) == 0x0000C0, "Member 'UBP_KuroCheatManager_C::被销毁怪物缓存' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, TouchDebugSize) == 0x000110, "Member 'UBP_KuroCheatManager_C::TouchDebugSize' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, 角色是否已强化) == 0x000114, "Member 'UBP_KuroCheatManager_C::角色是否已强化' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, RightCtrl) == 0x000115, "Member 'UBP_KuroCheatManager_C::RightCtrl' has a wrong offset!");
static_assert(offsetof(UBP_KuroCheatManager_C, DebugWin) == 0x000118, "Member 'UBP_KuroCheatManager_C::DebugWin' has a wrong offset!");

}

