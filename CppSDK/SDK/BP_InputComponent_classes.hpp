#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InputComponent

#include "Basic.hpp"

#include "EInputAction_structs.hpp"
#include "ECharViewDirectionState_structs.hpp"
#include "SInputCaches_structs.hpp"
#include "SInputHoldConfig_structs.hpp"
#include "ERoleInteractType_structs.hpp"
#include "BP_InputBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InputComponent.BP_InputComponent_C
// 0x00A8 (0x0220 - 0x0178)
class UBP_InputComponent_C : public UBP_InputBase_C
{
public:
	TMap<EInputAction, struct FSInputCaches>      输入缓存;                                          // 0x0178(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EInputAction, struct FSInputHoldConfig>  长按配置;                                          // 0x01C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          通用_攻击按下;                                     // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          锁定退出;                                          // 0x0219(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          通用_技能1按下;                                    // 0x021A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          锁定切换;                                          // 0x021B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          通用_瞄准按下;                                     // 0x021C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          是否进入闪避通用;                                  // 0x021D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          通用_攻击长按;                                     // 0x021E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	struct FSInputCommand 跳跃按下(float time);
	struct FSInputCommand 跳跃抬起(float time);
	struct FSInputCommand 攀爬按下(float time);
	struct FSInputCommand 走跑切换按下(float time);
	struct FSInputCommand 锁定目标长按(float time);
	void 跳跃按下事件(float time);
	struct FSInputCommand 攀爬抬起(float time);
	struct FSInputCommand 闪避按下(float time);
	struct FSInputCommand 闪避抬起(float time);
	struct FSInputCommand 幻象1按下(float time);
	struct FSInputCommand 幻象1抬起(float time);
	struct FSInputCommand 幻象1长按(float time);
	struct FSInputCommand 幻象2按下(float time);
	struct FSInputCaches GetUnrealCacheConfig(int32 action);
	struct FSInputHoldConfig GetUnrealHoldConfig(int32 action);
	void 锁定目标抬起事件(float time);
	struct FSInputCommand 攻击按下(float time);
	struct FSInputCommand 攻击长按(float time);
	struct FSInputCommand 通用交互按下(float time);
	void 锁定目标按下事件(float time);
	struct FSInputCommand 技能1按下(float time);
	struct FSInputCommand 幻象2抬起(float time);
	struct FSInputCommand 瞄准按下(float time);
	struct FSInputCommand 幻象2长按(float time);
	void 瞄准按下事件(float time);
	void 特殊探索技能(bool* Result, struct FSInputCommand* 指令);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InputComponent_C">();
	}
	static class UBP_InputComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_InputComponent_C>();
	}
};
static_assert(alignof(UBP_InputComponent_C) == 0x000008, "Wrong alignment on UBP_InputComponent_C");
static_assert(sizeof(UBP_InputComponent_C) == 0x000220, "Wrong size on UBP_InputComponent_C");
static_assert(offsetof(UBP_InputComponent_C, 输入缓存) == 0x000178, "Member 'UBP_InputComponent_C::输入缓存' has a wrong offset!");
static_assert(offsetof(UBP_InputComponent_C, 长按配置) == 0x0001C8, "Member 'UBP_InputComponent_C::长按配置' has a wrong offset!");
static_assert(offsetof(UBP_InputComponent_C, 通用_攻击按下) == 0x000218, "Member 'UBP_InputComponent_C::通用_攻击按下' has a wrong offset!");
static_assert(offsetof(UBP_InputComponent_C, 锁定退出) == 0x000219, "Member 'UBP_InputComponent_C::锁定退出' has a wrong offset!");
static_assert(offsetof(UBP_InputComponent_C, 通用_技能1按下) == 0x00021A, "Member 'UBP_InputComponent_C::通用_技能1按下' has a wrong offset!");
static_assert(offsetof(UBP_InputComponent_C, 锁定切换) == 0x00021B, "Member 'UBP_InputComponent_C::锁定切换' has a wrong offset!");
static_assert(offsetof(UBP_InputComponent_C, 通用_瞄准按下) == 0x00021C, "Member 'UBP_InputComponent_C::通用_瞄准按下' has a wrong offset!");
static_assert(offsetof(UBP_InputComponent_C, 是否进入闪避通用) == 0x00021D, "Member 'UBP_InputComponent_C::是否进入闪避通用' has a wrong offset!");
static_assert(offsetof(UBP_InputComponent_C, 通用_攻击长按) == 0x00021E, "Member 'UBP_InputComponent_C::通用_攻击长按' has a wrong offset!");

}

