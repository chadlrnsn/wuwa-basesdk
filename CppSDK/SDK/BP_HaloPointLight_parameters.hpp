#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HaloPointLight

#include "Basic.hpp"

#include "E_BillboardMode_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"


namespace SDK::Params
{

// Function BP_HaloPointLight.BP_HaloPointLight_C.GetHaloDrawParameters
// 0x009C (0x009C - 0x0000)
struct BP_HaloPointLight_C_GetHaloDrawParameters final
{
public:
	float                                         MinDrawDistance_0;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDrawDistance_0;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDrawRange_0;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDrawRange_0;                                    // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector4_X;                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Y;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Z;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_W;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector4_X_1;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Y_1;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Z_1;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_W_1;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_X_2;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Y_2;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Z_2;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_W_2;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_X_3;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Y_3;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Z_3;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_W_3;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_X_4;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Y_4;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Z_4;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_W_4;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_X_5;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Y_5;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Z_5;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_W_5;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_X_6;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Y_6;                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Z_6;                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_W_6;                         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_X_7;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Y_7;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_Z_7;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector4_W_7;                         // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELightDistanceCullType                        CallFunc_GetLightDistanceCullType_ReturnValue;     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_4;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HaloPointLight_C_GetHaloDrawParameters) == 0x000004, "Wrong alignment on BP_HaloPointLight_C_GetHaloDrawParameters");
static_assert(sizeof(BP_HaloPointLight_C_GetHaloDrawParameters) == 0x00009C, "Wrong size on BP_HaloPointLight_C_GetHaloDrawParameters");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, MinDrawDistance_0) == 0x000000, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::MinDrawDistance_0' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, MaxDrawDistance_0) == 0x000004, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::MaxDrawDistance_0' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, MinDrawRange_0) == 0x000008, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::MinDrawRange_0' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, MaxDrawRange_0) == 0x00000C, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::MaxDrawRange_0' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_X) == 0x000014, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_X' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Y) == 0x000018, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Y' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Z) == 0x00001C, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Z' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_W) == 0x000020, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_W' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, K2Node_SwitchEnum_CmpSuccess_1) == 0x000024, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, K2Node_SwitchEnum_CmpSuccess_2) == 0x000025, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, K2Node_SwitchEnum_CmpSuccess_3) == 0x000026, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_X_1) == 0x000028, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_X_1' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Y_1) == 0x00002C, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Y_1' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Z_1) == 0x000030, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Z_1' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_W_1) == 0x000034, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_W_1' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_X_2) == 0x000038, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_X_2' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Y_2) == 0x00003C, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Y_2' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Z_2) == 0x000040, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Z_2' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_W_2) == 0x000044, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_W_2' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_X_3) == 0x000048, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_X_3' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Y_3) == 0x00004C, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Y_3' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Z_3) == 0x000050, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Z_3' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_W_3) == 0x000054, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_W_3' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_X_4) == 0x000058, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_X_4' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Y_4) == 0x00005C, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Y_4' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Z_4) == 0x000060, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Z_4' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_W_4) == 0x000064, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_W_4' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_X_5) == 0x000068, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_X_5' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Y_5) == 0x00006C, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Y_5' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Z_5) == 0x000070, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Z_5' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_W_5) == 0x000074, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_W_5' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_X_6) == 0x000078, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_X_6' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Y_6) == 0x00007C, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Y_6' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Z_6) == 0x000080, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Z_6' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_W_6) == 0x000084, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_W_6' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_X_7) == 0x000088, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_X_7' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Y_7) == 0x00008C, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Y_7' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_Z_7) == 0x000090, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_Z_7' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_BreakVector4_W_7) == 0x000094, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_BreakVector4_W_7' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, CallFunc_GetLightDistanceCullType_ReturnValue) == 0x000098, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::CallFunc_GetLightDistanceCullType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_GetHaloDrawParameters, K2Node_SwitchEnum_CmpSuccess_4) == 0x000099, "Member 'BP_HaloPointLight_C_GetHaloDrawParameters::K2Node_SwitchEnum_CmpSuccess_4' has a wrong offset!");

// Function BP_HaloPointLight.BP_HaloPointLight_C.UpdateHaloParameter
// 0x00A8 (0x00A8 - 0x0000)
struct BP_HaloPointLight_C_UpdateHaloParameter final
{
public:
	bool                                          UpdateComponent;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ___float_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ___float_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHaloDrawParameters_MinDrawDistance;    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHaloDrawParameters_MaxDrawDistance;    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHaloDrawParameters_MinDrawRange;       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHaloDrawParameters_MaxDrawRange;       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___float_Variable_2;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BillboardMode                               ___byte_Variable;                                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_2;                   // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetLightColor_ReturnValue;                // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_3;                   // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HaloPointLight_C_UpdateHaloParameter) == 0x000004, "Wrong alignment on BP_HaloPointLight_C_UpdateHaloParameter");
static_assert(sizeof(BP_HaloPointLight_C_UpdateHaloParameter) == 0x0000A8, "Wrong size on BP_HaloPointLight_C_UpdateHaloParameter");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, UpdateComponent) == 0x000000, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::UpdateComponent' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, ___float_Variable) == 0x000004, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::___float_Variable' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, ___float_Variable_1) == 0x00000C, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::___float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_GetHaloDrawParameters_MinDrawDistance) == 0x000010, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_GetHaloDrawParameters_MinDrawDistance' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_GetHaloDrawParameters_MaxDrawDistance) == 0x000014, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_GetHaloDrawParameters_MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_GetHaloDrawParameters_MinDrawRange) == 0x000018, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_GetHaloDrawParameters_MinDrawRange' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_GetHaloDrawParameters_MaxDrawRange) == 0x00001C, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_GetHaloDrawParameters_MaxDrawRange' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, K2Node_MakeStruct_LinearColor) == 0x000020, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, ___float_Variable_2) == 0x000030, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::___float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, ___byte_Variable) == 0x000038, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::___byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, K2Node_MakeStruct_LinearColor_1) == 0x000040, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, K2Node_Select_Default) == 0x000050, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000054, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000058, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x00005C, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000060, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, K2Node_MakeStruct_LinearColor_2) == 0x000064, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::K2Node_MakeStruct_LinearColor_2' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000074, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_GetLightColor_ReturnValue) == 0x000078, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_GetLightColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, K2Node_MakeStruct_LinearColor_3) == 0x000088, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::K2Node_MakeStruct_LinearColor_3' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UpdateHaloParameter, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x000098, "Member 'BP_HaloPointLight_C_UpdateHaloParameter::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");

// Function BP_HaloPointLight.BP_HaloPointLight_C.UserConstructionScript
// 0x0060 (0x0060 - 0x0000)
struct BP_HaloPointLight_C_UserConstructionScript final
{
public:
	struct FTransform                             ___struct_Variable;                                // 0x0000(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UKuroHaloComponent*                     CallFunc_AddComponent_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroFeatureLevel                             CallFunc_GetWorldFeatureLevel_ReturnValue;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HaloPointLight_C_UserConstructionScript) == 0x000010, "Wrong alignment on BP_HaloPointLight_C_UserConstructionScript");
static_assert(sizeof(BP_HaloPointLight_C_UserConstructionScript) == 0x000060, "Wrong size on BP_HaloPointLight_C_UserConstructionScript");
static_assert(offsetof(BP_HaloPointLight_C_UserConstructionScript, ___struct_Variable) == 0x000000, "Member 'BP_HaloPointLight_C_UserConstructionScript::___struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UserConstructionScript, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_HaloPointLight_C_UserConstructionScript::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UserConstructionScript, CallFunc_AddComponent_ReturnValue) == 0x000038, "Member 'BP_HaloPointLight_C_UserConstructionScript::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000040, "Member 'BP_HaloPointLight_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UserConstructionScript, CallFunc_GetWorldFeatureLevel_ReturnValue) == 0x000048, "Member 'BP_HaloPointLight_C_UserConstructionScript::CallFunc_GetWorldFeatureLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_HaloPointLight_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000050, "Member 'BP_HaloPointLight_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_HaloPointLight_C_UserConstructionScript, CallFunc_SetStaticMesh_ReturnValue) == 0x000058, "Member 'BP_HaloPointLight_C_UserConstructionScript::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function BP_HaloPointLight.BP_HaloPointLight_C.ExecuteUbergraph_BP_HaloPointLight
// 0x0004 (0x0004 - 0x0000)
struct BP_HaloPointLight_C_ExecuteUbergraph_BP_HaloPointLight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HaloPointLight_C_ExecuteUbergraph_BP_HaloPointLight) == 0x000004, "Wrong alignment on BP_HaloPointLight_C_ExecuteUbergraph_BP_HaloPointLight");
static_assert(sizeof(BP_HaloPointLight_C_ExecuteUbergraph_BP_HaloPointLight) == 0x000004, "Wrong size on BP_HaloPointLight_C_ExecuteUbergraph_BP_HaloPointLight");
static_assert(offsetof(BP_HaloPointLight_C_ExecuteUbergraph_BP_HaloPointLight, EntryPoint) == 0x000000, "Member 'BP_HaloPointLight_C_ExecuteUbergraph_BP_HaloPointLight::EntryPoint' has a wrong offset!");

}

