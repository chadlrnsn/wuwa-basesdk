#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_ME1BingPaoTaiMd00201

#include "Basic.hpp"

#include "KuroAnim_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_ME1BingPaoTaiMd00201.ABP_ME1BingPaoTaiMd00201_C.ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201
// 0x0068 (0x0068 - 0x0000)
struct ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBP_EWorldType                                CallFunc_GetWorldType_ReturnValue;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitBones                              K2Node_MakeStruct_HitBones;                        // 0x0040(0x0010)()
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201) == 0x000008, "Wrong alignment on ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201");
static_assert(sizeof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201) == 0x000068, "Wrong size on ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, EntryPoint) == 0x000000, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000005, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_GetWorldType_ReturnValue) == 0x000006, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_GetWorldType_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000007, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000008, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000009, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x00000C, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000011, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000012, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000013, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanAND_ReturnValue_1) == 0x000014, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000015, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_GetRelevantAnimTime_ReturnValue) == 0x000018, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_GetRelevantAnimTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x00001C, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00001D, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanAND_ReturnValue_2) == 0x00001E, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00001F, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanOR_ReturnValue_1) == 0x000020, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanAND_ReturnValue_3) == 0x000021, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000022, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_GetRelevantAnimTime_ReturnValue_1) == 0x000024, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_GetRelevantAnimTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000028, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000029, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanOR_ReturnValue_2) == 0x00002A, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanAND_ReturnValue_4) == 0x00002B, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanAND_ReturnValue_5) == 0x00002C, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanAND_ReturnValue_6) == 0x00002D, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x00002E, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1) == 0x000030, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000034, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x000035, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x000036, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x000037, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanOR_ReturnValue_3) == 0x000038, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, K2Node_MakeStruct_HitBones) == 0x000040, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::K2Node_MakeStruct_HitBones' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanOR_ReturnValue_4) == 0x000050, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_SelectFloat_ReturnValue) == 0x000054, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanOR_ReturnValue_5) == 0x000058, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, K2Node_Event_DeltaTimeX) == 0x00005C, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x000060, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x000061, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201, CallFunc_BooleanAND_ReturnValue_7) == 0x000062, "Member 'ABP_ME1BingPaoTaiMd00201_C_ExecuteUbergraph_ABP_ME1BingPaoTaiMd00201::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");

// Function ABP_ME1BingPaoTaiMd00201.ABP_ME1BingPaoTaiMd00201_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_ME1BingPaoTaiMd00201_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_ME1BingPaoTaiMd00201_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_ME1BingPaoTaiMd00201_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_ME1BingPaoTaiMd00201_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_ME1BingPaoTaiMd00201_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_ME1BingPaoTaiMd00201_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_ME1BingPaoTaiMd00201.ABP_ME1BingPaoTaiMd00201_C.移动参数更新
// 0x0110 (0x0110 - 0x0000)
struct ABP_ME1BingPaoTaiMd00201_C_移动参数更新 final
{
public:
	float                                         仇恨角度;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_D_GetActorForwardVector_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue;        // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue_1;      // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Add_VectorVector_ReturnValue;           // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc____________;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc___________2D_____;                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue_2;      // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetSkillTarget_ReturnValue;               // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue_3;      // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Subtract_VectorVector_ReturnValue;      // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_VectorDoubleToVector_ReturnValue;    // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新) == 0x000008, "Wrong alignment on ABP_ME1BingPaoTaiMd00201_C_移动参数更新");
static_assert(sizeof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新) == 0x000110, "Wrong size on ABP_ME1BingPaoTaiMd00201_C_移动参数更新");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, 仇恨角度) == 0x000000, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::仇恨角度' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, K2Node_SwitchInteger_CmpSuccess) == 0x000005, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000006, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_D_GetActorForwardVector_ReturnValue) == 0x000008, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_D_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_D_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_D_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_D_K2_GetActorLocation_ReturnValue_1) == 0x000038, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_D_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_D_Add_VectorVector_ReturnValue) == 0x000050, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_D_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc____________) == 0x000068, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc____________' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000069, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc___________2D_____) == 0x00006C, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc___________2D_____' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, K2Node_SwitchEnum_CmpSuccess_1) == 0x000071, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000072, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_D_K2_GetActorLocation_ReturnValue_2) == 0x000078, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_D_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_GetSkillTarget_ReturnValue) == 0x000090, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_GetSkillTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000098, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_IsValid_ReturnValue_1) == 0x0000A4, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_NegateRotator_ReturnValue) == 0x0000A8, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_D_K2_GetActorLocation_ReturnValue_3) == 0x0000B8, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_D_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_D_Subtract_VectorVector_ReturnValue) == 0x0000D0, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_D_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_Conv_VectorDoubleToVector_ReturnValue) == 0x0000E8, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_Conv_VectorDoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000F4, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_移动参数更新, CallFunc_Normal_ReturnValue) == 0x000100, "Member 'ABP_ME1BingPaoTaiMd00201_C_移动参数更新::CallFunc_Normal_ReturnValue' has a wrong offset!");

// Function ABP_ME1BingPaoTaiMd00201.ABP_ME1BingPaoTaiMd00201_C.IKAndFk_Clone
// 0x0020 (0x0020 - 0x0000)
struct ABP_ME1BingPaoTaiMd00201_C_IKAndFk_Clone final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              IKAndFk_Clone_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_ME1BingPaoTaiMd00201_C_IKAndFk_Clone) == 0x000008, "Wrong alignment on ABP_ME1BingPaoTaiMd00201_C_IKAndFk_Clone");
static_assert(sizeof(ABP_ME1BingPaoTaiMd00201_C_IKAndFk_Clone) == 0x000020, "Wrong size on ABP_ME1BingPaoTaiMd00201_C_IKAndFk_Clone");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_IKAndFk_Clone, InPose) == 0x000000, "Member 'ABP_ME1BingPaoTaiMd00201_C_IKAndFk_Clone::InPose' has a wrong offset!");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_IKAndFk_Clone, IKAndFk_Clone_0) == 0x000010, "Member 'ABP_ME1BingPaoTaiMd00201_C_IKAndFk_Clone::IKAndFk_Clone_0' has a wrong offset!");

// Function ABP_ME1BingPaoTaiMd00201.ABP_ME1BingPaoTaiMd00201_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_ME1BingPaoTaiMd00201_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph_0;                                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_ME1BingPaoTaiMd00201_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_ME1BingPaoTaiMd00201_C_AnimGraph");
static_assert(sizeof(ABP_ME1BingPaoTaiMd00201_C_AnimGraph) == 0x000010, "Wrong size on ABP_ME1BingPaoTaiMd00201_C_AnimGraph");
static_assert(offsetof(ABP_ME1BingPaoTaiMd00201_C_AnimGraph, Param_AnimGraph_0) == 0x000000, "Member 'ABP_ME1BingPaoTaiMd00201_C_AnimGraph::Param_AnimGraph_0' has a wrong offset!");

}

