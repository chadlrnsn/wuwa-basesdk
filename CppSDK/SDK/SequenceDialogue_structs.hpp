#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SequenceDialogue

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SequenceDialogue.ELanguageAudio
// NumValues: 0x0007
enum class ELanguageAudio : uint8
{
	All                                      = 0,
	zh                                       = 1,
	en                                       = 2,
	ja                                       = 3,
	ko                                       = 4,
	Count                                    = 5,
	ELanguageAudio_MAX                       = 6,
};

// Enum SequenceDialogue.EDialogueStateEnum
// NumValues: 0x0002
enum class EDialogueStateEnum : uint8
{
	SkipTarget                               = 0,
	EDialogueStateEnum_MAX                   = 1,
};

// Enum SequenceDialogue.ETranslateCountry
// NumValues: 0x000F
enum class ETranslateCountry : uint8
{
	None                                     = 0,
	Zh                                       = 1,
	En                                       = 2,
	Ja                                       = 3,
	Ko                                       = 4,
	Ru                                       = 5,
	ZhH                                      = 6,
	De                                       = 7,
	Es                                       = 8,
	Pt                                       = 9,
	Id                                       = 10,
	Fr                                       = 11,
	Vi                                       = 12,
	Th                                       = 13,
	ETranslateCountry_MAX                    = 14,
};

// ScriptStruct SequenceDialogue.MovieSceneAutoTransformSectionTemplate
// 0x0000 (0x0020 - 0x0020)
struct FMovieSceneAutoTransformSectionTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FMovieSceneAutoTransformSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneAutoTransformSectionTemplate");
static_assert(sizeof(FMovieSceneAutoTransformSectionTemplate) == 0x000020, "Wrong size on FMovieSceneAutoTransformSectionTemplate");

// ScriptStruct SequenceDialogue.MovieSceneDialogueAudioSharedTrack
// 0x0000 (0x0020 - 0x0020)
struct FMovieSceneDialogueAudioSharedTrack final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FMovieSceneDialogueAudioSharedTrack) == 0x000008, "Wrong alignment on FMovieSceneDialogueAudioSharedTrack");
static_assert(sizeof(FMovieSceneDialogueAudioSharedTrack) == 0x000020, "Wrong size on FMovieSceneDialogueAudioSharedTrack");

// ScriptStruct SequenceDialogue.MovieSceneDialogueAudioSectionTemplate
// 0x0018 (0x0038 - 0x0020)
struct FMovieSceneDialogueAudioSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	class FString                                 AudioKey;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AudioTransitionDuration;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneDialogueAudioSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneDialogueAudioSectionTemplate");
static_assert(sizeof(FMovieSceneDialogueAudioSectionTemplate) == 0x000038, "Wrong size on FMovieSceneDialogueAudioSectionTemplate");
static_assert(offsetof(FMovieSceneDialogueAudioSectionTemplate, AudioKey) == 0x000020, "Member 'FMovieSceneDialogueAudioSectionTemplate::AudioKey' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogueAudioSectionTemplate, AudioTransitionDuration) == 0x000030, "Member 'FMovieSceneDialogueAudioSectionTemplate::AudioTransitionDuration' has a wrong offset!");

// ScriptStruct SequenceDialogue.DialogueStateStruct
// 0x0001 (0x0001 - 0x0000)
struct FDialogueStateStruct final
{
public:
	EDialogueStateEnum                            State;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueStateStruct) == 0x000001, "Wrong alignment on FDialogueStateStruct");
static_assert(sizeof(FDialogueStateStruct) == 0x000001, "Wrong size on FDialogueStateStruct");
static_assert(offsetof(FDialogueStateStruct, State) == 0x000000, "Member 'FDialogueStateStruct::State' has a wrong offset!");

// ScriptStruct SequenceDialogue.MovieSceneDialogueStateTemplate
// 0x0000 (0x0020 - 0x0020)
struct FMovieSceneDialogueStateTemplate final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FMovieSceneDialogueStateTemplate) == 0x000008, "Wrong alignment on FMovieSceneDialogueStateTemplate");
static_assert(sizeof(FMovieSceneDialogueStateTemplate) == 0x000020, "Wrong size on FMovieSceneDialogueStateTemplate");

// ScriptStruct SequenceDialogue.Translate
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0x08) FTranslate final
{
public:
	uint8                                         Pad_0[0xD0];                                       // 0x0000(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTranslate) == 0x000008, "Wrong alignment on FTranslate");
static_assert(sizeof(FTranslate) == 0x0000D0, "Wrong size on FTranslate");

// ScriptStruct SequenceDialogue.MovieSceneDialogueSharedTrack
// 0x0000 (0x0020 - 0x0020)
struct FMovieSceneDialogueSharedTrack final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FMovieSceneDialogueSharedTrack) == 0x000008, "Wrong alignment on FMovieSceneDialogueSharedTrack");
static_assert(sizeof(FMovieSceneDialogueSharedTrack) == 0x000020, "Wrong size on FMovieSceneDialogueSharedTrack");

// ScriptStruct SequenceDialogue.MovieSceneDialogueSectionTemplate
// 0x0090 (0x00B0 - 0x0020)
struct FMovieSceneDialogueSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	class FText                                   DialogueInfo;                                      // 0x0020(0x0018)(NativeAccessSpecifierPrivate)
	class FText                                   SpeakerName;                                       // 0x0038(0x0018)(NativeAccessSpecifierPrivate)
	class FText                                   DialogueID;                                        // 0x0050(0x0018)(NativeAccessSpecifierPrivate)
	int32                                         GuardTime;                                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AudioDelay;                                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AudioTransitionDuration;                           // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           Options;                                           // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FText                                   DialogueKey;                                       // 0x0088(0x0018)(NativeAccessSpecifierPrivate)
	int32                                         SpeakerID;                                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ELanguageAudio                                LanguageType;                                      // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QteId;                                             // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneDialogueSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneDialogueSectionTemplate");
static_assert(sizeof(FMovieSceneDialogueSectionTemplate) == 0x0000B0, "Wrong size on FMovieSceneDialogueSectionTemplate");
static_assert(offsetof(FMovieSceneDialogueSectionTemplate, DialogueInfo) == 0x000020, "Member 'FMovieSceneDialogueSectionTemplate::DialogueInfo' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogueSectionTemplate, SpeakerName) == 0x000038, "Member 'FMovieSceneDialogueSectionTemplate::SpeakerName' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogueSectionTemplate, DialogueID) == 0x000050, "Member 'FMovieSceneDialogueSectionTemplate::DialogueID' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogueSectionTemplate, GuardTime) == 0x000068, "Member 'FMovieSceneDialogueSectionTemplate::GuardTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogueSectionTemplate, AudioDelay) == 0x00006C, "Member 'FMovieSceneDialogueSectionTemplate::AudioDelay' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogueSectionTemplate, AudioTransitionDuration) == 0x000070, "Member 'FMovieSceneDialogueSectionTemplate::AudioTransitionDuration' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogueSectionTemplate, Options) == 0x000078, "Member 'FMovieSceneDialogueSectionTemplate::Options' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogueSectionTemplate, DialogueKey) == 0x000088, "Member 'FMovieSceneDialogueSectionTemplate::DialogueKey' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogueSectionTemplate, SpeakerID) == 0x0000A0, "Member 'FMovieSceneDialogueSectionTemplate::SpeakerID' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogueSectionTemplate, LanguageType) == 0x0000A4, "Member 'FMovieSceneDialogueSectionTemplate::LanguageType' has a wrong offset!");
static_assert(offsetof(FMovieSceneDialogueSectionTemplate, QteId) == 0x0000A8, "Member 'FMovieSceneDialogueSectionTemplate::QteId' has a wrong offset!");

// ScriptStruct SequenceDialogue.VectorNameAndCurve
// 0x0208 (0x0208 - 0x0000)
struct FVectorNameAndCurve final
{
public:
	class FName                                   Group;                                             // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayName;                                       // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                XCurve;                                            // 0x0028(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                YCurve;                                            // 0x00C8(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                ZCurve;                                            // 0x0168(0x00A0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVectorNameAndCurve) == 0x000008, "Wrong alignment on FVectorNameAndCurve");
static_assert(sizeof(FVectorNameAndCurve) == 0x000208, "Wrong size on FVectorNameAndCurve");
static_assert(offsetof(FVectorNameAndCurve, Group) == 0x000000, "Member 'FVectorNameAndCurve::Group' has a wrong offset!");
static_assert(offsetof(FVectorNameAndCurve, DisplayName) == 0x00000C, "Member 'FVectorNameAndCurve::DisplayName' has a wrong offset!");
static_assert(offsetof(FVectorNameAndCurve, ParameterName) == 0x000018, "Member 'FVectorNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FVectorNameAndCurve, XCurve) == 0x000028, "Member 'FVectorNameAndCurve::XCurve' has a wrong offset!");
static_assert(offsetof(FVectorNameAndCurve, YCurve) == 0x0000C8, "Member 'FVectorNameAndCurve::YCurve' has a wrong offset!");
static_assert(offsetof(FVectorNameAndCurve, ZCurve) == 0x000168, "Member 'FVectorNameAndCurve::ZCurve' has a wrong offset!");

// ScriptStruct SequenceDialogue.FloatNameAndCurve
// 0x00C8 (0x00C8 - 0x0000)
struct FFloatNameAndCurve final
{
public:
	class FName                                   Group;                                             // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayName;                                       // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                ParameterCurve;                                    // 0x0028(0x00A0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatNameAndCurve) == 0x000008, "Wrong alignment on FFloatNameAndCurve");
static_assert(sizeof(FFloatNameAndCurve) == 0x0000C8, "Wrong size on FFloatNameAndCurve");
static_assert(offsetof(FFloatNameAndCurve, Group) == 0x000000, "Member 'FFloatNameAndCurve::Group' has a wrong offset!");
static_assert(offsetof(FFloatNameAndCurve, DisplayName) == 0x00000C, "Member 'FFloatNameAndCurve::DisplayName' has a wrong offset!");
static_assert(offsetof(FFloatNameAndCurve, ParameterName) == 0x000018, "Member 'FFloatNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FFloatNameAndCurve, ParameterCurve) == 0x000028, "Member 'FFloatNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct SequenceDialogue.MovieSceneSeqAnimDataSectionTemplate
// 0x0020 (0x0040 - 0x0020)
struct FMovieSceneSeqAnimDataSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	TArray<struct FFloatNameAndCurve>             FloatCurves;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVectorNameAndCurve>            VectorCurves;                                      // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSeqAnimDataSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneSeqAnimDataSectionTemplate");
static_assert(sizeof(FMovieSceneSeqAnimDataSectionTemplate) == 0x000040, "Wrong size on FMovieSceneSeqAnimDataSectionTemplate");
static_assert(offsetof(FMovieSceneSeqAnimDataSectionTemplate, FloatCurves) == 0x000020, "Member 'FMovieSceneSeqAnimDataSectionTemplate::FloatCurves' has a wrong offset!");
static_assert(offsetof(FMovieSceneSeqAnimDataSectionTemplate, VectorCurves) == 0x000030, "Member 'FMovieSceneSeqAnimDataSectionTemplate::VectorCurves' has a wrong offset!");

// ScriptStruct SequenceDialogue.SeqAnimCurveVectorDesc
// 0x0040 (0x0040 - 0x0000)
struct FSeqAnimCurveVectorDesc final
{
public:
	class FName                                   Group;                                             // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayName;                                       // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName;                                         // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GizmoBaseBone;                                     // 0x0024(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GizmoOffset;                                       // 0x0030(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableVirtualBoneRot;                              // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSeqAnimCurveVectorDesc) == 0x000004, "Wrong alignment on FSeqAnimCurveVectorDesc");
static_assert(sizeof(FSeqAnimCurveVectorDesc) == 0x000040, "Wrong size on FSeqAnimCurveVectorDesc");
static_assert(offsetof(FSeqAnimCurveVectorDesc, Group) == 0x000000, "Member 'FSeqAnimCurveVectorDesc::Group' has a wrong offset!");
static_assert(offsetof(FSeqAnimCurveVectorDesc, DisplayName) == 0x00000C, "Member 'FSeqAnimCurveVectorDesc::DisplayName' has a wrong offset!");
static_assert(offsetof(FSeqAnimCurveVectorDesc, CurveName) == 0x000018, "Member 'FSeqAnimCurveVectorDesc::CurveName' has a wrong offset!");
static_assert(offsetof(FSeqAnimCurveVectorDesc, GizmoBaseBone) == 0x000024, "Member 'FSeqAnimCurveVectorDesc::GizmoBaseBone' has a wrong offset!");
static_assert(offsetof(FSeqAnimCurveVectorDesc, GizmoOffset) == 0x000030, "Member 'FSeqAnimCurveVectorDesc::GizmoOffset' has a wrong offset!");
static_assert(offsetof(FSeqAnimCurveVectorDesc, EnableVirtualBoneRot) == 0x00003C, "Member 'FSeqAnimCurveVectorDesc::EnableVirtualBoneRot' has a wrong offset!");

// ScriptStruct SequenceDialogue.SeqAnimCurveFloatDesc
// 0x0024 (0x0024 - 0x0000)
struct FSeqAnimCurveFloatDesc final
{
public:
	class FName                                   Group;                                             // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayName;                                       // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName;                                         // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSeqAnimCurveFloatDesc) == 0x000004, "Wrong alignment on FSeqAnimCurveFloatDesc");
static_assert(sizeof(FSeqAnimCurveFloatDesc) == 0x000024, "Wrong size on FSeqAnimCurveFloatDesc");
static_assert(offsetof(FSeqAnimCurveFloatDesc, Group) == 0x000000, "Member 'FSeqAnimCurveFloatDesc::Group' has a wrong offset!");
static_assert(offsetof(FSeqAnimCurveFloatDesc, DisplayName) == 0x00000C, "Member 'FSeqAnimCurveFloatDesc::DisplayName' has a wrong offset!");
static_assert(offsetof(FSeqAnimCurveFloatDesc, CurveName) == 0x000018, "Member 'FSeqAnimCurveFloatDesc::CurveName' has a wrong offset!");

}

