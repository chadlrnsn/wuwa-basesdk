#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPCMaterialController

#include "Basic.hpp"

#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EHolographicState_structs.hpp"
#include "SHolographicMaterialsCache_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPCMaterialController.BP_NPCMaterialController_C
// 0x00A0 (0x0160 - 0x00C0)
class UBP_NPCMaterialController_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UMaterialInstanceDynamic*>       OL_Materials;                                      // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       Other_Materials;                                   // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UPD_HolographicEffect_C*                DATA;                                              // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         TimeCounter;                                       // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHolographicState                             State;                                             // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCached;                                           // 0x00F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class USkeletalMeshComponent*, struct FSHolographicMaterialsCache> ComponentMaterialsCache;                           // 0x00F8(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          EnableBattle;                                      // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableMask;                                        // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14A[0x6];                                      // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UKuroMaterialControllerComponent*       MaterialController;                                // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnMobile;                                        // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_NPCMaterialController(int32 EntryPoint);
	void CustomTickOnce();
	void ReceiveTick(float DeltaSeconds);
	void CacheMaterialParameters(TArray<struct FSMaterialControllerFloatParameter>& floats, TArray<struct FSMaterialControllerColorParameter>& colors, class UMaterialInstanceDynamic* material, bool bReplaceMaterial, int32 index, struct FSMaterialParamCache* result);
	class UMaterialInstanceDynamic* CacheAndReplace(const struct FSHolographicData& SHolographicData, class UPrimitiveComponent* self2, int32 ElementIndex, class UMaterialInstanceDynamic* material, struct FSMaterialParamCache* CacheResult);
	void RevertMaterialParamters(const struct FSMaterialParamCache& MaterialCache, class UMaterialInstanceDynamic** result);
	void Clear();
	void RemoveNpcEffect();
	void UpdateMaterialsWithDa(TArray<class UMaterialInstanceDynamic*>& Materials, const struct FSHolographicData& SHolographicData);
	void StartEffect();
	void EndEffect();
	void MaterialPretreatment(TArray<class UMaterialInstanceDynamic*>& Materials, const struct FSHolographicData& SHolographicData);
	void ApplyMaterialsWithDa(const struct FSHolographicData& SHolographicData, EKuroCharSlotSpecifiedType SlotType);
	void ApplyMaterialAndTexture(const struct FSHolographicData& SHolographicData, EKuroCharSlotSpecifiedType SlotType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPCMaterialController_C">();
	}
	static class UBP_NPCMaterialController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_NPCMaterialController_C>();
	}
};
static_assert(alignof(UBP_NPCMaterialController_C) == 0x000008, "Wrong alignment on UBP_NPCMaterialController_C");
static_assert(sizeof(UBP_NPCMaterialController_C) == 0x000160, "Wrong size on UBP_NPCMaterialController_C");
static_assert(offsetof(UBP_NPCMaterialController_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_NPCMaterialController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_NPCMaterialController_C, OL_Materials) == 0x0000C8, "Member 'UBP_NPCMaterialController_C::OL_Materials' has a wrong offset!");
static_assert(offsetof(UBP_NPCMaterialController_C, Other_Materials) == 0x0000D8, "Member 'UBP_NPCMaterialController_C::Other_Materials' has a wrong offset!");
static_assert(offsetof(UBP_NPCMaterialController_C, DATA) == 0x0000E8, "Member 'UBP_NPCMaterialController_C::DATA' has a wrong offset!");
static_assert(offsetof(UBP_NPCMaterialController_C, TimeCounter) == 0x0000F0, "Member 'UBP_NPCMaterialController_C::TimeCounter' has a wrong offset!");
static_assert(offsetof(UBP_NPCMaterialController_C, State) == 0x0000F4, "Member 'UBP_NPCMaterialController_C::State' has a wrong offset!");
static_assert(offsetof(UBP_NPCMaterialController_C, bCached) == 0x0000F5, "Member 'UBP_NPCMaterialController_C::bCached' has a wrong offset!");
static_assert(offsetof(UBP_NPCMaterialController_C, ComponentMaterialsCache) == 0x0000F8, "Member 'UBP_NPCMaterialController_C::ComponentMaterialsCache' has a wrong offset!");
static_assert(offsetof(UBP_NPCMaterialController_C, EnableBattle) == 0x000148, "Member 'UBP_NPCMaterialController_C::EnableBattle' has a wrong offset!");
static_assert(offsetof(UBP_NPCMaterialController_C, EnableMask) == 0x000149, "Member 'UBP_NPCMaterialController_C::EnableMask' has a wrong offset!");
static_assert(offsetof(UBP_NPCMaterialController_C, MaterialController) == 0x000150, "Member 'UBP_NPCMaterialController_C::MaterialController' has a wrong offset!");
static_assert(offsetof(UBP_NPCMaterialController_C, IsOnMobile) == 0x000158, "Member 'UBP_NPCMaterialController_C::IsOnMobile' has a wrong offset!");

}

