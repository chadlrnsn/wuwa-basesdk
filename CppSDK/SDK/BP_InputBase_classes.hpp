#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InputBase

#include "Basic.hpp"

#include "SInputShowList_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EInputCharacterState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InputBase.BP_InputBase_C
// 0x00B8 (0x0178 - 0x00C0)
class UBP_InputBase_C : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABaseCharacter*                         OwnerActor;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnlockLongPressTime;                               // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IsLockOnState;                                     // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EInputCharacterState, struct FSInputShowList> InputShowMap;                                 // 0x00D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EInputCharacterState, struct FSInputShowList> MobileInputShowMap;                           // 0x0128(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_InputBase(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	struct FSInputCaches GetUnrealCacheConfig(int32 action);
	struct FSInputHoldConfig GetUnrealHoldConfig(int32 action);
	void 跳跃按下事件(float time);
	void 跳跃抬起事件(float time);
	void 攀爬按下事件(float time);
	void 攀爬抬起事件(float time);
	void 走跑切换按下事件(float time);
	void 走跑切换抬起事件(float time);
	void 攻击按下事件(float time);
	void 攻击抬起事件(float time);
	void 闪避按下事件(float time);
	void 闪避抬起事件(float time);
	void 技能1按下事件(float time);
	void 技能1抬起事件(float time);
	void 幻象1按下事件(float time);
	void 幻象1抬起事件(float time);
	void 大招按下事件(float time);
	void 大招抬起事件(float time);
	void 幻象2按下事件(float time);
	void 幻象2抬起事件(float time);
	void 切换角色1按下事件(float time);
	void 切换角色1抬起事件(float time);
	void 切换角色2按下事件(float time);
	void 切换角色2抬起事件(float time);
	void 切换角色3按下事件(float time);
	void 切换角色3抬起事件(float time);
	void 锁定目标按下事件(float time);
	void 锁定目标抬起事件(float time);
	void 瞄准按下事件(float time);
	void 瞄准抬起事件(float time);
	struct FSInputCommand 跳跃按下(float time);
	struct FSInputCommand 跳跃抬起(float time);
	struct FSInputCommand 跳跃长按(float time);
	struct FSInputCommand 攀爬按下(float time);
	struct FSInputCommand 攀爬抬起(float time);
	struct FSInputCommand 攀爬长按(float time);
	struct FSInputCommand 走跑切换按下(float time);
	struct FSInputCommand 走跑切换抬起(float time);
	struct FSInputCommand 走跑切换长按(float time);
	struct FSInputCommand 攻击按下(float time);
	struct FSInputCommand 攻击抬起(float time);
	struct FSInputCommand 攻击长按(float time);
	struct FSInputCommand 闪避按下(float time);
	struct FSInputCommand 闪避抬起(float time);
	struct FSInputCommand 闪避长按(float time);
	struct FSInputCommand 技能1按下(float time);
	struct FSInputCommand 技能1抬起(float time);
	struct FSInputCommand 技能1长按(float time);
	struct FSInputCommand 幻象1按下(float time);
	struct FSInputCommand 幻象1抬起(float time);
	struct FSInputCommand 幻象1长按(float time);
	struct FSInputCommand 大招按下(float time);
	struct FSInputCommand 大招抬起(float time);
	struct FSInputCommand 大招长按(float time);
	struct FSInputCommand 幻象2按下(float time);
	struct FSInputCommand 幻象2抬起(float time);
	struct FSInputCommand 幻象2长按(float time);
	struct FSInputCommand 切换角色1按下(float time);
	struct FSInputCommand 切换角色1抬起(float time);
	struct FSInputCommand 切换角色1长按(float time);
	struct FSInputCommand 切换角色2按下(float time);
	struct FSInputCommand 切换角色2抬起(float time);
	struct FSInputCommand 切换角色2长按(float time);
	struct FSInputCommand 切换角色3按下(float time);
	struct FSInputCommand 切换角色3抬起(float time);
	struct FSInputCommand 切换角色3长按(float time);
	struct FSInputCommand 瞄准按下(float time);
	struct FSInputCommand 瞄准抬起(float time);
	struct FSInputCommand 瞄准长按(float time);
	struct FSInputCommand 锁定目标长按(float time);
	struct FSInputCommand 通用交互按下(float time);
	void GetMoveVector(struct FVector2D* ReturnVaule);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InputBase_C">();
	}
	static class UBP_InputBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_InputBase_C>();
	}
};
static_assert(alignof(UBP_InputBase_C) == 0x000008, "Wrong alignment on UBP_InputBase_C");
static_assert(sizeof(UBP_InputBase_C) == 0x000178, "Wrong size on UBP_InputBase_C");
static_assert(offsetof(UBP_InputBase_C, UberGraphFrame) == 0x0000C0, "Member 'UBP_InputBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_InputBase_C, OwnerActor) == 0x0000C8, "Member 'UBP_InputBase_C::OwnerActor' has a wrong offset!");
static_assert(offsetof(UBP_InputBase_C, UnlockLongPressTime) == 0x0000D0, "Member 'UBP_InputBase_C::UnlockLongPressTime' has a wrong offset!");
static_assert(offsetof(UBP_InputBase_C, IsLockOnState) == 0x0000D4, "Member 'UBP_InputBase_C::IsLockOnState' has a wrong offset!");
static_assert(offsetof(UBP_InputBase_C, InputShowMap) == 0x0000D8, "Member 'UBP_InputBase_C::InputShowMap' has a wrong offset!");
static_assert(offsetof(UBP_InputBase_C, MobileInputShowMap) == 0x000128, "Member 'UBP_InputBase_C::MobileInputShowMap' has a wrong offset!");

}

