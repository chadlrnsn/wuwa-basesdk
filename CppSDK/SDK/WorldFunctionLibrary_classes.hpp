#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WorldFunctionLibrary

#include "Basic.hpp"

#include "EInputState_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EInputAction_structs.hpp"
#include "EDetachType_structs.hpp"
#include "ERelation_structs.hpp"
#include "EPawnChannel_structs.hpp"
#include "EWeatherState_structs.hpp"
#include "EWuYinQuState_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass WorldFunctionLibrary.WorldFunctionLibrary_C
// 0x0000 (0x0030 - 0x0030)
class UWorldFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void AddPublicTags(float entityId1, TArray<class FString>& tags1, class UObject* __WorldContext);
	static void RemovePublicTags(float entityId1, TArray<class FString>& tags1, class UObject* __WorldContext);
	static int32 GetIntValueByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static int32 GetIntValueByEntityWithCharacter(class ATsBaseCharacter_C* entity, const class FString& key, class UObject* __WorldContext);
	static void SetIntValueByEntity(int32 entityId, const class FString& key, int32 value, class UObject* __WorldContext);
	static void SetIntValueByEntityWithCharacter(class ATsBaseCharacter_C* entity, const class FString& key, int32 value, class UObject* __WorldContext);
	static TArray<int32> GetIntValuesByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static int64 GetLongValueByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static void SetLongValueByEntity(int32 entityId, const class FString& key, int64 value, class UObject* __WorldContext);
	static TArray<int64> GetLongValuesByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static bool GetBooleanValueByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static void SetBooleanValueByEntity(int32 entityId, const class FString& key, bool value, class UObject* __WorldContext);
	static float GetFloatValueByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static void SetFloatValueByEntity(int32 entityId, const class FString& key, float value, class UObject* __WorldContext);
	static TArray<float> GetFloatValuesByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static class FString GetStringValueByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static void SetStringValueByEntity(int32 entityId, const class FString& key, const class FString& value, class UObject* __WorldContext);
	static TArray<class FString> GetStringValuesByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static void RemoveValueByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static bool HasValueByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static struct FVectorDouble GetVectorValueByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static void SetVectorValueByEntity(int32 entityId, const class FString& key, const struct FVectorDouble& value, class UObject* __WorldContext);
	static TArray<struct FVectorDouble> GetVectorValuesByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static struct FRotator GetRotatorValueByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static void SetRotatorValueByEntity(int32 entityId, const class FString& key, const struct FRotator& value, class UObject* __WorldContext);
	static TArray<struct FRotator> GetRotatorValuesByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static int32 GetEntityIdByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static void SetEntityIdByEntity(int32 entityId, const class FString& key, int32 value, class UObject* __WorldContext);
	static TArray<int32> GetEntityIdsByEntity(int32 entityId, const class FString& key, class UObject* __WorldContext);
	static void SetEntityIdsByEntity(int32 entityId1, const class FString& key1, TArray<int32>& values1, class UObject* __WorldContext);
	static class FString GetBlackboardInfosByEntity(int32 entityId, class UObject* __WorldContext);
	static void RemoveStandaloneEntity(int32 entityId, int32 removeEntityType, class UObject* __WorldContext);
	static class AActor* GetDynamicEntity(int32 entityId, class UObject* __WorldContext);
	static int32 GetWorldOwner(class UObject* __WorldContext);
	static int64 GenUniqueId(class UObject* __WorldContext);
	static int32 GetEntityIdByCreature(int64 creatureDataId, class UObject* __WorldContext);
	static int64 GetCreatureDataIdByEntity(int32 entityId, class UObject* __WorldContext);
	static int32 GetPlayerIdByEntity(int32 entityId, class UObject* __WorldContext);
	static int32 GetRoleElementId(int32 entityId, class UObject* __WorldContext);
	static int64 GetOwnerIdByEntity(int32 entityId, class UObject* __WorldContext);
	static void AddPrivateTags(float entityId, TArray<class FString>& tags, class UObject* __WorldContext);
	static void RemovePrivateTags(float entityId, TArray<class FString>& tags, class UObject* __WorldContext);
	static bool ActorHasSceneItemTag(class AActor* actor, float tag, class UObject* __WorldContext);
	static bool CheckConfigIdByActor(class AActor* actor, float configId, class UObject* __WorldContext);
	static void StartStandalone(class UObject* __WorldContext);
	static void PlayWuYinSequence(const class FString& sequenceName, class UObject* __WorldContext);
	static void PlayWuYinLevelSequence(int32 loopStartFrame, class ULevelSequenceDirector* director, const class FString& sequenceActorName, class UObject* __WorldContext);
	static bool IsOpenWorld(class UObject* __WorldContext);
	static int32 GetRoleId(int32 entityId, class UObject* __WorldContext);
	static int64 SummonRequest(int32 skillId, bool isVisible, const struct FTransformDouble& transform, int32 summonerId, int32 summonConfigId, class UObject* __WorldContext);
	static void JumpToMarkLevelSequence(class ULevelSequenceDirector* director, const class FString& markName, class UObject* __WorldContext);
	static void ChangeBattleState(class ULevelSequenceDirector* director, const class FString& battleActorName, EWuYinQuState targetState, class UObject* __WorldContext);
	static void RemoveSummonEntityRequest(int32 skillId, int32 summonerId, int32 removeId, class UObject* __WorldContext);
	static void AiChangeBattleState(const class FString& battleActorName, EWuYinQuState targetState, class UObject* __WorldContext);
	static float GetCurrentDayState(class UObject* __WorldContext);
	static EWeatherState GetCurrentWeatherState(class UObject* __WorldContext);
	static bool GetBattleMode(class UObject* __WorldContext);
	static void SwitchBattleMode(class UObject* __WorldContext);
	static bool GetBuffSyncMode(class UObject* __WorldContext);
	static void SwitchBuffSyncMode(class UObject* __WorldContext);
	static bool GetServerLogMode(class UObject* __WorldContext);
	static void SwitchServerLogMode(class UObject* __WorldContext);
	static void ChangeEntityState(int32 entityId1, const class FString& state1, class AActor* changerstActor, int32 changerstEntityId, class UObject* __WorldContext);
	static int32 GetEntityTypeByEntity(int32 entityId, class UObject* __WorldContext);
	static int32 GetEntityTypeByActor(class AActor* actor, class UObject* __WorldContext);
	static int32 GetConfigIdByActor(class AActor* actor, class UObject* __WorldContext);
	static int32 GetMonsterType(class AActor* actor, class UObject* __WorldContext);
	static TArray<class FString> GetWuYinQuDebugInfo(class UObject* __WorldContext);
	static void TestSpawnTemplateEntityPush(int64 creatureDataId, int32 configId, int32 level, const struct FTransform& transform, int32 extraRatioConfigId, class UObject* __WorldContext);
	static bool GetChangeFootStep(class UObject* __WorldContext);
	static int32 GetChangeFootStepMaterialId(class UObject* __WorldContext);
	static class UTsEntityDebugInfoManager_C* GetEntityDebugInfoManager(class UObject* __WorldContext);
	static class AActor* GetActorByCreatureDataId(int64 creatureDataId, class UObject* __WorldContext);
	static class AActor* GetActorByPbDataId(int32 pbDataId, class UObject* __WorldContext);
	static void ChangeSubLevel(TArray<class FString>& unloadLevels, TArray<class FString>& levels, int32 screenEffect, const struct FVectorDouble& location, const struct FRotator& rotator, class UObject* __WorldContext);
	static void MonsterBoomRequest(int64 creatureDataId, float delay, class UObject* __WorldContext);
	static int32 GetVisionEntityId(int32 ownerEntityId, class UObject* __WorldContext);
	static int32 GetCustomEntityId(int32 ownerEntityId, int32 pos, class UObject* __WorldContext);
	static void SetVisionEnable(int32 ownerEntityId, bool enable, class UObject* __WorldContext);
	static int64 GetServerIdByEntityId(int32 entityId, class UObject* __WorldContext);
	static bool IsNeedPostEffect(class AActor* actor, class UObject* __WorldContext);
	static class FString EvalScript(const class FString& script, class UObject* __WorldContext);
	static struct FVectorDouble GetInitPositionByEntity(int32 entityId1, class UObject* __WorldContext);
	static int32 DisableCreatureActor(class AActor* actor, class UObject* callObject, const class FString& reason, class UObject* __WorldContext);
	static bool EnableCreatureActor(class AActor* actor, class UObject* callObject, int32 handle, class UObject* __WorldContext);
	static int32 DisableCreatureCollision(class AActor* actor, class UObject* callObject, const class FString& reason, class UObject* __WorldContext);
	static bool EnableCreatureCollision(class AActor* actor, class UObject* callObject, int32 handle, class UObject* __WorldContext);
	static void SetCameraShakeModify(float modify, class UObject* __WorldContext);
	static TMap<int32, bool> GetFormationAllEntityId(class UObject* __WorldContext);
	static void SetCollisionResponseToPawn(class ATsBaseCharacter_C* actor, EPawnChannel pawnChannel, ECollisionResponse newResponse, class UObject* __WorldContext);
	static bool IsGameRunning(class UObject* __WorldContext);
	static void SetEntityLocation(int32 entityId1, const struct FVectorDouble& location, bool sweep, bool teleport, class UObject* __WorldContext);
	static void SetEntityLocationAndRotation(int32 entityId, const struct FVectorDouble& location, const struct FRotator& rotation, bool sweep, class UObject* __WorldContext);
	static void SetEntityRotation(int32 entityId, const struct FRotator& rotation, bool sweep, class UObject* __WorldContext);
	static TArray<class FString> GetTestSpawnTemplateEntityString(class UObject* __WorldContext);
	static void ShowCharacterCollision(bool isShow, int32 entityId1, class UObject* __WorldContext);
	static bool GetEnableCollisionDebug(int32 entityId1, class UObject* __WorldContext);
	static void ChangeRole(int32 pos, class UObject* __WorldContext);
	static class USplineComponent* InitGameSplineBySplineEntity(int32 pbDataId1, class ATsGameSplineActor_C* inSplineActor1, class UObject* __WorldContext);
	static void SetNewUiSceneDebugOpen(bool UseNewUiSceneWorkflow, class UObject* __WorldContext);
	static void SetCustomEntityEnable(int32 ownerEntityId, int32 pos, bool enable, class UObject* callObject, const class FString& reason, class UObject* __WorldContext);
	static void UiCameraAnimationDisablePlayerActor(class UObject* __WorldContext);
	static void UiCameraAnimationEnablePlayerActor(class UObject* __WorldContext);
	static void UiCameraAnimationDisableCustomCreatureActor(int32 position1, class UObject* __WorldContext);
	static void UiCameraAnimationEnableCustomCreatureActor(class UObject* __WorldContext);
	static int32 GetControlVisionEntityId(int32 ownerEntityId, class UObject* __WorldContext);
	static void UiCameraAnimationBroadSequenceEvent(const class FString& sequenceEventName, class UObject* __WorldContext);
	static int32 GetSummonerEntityId(int32 entityId, class UObject* __WorldContext);
	static void ChangeRoleInExitSkill(class AActor* goDownPlayer, class AActor* goBattlePlayer, class UObject* __WorldContext);
	static TArray<int32> GetSummonEntityIds(int32 ownerEntityId, class UObject* __WorldContext);
	static int32 GetVisionId(int32 visionEntityId, class UObject* __WorldContext);
	static bool GetEntityDestructible(int32 entityId, class UObject* __WorldContext);
	static class AActor* GetEntityActorByChildActor(class AActor* childActor, class UObject* __WorldContext);
	static TArray<class AActor*> GetActorsByPbDataIdArray(TArray<int32>& pbDataIdArray, class UObject* __WorldContext);
	static void SetTimeDilation(float timeDilation, class UObject* __WorldContext);
	static bool EntityIsInit(int32 entityId, class UObject* __WorldContext);
	static class AActor* GetActorByEntityId(int32 entityId, class UObject* __WorldContext);
	static bool GetEntityEnable(int32 entityId, class UObject* __WorldContext);
	static TArray<class AActor*> GetFormationControlledRoles(class UObject* __WorldContext);
	static float GetTimeDilation(class UObject* __WorldContext);
	static int32 GetRoleIdIgnoreTrial(int32 entityId, class UObject* __WorldContext);
	static void SetIntValuesByEntity(int32 entityId, const class FString& key, TArray<int32>& values, class UObject* __WorldContext);
	static void SetLongValuesByEntity(int32 entityId, const class FString& key, TArray<int64>& values, class UObject* __WorldContext);
	static void SetFloatValuesByEntity(int32 entityId, const class FString& key, TArray<float>& values, class UObject* __WorldContext);
	static void SetStringValuesByEntity(int32 entityId, const class FString& key, TArray<class FString>& values, class UObject* __WorldContext);
	static void SetVectorValuesByEntity(int32 entityId, const class FString& key, TArray<struct FVectorDouble>& values, class UObject* __WorldContext);
	static void SetRotatorValuesByEntity(int32 entityId, const class FString& key, TArray<struct FRotator>& values, class UObject* __WorldContext);
	static TArray<int32> GetEntitiesInRange(int32 distance, ERelation relation, class UObject* __WorldContext);
	static bool AttachToActor(class UObject* callObject1, class AActor* actor1, class AActor* parentActor1, EDetachType detachType1, const class FString& reason1, class FName socketName1, EAttachmentRule locationRule1, EAttachmentRule rotationRule1, EAttachmentRule scaleRule1, bool bWeldSimulatedBodies1, bool doAttach, class UObject* __WorldContext);
	static int32 GetPlayerFollower(class UObject* __WorldContext);
	static bool AttachToComponent(class UObject* callObject, class AActor* actor, class USceneComponent* parentComponent, EDetachType detachType, const class FString& reason, class FName socketName, EAttachmentRule locationRule, EAttachmentRule rotationRule, EAttachmentRule scaleRule, bool bWeldSimulatedBodies, bool doAttach, class UObject* __WorldContext);
	static bool DetachActor(class UObject* callObject, class AActor* srcActor, bool destroy, const class FString& reason, EDetachmentRule locationRule, EDetachmentRule rotationRule, EDetachmentRule scaleRule, class UObject* __WorldContext);
	static bool IsPlayerFollowerEnable(class UObject* __WorldContext);
	static void SetPlayerFollowerEnable(bool enable, class UObject* __WorldContext);
	static bool IsPlayerFollowerNeedInput(EInputAction action, EInputState state, class UObject* __WorldContext);
	static void RegisterToBpActorController(class FName groupTag, TScriptInterface<class IBPI_SceneBp_C> sceneBp, class UObject* __WorldContext);
	static void UnregisterToBpActorController(class FName groupTag, TScriptInterface<class IBPI_SceneBp_C> sceneBp, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WorldFunctionLibrary_C">();
	}
	static class UWorldFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldFunctionLibrary_C>();
	}
};
static_assert(alignof(UWorldFunctionLibrary_C) == 0x000008, "Wrong alignment on UWorldFunctionLibrary_C");
static_assert(sizeof(UWorldFunctionLibrary_C) == 0x000030, "Wrong size on UWorldFunctionLibrary_C");

}

