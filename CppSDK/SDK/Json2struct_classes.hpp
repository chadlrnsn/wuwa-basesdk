#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: json2struct

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "json2struct_structs.hpp"


namespace SDK
{

// Class json2struct.json2structBPLibrary
// 0x0000 (0x0030 - 0x0030)
class Ujson2structBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static EJson2structParseResult json2structBP(class UStruct** Out, const class FString& json);
	static EJson2structParseResult WriteStructBP(class UStruct* inStruct, const struct FJson2struct_filter& filter, class FString* Json);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"json2structBPLibrary">();
	}
	static class Ujson2structBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<Ujson2structBPLibrary>();
	}
};
static_assert(alignof(Ujson2structBPLibrary) == 0x000008, "Wrong alignment on Ujson2structBPLibrary");
static_assert(sizeof(Ujson2structBPLibrary) == 0x000030, "Wrong size on Ujson2structBPLibrary");

// Class json2struct.JsonAsyncNode
// 0x0020 (0x0058 - 0x0038)
class UJsonAsyncNode final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const class FString& Response)> success;                           // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Response)> fail;                              // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UJsonAsyncNode* json2structUrl(const class FString& URL, const class FString& requestJson, const class UObject* WC);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JsonAsyncNode">();
	}
	static class UJsonAsyncNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJsonAsyncNode>();
	}
};
static_assert(alignof(UJsonAsyncNode) == 0x000008, "Wrong alignment on UJsonAsyncNode");
static_assert(sizeof(UJsonAsyncNode) == 0x000058, "Wrong size on UJsonAsyncNode");
static_assert(offsetof(UJsonAsyncNode, success) == 0x000038, "Member 'UJsonAsyncNode::success' has a wrong offset!");
static_assert(offsetof(UJsonAsyncNode, fail) == 0x000048, "Member 'UJsonAsyncNode::fail' has a wrong offset!");

}

