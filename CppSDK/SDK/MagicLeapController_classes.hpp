#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MagicLeapController

#include "Basic.hpp"

#include "MagicLeapController_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Class MagicLeapController.MagicLeapControllerFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMagicLeapControllerFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetControllerMapping(int32 ControllerIndex, EControllerHand* Hand);
	static EMagicLeapControllerTrackingMode GetControllerTrackingMode();
	static EMagicLeapControllerType GetControllerType(class FName MotionSource);
	static EControllerHand GetHandForMotionSource(class FName MotionSource);
	static EMagicLeapControllerType GetMLControllerType(EControllerHand Hand);
	static class FName GetMotionSourceForHand(EControllerHand Hand);
	static void InvertControllerMapping();
	static bool IsMLControllerConnected(class FName MotionSource);
	static int32 MaxSupportedMagicLeapControllers();
	static bool PlayControllerHapticFeedback(EControllerHand Hand, EMagicLeapControllerHapticPattern HapticPattern, EMagicLeapControllerHapticIntensity Intensity);
	static bool PlayControllerLED(EControllerHand Hand, EMagicLeapControllerLEDPattern LEDPattern, EMagicLeapControllerLEDColor LEDColor, float DurationInSec);
	static bool PlayControllerLEDEffect(EControllerHand Hand, EMagicLeapControllerLEDEffect LEDEffect, EMagicLeapControllerLEDSpeed LEDSpeed, EMagicLeapControllerLEDPattern LEDPattern, EMagicLeapControllerLEDColor LEDColor, float DurationInSec);
	static bool PlayHapticPattern(class FName MotionSource, EMagicLeapControllerHapticPattern HapticPattern, EMagicLeapControllerHapticIntensity Intensity);
	static bool PlayLEDEffect(class FName MotionSource, EMagicLeapControllerLEDEffect LEDEffect, EMagicLeapControllerLEDSpeed LEDSpeed, EMagicLeapControllerLEDPattern LEDPattern, EMagicLeapControllerLEDColor LEDColor, float DurationInSec);
	static bool PlayLEDPattern(class FName MotionSource, EMagicLeapControllerLEDPattern LEDPattern, EMagicLeapControllerLEDColor LEDColor, float DurationInSec);
	static bool SetControllerTrackingMode(EMagicLeapControllerTrackingMode TrackingMode);
	static bool SetMotionSourceForHand(EControllerHand Hand, class FName MotionSource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MagicLeapControllerFunctionLibrary">();
	}
	static class UMagicLeapControllerFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMagicLeapControllerFunctionLibrary>();
	}
};
static_assert(alignof(UMagicLeapControllerFunctionLibrary) == 0x000008, "Wrong alignment on UMagicLeapControllerFunctionLibrary");
static_assert(sizeof(UMagicLeapControllerFunctionLibrary) == 0x000030, "Wrong size on UMagicLeapControllerFunctionLibrary");

// Class MagicLeapController.MagicLeapTouchpadGesturesComponent
// 0x0090 (0x0150 - 0x00C0)
class UMagicLeapTouchpadGesturesComponent final : public UActorComponent
{
public:
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FMagicLeapTouchpadGesture& GestureData)> OnTouchpadGestureStart; // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FMagicLeapTouchpadGesture& GestureData)> OnTouchpadGestureContinue; // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FMagicLeapTouchpadGesture& GestureData)> OnTouchpadGestureEnd; // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x58];                                      // 0x00F8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MagicLeapTouchpadGesturesComponent">();
	}
	static class UMagicLeapTouchpadGesturesComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMagicLeapTouchpadGesturesComponent>();
	}
};
static_assert(alignof(UMagicLeapTouchpadGesturesComponent) == 0x000008, "Wrong alignment on UMagicLeapTouchpadGesturesComponent");
static_assert(sizeof(UMagicLeapTouchpadGesturesComponent) == 0x000150, "Wrong size on UMagicLeapTouchpadGesturesComponent");
static_assert(offsetof(UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureStart) == 0x0000C8, "Member 'UMagicLeapTouchpadGesturesComponent::OnTouchpadGestureStart' has a wrong offset!");
static_assert(offsetof(UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureContinue) == 0x0000D8, "Member 'UMagicLeapTouchpadGesturesComponent::OnTouchpadGestureContinue' has a wrong offset!");
static_assert(offsetof(UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureEnd) == 0x0000E8, "Member 'UMagicLeapTouchpadGesturesComponent::OnTouchpadGestureEnd' has a wrong offset!");

}

