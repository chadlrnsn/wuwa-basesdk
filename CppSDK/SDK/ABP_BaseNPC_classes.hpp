#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_BaseNPC

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ECharState_structs.hpp"
#include "KuroAnim_structs.hpp"
#include "KuroAnim_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_BaseNPC.ABP_BaseNPC_C
// 0x1B80 (0x22D0 - 0x0750)
class UABP_BaseNPC_C : public UKuroAnimInstance
{
public:
	uint8                                         Pad_748[0x8];                                      // 0x0748(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0750(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x0758(0x0038)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_5;                              // 0x0790(0x0060)()
	struct FAnimNode_Inertialization              AnimGraphNode_Inertialization;                     // 0x07F0(0x0070)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x0860(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x0888(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x08B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x08D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x0900(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x0928(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x0950(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_11;                      // 0x09E0(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x0A18(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_10;                      // 0x0AA8(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x0AE0(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x0B70(0x0038)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x0BA8(0x00F8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x0CA0(0x0038)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0CD8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0D00(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0D28(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0D50(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0D78(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0DA0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0DC8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0DF0(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0E18(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x0EA8(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0EE0(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0F70(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0FA8(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x1038(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1070(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x1100(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_3;                      // 0x1138(0x0148)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x1280(0x0038)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x12B8(0x00F8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x13B0(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_2;                      // 0x13E8(0x0148)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x1530(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x1568(0x0148)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x16B0(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x16E8(0x0148)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_4;                              // 0x1830(0x0060)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x1890(0x00D8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x1968(0x0060)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x19C8(0x00D8)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x1AA0(0x0038)()
	struct FAnimNode_LinkedAnimLayer              AnimGraphNode_LinkedAnimLayer;                     // 0x1AD8(0x00C0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x1B98(0x0060)()
	struct FAnimNode_SightLock                    AnimGraphNode_SightLock;                           // 0x1BF8(0x01D0)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x1DC8(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x1DE8(0x0020)()
	uint8                                         Pad_1E08[0x8];                                     // 0x1E08(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_RBF                          AnimGraphNode_RBF;                                 // 0x1E10(0x0150)()
	struct FAnimNode_CombineCurves                AnimGraphNode_CombineCurves_1;                     // 0x1F60(0x0060)()
	struct FAnimNode_CombineCurves                AnimGraphNode_CombineCurves;                       // 0x1FC0(0x0060)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x2020(0x0090)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x20B0(0x0060)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x2110(0x0060)()
	struct FAnimNode_TextureFace                  AnimGraphNode_TextureFace;                         // 0x2170(0x00C8)(ContainsInstancedReference)
	class ABP_BaseNPC_C*                          角色蓝图;                                          // 0x2238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                移动输入向量;                                      // 0x2240(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         速度;                                              // 0x224C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否有移动输入;                                    // 0x2250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ifPlayIdleAction;                                  // 0x2251(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2252[0x6];                                     // 0x2252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   IdleMontageArray;                                  // 0x2258(0x0010)(Edit, BlueprintVisible)
	class USkeletalMeshComponent*                 角色Mesh;                                          // 0x2268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否原地转身;                                      // 0x2270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2271[0x3];                                     // 0x2271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         旋转角度差值;                                      // 0x2274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         上一次旋转角度;                                    // 0x2278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SightDirect;                                       // 0x227C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBeingImpacted;                                   // 0x2288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBeingAttacked;                                   // 0x2289(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ESightLockMode                                SightLockMode;                                     // 0x228A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_228B[0x1];                                     // 0x228B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         走跑混合;                                          // 0x228C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTurnLeft;                                        // 0x2290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2291[0x3];                                     // 0x2291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               角色旋转;                                          // 0x2294(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         NpcEntityId;                                       // 0x22A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionStrength;                                 // 0x22A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionDirection;                                // 0x22A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomEpresionEndTime;                             // 0x22AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         眨眼动画时长;                                      // 0x22B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         此轮眨眼动画总时长;                                // 0x22B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExpresionAlpha;                                    // 0x22B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          眨眼中;                                            // 0x22BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cache原地转身;                                     // 0x22BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22BE[0x2];                                     // 0x22BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           口型曲线;                                          // 0x22C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_ABP_BaseNPC(int32 EntryPoint);
	void AnimNotify_OnHitAnimEnd();
	void AnimNotify_OnHitAnimBegin();
	void AnimNotify_OnCollisionAnimBegin();
	void AnimNotify_OnCollisionAnimEnd();
	void ClimbDash();
	void InterfaceSimulateJump(float Speed);
	void InterfaceFixHookDirect(const struct FVector& Offset);
	void OnComponentStart();
	void AnimNotify_PlayMontage();
	void InterfaceManipulateInteractDirection(float 角度);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintInitializeAnimation();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_9C70E8254D0EAC25ED9262AE4741EA01();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_29ED077D4A98A4CA0111C685D4416D03();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_FDBBD5E7477AD7967C489DA71407AA47();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_489651114DF56F56400B5085D579A175();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_2178FF404602F078D81CDF8AB475F43F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_6917C8F64FE3C0CDC8A3E6A7ED7D503C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_0965F59C484C38E57DB2959A3E4DB3D7();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_C0B8FDED431127A2A5FDC1A72CAE78C2();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TextureFace_C2CE9AB24BDEE4700DCED0ADCBA33FA8();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_2C6793D9468B9D59C335F9B7E06CA14C();
	void OnNotifyEnd_712E5DC7440577B25761868E65201677(class FName NotifyName);
	void OnNotifyBegin_712E5DC7440577B25761868E65201677(class FName NotifyName);
	void OnInterrupted_712E5DC7440577B25761868E65201677(class FName NotifyName);
	void OnBlendOut_712E5DC7440577B25761868E65201677(class FName NotifyName);
	void OnCompleted_712E5DC7440577B25761868E65201677(class FName NotifyName);
	void 更新角色信息();
	void 更新视线();
	void 更新角色碰撞();
	void 更新角色移动();
	void 更新角色转身();
	void 是否AI驱动(bool* Result);
	void HasInputRotate(bool* Output_Get);
	void 更新眨眼();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void 基础层(struct FPoseLink* 基础层_0);
	void InterfaceJumpPressed(float* Speed);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_BaseNPC_C">();
	}
	static class UABP_BaseNPC_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_BaseNPC_C>();
	}
};
static_assert(alignof(UABP_BaseNPC_C) == 0x000010, "Wrong alignment on UABP_BaseNPC_C");
static_assert(sizeof(UABP_BaseNPC_C) == 0x0022D0, "Wrong size on UABP_BaseNPC_C");
static_assert(offsetof(UABP_BaseNPC_C, UberGraphFrame) == 0x000750, "Member 'UABP_BaseNPC_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Root_1) == 0x000758, "Member 'UABP_BaseNPC_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Slot_5) == 0x000790, "Member 'UABP_BaseNPC_C::AnimGraphNode_Slot_5' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Inertialization) == 0x0007F0, "Member 'UABP_BaseNPC_C::AnimGraphNode_Inertialization' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_13) == 0x000860, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_12) == 0x000888, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_11) == 0x0008B0, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_10) == 0x0008D8, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_9) == 0x000900, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_8) == 0x000928, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_7) == 0x000950, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_11) == 0x0009E0, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_11' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_6) == 0x000A18, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_10) == 0x000AA8, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_10' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_5) == 0x000AE0, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_9) == 0x000B70, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_BlendSpacePlayer_1) == 0x000BA8, "Member 'UABP_BaseNPC_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_8) == 0x000CA0, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_7) == 0x000CD8, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_6) == 0x000D00, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_5) == 0x000D28, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_4) == 0x000D50, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_3) == 0x000D78, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_2) == 0x000DA0, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_1) == 0x000DC8, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult) == 0x000DF0, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_4) == 0x000E18, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_7) == 0x000EA8, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_3) == 0x000EE0, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_6) == 0x000F70, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_2) == 0x000FA8, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_5) == 0x001038, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_1) == 0x001070, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_4) == 0x001100, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateMachine_3) == 0x001138, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateMachine_3' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_3) == 0x001280, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_BlendSpacePlayer) == 0x0012B8, "Member 'UABP_BaseNPC_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_2) == 0x0013B0, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateMachine_2) == 0x0013E8, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateMachine_2' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_1) == 0x001530, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateMachine_1) == 0x001568, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult) == 0x0016B0, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateMachine) == 0x0016E8, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Slot_4) == 0x001830, "Member 'UABP_BaseNPC_C::AnimGraphNode_Slot_4' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_ApplyAdditive_1) == 0x001890, "Member 'UABP_BaseNPC_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Slot_3) == 0x001968, "Member 'UABP_BaseNPC_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_ApplyAdditive) == 0x0019C8, "Member 'UABP_BaseNPC_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Root) == 0x001AA0, "Member 'UABP_BaseNPC_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_LinkedAnimLayer) == 0x001AD8, "Member 'UABP_BaseNPC_C::AnimGraphNode_LinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Slot_2) == 0x001B98, "Member 'UABP_BaseNPC_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SightLock) == 0x001BF8, "Member 'UABP_BaseNPC_C::AnimGraphNode_SightLock' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_LocalToComponentSpace) == 0x001DC8, "Member 'UABP_BaseNPC_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_ComponentToLocalSpace) == 0x001DE8, "Member 'UABP_BaseNPC_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_RBF) == 0x001E10, "Member 'UABP_BaseNPC_C::AnimGraphNode_RBF' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_CombineCurves_1) == 0x001F60, "Member 'UABP_BaseNPC_C::AnimGraphNode_CombineCurves_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_CombineCurves) == 0x001FC0, "Member 'UABP_BaseNPC_C::AnimGraphNode_CombineCurves' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer) == 0x002020, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Slot_1) == 0x0020B0, "Member 'UABP_BaseNPC_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Slot) == 0x002110, "Member 'UABP_BaseNPC_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TextureFace) == 0x002170, "Member 'UABP_BaseNPC_C::AnimGraphNode_TextureFace' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 角色蓝图) == 0x002238, "Member 'UABP_BaseNPC_C::角色蓝图' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 移动输入向量) == 0x002240, "Member 'UABP_BaseNPC_C::移动输入向量' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 速度) == 0x00224C, "Member 'UABP_BaseNPC_C::速度' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 是否有移动输入) == 0x002250, "Member 'UABP_BaseNPC_C::是否有移动输入' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, ifPlayIdleAction) == 0x002251, "Member 'UABP_BaseNPC_C::ifPlayIdleAction' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, IdleMontageArray) == 0x002258, "Member 'UABP_BaseNPC_C::IdleMontageArray' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 角色Mesh) == 0x002268, "Member 'UABP_BaseNPC_C::角色Mesh' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 是否原地转身) == 0x002270, "Member 'UABP_BaseNPC_C::是否原地转身' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 旋转角度差值) == 0x002274, "Member 'UABP_BaseNPC_C::旋转角度差值' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 上一次旋转角度) == 0x002278, "Member 'UABP_BaseNPC_C::上一次旋转角度' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, SightDirect) == 0x00227C, "Member 'UABP_BaseNPC_C::SightDirect' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, IsBeingImpacted) == 0x002288, "Member 'UABP_BaseNPC_C::IsBeingImpacted' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, IsBeingAttacked) == 0x002289, "Member 'UABP_BaseNPC_C::IsBeingAttacked' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, SightLockMode) == 0x00228A, "Member 'UABP_BaseNPC_C::SightLockMode' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 走跑混合) == 0x00228C, "Member 'UABP_BaseNPC_C::走跑混合' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, IsTurnLeft) == 0x002290, "Member 'UABP_BaseNPC_C::IsTurnLeft' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 角色旋转) == 0x002294, "Member 'UABP_BaseNPC_C::角色旋转' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, NpcEntityId) == 0x0022A0, "Member 'UABP_BaseNPC_C::NpcEntityId' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, CollisionStrength) == 0x0022A4, "Member 'UABP_BaseNPC_C::CollisionStrength' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, CollisionDirection) == 0x0022A8, "Member 'UABP_BaseNPC_C::CollisionDirection' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, RandomEpresionEndTime) == 0x0022AC, "Member 'UABP_BaseNPC_C::RandomEpresionEndTime' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 眨眼动画时长) == 0x0022B0, "Member 'UABP_BaseNPC_C::眨眼动画时长' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 此轮眨眼动画总时长) == 0x0022B4, "Member 'UABP_BaseNPC_C::此轮眨眼动画总时长' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, ExpresionAlpha) == 0x0022B8, "Member 'UABP_BaseNPC_C::ExpresionAlpha' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 眨眼中) == 0x0022BC, "Member 'UABP_BaseNPC_C::眨眼中' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, Cache原地转身) == 0x0022BD, "Member 'UABP_BaseNPC_C::Cache原地转身' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, 口型曲线) == 0x0022C0, "Member 'UABP_BaseNPC_C::口型曲线' has a wrong offset!");

}

