#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsAnimNotifyStatePositionTarget

#include "Basic.hpp"

#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsAnimNotifyStatePositionTarget.TsAnimNotifyStatePositionTarget_C
// 0x0020 (0x0068 - 0x0048)
class UTsAnimNotifyStatePositionTarget_C final : public UKuroAnimNotifyState
{
public:
	float                                         最大速度;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            速度变化曲线;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         最小距离;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          达成条件后终止逻辑;                                // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         经过时间;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          终止逻辑;                                          // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	bool K2_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	bool K2_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	bool K2_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	void Init();

	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsAnimNotifyStatePositionTarget_C">();
	}
	static class UTsAnimNotifyStatePositionTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsAnimNotifyStatePositionTarget_C>();
	}
};
static_assert(alignof(UTsAnimNotifyStatePositionTarget_C) == 0x000008, "Wrong alignment on UTsAnimNotifyStatePositionTarget_C");
static_assert(sizeof(UTsAnimNotifyStatePositionTarget_C) == 0x000068, "Wrong size on UTsAnimNotifyStatePositionTarget_C");
static_assert(offsetof(UTsAnimNotifyStatePositionTarget_C, 最大速度) == 0x000048, "Member 'UTsAnimNotifyStatePositionTarget_C::最大速度' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionTarget_C, 速度变化曲线) == 0x000050, "Member 'UTsAnimNotifyStatePositionTarget_C::速度变化曲线' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionTarget_C, 最小距离) == 0x000058, "Member 'UTsAnimNotifyStatePositionTarget_C::最小距离' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionTarget_C, 达成条件后终止逻辑) == 0x00005C, "Member 'UTsAnimNotifyStatePositionTarget_C::达成条件后终止逻辑' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionTarget_C, 经过时间) == 0x000060, "Member 'UTsAnimNotifyStatePositionTarget_C::经过时间' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStatePositionTarget_C, 终止逻辑) == 0x000064, "Member 'UTsAnimNotifyStatePositionTarget_C::终止逻辑' has a wrong offset!");

}

