#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Portal

#include "Basic.hpp"

#include "BP_Portal_classes.hpp"
#include "BP_Portal_parameters.hpp"


namespace SDK
{

// Function BP_Portal.BP_Portal_C.ExecuteUbergraph_BP_Portal
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Portal_C::ExecuteUbergraph_BP_Portal(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "ExecuteUbergraph_BP_Portal");

	Params::BP_Portal_C_ExecuteUbergraph_BP_Portal Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Portal.BP_Portal_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Portal_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Portal.BP_Portal_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Portal_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "ReceiveTick");

	Params::BP_Portal_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Portal.BP_Portal_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Portal_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Portal.BP_Portal_C.DEBUG_开启1
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Portal_C::DEBUG_开启1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "DEBUG_开启1");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Portal.BP_Portal_C.SetPortal1Bounds
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Bounds                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Portal_C::SetPortal1Bounds(const struct FVector& Bounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "SetPortal1Bounds");

	Params::BP_Portal_C_SetPortal1Bounds Parms{};

	Parms.Bounds = std::move(Bounds);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Portal.BP_Portal_C.SetPortal2Bounds
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Bounds                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Portal_C::SetPortal2Bounds(const struct FVector& Bounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "SetPortal2Bounds");

	Params::BP_Portal_C_SetPortal2Bounds Parms{};

	Parms.Bounds = std::move(Bounds);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Portal.BP_Portal_C.SetPortal1Transform
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransformDouble&          Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FTransformDouble&          CaptureTransform                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_Portal_C::SetPortal1Transform(const struct FTransformDouble& Transform, const struct FTransformDouble& CaptureTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "SetPortal1Transform");

	Params::BP_Portal_C_SetPortal1Transform Parms{};

	Parms.Transform = std::move(Transform);
	Parms.CaptureTransform = std::move(CaptureTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Portal.BP_Portal_C.SetPortal2Transform
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransformDouble&          Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FTransformDouble&          CaptureTransform                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_Portal_C::SetPortal2Transform(const struct FTransformDouble& Transform, const struct FTransformDouble& CaptureTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "SetPortal2Transform");

	Params::BP_Portal_C_SetPortal2Transform Parms{};

	Parms.Transform = std::move(Transform);
	Parms.CaptureTransform = std::move(CaptureTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Portal.BP_Portal_C.EnablePortal1Rendering
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Portal_C::EnablePortal1Rendering()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "EnablePortal1Rendering");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Portal.BP_Portal_C.DisablePortal1Rendering
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Portal_C::DisablePortal1Rendering()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "DisablePortal1Rendering");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Portal.BP_Portal_C.EnablePortal2Rendering
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Portal_C::EnablePortal2Rendering()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "EnablePortal2Rendering");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Portal.BP_Portal_C.DisablePortal2Rendering
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Portal_C::DisablePortal2Rendering()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "DisablePortal2Rendering");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Portal.BP_Portal_C.DEBUG_开启2
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Portal_C::DEBUG_开启2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "DEBUG_开启2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Portal.BP_Portal_C.DEBUG_关闭1
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Portal_C::DEBUG_关闭1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "DEBUG_关闭1");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Portal.BP_Portal_C.DEBUG_关闭2
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Portal_C::DEBUG_关闭2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "DEBUG_关闭2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Portal.BP_Portal_C.SetCaptureShowingActors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCapture1                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class AActor*>&                  HiddenActors                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class AActor*>&                  ForceShowActors                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_Portal_C::SetCaptureShowingActors(bool IsCapture1, TArray<class AActor*>& HiddenActors, TArray<class AActor*>& ForceShowActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "SetCaptureShowingActors");

	Params::BP_Portal_C_SetCaptureShowingActors Parms{};

	Parms.IsCapture1 = IsCapture1;
	Parms.HiddenActors = std::move(HiddenActors);
	Parms.ForceShowActors = std::move(ForceShowActors);

	UObject::ProcessEvent(Func, &Parms);

	HiddenActors = std::move(Parms.HiddenActors);
	ForceShowActors = std::move(Parms.ForceShowActors);
}


// Function BP_Portal.BP_Portal_C.SetCaptureMaxViewDistance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCapture1                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   MaxViewDistance                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Portal_C::SetCaptureMaxViewDistance(bool IsCapture1, float MaxViewDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "SetCaptureMaxViewDistance");

	Params::BP_Portal_C_SetCaptureMaxViewDistance Parms{};

	Parms.IsCapture1 = IsCapture1;
	Parms.MaxViewDistance = MaxViewDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Portal.BP_Portal_C.GetCaptureShowFlags
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCapture1                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TMap<class FString, bool>*              ShowFlags                                              (Parm, OutParm)

void ABP_Portal_C::GetCaptureShowFlags(bool IsCapture1, TMap<class FString, bool>* ShowFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "GetCaptureShowFlags");

	Params::BP_Portal_C_GetCaptureShowFlags Parms{};

	Parms.IsCapture1 = IsCapture1;

	UObject::ProcessEvent(Func, &Parms);

	if (ShowFlags != nullptr)
		*ShowFlags = std::move(Parms.ShowFlags);
}


// Function BP_Portal.BP_Portal_C.SetCaptureShowFlags
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCapture1                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const TMap<class FString, bool>&        ShowFlags                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_Portal_C::SetCaptureShowFlags(bool IsCapture1, const TMap<class FString, bool>& ShowFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "SetCaptureShowFlags");

	Params::BP_Portal_C_SetCaptureShowFlags Parms{};

	Parms.IsCapture1 = IsCapture1;
	Parms.ShowFlags = std::move(ShowFlags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Portal.BP_Portal_C.UpdatePortalAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ShowLen                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeLen                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsShown                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UCurveFloat*                      ShowCurve                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      FadeCurve                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Counter                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMeshComponent*             SM                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMeshComponent*             DMI                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  OutputCounter                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Factor                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Portal_C::UpdatePortalAnimation(float ShowLen, float FadeLen, bool IsShown, class UCurveFloat* ShowCurve, class UCurveFloat* FadeCurve, float Counter, class UStaticMeshComponent* SM, class UStaticMeshComponent* DMI, float* OutputCounter, float* Factor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "UpdatePortalAnimation");

	Params::BP_Portal_C_UpdatePortalAnimation Parms{};

	Parms.ShowLen = ShowLen;
	Parms.FadeLen = FadeLen;
	Parms.IsShown = IsShown;
	Parms.ShowCurve = ShowCurve;
	Parms.FadeCurve = FadeCurve;
	Parms.Counter = Counter;
	Parms.SM = SM;
	Parms.DMI = DMI;

	UObject::ProcessEvent(Func, &Parms);

	if (OutputCounter != nullptr)
		*OutputCounter = Parms.OutputCounter;

	if (Factor != nullptr)
		*Factor = Parms.Factor;
}


// Function BP_Portal.BP_Portal_C.UpdatePortalsCameraPosition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Portal_C::UpdatePortalsCameraPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "UpdatePortalsCameraPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Portal.BP_Portal_C.GetMappingTransformToOtherPortal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransformDouble&          SourceTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    bA2B                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransformDouble*                TargetTransform                                        (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_Portal_C::GetMappingTransformToOtherPortal(const struct FTransformDouble& SourceTransform, bool bA2B, struct FTransformDouble* TargetTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "GetMappingTransformToOtherPortal");

	Params::BP_Portal_C_GetMappingTransformToOtherPortal Parms{};

	Parms.SourceTransform = std::move(SourceTransform);
	Parms.bA2B = bA2B;

	UObject::ProcessEvent(Func, &Parms);

	if (TargetTransform != nullptr)
		*TargetTransform = std::move(Parms.TargetTransform);
}


// Function BP_Portal.BP_Portal_C.DrawDebugFrustum
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransformDouble&          Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   FovX                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NearClipPlane                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AspectRatio                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Portal_C::DrawDebugFrustum(const struct FTransformDouble& Transform, float FovX, float NearClipPlane, float AspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "DrawDebugFrustum");

	Params::BP_Portal_C_DrawDebugFrustum Parms{};

	Parms.Transform = std::move(Transform);
	Parms.FovX = FovX;
	Parms.NearClipPlane = NearClipPlane;
	Parms.AspectRatio = AspectRatio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Portal.BP_Portal_C.GetAngleBetweenVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   Vector1                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Vector2                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Portal_C::GetAngleBetweenVector(const struct FVector& Vector1, const struct FVector& Vector2, float* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "GetAngleBetweenVector");

	Params::BP_Portal_C_GetAngleBetweenVector Parms{};

	Parms.Vector1 = std::move(Vector1);
	Parms.Vector2 = std::move(Vector2);

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function BP_Portal.BP_Portal_C.ApplyCapturePerformace
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPortalA                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ConfigLevel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CaptureMaxViewDistance                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Portal_C::ApplyCapturePerformace(bool IsPortalA, int32 ConfigLevel, float CaptureMaxViewDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "ApplyCapturePerformace");

	Params::BP_Portal_C_ApplyCapturePerformace Parms{};

	Parms.IsPortalA = IsPortalA;
	Parms.ConfigLevel = ConfigLevel;
	Parms.CaptureMaxViewDistance = CaptureMaxViewDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Portal.BP_Portal_C.CheckCapturePerformanceLevel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isPortalA                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FTransformDouble&          targetTrans                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_Portal_C::CheckCapturePerformanceLevel(bool isPortalA, const struct FTransformDouble& targetTrans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "CheckCapturePerformanceLevel");

	Params::BP_Portal_C_CheckCapturePerformanceLevel Parms{};

	Parms.isPortalA = isPortalA;
	Parms.targetTrans = std::move(targetTrans);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Portal.BP_Portal_C.PrintDebugCaptureParams
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCapture1                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FSceneCaptureComponent2DParams&CaptureParam                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_Portal_C::PrintDebugCaptureParams(bool IsCapture1, const struct FSceneCaptureComponent2DParams& CaptureParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "PrintDebugCaptureParams");

	Params::BP_Portal_C_PrintDebugCaptureParams Parms{};

	Parms.IsCapture1 = IsCapture1;
	Parms.CaptureParam = std::move(CaptureParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Portal.BP_Portal_C.DrawDebugPortalBounds
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPortal1                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Portal_C::DrawDebugPortalBounds(bool IsPortal1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Portal_C", "DrawDebugPortalBounds");

	Params::BP_Portal_C_DrawDebugPortalBounds Parms{};

	Parms.IsPortal1 = IsPortal1;

	UObject::ProcessEvent(Func, &Parms);
}

}

