#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ApexDestruction

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "ApexDestruction_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class ApexDestruction.DestructibleActor
// 0x0018 (0x02C8 - 0x02B0)
class ADestructibleActor final : public AActor
{
public:
	class UDestructibleComponent*                 DestructibleComponent;                             // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const struct FVector& HitPoint, const struct FVector& HitDirection)> OnActorFracture; // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructibleActor">();
	}
	static class ADestructibleActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADestructibleActor>();
	}
};
static_assert(alignof(ADestructibleActor) == 0x000008, "Wrong alignment on ADestructibleActor");
static_assert(sizeof(ADestructibleActor) == 0x0002C8, "Wrong size on ADestructibleActor");
static_assert(offsetof(ADestructibleActor, DestructibleComponent) == 0x0002B0, "Member 'ADestructibleActor::DestructibleComponent' has a wrong offset!");
static_assert(offsetof(ADestructibleActor, OnActorFracture) == 0x0002B8, "Member 'ADestructibleActor::OnActorFracture' has a wrong offset!");

// Class ApexDestruction.DestructibleComponent
// 0x00E0 (0x08F0 - 0x0810)
class UDestructibleComponent final : public USkinnedMeshComponent
{
public:
	uint8                                         bFractureEffectOverride : 1;                       // 0x0810(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_811[0x7];                                      // 0x0811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFractureEffect>                FractureEffects;                                   // 0x0818(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEnableHardSleeping;                               // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_829[0x3];                                      // 0x0829(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LargeChunkThreshold;                               // 0x082C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_830[0x10];                                     // 0x0830(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FVector& HitPoint, const struct FVector& HitDirection)> OnComponentFracture; // 0x0840(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_850[0xA0];                                     // 0x0850(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddForceToChunk(const struct FVector& Force, bool bAccelChange);
	void ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength);
	void ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
	void D_ApplyDamage(float DamageAmount, const struct FVectorDouble& HitLocation, const struct FVectorDouble& ImpulseDir, float ImpulseStrength);
	void D_ApplyRadiusDamage(float BaseDamage, const struct FVectorDouble& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
	class UDestructibleMesh* GetDestructibleMesh();
	void SetDestructibleMesh(class UDestructibleMesh* NewMesh);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructibleComponent">();
	}
	static class UDestructibleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructibleComponent>();
	}
};
static_assert(alignof(UDestructibleComponent) == 0x000010, "Wrong alignment on UDestructibleComponent");
static_assert(sizeof(UDestructibleComponent) == 0x0008F0, "Wrong size on UDestructibleComponent");
static_assert(offsetof(UDestructibleComponent, FractureEffects) == 0x000818, "Member 'UDestructibleComponent::FractureEffects' has a wrong offset!");
static_assert(offsetof(UDestructibleComponent, bEnableHardSleeping) == 0x000828, "Member 'UDestructibleComponent::bEnableHardSleeping' has a wrong offset!");
static_assert(offsetof(UDestructibleComponent, LargeChunkThreshold) == 0x00082C, "Member 'UDestructibleComponent::LargeChunkThreshold' has a wrong offset!");
static_assert(offsetof(UDestructibleComponent, OnComponentFracture) == 0x000840, "Member 'UDestructibleComponent::OnComponentFracture' has a wrong offset!");

// Class ApexDestruction.DestructibleFractureSettings
// 0x0090 (0x00C0 - 0x0030)
class UDestructibleFractureSettings final : public UObject
{
public:
	int32                                         CellSiteCount;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFractureMaterial                      FractureMaterialDesc;                              // 0x0034(0x0024)(Edit, Transient, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        VoronoiSites;                                      // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OriginalSubmeshCount;                              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDestructibleChunkParameters>   ChunkParameters;                                   // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x28];                                      // 0x0098(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructibleFractureSettings">();
	}
	static class UDestructibleFractureSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructibleFractureSettings>();
	}
};
static_assert(alignof(UDestructibleFractureSettings) == 0x000008, "Wrong alignment on UDestructibleFractureSettings");
static_assert(sizeof(UDestructibleFractureSettings) == 0x0000C0, "Wrong size on UDestructibleFractureSettings");
static_assert(offsetof(UDestructibleFractureSettings, CellSiteCount) == 0x000030, "Member 'UDestructibleFractureSettings::CellSiteCount' has a wrong offset!");
static_assert(offsetof(UDestructibleFractureSettings, FractureMaterialDesc) == 0x000034, "Member 'UDestructibleFractureSettings::FractureMaterialDesc' has a wrong offset!");
static_assert(offsetof(UDestructibleFractureSettings, RandomSeed) == 0x000058, "Member 'UDestructibleFractureSettings::RandomSeed' has a wrong offset!");
static_assert(offsetof(UDestructibleFractureSettings, VoronoiSites) == 0x000060, "Member 'UDestructibleFractureSettings::VoronoiSites' has a wrong offset!");
static_assert(offsetof(UDestructibleFractureSettings, OriginalSubmeshCount) == 0x000070, "Member 'UDestructibleFractureSettings::OriginalSubmeshCount' has a wrong offset!");
static_assert(offsetof(UDestructibleFractureSettings, Materials) == 0x000078, "Member 'UDestructibleFractureSettings::Materials' has a wrong offset!");
static_assert(offsetof(UDestructibleFractureSettings, ChunkParameters) == 0x000088, "Member 'UDestructibleFractureSettings::ChunkParameters' has a wrong offset!");

// Class ApexDestruction.DestructibleMesh
// 0x00A8 (0x0548 - 0x04A0)
class UDestructibleMesh final : public USkeletalMesh
{
public:
	struct FDestructibleParameters                DefaultDestructibleParameters;                     // 0x04A0(0x0088)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FFractureEffect>                FractureEffects;                                   // 0x0528(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMeshProxy;                                   // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_540[0x8];                                      // 0x0540(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructibleMesh">();
	}
	static class UDestructibleMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructibleMesh>();
	}
};
static_assert(alignof(UDestructibleMesh) == 0x000008, "Wrong alignment on UDestructibleMesh");
static_assert(sizeof(UDestructibleMesh) == 0x000548, "Wrong size on UDestructibleMesh");
static_assert(offsetof(UDestructibleMesh, DefaultDestructibleParameters) == 0x0004A0, "Member 'UDestructibleMesh::DefaultDestructibleParameters' has a wrong offset!");
static_assert(offsetof(UDestructibleMesh, FractureEffects) == 0x000528, "Member 'UDestructibleMesh::FractureEffects' has a wrong offset!");
static_assert(offsetof(UDestructibleMesh, StaticMeshProxy) == 0x000538, "Member 'UDestructibleMesh::StaticMeshProxy' has a wrong offset!");

}

