#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LGUI

#include "Basic.hpp"

#include "LGUI_classes.hpp"
#include "LGUI_parameters.hpp"


namespace SDK
{

// Function LGUI.UIItem.GetAllAttachUIChildren
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UUIItem*>*                 OutArray                                               (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UUIItem::GetAllAttachUIChildren(TArray<class UUIItem*>* OutArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAllAttachUIChildren");

	Params::UIItem_GetAllAttachUIChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutArray != nullptr)
		*OutArray = std::move(Parms.OutArray);
}


// Function LGUI.UIItem.GetLGUISpaceAbsolutePosition
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UUIItem::GetLGUISpaceAbsolutePosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLGUISpaceAbsolutePosition");

	Params::UIItem_GetLGUISpaceAbsolutePosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLGUISpaceAbsolutePositionByPivot
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector2D&                 Pivot                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UUIItem::GetLGUISpaceAbsolutePositionByPivot(const struct FVector2D& Pivot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLGUISpaceAbsolutePositionByPivot");

	Params::UIItem_GetLGUISpaceAbsolutePositionByPivot Parms{};

	Parms.Pivot = std::move(Pivot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLGUISpaceCenterAbsolutePosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UUIItem::GetLGUISpaceCenterAbsolutePosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLGUISpaceCenterAbsolutePosition");

	Params::UIItem_GetLGUISpaceCenterAbsolutePosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetOverlapWith
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::GetOverlapWith(class UUIItem* UIItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetOverlapWith");

	Params::UIItem_GetOverlapWith Parms{};

	Parms.UIItem = UIItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetParentAsUIItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* UUIItem::GetParentAsUIItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetParentAsUIItem");

	Params::UIItem_GetParentAsUIItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetPositionInScreen
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    bIsScaledByDPI                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetPositionInScreen(bool bIsScaledByDPI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetPositionInScreen");

	Params::UIItem_GetPositionInScreen Parms{};

	Parms.bIsScaledByDPI = bIsScaledByDPI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetPositionInViewPort
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    bIsScaledByDPI                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetPositionInViewPort(bool bIsScaledByDPI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetPositionInViewPort");

	Params::UIItem_GetPositionInViewPort Parms{};

	Parms.bIsScaledByDPI = bIsScaledByDPI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetRenderCanvas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUICanvas*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvas* UUIItem::GetRenderCanvas()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetRenderCanvas");

	Params::UIItem_GetRenderCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetUIWorldPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIItem::GetUIWorldPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetUIWorldPosition");

	Params::UIItem_GetUIWorldPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.IsBoundOutOfScreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::IsBoundOutOfScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "IsBoundOutOfScreen");

	Params::UIItem_IsBoundOutOfScreen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.IsRenderTargetUI
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::IsRenderTargetUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "IsRenderTargetUI");

	Params::UIItem_IsRenderTargetUI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.IsScreenSpaceOverlayUI
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::IsScreenSpaceOverlayUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "IsScreenSpaceOverlayUI");

	Params::UIItem_IsScreenSpaceOverlayUI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.IsWorldSpaceUI
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::IsWorldSpaceUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "IsWorldSpaceUI");

	Params::UIItem_IsWorldSpaceUI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.PlayUIItemAlphaTween
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   StartValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::PlayUIItemAlphaTween(float StartValue, float EndValue, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "PlayUIItemAlphaTween");

	Params::UIItem_PlayUIItemAlphaTween Parms{};

	Parms.StartValue = StartValue;
	Parms.EndValue = EndValue;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.PlayUIItemScaleTween
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   StartValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::PlayUIItemScaleTween(float StartValue, float EndValue, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "PlayUIItemScaleTween");

	Params::UIItem_PlayUIItemScaleTween Parms{};

	Parms.StartValue = StartValue;
	Parms.EndValue = EndValue;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.ReverseChildrenIndex
// (Final, Native, Public, BlueprintCallable)

void UUIItem::ReverseChildrenIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "ReverseChildrenIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newAlpha                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAlpha(float newAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAlpha");

	Params::UIItem_SetAlpha Parms{};

	Parms.newAlpha = newAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchorAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIAnchorHorizontalAlign                HAlign                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIAnchorVerticalAlign                  VAlign                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorAlign(EUIAnchorHorizontalAlign HAlign, EUIAnchorVerticalAlign VAlign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorAlign");

	Params::UIItem_SetAnchorAlign Parms{};

	Parms.HAlign = HAlign;
	Parms.VAlign = VAlign;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchorHAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIAnchorHorizontalAlign                align                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorHAlign(EUIAnchorHorizontalAlign align)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorHAlign");

	Params::UIItem_SetAnchorHAlign Parms{};

	Parms.align = align;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchorOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorOffset(const struct FVector2D& NewOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorOffset");

	Params::UIItem_SetAnchorOffset Parms{};

	Parms.NewOffset = std::move(NewOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchorOffsetX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorOffsetX(float NewOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorOffsetX");

	Params::UIItem_SetAnchorOffsetX Parms{};

	Parms.NewOffset = NewOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchorOffsetY
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorOffsetY(float NewOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorOffsetY");

	Params::UIItem_SetAnchorOffsetY Parms{};

	Parms.NewOffset = NewOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchorVAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIAnchorVerticalAlign                  align                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorVAlign(EUIAnchorVerticalAlign align)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorVAlign");

	Params::UIItem_SetAnchorVAlign Parms{};

	Parms.align = align;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAsFirstHierarchy
// (Final, Native, Public, BlueprintCallable)

void UUIItem::SetAsFirstHierarchy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAsFirstHierarchy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAsLastHierarchy
// (Final, Native, Public, BlueprintCallable)

void UUIItem::SetAsLastHierarchy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAsLastHierarchy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetBubbleUpToParent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewBool                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetBubbleUpToParent(bool NewBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetBubbleUpToParent");

	Params::UIItem_SetBubbleUpToParent Parms{};

	Parms.NewBool = NewBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetChangeColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    bUseChangeColor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    NewColor                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetChangeColor(bool bUseChangeColor, const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetChangeColor");

	Params::UIItem_SetChangeColor Parms{};

	Parms.bUseChangeColor = bUseChangeColor;
	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetColor");

	Params::UIItem_SetColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   depth                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    propagateToChildren                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetDepth(int32 depth, bool propagateToChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetDepth");

	Params::UIItem_SetDepth Parms{};

	Parms.depth = depth;
	Parms.propagateToChildren = propagateToChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetDisplayName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetDisplayName(const class FString& InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetDisplayName");

	Params::UIItem_SetDisplayName Parms{};

	Parms.InName = std::move(InName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewHeight                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetHeight(float NewHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetHeight");

	Params::UIItem_SetHeight Parms{};

	Parms.NewHeight = NewHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetHierarchyIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InInt                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetHierarchyIndex(int32 InInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetHierarchyIndex");

	Params::UIItem_SetHierarchyIndex Parms{};

	Parms.InInt = InInt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetHorizontalStretch
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 newStretch                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetHorizontalStretch(const struct FVector2D& newStretch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetHorizontalStretch");

	Params::UIItem_SetHorizontalStretch Parms{};

	Parms.newStretch = std::move(newStretch);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetIsUIActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    active                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetIsUIActive(bool active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetIsUIActive");

	Params::UIItem_SetIsUIActive Parms{};

	Parms.active = active;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetLGUISpaceAbsolutePosition
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Pos                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetLGUISpaceAbsolutePosition(const struct FVector& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetLGUISpaceAbsolutePosition");

	Params::UIItem_SetLGUISpaceAbsolutePosition Parms{};

	Parms.Pos = std::move(Pos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetPivot
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewPivot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetPivot(const struct FVector2D& NewPivot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetPivot");

	Params::UIItem_SetPivot Parms{};

	Parms.NewPivot = std::move(NewPivot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetPivot_Raw
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewPivot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAdjustLocation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetPivot_Raw(const struct FVector2D& NewPivot, bool bAdjustLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetPivot_Raw");

	Params::UIItem_SetPivot_Raw Parms{};

	Parms.NewPivot = std::move(NewPivot);
	Parms.bAdjustLocation = bAdjustLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetRaycastTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewBool                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetRaycastTarget(bool NewBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetRaycastTarget");

	Params::UIItem_SetRaycastTarget Parms{};

	Parms.NewBool = NewBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetStretchBottom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newBottom                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetStretchBottom(float newBottom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetStretchBottom");

	Params::UIItem_SetStretchBottom Parms{};

	Parms.newBottom = newBottom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetStretchLeft
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newLeft                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetStretchLeft(float newLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetStretchLeft");

	Params::UIItem_SetStretchLeft Parms{};

	Parms.newLeft = newLeft;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetStretchRight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newRight                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetStretchRight(float newRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetStretchRight");

	Params::UIItem_SetStretchRight Parms{};

	Parms.newRight = newRight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetStretchTop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newTop                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetStretchTop(float newTop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetStretchTop");

	Params::UIItem_SetStretchTop Parms{};

	Parms.newTop = newTop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetTraceChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETraceTypeQuery                         InTraceChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetTraceChannel(ETraceTypeQuery InTraceChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetTraceChannel");

	Params::UIItem_SetTraceChannel Parms{};

	Parms.InTraceChannel = InTraceChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIActive
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetUIActive(bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIActive");

	Params::UIItem_SetUIActive Parms{};

	Parms.bActive = bActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIItemAlpha
// (Final, Native, Private)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetUIItemAlpha(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIItemAlpha");

	Params::UIItem_SetUIItemAlpha Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIItemScale
// (Final, Native, Private, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetUIItemScale(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIItemScale");

	Params::UIItem_SetUIItemScale Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIParent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          InParent                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    KeepWorldTransform                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetUIParent(class UUIItem* InParent, bool KeepWorldTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIParent");

	Params::UIItem_SetUIParent Parms{};

	Parms.InParent = InParent;
	Parms.KeepWorldTransform = KeepWorldTransform;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIRelativeLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetUIRelativeLocation(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIRelativeLocation");

	Params::UIItem_SetUIRelativeLocation Parms{};

	Parms.NewLocation = std::move(NewLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIRelativeRotation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewRotation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIItem::SetUIRelativeRotation(const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIRelativeRotation");

	Params::UIItem_SetUIRelativeRotation Parms{};

	Parms.NewRotation = std::move(NewRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIRelativeScale3D
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewScale3D                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetUIRelativeScale3D(const struct FVector& NewScale3D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIRelativeScale3D");

	Params::UIItem_SetUIRelativeScale3D Parms{};

	Parms.NewScale3D = std::move(NewScale3D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIRenderAfterBlur
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAfterBlur                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetUIRenderAfterBlur(bool bAfterBlur)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIRenderAfterBlur");

	Params::UIItem_SetUIRenderAfterBlur Parms{};

	Parms.bAfterBlur = bAfterBlur;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIRenderBeforeBloom
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bBeforeBloom                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetUIRenderBeforeBloom(bool bBeforeBloom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIRenderBeforeBloom");

	Params::UIItem_SetUIRenderBeforeBloom Parms{};

	Parms.bBeforeBloom = bBeforeBloom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIRenderBeforeUpScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bBeforeUpScale                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetUIRenderBeforeUpScale(bool bBeforeUpScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIRenderBeforeUpScale");

	Params::UIItem_SetUIRenderBeforeUpScale Parms{};

	Parms.bBeforeUpScale = bBeforeUpScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIWorldLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetUIWorldLocation(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIWorldLocation");

	Params::UIItem_SetUIWorldLocation Parms{};

	Parms.NewLocation = std::move(NewLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIWorldRotation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewRotation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIItem::SetUIWorldRotation(const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIWorldRotation");

	Params::UIItem_SetUIWorldRotation Parms{};

	Parms.NewRotation = std::move(NewRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetUIWorldScale
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewScale                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetUIWorldScale(const struct FVector& NewScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetUIWorldScale");

	Params::UIItem_SetUIWorldScale Parms{};

	Parms.NewScale = std::move(NewScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetVerticalStretch
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 newStretch                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetVerticalStretch(const struct FVector2D& newStretch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetVerticalStretch");

	Params::UIItem_SetVerticalStretch Parms{};

	Parms.newStretch = std::move(newStretch);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetWidget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUIWidget&                 inWidget                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIItem::SetWidget(const struct FUIWidget& inWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetWidget");

	Params::UIItem_SetWidget Parms{};

	Parms.inWidget = std::move(inWidget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewWidth                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetWidth(float NewWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetWidth");

	Params::UIItem_SetWidth Parms{};

	Parms.NewWidth = NewWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.GetAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAlpha");

	Params::UIItem_GetAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchorHAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIAnchorHorizontalAlign                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIAnchorHorizontalAlign UUIItem::GetAnchorHAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchorHAlign");

	Params::UIItem_GetAnchorHAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchorOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetAnchorOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchorOffset");

	Params::UIItem_GetAnchorOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchorOffsetX
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetAnchorOffsetX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchorOffsetX");

	Params::UIItem_GetAnchorOffsetX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchorOffsetY
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetAnchorOffsetY() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchorOffsetY");

	Params::UIItem_GetAnchorOffsetY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchorVAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIAnchorVerticalAlign                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIAnchorVerticalAlign UUIItem::GetAnchorVAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchorVAlign");

	Params::UIItem_GetAnchorVAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAttachUIChild
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* UUIItem::GetAttachUIChild(int32 index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAttachUIChild");

	Params::UIItem_GetAttachUIChild Parms{};

	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAttachUIChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UUIItem*>            ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UUIItem*> UUIItem::GetAttachUIChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAttachUIChildren");

	Params::UIItem_GetAttachUIChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetCalculatedParentAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetCalculatedParentAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetCalculatedParentAlpha");

	Params::UIItem_GetCalculatedParentAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetCalculatedParentColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIItem::GetCalculatedParentColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetCalculatedParentColor");

	Params::UIItem_GetCalculatedParentColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetCanvasScaler
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUICanvasScaler*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvasScaler* UUIItem::GetCanvasScaler() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetCanvasScaler");

	Params::UIItem_GetCanvasScaler Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIItem::GetColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetColor");

	Params::UIItem_GetColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetDepth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIItem::GetDepth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetDepth");

	Params::UIItem_GetDepth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUIItem::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetDisplayName");

	Params::UIItem_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetFlattenHierarchyIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIItem::GetFlattenHierarchyIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetFlattenHierarchyIndex");

	Params::UIItem_GetFlattenHierarchyIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetHeight");

	Params::UIItem_GetHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetHierarchyIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIItem::GetHierarchyIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetHierarchyIndex");

	Params::UIItem_GetHierarchyIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetInheritAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::GetInheritAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetInheritAlpha");

	Params::UIItem_GetInheritAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceBottom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetLocalSpaceBottom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceBottom");

	Params::UIItem_GetLocalSpaceBottom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceCenter
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetLocalSpaceCenter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceCenter");

	Params::UIItem_GetLocalSpaceCenter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetLocalSpaceLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceLeft");

	Params::UIItem_GetLocalSpaceLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceLeftBottomPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetLocalSpaceLeftBottomPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceLeftBottomPoint");

	Params::UIItem_GetLocalSpaceLeftBottomPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceRight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetLocalSpaceRight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceRight");

	Params::UIItem_GetLocalSpaceRight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceRightTopPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetLocalSpaceRightTopPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceRightTopPoint");

	Params::UIItem_GetLocalSpaceRightTopPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceTop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetLocalSpaceTop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceTop");

	Params::UIItem_GetLocalSpaceTop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetPivot
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetPivot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetPivot");

	Params::UIItem_GetPivot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetRootCanvas
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUICanvas*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvas* UUIItem::GetRootCanvas() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetRootCanvas");

	Params::UIItem_GetRootCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetStretchBottom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetStretchBottom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetStretchBottom");

	Params::UIItem_GetStretchBottom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetStretchLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetStretchLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetStretchLeft");

	Params::UIItem_GetStretchLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetStretchRight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetStretchRight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetStretchRight");

	Params::UIItem_GetStretchRight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetStretchTop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetStretchTop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetStretchTop");

	Params::UIItem_GetStretchTop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetTraceChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETraceTypeQuery                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETraceTypeQuery UUIItem::GetTraceChannel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetTraceChannel");

	Params::UIItem_GetTraceChannel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetUIItemType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIItemType                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIItemType UUIItem::GetUIItemType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetUIItemType");

	Params::UIItem_GetUIItemType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUIWidget                  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FUIWidget UUIItem::GetWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetWidget");

	Params::UIItem_GetWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetWidth");

	Params::UIItem_GetWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.IsBubbleUpToParent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::IsBubbleUpToParent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "IsBubbleUpToParent");

	Params::UIItem_IsBubbleUpToParent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.IsRaycastTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::IsRaycastTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "IsRaycastTarget");

	Params::UIItem_IsRaycastTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.IsUIActiveInHierarchy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::IsUIActiveInHierarchy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "IsUIActiveInHierarchy");

	Params::UIItem_IsUIActiveInHierarchy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.IsUIActiveSelf
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::IsUIActiveSelf() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "IsUIActiveSelf");

	Params::UIItem_IsUIActiveSelf Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderable.SetUIRenderAfterBlurPartial
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAfterBlurPartial                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBaseRenderable::SetUIRenderAfterBlurPartial(bool bAfterBlurPartial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "SetUIRenderAfterBlurPartial");

	Params::UIBaseRenderable_SetUIRenderAfterBlurPartial Parms{};

	Parms.bAfterBlurPartial = bAfterBlurPartial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseRenderable.GetUIRenderableType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIRenderableType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIRenderableType UUIBaseRenderable::GetUIRenderableType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "GetUIRenderableType");

	Params::UIBaseRenderable_GetUIRenderableType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UINiagara.ActivateSystem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Reset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINiagara::ActivateSystem(bool Reset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "ActivateSystem");

	Params::UINiagara_ActivateSystem Parms{};

	Parms.Reset = Reset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.DeactivateSystem
// (Final, Native, Public, BlueprintCallable)

void UUINiagara::DeactivateSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "DeactivateSystem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.GetIsActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUINiagara::GetIsActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "GetIsActive");

	Params::UINiagara_GetIsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UINiagara.IsCircleClipEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUINiagara::IsCircleClipEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "IsCircleClipEnable");

	Params::UINiagara_IsCircleClipEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UINiagara.ReinitializeSystem
// (Final, Native, Public, BlueprintCallable)

void UUINiagara::ReinitializeSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "ReinitializeSystem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.ResetOverrideParameters
// (Final, Native, Public, BlueprintCallable)

void UUINiagara::ResetOverrideParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "ResetOverrideParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.ResetOverrideParametersAndActivate
// (Final, Native, Public, BlueprintCallable)

void UUINiagara::ResetOverrideParametersAndActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "ResetOverrideParametersAndActivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.SetCircleClipEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINiagara::SetCircleClipEnable(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "SetCircleClipEnable");

	Params::UINiagara_SetCircleClipEnable Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.SetCircleClipParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCircleClipParameters&     NewCircleClipParameters                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUINiagara::SetCircleClipParameters(const struct FCircleClipParameters& NewCircleClipParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "SetCircleClipParameters");

	Params::UINiagara_SetCircleClipParameters Parms{};

	Parms.NewCircleClipParameters = std::move(NewCircleClipParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.SetNiagaraEmitterCustomTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InEmitterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InVariableName                                         (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         InTexture                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINiagara::SetNiagaraEmitterCustomTexture(const class FString& InEmitterName, const class FString& InVariableName, class UTexture* InTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "SetNiagaraEmitterCustomTexture");

	Params::UINiagara_SetNiagaraEmitterCustomTexture Parms{};

	Parms.InEmitterName = std::move(InEmitterName);
	Parms.InVariableName = std::move(InVariableName);
	Parms.InTexture = InTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.SetNiagaraEmitterFloatParam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InEmitterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InVariableName                                         (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINiagara::SetNiagaraEmitterFloatParam(const class FString& InEmitterName, const class FString& InVariableName, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "SetNiagaraEmitterFloatParam");

	Params::UINiagara_SetNiagaraEmitterFloatParam Parms{};

	Parms.InEmitterName = std::move(InEmitterName);
	Parms.InVariableName = std::move(InVariableName);
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.SetNiagaraEmitterVectorParam
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    InEmitterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InVariableName                                         (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector4&                  InVector                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINiagara::SetNiagaraEmitterVectorParam(const class FString& InEmitterName, const class FString& InVariableName, const struct FVector4& InVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "SetNiagaraEmitterVectorParam");

	Params::UINiagara_SetNiagaraEmitterVectorParam Parms{};

	Parms.InEmitterName = std::move(InEmitterName);
	Parms.InVariableName = std::move(InVariableName);
	Parms.InVector = std::move(InVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.SetNiagaraSystem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UNiagaraSystem*                   InSystem                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINiagara::SetNiagaraSystem(class UNiagaraSystem* InSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "SetNiagaraSystem");

	Params::UINiagara_SetNiagaraSystem Parms{};

	Parms.InSystem = InSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.SetNiagaraUIActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    active                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInResetNiagara                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINiagara::SetNiagaraUIActive(bool active, bool bInResetNiagara)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "SetNiagaraUIActive");

	Params::UINiagara_SetNiagaraUIActive Parms{};

	Parms.active = active;
	Parms.bInResetNiagara = bInResetNiagara;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.SetNiagaraVarFloat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    VarName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINiagara::SetNiagaraVarFloat(const class FString& VarName, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "SetNiagaraVarFloat");

	Params::UINiagara_SetNiagaraVarFloat Parms{};

	Parms.VarName = std::move(VarName);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.SetNiagaraVarLinearColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    VarName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINiagara::SetNiagaraVarLinearColor(const class FString& VarName, const struct FLinearColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "SetNiagaraVarLinearColor");

	Params::UINiagara_SetNiagaraVarLinearColor Parms{};

	Parms.VarName = std::move(VarName);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.SwitchToStop
// (Final, Native, Public, BlueprintCallable)

void UUINiagara::SwitchToStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "SwitchToStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagara.GetCircleClipParameters
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FCircleClipParameters            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCircleClipParameters UUINiagara::GetCircleClipParameters() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagara", "GetCircleClipParameters");

	Params::UINiagara_GetCircleClipParameters Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBehaviour.AwakeBP
// (Event, Protected, BlueprintEvent)

void ULGUIBehaviour::AwakeBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "AwakeBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUIBehaviour.InstantiateActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           OriginObject                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIBehaviour::InstantiateActor(class AActor* OriginObject, class USceneComponent* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "InstantiateActor");

	Params::LGUIBehaviour_InstantiateActor Parms{};

	Parms.OriginObject = OriginObject;
	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBehaviour.InstantiatePrefab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIPrefab*                      OriginObject                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIBehaviour::InstantiatePrefab(class ULGUIPrefab* OriginObject, class USceneComponent* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "InstantiatePrefab");

	Params::LGUIBehaviour_InstantiatePrefab Parms{};

	Parms.OriginObject = OriginObject;
	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBehaviour.InstantiatePrefabWithTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ULGUIPrefab*                      OriginObject                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIBehaviour::InstantiatePrefabWithTransform(class ULGUIPrefab* OriginObject, class USceneComponent* Parent, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "InstantiatePrefabWithTransform");

	Params::LGUIBehaviour_InstantiatePrefabWithTransform Parms{};

	Parms.OriginObject = OriginObject;
	Parms.Parent = Parent;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBehaviour.LateUpdateBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBehaviour::LateUpdateBP(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "LateUpdateBP");

	Params::LGUIBehaviour_LateUpdateBP Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUIBehaviour.OnDestroyBP
// (Event, Protected, BlueprintEvent)

void ULGUIBehaviour::OnDestroyBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "OnDestroyBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUIBehaviour.OnDisableBP
// (Event, Protected, BlueprintEvent)

void ULGUIBehaviour::OnDisableBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "OnDisableBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUIBehaviour.OnEnableBP
// (Event, Protected, BlueprintEvent)

void ULGUIBehaviour::OnEnableBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "OnEnableBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUIBehaviour.OnUIActiveInHierarchyBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    activeOrInactive                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBehaviour::OnUIActiveInHierarchyBP(bool activeOrInactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "OnUIActiveInHierarchyBP");

	Params::LGUIBehaviour_OnUIActiveInHierarchyBP Parms{};

	Parms.activeOrInactive = activeOrInactive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUIBehaviour.OnUIAttachmentChangedBP
// (Event, Protected, BlueprintEvent)

void ULGUIBehaviour::OnUIAttachmentChangedBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "OnUIAttachmentChangedBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUIBehaviour.OnUIChildAcitveInHierarchyBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUIItem*                          child                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ativeOrInactive                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBehaviour::OnUIChildAcitveInHierarchyBP(class UUIItem* child, bool ativeOrInactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "OnUIChildAcitveInHierarchyBP");

	Params::LGUIBehaviour_OnUIChildAcitveInHierarchyBP Parms{};

	Parms.child = child;
	Parms.ativeOrInactive = ativeOrInactive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUIBehaviour.OnUIChildAttachmentChangedBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUIItem*                          child                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    attachOrDetach                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBehaviour::OnUIChildAttachmentChangedBP(class UUIItem* child, bool attachOrDetach)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "OnUIChildAttachmentChangedBP");

	Params::LGUIBehaviour_OnUIChildAttachmentChangedBP Parms{};

	Parms.child = child;
	Parms.attachOrDetach = attachOrDetach;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUIBehaviour.OnUIChildHierarchyIndexChangedBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUIItem*                          child                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBehaviour::OnUIChildHierarchyIndexChangedBP(class UUIItem* child)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "OnUIChildHierarchyIndexChangedBP");

	Params::LGUIBehaviour_OnUIChildHierarchyIndexChangedBP Parms{};

	Parms.child = child;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUIBehaviour.OnUIDimensionsChangedBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    positionChanged                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    sizeChanged                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBehaviour::OnUIDimensionsChangedBP(bool positionChanged, bool sizeChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "OnUIDimensionsChangedBP");

	Params::LGUIBehaviour_OnUIDimensionsChangedBP Parms{};

	Parms.positionChanged = positionChanged;
	Parms.sizeChanged = sizeChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUIBehaviour.OnUIInteractionStateChangedBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    interactableOrNot                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBehaviour::OnUIInteractionStateChangedBP(bool interactableOrNot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "OnUIInteractionStateChangedBP");

	Params::LGUIBehaviour_OnUIInteractionStateChangedBP Parms{};

	Parms.interactableOrNot = interactableOrNot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUIBehaviour.SetEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBehaviour::SetEnable(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "SetEnable");

	Params::LGUIBehaviour_SetEnable Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBehaviour.StartBP
// (Event, Protected, BlueprintEvent)

void ULGUIBehaviour::StartBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "StartBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUIBehaviour.UpdateBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBehaviour::UpdateBP(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "UpdateBP");

	Params::LGUIBehaviour_UpdateBP Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUIBehaviour.CheckRootUIComponent
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIBehaviour::CheckRootUIComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "CheckRootUIComponent");

	Params::LGUIBehaviour_CheckRootUIComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBehaviour.GetEnable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIBehaviour::GetEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "GetEnable");

	Params::LGUIBehaviour_GetEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBehaviour.GetIsActiveAndEnable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIBehaviour::GetIsActiveAndEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "GetIsActiveAndEnable");

	Params::LGUIBehaviour_GetIsActiveAndEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBehaviour.GetRootComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* ULGUIBehaviour::GetRootComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "GetRootComponent");

	Params::LGUIBehaviour_GetRootComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBehaviour.GetRootSceneComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ULGUIBehaviour::GetRootSceneComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBehaviour", "GetRootSceneComponent");

	Params::LGUIBehaviour_GetRootSceneComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISafeZone.SetWidthAndHeightRadio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Left                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Right                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Top                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Bottom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISafeZone::SetWidthAndHeightRadio(float Left, float Right, float Top, float Bottom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISafeZone", "SetWidthAndHeightRadio");

	Params::UISafeZone_SetWidthAndHeightRadio Parms{};

	Parms.Left = Left;
	Parms.Right = Right;
	Parms.Top = Top;
	Parms.Bottom = Bottom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBaseRayEmitter.GetClickThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIBaseRayEmitter::GetClickThreshold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRayEmitter", "GetClickThreshold");

	Params::LGUIBaseRayEmitter_GetClickThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseRayEmitter.GetInitialValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float*                                  OutClickThreshold                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   OutHoldToDrag                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutHoldToDragTime                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBaseRayEmitter::GetInitialValue(float* OutClickThreshold, bool* OutHoldToDrag, float* OutHoldToDragTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRayEmitter", "GetInitialValue");

	Params::LGUIBaseRayEmitter_GetInitialValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClickThreshold != nullptr)
		*OutClickThreshold = Parms.OutClickThreshold;

	if (OutHoldToDrag != nullptr)
		*OutHoldToDrag = Parms.OutHoldToDrag;

	if (OutHoldToDragTime != nullptr)
		*OutHoldToDragTime = Parms.OutHoldToDragTime;
}


// Function LGUI.LGUIBaseRayEmitter.SetClickThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBaseRayEmitter::SetClickThreshold(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRayEmitter", "SetClickThreshold");

	Params::LGUIBaseRayEmitter_SetClickThreshold Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBaseRayEmitter.SetInitialValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InClickThreshold                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InHoldToDrag                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InHoldToDragTime                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBaseRayEmitter::SetInitialValue(float InClickThreshold, bool InHoldToDrag, float InHoldToDragTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRayEmitter", "SetInitialValue");

	Params::LGUIBaseRayEmitter_SetInitialValue Parms{};

	Parms.InClickThreshold = InClickThreshold;
	Parms.InHoldToDrag = InHoldToDrag;
	Parms.InHoldToDragTime = InHoldToDragTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable.ClearCustomMaterialParameterInMap
// (Final, Native, Public, BlueprintCallable)

void UUIBatchGeometryRenderable::ClearCustomMaterialParameterInMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "ClearCustomMaterialParameterInMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable.GetRaycastComplex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIBatchGeometryRenderable::GetRaycastComplex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "GetRaycastComplex");

	Params::UIBatchGeometryRenderable_GetRaycastComplex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBatchGeometryRenderable.SetCustomMaterialScalarParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             paramterName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchGeometryRenderable::SetCustomMaterialScalarParameter(class FName paramterName, float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "SetCustomMaterialScalarParameter");

	Params::UIBatchGeometryRenderable_SetCustomMaterialScalarParameter Parms{};

	Parms.paramterName = paramterName;
	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable.SetCustomMaterialTextureParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchGeometryRenderable::SetCustomMaterialTextureParameter(class FName ParameterName, class UTexture* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "SetCustomMaterialTextureParameter");

	Params::UIBatchGeometryRenderable_SetCustomMaterialTextureParameter Parms{};

	Parms.ParameterName = ParameterName;
	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable.SetCustomMaterialVectorParameter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             paramterName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchGeometryRenderable::SetCustomMaterialVectorParameter(class FName paramterName, const struct FLinearColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "SetCustomMaterialVectorParameter");

	Params::UIBatchGeometryRenderable_SetCustomMaterialVectorParameter Parms{};

	Parms.paramterName = paramterName;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable.SetCustomUIMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               inMat                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchGeometryRenderable::SetCustomUIMaterial(class UMaterialInterface* inMat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "SetCustomUIMaterial");

	Params::UIBatchGeometryRenderable_SetCustomUIMaterial Parms{};

	Parms.inMat = inMat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable.SetIsColorRevert
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchGeometryRenderable::SetIsColorRevert(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "SetIsColorRevert");

	Params::UIBatchGeometryRenderable_SetIsColorRevert Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable.SetIsGray
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchGeometryRenderable::SetIsGray(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "SetIsGray");

	Params::UIBatchGeometryRenderable_SetIsGray Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable.SetIsSelfRender
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchGeometryRenderable::SetIsSelfRender(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "SetIsSelfRender");

	Params::UIBatchGeometryRenderable_SetIsSelfRender Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable.SetKuroRenderingMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         inMat                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchGeometryRenderable::SetKuroRenderingMaterial(class UMaterialInstanceDynamic* inMat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "SetKuroRenderingMaterial");

	Params::UIBatchGeometryRenderable_SetKuroRenderingMaterial Parms{};

	Parms.inMat = inMat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable.SetRaycastComplex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchGeometryRenderable::SetRaycastComplex(bool newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "SetRaycastComplex");

	Params::UIBatchGeometryRenderable_SetRaycastComplex Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable.GetCustomUIMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UUIBatchGeometryRenderable::GetCustomUIMaterial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "GetCustomUIMaterial");

	Params::UIBatchGeometryRenderable_GetCustomUIMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBatchGeometryRenderable.GetIsSelfRender
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIBatchGeometryRenderable::GetIsSelfRender() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "GetIsSelfRender");

	Params::UIBatchGeometryRenderable_GetIsSelfRender Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBatchGeometryRenderable.GetKuroRenderingMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UUIBatchGeometryRenderable::GetKuroRenderingMaterial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "GetKuroRenderingMaterial");

	Params::UIBatchGeometryRenderable_GetKuroRenderingMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBatchGeometryRenderable.GetMaterialInstanceDynamic
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UUIBatchGeometryRenderable::GetMaterialInstanceDynamic() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable", "GetMaterialInstanceDynamic");

	Params::UIBatchGeometryRenderable_GetMaterialInstanceDynamic Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpriteBase.SetSizeFromSpriteData
// (Final, Native, Public, BlueprintCallable)

void UUISpriteBase::SetSizeFromSpriteData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteBase", "SetSizeFromSpriteData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteBase.SetSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUISpriteData_BaseObject*       newSprite                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    setSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpriteBase::SetSprite(class ULGUISpriteData_BaseObject* newSprite, bool setSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteBase", "SetSprite");

	Params::UISpriteBase_SetSprite Parms{};

	Parms.newSprite = newSprite;
	Parms.setSize = setSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteBase.GetSprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* UUISpriteBase::GetSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteBase", "GetSprite");

	Params::UISpriteBase_GetSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UI2DLineRendererBase.LineWidthTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easeType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUI2DLineRendererBase::LineWidthTo(float endValue, float duration, float delay, ELTweenEase easeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "LineWidthTo");

	Params::UI2DLineRendererBase_LineWidthTo Parms{};

	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.easeType = easeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UI2DLineRendererBase.SetEndType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUI2DLineRenderer_EndType               newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUI2DLineRendererBase::SetEndType(EUI2DLineRenderer_EndType newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "SetEndType");

	Params::UI2DLineRendererBase_SetEndType Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UI2DLineRendererBase.SetLineWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUI2DLineRendererBase::SetLineWidth(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "SetLineWidth");

	Params::UI2DLineRendererBase_SetLineWidth Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UI2DLineRendererBase.SetLineWidthOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUI2DLineRendererBase::SetLineWidthOffset(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "SetLineWidthOffset");

	Params::UI2DLineRendererBase_SetLineWidthOffset Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UI2DLineRendererBase.GetEndType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUI2DLineRenderer_EndType               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUI2DLineRenderer_EndType UUI2DLineRendererBase::GetEndType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "GetEndType");

	Params::UI2DLineRendererBase_GetEndType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UI2DLineRendererBase.GetLineWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUI2DLineRendererBase::GetLineWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "GetLineWidth");

	Params::UI2DLineRendererBase_GetLineWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UI2DLineRendererBase.GetLineWidthOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUI2DLineRendererBase::GetLineWidthOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "GetLineWidthOffset");

	Params::UI2DLineRendererBase_GetLineWidthOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.EndAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easeType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIPolygonLine::EndAngleTo(float endValue, float duration, float delay, ELTweenEase easeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "EndAngleTo");

	Params::UIPolygonLine_EndAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.easeType = easeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.SetEndAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygonLine::SetEndAngle(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "SetEndAngle");

	Params::UIPolygonLine_SetEndAngle Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygonLine.SetSides
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygonLine::SetSides(int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "SetSides");

	Params::UIPolygonLine_SetSides Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygonLine.SetStartAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygonLine::SetStartAngle(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "SetStartAngle");

	Params::UIPolygonLine_SetStartAngle Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygonLine.SetVertexOffsetArray
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<float>&                    value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIPolygonLine::SetVertexOffsetArray(const TArray<float>& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "SetVertexOffsetArray");

	Params::UIPolygonLine_SetVertexOffsetArray Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygonLine.StartAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easeType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIPolygonLine::StartAngleTo(float endValue, float duration, float delay, ELTweenEase easeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "StartAngleTo");

	Params::UIPolygonLine_StartAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.easeType = easeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.GetEndAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIPolygonLine::GetEndAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "GetEndAngle");

	Params::UIPolygonLine_GetEndAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.GetSides
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIPolygonLine::GetSides() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "GetSides");

	Params::UIPolygonLine_GetSides Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.GetStartAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIPolygonLine::GetStartAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "GetStartAngle");

	Params::UIPolygonLine_GetStartAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.GetVertexOffsetArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<float>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<float> UUIPolygonLine::GetVertexOffsetArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "GetVertexOffsetArray");

	Params::UIPolygonLine_GetVertexOffsetArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefabV2.LoadPrefab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  InParent                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceUseRuntimeData                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SetRelativeTransformToIdentity                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIPrefabV2::LoadPrefab(class UObject* WorldContextObject, class USceneComponent* InParent, bool bForceUseRuntimeData, bool SetRelativeTransformToIdentity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabV2", "LoadPrefab");

	Params::LGUIPrefabV2_LoadPrefab Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InParent = InParent;
	Parms.bForceUseRuntimeData = bForceUseRuntimeData;
	Parms.SetRelativeTransformToIdentity = SetRelativeTransformToIdentity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefabV2.LoadPrefabWithTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  InParent                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceUseRuntimeData                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIPrefabV2::LoadPrefabWithTransform(class UObject* WorldContextObject, class USceneComponent* InParent, bool bForceUseRuntimeData, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabV2", "LoadPrefabWithTransform");

	Params::LGUIPrefabV2_LoadPrefabWithTransform Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InParent = InParent;
	Parms.bForceUseRuntimeData = bForceUseRuntimeData;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseInputModule.ClearEvent
// (Native, Public, BlueprintCallable)

void ULGUIBaseInputModule::ClearEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseInputModule", "ClearEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_PointerInputModule.GetCurrentInputKeyType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EInputKeyType                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EInputKeyType ULGUI_PointerInputModule::GetCurrentInputKeyType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "GetCurrentInputKeyType");

	Params::LGUI_PointerInputModule_GetCurrentInputKeyType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUI_PointerInputModule.GetNowHitComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* ULGUI_PointerInputModule::GetNowHitComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "GetNowHitComponent");

	Params::LGUI_PointerInputModule_GetNowHitComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUI_PointerInputModule.GetPointerEventData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   PointerId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CreateIfNotExist                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIPointerEventData* ULGUI_PointerInputModule::GetPointerEventData(int32 PointerId, bool CreateIfNotExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "GetPointerEventData");

	Params::LGUI_PointerInputModule_GetPointerEventData Parms{};

	Parms.PointerId = PointerId;
	Parms.CreateIfNotExist = CreateIfNotExist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUI_PointerInputModule.InputNavigation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUINavigationDirection                direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    pressOrRelease                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_PointerInputModule::InputNavigation(ELGUINavigationDirection direction, bool pressOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "InputNavigation");

	Params::LGUI_PointerInputModule_InputNavigation Parms{};

	Parms.direction = direction;
	Parms.pressOrRelease = pressOrRelease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_PointerInputModule.InputTriggerForNavigation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    triggerPress                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_PointerInputModule::InputTriggerForNavigation(bool triggerPress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "InputTriggerForNavigation");

	Params::LGUI_PointerInputModule_InputTriggerForNavigation Parms{};

	Parms.triggerPress = triggerPress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_PointerInputModule.IsPointerEventDataLineTrace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIPointerEventData*            InPointerEventData                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUI_PointerInputModule::IsPointerEventDataLineTrace(class ULGUIPointerEventData* InPointerEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "IsPointerEventDataLineTrace");

	Params::LGUI_PointerInputModule_IsPointerEventDataLineTrace Parms{};

	Parms.InPointerEventData = InPointerEventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUI_PointerInputModule.RegisterInputChangeEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(ELGUIPointerInputType type)>&pointerInputChange                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUI_PointerInputModule::RegisterInputChangeEvent(const TDelegate<void(ELGUIPointerInputType type)>& pointerInputChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "RegisterInputChangeEvent");

	Params::LGUI_PointerInputModule_RegisterInputChangeEvent Parms{};

	Parms.pointerInputChange = pointerInputChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUI_PointerInputModule.SetClickThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_PointerInputModule::SetClickThreshold(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "SetClickThreshold");

	Params::LGUI_PointerInputModule_SetClickThreshold Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_PointerInputModule.SetCurrentInputKeyType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EInputKeyType                           InputKeyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_PointerInputModule::SetCurrentInputKeyType(EInputKeyType InputKeyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "SetCurrentInputKeyType");

	Params::LGUI_PointerInputModule_SetCurrentInputKeyType Parms{};

	Parms.InputKeyType = InputKeyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_PointerInputModule.SwitchToNavigationInputType
// (Final, Native, Public, BlueprintCallable)

void ULGUI_PointerInputModule::SwitchToNavigationInputType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "SwitchToNavigationInputType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_PointerInputModule.UnregisterInputChangeEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&delegateHandle                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUI_PointerInputModule::UnregisterInputChangeEvent(const struct FLGUIDelegateHandleWrapper& delegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "UnregisterInputChangeEvent");

	Params::LGUI_PointerInputModule_UnregisterInputChangeEvent Parms{};

	Parms.delegateHandle = std::move(delegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_PointerInputModule.UpdateNavigation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  NewSelectable                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_PointerInputModule::UpdateNavigation(class USceneComponent* NewSelectable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "UpdateNavigation");

	Params::LGUI_PointerInputModule_UpdateNavigation Parms{};

	Parms.NewSelectable = NewSelectable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_SceneCapture2DMouseRayEmitter.DeprojectViewPointToWorldForSceneCapture2D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         InSceneCapture2D                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 InViewPoint01                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutRayOrigin                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutRayDirection                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_SceneCapture2DMouseRayEmitter::DeprojectViewPointToWorldForSceneCapture2D(class USceneCaptureComponent2D* InSceneCapture2D, const struct FVector2D& InViewPoint01, struct FVector* OutRayOrigin, struct FVector* OutRayDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUI_SceneCapture2DMouseRayEmitter", "DeprojectViewPointToWorldForSceneCapture2D");

	Params::LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D Parms{};

	Parms.InSceneCapture2D = InSceneCapture2D;
	Parms.InViewPoint01 = std::move(InViewPoint01);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRayOrigin != nullptr)
		*OutRayOrigin = std::move(Parms.OutRayOrigin);

	if (OutRayDirection != nullptr)
		*OutRayDirection = std::move(Parms.OutRayDirection);
}


// Function LGUI.LGUI_SceneCapture2DMouseRayEmitter.ProjectWorldToViewPointForSceneCapture2D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         InSceneCapture2D                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InWorldPosition                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutViewPoint                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUI_SceneCapture2DMouseRayEmitter::ProjectWorldToViewPointForSceneCapture2D(class USceneCaptureComponent2D* InSceneCapture2D, const struct FVector& InWorldPosition, struct FVector2D* OutViewPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUI_SceneCapture2DMouseRayEmitter", "ProjectWorldToViewPointForSceneCapture2D");

	Params::LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D Parms{};

	Parms.InSceneCapture2D = InSceneCapture2D;
	Parms.InWorldPosition = std::move(InWorldPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutViewPoint != nullptr)
		*OutViewPoint = std::move(Parms.OutViewPoint);

	return Parms.ReturnValue;
}


// Function LGUI.LGUI_SceneCapture2DMouseRayEmitter.GetSceneCapture2DComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneCaptureComponent2D* ULGUI_SceneCapture2DMouseRayEmitter::GetSceneCapture2DComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_SceneCapture2DMouseRayEmitter", "GetSceneCapture2DComponent");

	Params::LGUI_SceneCapture2DMouseRayEmitter_GetSceneCapture2DComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUI_SceneCapture2DMouseRayEmitter.SetSceneCapture2DComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         InComp                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_SceneCapture2DMouseRayEmitter::SetSceneCapture2DComponent(class USceneCaptureComponent2D* InComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_SceneCapture2DMouseRayEmitter", "SetSceneCapture2DComponent");

	Params::LGUI_SceneCapture2DMouseRayEmitter_SetSceneCapture2DComponent Parms{};

	Parms.InComp = InComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_SceneComponentRayEmitter.GetTargetActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUI_SceneComponentRayEmitter::GetTargetActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_SceneComponentRayEmitter", "GetTargetActor");

	Params::LGUI_SceneComponentRayEmitter_GetTargetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUI_SceneComponentRayEmitter.GetTargetSceneComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ULGUI_SceneComponentRayEmitter::GetTargetSceneComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_SceneComponentRayEmitter", "GetTargetSceneComponent");

	Params::LGUI_SceneComponentRayEmitter_GetTargetSceneComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUI_SceneComponentRayEmitter.SetTargetActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_SceneComponentRayEmitter::SetTargetActor(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_SceneComponentRayEmitter", "SetTargetActor");

	Params::LGUI_SceneComponentRayEmitter_SetTargetActor Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_SceneComponentRayEmitter.SetTargetSceneComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InSceneComp                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_SceneComponentRayEmitter::SetTargetSceneComponent(class USceneComponent* InSceneComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_SceneComponentRayEmitter", "SetTargetSceneComponent");

	Params::LGUI_SceneComponentRayEmitter_SetTargetSceneComponent Parms{};

	Parms.InSceneComp = InSceneComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_StandaloneInputModule.InputOverrideMousePosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 inMousePosition                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_StandaloneInputModule::InputOverrideMousePosition(const struct FVector2D& inMousePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_StandaloneInputModule", "InputOverrideMousePosition");

	Params::LGUI_StandaloneInputModule_InputOverrideMousePosition Parms{};

	Parms.inMousePosition = std::move(inMousePosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_StandaloneInputModule.InputScroll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const float&                            inAxisValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_StandaloneInputModule::InputScroll(const float& inAxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_StandaloneInputModule", "InputScroll");

	Params::LGUI_StandaloneInputModule_InputScroll Parms{};

	Parms.inAxisValue = inAxisValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_StandaloneInputModule.InputTrigger
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    inTriggerPress                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMouseButtonType                        inMouseButtonType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_StandaloneInputModule::InputTrigger(bool inTriggerPress, EMouseButtonType inMouseButtonType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_StandaloneInputModule", "InputTrigger");

	Params::LGUI_StandaloneInputModule_InputTrigger Parms{};

	Parms.inTriggerPress = inTriggerPress;
	Parms.inMouseButtonType = inMouseButtonType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_StandaloneInputModule.ResetNowIsTriggerPressed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   pointerID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_StandaloneInputModule::ResetNowIsTriggerPressed(int32 pointerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_StandaloneInputModule", "ResetNowIsTriggerPressed");

	Params::LGUI_StandaloneInputModule_ResetNowIsTriggerPressed Parms{};

	Parms.pointerID = pointerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_StandaloneInputModule.SetIsForceChange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_StandaloneInputModule::SetIsForceChange(const bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_StandaloneInputModule", "SetIsForceChange");

	Params::LGUI_StandaloneInputModule_SetIsForceChange Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_StandaloneInputModule.SetIsUseMouse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_StandaloneInputModule::SetIsUseMouse(const bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_StandaloneInputModule", "SetIsUseMouse");

	Params::LGUI_StandaloneInputModule_SetIsUseMouse Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_StandaloneInputModule.SimulationLineTrace
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   pointerID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ClickPivot                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUI_StandaloneInputModule::SimulationLineTrace(int32 pointerID, class UUIItem* UIItem, const struct FVector2D& ClickPivot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_StandaloneInputModule", "SimulationLineTrace");

	Params::LGUI_StandaloneInputModule_SimulationLineTrace Parms{};

	Parms.pointerID = pointerID;
	Parms.UIItem = UIItem;
	Parms.ClickPivot = std::move(ClickPivot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUI_StandaloneInputModule.SimulationPointerDownUp
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   pointerID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsPressed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ClickPivot                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUI_StandaloneInputModule::SimulationPointerDownUp(int32 pointerID, class UUIItem* UIItem, bool IsPressed, const struct FVector2D& ClickPivot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_StandaloneInputModule", "SimulationPointerDownUp");

	Params::LGUI_StandaloneInputModule_SimulationPointerDownUp Parms{};

	Parms.pointerID = pointerID;
	Parms.UIItem = UIItem;
	Parms.IsPressed = IsPressed;
	Parms.ClickPivot = std::move(ClickPivot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUI_StandaloneInputModule.SimulationPointerTrigger
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   pointerID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsPressed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_StandaloneInputModule::SimulationPointerTrigger(int32 pointerID, bool IsPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_StandaloneInputModule", "SimulationPointerTrigger");

	Params::LGUI_StandaloneInputModule_SimulationPointerTrigger Parms{};

	Parms.pointerID = pointerID;
	Parms.IsPressed = IsPressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_TouchInputModule.InputScroll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const float&                            inAxisValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_TouchInputModule::InputScroll(const float& inAxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_TouchInputModule", "InputScroll");

	Params::LGUI_TouchInputModule_InputScroll Parms{};

	Parms.inAxisValue = inAxisValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_TouchInputModule.InputTouchMoved
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   inTouchID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   inTouchPointPosition                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_TouchInputModule::InputTouchMoved(int32 inTouchID, const struct FVector& inTouchPointPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_TouchInputModule", "InputTouchMoved");

	Params::LGUI_TouchInputModule_InputTouchMoved Parms{};

	Parms.inTouchID = inTouchID;
	Parms.inTouchPointPosition = std::move(inTouchPointPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_TouchInputModule.InputTouchTrigger
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    inTouchPress                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   inTouchID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   inTouchPointPosition                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_TouchInputModule::InputTouchTrigger(bool inTouchPress, int32 inTouchID, const struct FVector& inTouchPointPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_TouchInputModule", "InputTouchTrigger");

	Params::LGUI_TouchInputModule_InputTouchTrigger Parms{};

	Parms.inTouchPress = inTouchPress;
	Parms.inTouchID = inTouchID;
	Parms.inTouchPointPosition = std::move(inTouchPointPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_TouchInputModule.RefreshProcessInput
// (Final, Native, Public, BlueprintCallable)

void ULGUI_TouchInputModule::RefreshProcessInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_TouchInputModule", "RefreshProcessInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBaseRaycaster.ActivateRaycaster
// (Final, Native, Public, BlueprintCallable)

void ULGUIBaseRaycaster::ActivateRaycaster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "ActivateRaycaster");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBaseRaycaster.DeactivateRaycaster
// (Final, Native, Public, BlueprintCallable)

void ULGUIBaseRaycaster::DeactivateRaycaster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "DeactivateRaycaster");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIArtTextData.GetArtTextInfoArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FUIArtTextInfo>     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FUIArtTextInfo> ULGUIArtTextData::GetArtTextInfoArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIArtTextData", "GetArtTextInfoArray");

	Params::LGUIArtTextData_GetArtTextInfoArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIAtlasManager.DisposeAtlasByPackingTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             inPackingTag                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIAtlasManager::DisposeAtlasByPackingTag(class FName inPackingTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIAtlasManager", "DisposeAtlasByPackingTag");

	Params::LGUIAtlasManager_DisposeAtlasByPackingTag Parms{};

	Parms.inPackingTag = inPackingTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBaseEventData.ToString
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULGUIBaseEventData::ToString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseEventData", "ToString");

	Params::LGUIBaseEventData_ToString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AddInstanceComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::AddInstanceComponent(class AActor* Actor, class UActorComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AddInstanceComponent");

	Params::LGUIBPLibrary_AddInstanceComponent Parms{};

	Parms.Actor = Actor;
	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.AlphaFrom
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   startValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AlphaFrom(class UUIItem* target, float startValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AlphaFrom");

	Params::LGUIBPLibrary_AlphaFrom Parms{};

	Parms.target = target;
	Parms.startValue = startValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AlphaTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AlphaTo(class UUIItem* target, float endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AlphaTo");

	Params::LGUIBPLibrary_AlphaTo Parms{};

	Parms.target = target;
	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AnchorOffsetTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AnchorOffsetTo(class UUIItem* target, const struct FVector2D& endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AnchorOffsetTo");

	Params::LGUIBPLibrary_AnchorOffsetTo Parms{};

	Parms.target = target;
	Parms.endValue = std::move(endValue);
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AnchorOffsetXTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AnchorOffsetXTo(class UUIItem* target, float endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AnchorOffsetXTo");

	Params::LGUIBPLibrary_AnchorOffsetXTo Parms{};

	Parms.target = target;
	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AnchorOffsetYTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AnchorOffsetYTo(class UUIItem* target, float endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AnchorOffsetYTo");

	Params::LGUIBPLibrary_AnchorOffsetYTo Parms{};

	Parms.target = target;
	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.BatchDuplicateActors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Src                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> ULGUIBPLibrary::BatchDuplicateActors(class AActor* Src, int32 Num, class USceneComponent* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "BatchDuplicateActors");

	Params::LGUIBPLibrary_BatchDuplicateActors Parms{};

	Parms.Src = Src;
	Parms.Num = Num;
	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.ClearInstanceComponents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bDestroyComponents                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::ClearInstanceComponents(class AActor* Actor, const bool bDestroyComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "ClearInstanceComponents");

	Params::LGUIBPLibrary_ClearInstanceComponents Parms{};

	Parms.Actor = Actor;
	Parms.bDestroyComponents = bDestroyComponents;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.ClipBoardCopy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::ClipBoardCopy(const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "ClipBoardCopy");

	Params::LGUIBPLibrary_ClipBoardCopy Parms{};

	Parms.Str = std::move(Str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.ClipBoardPaste
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString*                          Target                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::ClipBoardPaste(class FString* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "ClipBoardPaste");

	Params::LGUIBPLibrary_ClipBoardPaste Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Target != nullptr)
		*Target = std::move(Parms.Target);
}


// Function LGUI.LGUIBPLibrary.ColorFrom
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    startValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::ColorFrom(class UUIItem* target, const struct FColor& startValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "ColorFrom");

	Params::LGUIBPLibrary_ColorFrom Parms{};

	Parms.target = target;
	Parms.startValue = std::move(startValue);
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.ColorTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::ColorTo(class UUIItem* target, const struct FColor& endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "ColorTo");

	Params::LGUIBPLibrary_ColorTo Parms{};

	Parms.target = target;
	Parms.endValue = std::move(endValue);
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.ConvertWorldPosToLGUIPos
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVectorDouble&             WorldPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUIBPLibrary::ConvertWorldPosToLGUIPos(class APlayerController* PlayerController, const struct FVectorDouble& WorldPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "ConvertWorldPosToLGUIPos");

	Params::LGUIBPLibrary_ConvertWorldPosToLGUIPos Parms{};

	Parms.PlayerController = PlayerController;
	Parms.WorldPosition = std::move(WorldPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.CopySequenceBindingFromParent
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSoftObjectPath&           LevelSequencePath                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::CopySequenceBindingFromParent(class UUIItem* Target, const struct FSoftObjectPath& LevelSequencePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "CopySequenceBindingFromParent");

	Params::LGUIBPLibrary_CopySequenceBindingFromParent Parms{};

	Parms.Target = Target;
	Parms.LevelSequencePath = std::move(LevelSequencePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.CreateTexture2DFromColors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FColor>&            Colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* ULGUIBPLibrary::CreateTexture2DFromColors(int32 Width, int32 Height, const TArray<struct FColor>& Colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "CreateTexture2DFromColors");

	Params::LGUIBPLibrary_CreateTexture2DFromColors Parms{};

	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Colors = std::move(Colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.CreateTexture2DFromPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ImagePath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TextureName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ImageFormatValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* ULGUIBPLibrary::CreateTexture2DFromPath(const class FString& ImagePath, const class FString& TextureName, int32 ImageFormatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "CreateTexture2DFromPath");

	Params::LGUIBPLibrary_CreateTexture2DFromPath Parms{};

	Parms.ImagePath = std::move(ImagePath);
	Parms.TextureName = std::move(TextureName);
	Parms.ImageFormatValue = ImageFormatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.DeleteActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    WithHierarchy                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::DeleteActor(class AActor* Target, bool WithHierarchy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "DeleteActor");

	Params::LGUIBPLibrary_DeleteActor Parms{};

	Parms.Target = Target;
	Parms.WithHierarchy = WithHierarchy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.DeleteFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIBPLibrary::DeleteFile(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "DeleteFile");

	Params::LGUIBPLibrary_DeleteFile Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.DestroyActorWithHierarchy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    WithHierarchy                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::DestroyActorWithHierarchy(class AActor* Target, bool WithHierarchy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "DestroyActorWithHierarchy");

	Params::LGUIBPLibrary_DestroyActorWithHierarchy Parms{};

	Parms.Target = Target;
	Parms.WithHierarchy = WithHierarchy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.DuplicateActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIBPLibrary::DuplicateActor(class AActor* Target, class USceneComponent* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "DuplicateActor");

	Params::LGUIBPLibrary_DuplicateActor Parms{};

	Parms.Target = Target;
	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.FreeUnusedResourcesInRenderTargetPool
// (Final, Native, Static, Public, BlueprintCallable)

void ULGUIBPLibrary::FreeUnusedResourcesInRenderTargetPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "FreeUnusedResourcesInRenderTargetPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.GetAllAttachChildrenOfActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeAllChildren                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> ULGUIBPLibrary::GetAllAttachChildrenOfActor(class AActor* Actor, bool bIncludeAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetAllAttachChildrenOfActor");

	Params::LGUIBPLibrary_GetAllAttachChildrenOfActor Parms{};

	Parms.Actor = Actor;
	Parms.bIncludeAllChildren = bIncludeAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetComponentInChildren
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      ComponentClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* ULGUIBPLibrary::GetComponentInChildren(class AActor* InActor, TSubclassOf<class UActorComponent> ComponentClass, bool IncludeSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetComponentInChildren");

	Params::LGUIBPLibrary_GetComponentInChildren Parms{};

	Parms.InActor = InActor;
	Parms.ComponentClass = ComponentClass;
	Parms.IncludeSelf = IncludeSelf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetComponentInParent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      ComponentClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* ULGUIBPLibrary::GetComponentInParent(class AActor* InActor, TSubclassOf<class UActorComponent> ComponentClass, bool IncludeSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetComponentInParent");

	Params::LGUIBPLibrary_GetComponentInParent Parms{};

	Parms.InActor = InActor;
	Parms.ComponentClass = ComponentClass;
	Parms.IncludeSelf = IncludeSelf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetComponentsInChildren
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      ComponentClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorComponent*>          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UActorComponent*> ULGUIBPLibrary::GetComponentsInChildren(class AActor* InActor, TSubclassOf<class UActorComponent> ComponentClass, bool IncludeSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetComponentsInChildren");

	Params::LGUIBPLibrary_GetComponentsInChildren Parms{};

	Parms.InActor = InActor;
	Parms.ComponentClass = ComponentClass;
	Parms.IncludeSelf = IncludeSelf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetComponentsInChildrenWithHirerarchyIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AUIBaseActor*                     InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      ComponentClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorComponent*>          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UActorComponent*> ULGUIBPLibrary::GetComponentsInChildrenWithHirerarchyIndex(class AUIBaseActor* InActor, TSubclassOf<class UActorComponent> ComponentClass, bool IncludeSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetComponentsInChildrenWithHirerarchyIndex");

	Params::LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex Parms{};

	Parms.InActor = InActor;
	Parms.ComponentClass = ComponentClass;
	Parms.IncludeSelf = IncludeSelf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetFullPathOfActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          PathString                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIBPLibrary::GetFullPathOfActor(class UObject* WorldContextObject, class AActor* Actor, class FString* PathString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetFullPathOfActor");

	Params::LGUIBPLibrary_GetFullPathOfActor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PathString != nullptr)
		*PathString = std::move(Parms.PathString);

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetPrefabRoot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          InUiItem                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* ULGUIBPLibrary::GetPrefabRoot(class UUIItem* InUiItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetPrefabRoot");

	Params::LGUIBPLibrary_GetPrefabRoot Parms{};

	Parms.InUiItem = InUiItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetRelativePathWithRoot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          Root                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULGUIBPLibrary::GetRelativePathWithRoot(class UUIItem* Target, class UUIItem* Root)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetRelativePathWithRoot");

	Params::LGUIBPLibrary_GetRelativePathWithRoot Parms{};

	Parms.Target = Target;
	Parms.Root = Root;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetSpriteBorderSize
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUISpriteInfo&           SpriteInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32*                                  borderLeft                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  borderRight                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  borderTop                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  borderBottom                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::GetSpriteBorderSize(const struct FLGUISpriteInfo& SpriteInfo, int32* borderLeft, int32* borderRight, int32* borderTop, int32* borderBottom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetSpriteBorderSize");

	Params::LGUIBPLibrary_GetSpriteBorderSize Parms{};

	Parms.SpriteInfo = std::move(SpriteInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (borderLeft != nullptr)
		*borderLeft = Parms.borderLeft;

	if (borderRight != nullptr)
		*borderRight = Parms.borderRight;

	if (borderTop != nullptr)
		*borderTop = Parms.borderTop;

	if (borderBottom != nullptr)
		*borderBottom = Parms.borderBottom;
}


// Function LGUI.LGUIBPLibrary.GetSpriteBorderUV
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUISpriteInfo&           SpriteInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float*                                  borderUV0X                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  borderUV0Y                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  borderUV3X                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  borderUV3Y                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::GetSpriteBorderUV(const struct FLGUISpriteInfo& SpriteInfo, float* borderUV0X, float* borderUV0Y, float* borderUV3X, float* borderUV3Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetSpriteBorderUV");

	Params::LGUIBPLibrary_GetSpriteBorderUV Parms{};

	Parms.SpriteInfo = std::move(SpriteInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (borderUV0X != nullptr)
		*borderUV0X = Parms.borderUV0X;

	if (borderUV0Y != nullptr)
		*borderUV0Y = Parms.borderUV0Y;

	if (borderUV3X != nullptr)
		*borderUV3X = Parms.borderUV3X;

	if (borderUV3Y != nullptr)
		*borderUV3Y = Parms.borderUV3Y;
}


// Function LGUI.LGUIBPLibrary.GetSpriteSize
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUISpriteInfo&           SpriteInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32*                                  width                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::GetSpriteSize(const struct FLGUISpriteInfo& SpriteInfo, int32* width, int32* height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetSpriteSize");

	Params::LGUIBPLibrary_GetSpriteSize Parms{};

	Parms.SpriteInfo = std::move(SpriteInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (width != nullptr)
		*width = Parms.width;

	if (height != nullptr)
		*height = Parms.height;
}


// Function LGUI.LGUIBPLibrary.GetSpriteUV
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUISpriteInfo&           SpriteInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float*                                  UV0X                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  UV0Y                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  UV3X                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  UV3Y                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::GetSpriteUV(const struct FLGUISpriteInfo& SpriteInfo, float* UV0X, float* UV0Y, float* UV3X, float* UV3Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetSpriteUV");

	Params::LGUIBPLibrary_GetSpriteUV Parms{};

	Parms.SpriteInfo = std::move(SpriteInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (UV0X != nullptr)
		*UV0X = Parms.UV0X;

	if (UV0Y != nullptr)
		*UV0Y = Parms.UV0Y;

	if (UV3X != nullptr)
		*UV3X = Parms.UV3X;

	if (UV3Y != nullptr)
		*UV3Y = Parms.UV3Y;
}


// Function LGUI.LGUIBPLibrary.GetStringHashValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 ULGUIBPLibrary::GetStringHashValue(const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetStringHashValue");

	Params::LGUIBPLibrary_GetStringHashValue Parms{};

	Parms.Str = std::move(Str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetTexture2DFromImage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ImagePath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ImageFormatValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* ULGUIBPLibrary::GetTexture2DFromImage(const class FString& ImagePath, int32 ImageFormatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetTexture2DFromImage");

	Params::LGUIBPLibrary_GetTexture2DFromImage Parms{};

	Parms.ImagePath = std::move(ImagePath);
	Parms.ImageFormatValue = ImageFormatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetUIItemCornerPositionInViewPort
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// EUiItemCornerType                       corner                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          Item                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUIBPLibrary::GetUIItemCornerPositionInViewPort(EUiItemCornerType corner, class UObject* WorldContextObject, class UUIItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetUIItemCornerPositionInViewPort");

	Params::LGUIBPLibrary_GetUIItemCornerPositionInViewPort Parms{};

	Parms.corner = corner;
	Parms.WorldContextObject = WorldContextObject;
	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetUIItemPositionInViewPort
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          Item                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsScaledByBPI                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUIBPLibrary::GetUIItemPositionInViewPort(class UObject* WorldContextObject, class UUIItem* Item, bool bIsScaledByBPI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetUIItemPositionInViewPort");

	Params::LGUIBPLibrary_GetUIItemPositionInViewPort Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Item = Item;
	Parms.bIsScaledByBPI = bIsScaledByBPI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetUIItemWithPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FullItemPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* ULGUIBPLibrary::GetUIItemWithPath(class UObject* WorldContextObject, const class FString& FullItemPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetUIItemWithPath");

	Params::LGUIBPLibrary_GetUIItemWithPath Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FullItemPath = std::move(FullItemPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetUIItemWithRelativePath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          ParentItem                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RelativePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* ULGUIBPLibrary::GetUIItemWithRelativePath(class UUIItem* ParentItem, const class FString& RelativePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetUIItemWithRelativePath");

	Params::LGUIBPLibrary_GetUIItemWithRelativePath Parms{};

	Parms.ParentItem = ParentItem;
	Parms.RelativePath = std::move(RelativePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetUIWorldPosForceUpdate
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIBPLibrary::GetUIWorldPosForceUpdate(class UUIItem* UIItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetUIWorldPosForceUpdate");

	Params::LGUIBPLibrary_GetUIWorldPosForceUpdate Parms{};

	Parms.UIItem = UIItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetWorldUISceneRendering
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIBPLibrary::GetWorldUISceneRendering(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetWorldUISceneRendering");

	Params::LGUIBPLibrary_GetWorldUISceneRendering Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.HeightTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::HeightTo(class UUIItem* target, float endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "HeightTo");

	Params::LGUIBPLibrary_HeightTo Parms{};

	Parms.target = target;
	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.K2_LGUICompRef_GetComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUIComponentReference&   InLGUICompRef                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UActorComponent**                 OutResult                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::K2_LGUICompRef_GetComponent(const struct FLGUIComponentReference& InLGUICompRef, class UActorComponent** OutResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "K2_LGUICompRef_GetComponent");

	Params::LGUIBPLibrary_K2_LGUICompRef_GetComponent Parms{};

	Parms.InLGUICompRef = std::move(InLGUICompRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResult != nullptr)
		*OutResult = Parms.OutResult;
}


// Function LGUI.LGUIBPLibrary.LGUICompRef_GetActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUIComponentReference&   InLGUIComponentReference                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIBPLibrary::LGUICompRef_GetActor(const struct FLGUIComponentReference& InLGUIComponentReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUICompRef_GetActor");

	Params::LGUIBPLibrary_LGUICompRef_GetActor Parms{};

	Parms.InLGUIComponentReference = std::move(InLGUIComponentReference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUICompRef_GetComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUIComponentReference&   InLGUIComponentReference                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      InComponentType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* ULGUIBPLibrary::LGUICompRef_GetComponent(const struct FLGUIComponentReference& InLGUIComponentReference, TSubclassOf<class UActorComponent> InComponentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUICompRef_GetComponent");

	Params::LGUIBPLibrary_LGUICompRef_GetComponent Parms{};

	Parms.InLGUIComponentReference = std::move(InLGUIComponentReference);
	Parms.InComponentType = InComponentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUICompRef_GetComponentClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUIComponentReference&   InLGUIComponentReference                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UActorComponent> ULGUIBPLibrary::LGUICompRef_GetComponentClass(const struct FLGUIComponentReference& InLGUIComponentReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUICompRef_GetComponentClass");

	Params::LGUIBPLibrary_LGUICompRef_GetComponentClass Parms{};

	Parms.InLGUIComponentReference = std::move(InLGUIComponentReference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Actor_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Actor&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Actor_Execute(const struct FLGUIDrawableEvent_Actor& InEvent, class AActor* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Actor_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Actor_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Actor_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Actor&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class AActor* value)>    InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Actor_Register(const struct FLGUIDrawableEvent_Actor& InEvent, TDelegate<void(class AActor* value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Actor_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Actor_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Actor_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Actor&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Actor_Unregister(const struct FLGUIDrawableEvent_Actor& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Actor_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Actor_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Bool_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Bool&   InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Bool_Execute(const struct FLGUIDrawableEvent_Bool& InEvent, bool InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Bool_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Bool_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Bool_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Bool&   InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool value)>             InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Bool_Register(const struct FLGUIDrawableEvent_Bool& InEvent, TDelegate<void(bool value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Bool_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Bool_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Bool_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Bool&   InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Bool_Unregister(const struct FLGUIDrawableEvent_Bool& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Bool_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Bool_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Class_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Class&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                           InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Class_Execute(const struct FLGUIDrawableEvent_Class& InEvent, class UClass* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Class_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Class_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Class_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Class&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class UClass* value)>    InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Class_Register(const struct FLGUIDrawableEvent_Class& InEvent, TDelegate<void(class UClass* value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Class_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Class_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Class_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Class&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Class_Unregister(const struct FLGUIDrawableEvent_Class& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Class_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Class_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Color_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Color&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FColor&                    InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Color_Execute(const struct FLGUIDrawableEvent_Color& InEvent, const struct FColor& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Color_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Color_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Color_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Color&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FColor& value)>InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Color_Register(const struct FLGUIDrawableEvent_Color& InEvent, TDelegate<void(const struct FColor& value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Color_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Color_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Color_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Color&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Color_Unregister(const struct FLGUIDrawableEvent_Color& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Color_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Color_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Empty_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Empty&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Empty_Execute(const struct FLGUIDrawableEvent_Empty& InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Empty_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Empty_Execute Parms{};

	Parms.InEvent = std::move(InEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Empty_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Empty&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Empty_Register(const struct FLGUIDrawableEvent_Empty& InEvent, TDelegate<void()> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Empty_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Empty_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Empty_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Empty&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Empty_Unregister(const struct FLGUIDrawableEvent_Empty& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Empty_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Empty_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Float_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Float&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Float_Execute(const struct FLGUIDrawableEvent_Float& InEvent, float InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Float_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Float_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Float_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Float&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(float value)>            InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Float_Register(const struct FLGUIDrawableEvent_Float& InEvent, TDelegate<void(float value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Float_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Float_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Float_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Float&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Float_Unregister(const struct FLGUIDrawableEvent_Float& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Float_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Float_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Int32_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Int32&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Int32_Execute(const struct FLGUIDrawableEvent_Int32& InEvent, int32 InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Int32_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Int32_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Int32_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Int32&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(int32 value)>            InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Int32_Register(const struct FLGUIDrawableEvent_Int32& InEvent, TDelegate<void(int32 value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Int32_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Int32_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Int32_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Int32&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Int32_Unregister(const struct FLGUIDrawableEvent_Int32& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Int32_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Int32_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Int64_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Int64&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int64                                   InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Int64_Execute(const struct FLGUIDrawableEvent_Int64& InEvent, int64 InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Int64_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Int64_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Int64_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Int64&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(int64 value)>            InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Int64_Register(const struct FLGUIDrawableEvent_Int64& InEvent, TDelegate<void(int64 value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Int64_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Int64_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Int64_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Int64&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Int64_Unregister(const struct FLGUIDrawableEvent_Int64& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Int64_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Int64_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_LinearColor_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_LinearColor&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_LinearColor_Execute(const struct FLGUIDrawableEvent_LinearColor& InEvent, const struct FLinearColor& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_LinearColor_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_LinearColor_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_LinearColor&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FLinearColor& value)>InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_LinearColor_Register(const struct FLGUIDrawableEvent_LinearColor& InEvent, TDelegate<void(const struct FLinearColor& value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_LinearColor_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_LinearColor_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_LinearColor&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_LinearColor_Unregister(const struct FLGUIDrawableEvent_LinearColor& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_LinearColor_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Object_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Object& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Object_Execute(const struct FLGUIDrawableEvent_Object& InEvent, class UObject* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Object_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Object_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Object_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Object& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class UObject* value)>   InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Object_Register(const struct FLGUIDrawableEvent_Object& InEvent, TDelegate<void(class UObject* value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Object_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Object_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Object_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Object& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Object_Unregister(const struct FLGUIDrawableEvent_Object& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Object_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Object_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_PointerEvent_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_PointerEvent&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_PointerEvent_Execute(const struct FLGUIDrawableEvent_PointerEvent& InEvent, class ULGUIPointerEventData* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_PointerEvent_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_PointerEvent_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_PointerEvent&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class ULGUIPointerEventData* value)>InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_PointerEvent_Register(const struct FLGUIDrawableEvent_PointerEvent& InEvent, TDelegate<void(class ULGUIPointerEventData* value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_PointerEvent_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_PointerEvent_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_PointerEvent&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_PointerEvent_Unregister(const struct FLGUIDrawableEvent_PointerEvent& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_PointerEvent_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Quaternion_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Quaternion&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FQuat&                     InParameter                                            (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Quaternion_Execute(const struct FLGUIDrawableEvent_Quaternion& InEvent, const struct FQuat& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Quaternion_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Quaternion_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Quaternion&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FQuat& value)>InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Quaternion_Register(const struct FLGUIDrawableEvent_Quaternion& InEvent, TDelegate<void(const struct FQuat& value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Quaternion_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Quaternion_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Quaternion&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Quaternion_Unregister(const struct FLGUIDrawableEvent_Quaternion& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Quaternion_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Rotator_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Rotator&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FRotator&                  InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Rotator_Execute(const struct FLGUIDrawableEvent_Rotator& InEvent, const struct FRotator& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Rotator_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Rotator_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Rotator_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Rotator&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FRotator& value)>InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Rotator_Register(const struct FLGUIDrawableEvent_Rotator& InEvent, TDelegate<void(const struct FRotator& value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Rotator_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Rotator_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Rotator_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Rotator&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Rotator_Unregister(const struct FLGUIDrawableEvent_Rotator& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Rotator_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Rotator_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_String_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_String& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    InParameter                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_String_Execute(const struct FLGUIDrawableEvent_String& InEvent, const class FString& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_String_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_String_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_String_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_String& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& value)>InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_String_Register(const struct FLGUIDrawableEvent_String& InEvent, TDelegate<void(const class FString& value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_String_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_String_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_String_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_String& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_String_Unregister(const struct FLGUIDrawableEvent_String& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_String_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_String_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_UInt8_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_UInt8&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// uint8                                   InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_UInt8_Execute(const struct FLGUIDrawableEvent_UInt8& InEvent, uint8 InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_UInt8_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_UInt8_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_UInt8_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_UInt8&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(uint8 value)>            InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_UInt8_Register(const struct FLGUIDrawableEvent_UInt8& InEvent, TDelegate<void(uint8 value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_UInt8_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_UInt8_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_UInt8_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_UInt8&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_UInt8_Unregister(const struct FLGUIDrawableEvent_UInt8& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_UInt8_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_UInt8_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector2_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Vector2&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector2D&                 InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Vector2_Execute(const struct FLGUIDrawableEvent_Vector2& InEvent, const struct FVector2D& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Vector2_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Vector2_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector2_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Vector2&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FVector2D& value)>InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Vector2_Register(const struct FLGUIDrawableEvent_Vector2& InEvent, TDelegate<void(const struct FVector2D& value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Vector2_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Vector2_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector2_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Vector2&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Vector2_Unregister(const struct FLGUIDrawableEvent_Vector2& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Vector2_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Vector2_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector3_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Vector3&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector&                   InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Vector3_Execute(const struct FLGUIDrawableEvent_Vector3& InEvent, const struct FVector& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Vector3_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Vector3_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector3_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Vector3&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FVector& value)>InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Vector3_Register(const struct FLGUIDrawableEvent_Vector3& InEvent, TDelegate<void(const struct FVector& value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Vector3_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Vector3_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector3_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Vector3&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Vector3_Unregister(const struct FLGUIDrawableEvent_Vector3& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Vector3_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Vector3_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector4_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Vector4&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector4&                  InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Vector4_Execute(const struct FLGUIDrawableEvent_Vector4& InEvent, const struct FVector4& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Vector4_Execute");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Vector4_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector4_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Vector4&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FVector4& value)>InDelegate                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIDrawableEvent_Vector4_Register(const struct FLGUIDrawableEvent_Vector4& InEvent, TDelegate<void(const struct FVector4& value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Vector4_Register");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Vector4_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector4_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent_Vector4&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEvent_Vector4_Unregister(const struct FLGUIDrawableEvent_Vector4& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEvent_Vector4_Unregister");

	Params::LGUIBPLibrary_LGUIDrawableEvent_Vector4_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteActor(const struct FLGUIDrawableEvent& InEvent, class AActor* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteActor");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteActor Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool&                             InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteBool(const struct FLGUIDrawableEvent& InEvent, const bool& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteBool");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteBool Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                           InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteClass(const struct FLGUIDrawableEvent& InEvent, class UClass* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteClass");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteClass Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FColor&                    InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteColor(const struct FLGUIDrawableEvent& InEvent, const struct FColor& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteColor");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteColor Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteEmpty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteEmpty(const struct FLGUIDrawableEvent& InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteEmpty");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteEmpty Parms{};

	Parms.InEvent = std::move(InEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const float&                            InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteFloat(const struct FLGUIDrawableEvent& InEvent, const float& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteFloat");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteFloat Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteInt32
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const int32&                            InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteInt32(const struct FLGUIDrawableEvent& InEvent, const int32& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteInt32");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteInt32 Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteLinearColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteLinearColor(const struct FLGUIDrawableEvent& InEvent, const struct FLinearColor& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteLinearColor");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteLinearColor Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteObject(const struct FLGUIDrawableEvent& InEvent, class UObject* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteObject");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteObject Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecutePointerEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecutePointerEvent(const struct FLGUIDrawableEvent& InEvent, class ULGUIPointerEventData* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecutePointerEvent");

	Params::LGUIBPLibrary_LGUIDrawableEventExecutePointerEvent Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteQuaternion
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FQuat&                     InParameter                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteQuaternion(const struct FLGUIDrawableEvent& InEvent, const struct FQuat& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteQuaternion");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteQuaternion Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FRotator&                  InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteRotator(const struct FLGUIDrawableEvent& InEvent, const struct FRotator& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteRotator");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteRotator Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    InParameter                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteString(const struct FLGUIDrawableEvent& InEvent, const class FString& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteString");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteString Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteUInt8
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const uint8&                            InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteUInt8(const struct FLGUIDrawableEvent& InEvent, const uint8& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteUInt8");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteUInt8 Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteVector2
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector2D&                 InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteVector2(const struct FLGUIDrawableEvent& InEvent, const struct FVector2D& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteVector2");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteVector2 Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteVector3
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector&                   InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteVector3(const struct FLGUIDrawableEvent& InEvent, const struct FVector& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteVector3");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteVector3 Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteVector4
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIDrawableEvent&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector4&                  InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIDrawableEventExecuteVector4(const struct FLGUIDrawableEvent& InEvent, const struct FVector4& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIDrawableEventExecuteVector4");

	Params::LGUIBPLibrary_LGUIDrawableEventExecuteVector4 Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIExecuteControllerInputAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      inputKey                                               (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    pressOrRelease                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIExecuteControllerInputAction(const struct FKey& inputKey, bool pressOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIExecuteControllerInputAction");

	Params::LGUIBPLibrary_LGUIExecuteControllerInputAction Parms{};

	Parms.inputKey = std::move(inputKey);
	Parms.pressOrRelease = pressOrRelease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIExecuteControllerInputAxis
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      inputKey                                               (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIExecuteControllerInputAxis(const struct FKey& inputKey, float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIExecuteControllerInputAxis");

	Params::LGUIBPLibrary_LGUIExecuteControllerInputAxis Parms{};

	Parms.inputKey = std::move(inputKey);
	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIExecuteInputAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      inputKey                                               (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    pressOrRelease                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIExecuteInputAction(const struct FKey& inputKey, bool pressOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIExecuteInputAction");

	Params::LGUIBPLibrary_LGUIExecuteInputAction Parms{};

	Parms.inputKey = std::move(inputKey);
	Parms.pressOrRelease = pressOrRelease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIExecuteInputAxis
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      inputKey                                               (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIExecuteInputAxis(const struct FKey& inputKey, float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIExecuteInputAxis");

	Params::LGUIBPLibrary_LGUIExecuteInputAxis Parms{};

	Parms.inputKey = std::move(inputKey);
	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LoadPrefabWithAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrefabAsset*                     PrefabAsset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  InParent                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIBPLibrary::LoadPrefabWithAsset(class UObject* WorldContextObject, class UPrefabAsset* PrefabAsset, class USceneComponent* InParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LoadPrefabWithAsset");

	Params::LGUIBPLibrary_LoadPrefabWithAsset Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PrefabAsset = PrefabAsset;
	Parms.InParent = InParent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.PivotTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::PivotTo(class UUIItem* target, const struct FVector2D& endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "PivotTo");

	Params::LGUIBPLibrary_PivotTo Parms{};

	Parms.target = target;
	Parms.endValue = std::move(endValue);
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.PrintUIItemLog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Content                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LogDepth                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::PrintUIItemLog(const class FString& Content, class UUIItem* UIItem, int32 LogDepth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "PrintUIItemLog");

	Params::LGUIBPLibrary_PrintUIItemLog Parms{};

	Parms.Content = std::move(Content);
	Parms.UIItem = UIItem;
	Parms.LogDepth = LogDepth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.RemoveInstanceComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::RemoveInstanceComponent(class AActor* Actor, class UActorComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "RemoveInstanceComponent");

	Params::LGUIBPLibrary_RemoveInstanceComponent Parms{};

	Parms.Actor = Actor;
	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.ResetGlobalBlurUIItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::ResetGlobalBlurUIItem(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "ResetGlobalBlurUIItem");

	Params::LGUIBPLibrary_ResetGlobalBlurUIItem Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.SetAllTextFont
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIFontData_BaseObject*         FontData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::SetAllTextFont(class UObject* WorldContext, class ULGUIFontData_BaseObject* FontData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "SetAllTextFont");

	Params::LGUIBPLibrary_SetAllTextFont Parms{};

	Parms.WorldContext = WorldContext;
	Parms.FontData = FontData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.SetGlobalBlurUIItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::SetGlobalBlurUIItem(class UUIItem* UIItem, class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "SetGlobalBlurUIItem");

	Params::LGUIBPLibrary_SetGlobalBlurUIItem Parms{};

	Parms.UIItem = UIItem;
	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.SetIsFullScreenUIRendering
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::SetIsFullScreenUIRendering(class UObject* WorldContextObject, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "SetIsFullScreenUIRendering");

	Params::LGUIBPLibrary_SetIsFullScreenUIRendering Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.SetLGUIUISceneRendering
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsUISceneRendering                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::SetLGUIUISceneRendering(class AActor* Actor, bool IsUISceneRendering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "SetLGUIUISceneRendering");

	Params::LGUIBPLibrary_SetLGUIUISceneRendering Parms{};

	Parms.Actor = Actor;
	Parms.IsUISceneRendering = IsUISceneRendering;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.SetUIActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Acitve                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::SetUIActive(class AActor* Target, bool Acitve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "SetUIActive");

	Params::LGUIBPLibrary_SetUIActive Parms{};

	Parms.Target = Target;
	Parms.Acitve = Acitve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.SetUIAlpha
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InAlpha                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::SetUIAlpha(class AActor* Target, float InAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "SetUIAlpha");

	Params::LGUIBPLibrary_SetUIAlpha Parms{};

	Parms.Target = Target;
	Parms.InAlpha = InAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.SetUIHierarchyIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::SetUIHierarchyIndex(class AActor* Target, int32 index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "SetUIHierarchyIndex");

	Params::LGUIBPLibrary_SetUIHierarchyIndex Parms{};

	Parms.Target = Target;
	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.SimulationLineTrace
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Pos                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UUIItem*>*                 TraceOnlyItems                                         (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIPointerEventData* ULGUIBPLibrary::SimulationLineTrace(const struct FVector2D& Pos, class UObject* WorldContext, TArray<class UUIItem*>* TraceOnlyItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "SimulationLineTrace");

	Params::LGUIBPLibrary_SimulationLineTrace Parms{};

	Parms.Pos = std::move(Pos);
	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TraceOnlyItems != nullptr)
		*TraceOnlyItems = std::move(Parms.TraceOnlyItems);

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.SimulationLineTraceOnCenterScreen
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UUIItem*>*                 TraceOnlyItems                                         (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIPointerEventData* ULGUIBPLibrary::SimulationLineTraceOnCenterScreen(class UObject* WorldContext, TArray<class UUIItem*>* TraceOnlyItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "SimulationLineTraceOnCenterScreen");

	Params::LGUIBPLibrary_SimulationLineTraceOnCenterScreen Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TraceOnlyItems != nullptr)
		*TraceOnlyItems = std::move(Parms.TraceOnlyItems);

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.StretchBottomTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::StretchBottomTo(class UUIItem* target, float endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "StretchBottomTo");

	Params::LGUIBPLibrary_StretchBottomTo Parms{};

	Parms.target = target;
	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.StretchLeftTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::StretchLeftTo(class UUIItem* target, float endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "StretchLeftTo");

	Params::LGUIBPLibrary_StretchLeftTo Parms{};

	Parms.target = target;
	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.StretchRightTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::StretchRightTo(class UUIItem* target, float endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "StretchRightTo");

	Params::LGUIBPLibrary_StretchRightTo Parms{};

	Parms.target = target;
	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.StretchTopTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::StretchTopTo(class UUIItem* target, float endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "StretchTopTo");

	Params::LGUIBPLibrary_StretchTopTo Parms{};

	Parms.target = target;
	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.UILocalPositionTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::UILocalPositionTo(class UUIItem* target, const struct FVector& endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "UILocalPositionTo");

	Params::LGUIBPLibrary_UILocalPositionTo Parms{};

	Parms.target = target;
	Parms.endValue = std::move(endValue);
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.WidthTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::WidthTo(class UUIItem* target, float endValue, float duration, float delay, ELTweenEase ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "WidthTo");

	Params::LGUIBPLibrary_WidthTo Parms{};

	Parms.target = target;
	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.ease = ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.SetWorldUISceneRendering
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::SetWorldUISceneRendering(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBPLibrary", "SetWorldUISceneRendering");

	Params::LGUIBPLibrary_SetWorldUISceneRendering Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.GetActualClipType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUICanvasClipType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUICanvasClipType ULGUICanvas::GetActualClipType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualClipType");

	Params::LGUICanvas_GetActualClipType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualDynamicPixelsPerUnit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvas::GetActualDynamicPixelsPerUnit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualDynamicPixelsPerUnit");

	Params::LGUICanvas_GetActualDynamicPixelsPerUnit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualOnlyOwnerSee
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetActualOnlyOwnerSee()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualOnlyOwnerSee");

	Params::LGUICanvas_GetActualOnlyOwnerSee Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualOwnerNoSee
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetActualOwnerNoSee()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualOwnerNoSee");

	Params::LGUICanvas_GetActualOwnerNoSee Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualPixelPerfect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetActualPixelPerfect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualPixelPerfect");

	Params::LGUICanvas_GetActualPixelPerfect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualRenderMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUIRenderMode                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUIRenderMode ULGUICanvas::GetActualRenderMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualRenderMode");

	Params::LGUICanvas_GetActualRenderMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualRenderTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* ULGUICanvas::GetActualRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualRenderTarget");

	Params::LGUICanvas_GetActualRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetClipFeatherRectMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUICanvas::GetClipFeatherRectMax()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetClipFeatherRectMax");

	Params::LGUICanvas_GetClipFeatherRectMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetClipFeatherRectMin
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUICanvas::GetClipFeatherRectMin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetClipFeatherRectMin");

	Params::LGUICanvas_GetClipFeatherRectMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetClipRectMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUICanvas::GetClipRectMax()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetClipRectMax");

	Params::LGUICanvas_GetClipRectMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetClipRectMin
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUICanvas::GetClipRectMin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetClipRectMin");

	Params::LGUICanvas_GetClipRectMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireNormal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireNormal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireNormal");

	Params::LGUICanvas_GetRequireNormal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireTangent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireTangent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireTangent");

	Params::LGUICanvas_GetRequireTangent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireUV1
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireUV1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireUV1");

	Params::LGUICanvas_GetRequireUV1 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireUV2
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireUV2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireUV2");

	Params::LGUICanvas_GetRequireUV2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireUV3
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireUV3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireUV3");

	Params::LGUICanvas_GetRequireUV3 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireUV4
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireUV4()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireUV4");

	Params::LGUICanvas_GetRequireUV4 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireUV5
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireUV5()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireUV5");

	Params::LGUICanvas_GetRequireUV5 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireUV6
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireUV6()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireUV6");

	Params::LGUICanvas_GetRequireUV6 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRootCanvas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUICanvas*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvas* ULGUICanvas::GetRootCanvas()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRootCanvas");

	Params::LGUICanvas_GetRootCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetViewportSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint ULGUICanvas::GetViewportSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetViewportSize");

	Params::LGUICanvas_GetViewportSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.IsUIVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          HitUI                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::IsUIVisible(class UUIItem* HitUI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "IsUIVisible");

	Params::LGUICanvas_IsUIVisible Parms{};

	Parms.HitUI = HitUI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.SetClipTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         newTexture                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetClipTexture(class UTexture* newTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetClipTexture");

	Params::LGUICanvas_SetClipTexture Parms{};

	Parms.newTexture = newTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetClipTextureAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newAlpha                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetClipTextureAlpha(float newAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetClipTextureAlpha");

	Params::LGUICanvas_SetClipTextureAlpha Parms{};

	Parms.newAlpha = newAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetClipType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUICanvasClipType                     newClipType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetClipType(ELGUICanvasClipType newClipType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetClipType");

	Params::LGUICanvas_SetClipType Parms{};

	Parms.newClipType = newClipType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetDynamicPixelsPerUnit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetDynamicPixelsPerUnit(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetDynamicPixelsPerUnit");

	Params::LGUICanvas_SetDynamicPixelsPerUnit Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetInheriRectClip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newBool                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetInheriRectClip(bool newBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetInheriRectClip");

	Params::LGUICanvas_SetInheriRectClip Parms{};

	Parms.newBool = newBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetOnlyOwnerSee
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetOnlyOwnerSee(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetOnlyOwnerSee");

	Params::LGUICanvas_SetOnlyOwnerSee Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetOwnerNoSee
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetOwnerNoSee(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetOwnerNoSee");

	Params::LGUICanvas_SetOwnerNoSee Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetPixelPerfect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetPixelPerfect(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetPixelPerfect");

	Params::LGUICanvas_SetPixelPerfect Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetProjectionParameters
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECameraProjectionMode                   InProjectionType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFovAngle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InNearClipPlane                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFarClipPlane                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetProjectionParameters(ECameraProjectionMode InProjectionType, float InFovAngle, float InNearClipPlane, float InFarClipPlane)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetProjectionParameters");

	Params::LGUICanvas_SetProjectionParameters Parms{};

	Parms.InProjectionType = InProjectionType;
	Parms.InFovAngle = InFovAngle;
	Parms.InNearClipPlane = InNearClipPlane;
	Parms.InFarClipPlane = InFarClipPlane;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetRectClipFeather
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   newFeather                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULGUICanvas::SetRectClipFeather(const struct FMargin& newFeather)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetRectClipFeather");

	Params::LGUICanvas_SetRectClipFeather Parms{};

	Parms.newFeather = std::move(newFeather);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetRectClipOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   newOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULGUICanvas::SetRectClipOffset(const struct FMargin& newOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetRectClipOffset");

	Params::LGUICanvas_SetRectClipOffset Parms{};

	Parms.newOffset = std::move(newOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetRenderMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUIRenderMode                         value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetRenderMode(ELGUIRenderMode value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetRenderMode");

	Params::LGUICanvas_SetRenderMode Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetRenderTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetRenderTarget(class UTextureRenderTarget2D* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetRenderTarget");

	Params::LGUICanvas_SetRenderTarget Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetSortOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    propagateToChildrenCanvas                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetSortOrder(int32 newValue, bool propagateToChildrenCanvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetSortOrder");

	Params::LGUICanvas_SetSortOrder Parms{};

	Parms.newValue = newValue;
	Parms.propagateToChildrenCanvas = propagateToChildrenCanvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetSortOrderNew
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    propagateToChildrenCanvas                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetSortOrderNew(int32 newValue, bool propagateToChildrenCanvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetSortOrderNew");

	Params::LGUICanvas_SetSortOrderNew Parms{};

	Parms.newValue = newValue;
	Parms.propagateToChildrenCanvas = propagateToChildrenCanvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetSortOrderToHighestOfHierarchy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    propagateToChildrenCanvas                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetSortOrderToHighestOfHierarchy(bool propagateToChildrenCanvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetSortOrderToHighestOfHierarchy");

	Params::LGUICanvas_SetSortOrderToHighestOfHierarchy Parms{};

	Parms.propagateToChildrenCanvas = propagateToChildrenCanvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.GetCanvasScale
// (Final, Native, Public, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvas::GetCanvasScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetCanvasScale");

	Params::LGUICanvas_GetCanvasScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetClipFeather
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin ULGUICanvas::GetClipFeather() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetClipFeather");

	Params::LGUICanvas_GetClipFeather Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetClipTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* ULGUICanvas::GetClipTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetClipTexture");

	Params::LGUICanvas_GetClipTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetClipTextureAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvas::GetClipTextureAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetClipTextureAlpha");

	Params::LGUICanvas_GetClipTextureAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetClipType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUICanvasClipType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUICanvasClipType ULGUICanvas::GetClipType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetClipType");

	Params::LGUICanvas_GetClipType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetDynamicPixelsPerUnit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvas::GetDynamicPixelsPerUnit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetDynamicPixelsPerUnit");

	Params::LGUICanvas_GetDynamicPixelsPerUnit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetEnableSliceBorder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetEnableSliceBorder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetEnableSliceBorder");

	Params::LGUICanvas_GetEnableSliceBorder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetInheritRectClip
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetInheritRectClip() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetInheritRectClip");

	Params::LGUICanvas_GetInheritRectClip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetOnlyOwnerSee
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetOnlyOwnerSee() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetOnlyOwnerSee");

	Params::LGUICanvas_GetOnlyOwnerSee Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetOwnerNoSee
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetOwnerNoSee() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetOwnerNoSee");

	Params::LGUICanvas_GetOwnerNoSee Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetPixelPerfect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetPixelPerfect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetPixelPerfect");

	Params::LGUICanvas_GetPixelPerfect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRenderMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUIRenderMode                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUIRenderMode ULGUICanvas::GetRenderMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRenderMode");

	Params::LGUICanvas_GetRenderMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRenderTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* ULGUICanvas::GetRenderTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRenderTarget");

	Params::LGUICanvas_GetRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.IsPostTickUpdate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::IsPostTickUpdate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "IsPostTickUpdate");

	Params::LGUICanvas_IsPostTickUpdate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetMatchFromWidthToHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvasScaler::GetMatchFromWidthToHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetMatchFromWidthToHeight");

	Params::LGUICanvasScaler_GetMatchFromWidthToHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetReferenceResolution
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUICanvasScaler::GetReferenceResolution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetReferenceResolution");

	Params::LGUICanvasScaler_GetReferenceResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetScreenMatchMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUIScreenMatchMode                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUIScreenMatchMode ULGUICanvasScaler::GetScreenMatchMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetScreenMatchMode");

	Params::LGUICanvasScaler_GetScreenMatchMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetUIScaleMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUIScaleMode                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUIScaleMode ULGUICanvasScaler::GetUIScaleMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetUIScaleMode");

	Params::LGUICanvasScaler_GetUIScaleMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.SetFarClipPlane
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetFarClipPlane(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetFarClipPlane");

	Params::LGUICanvasScaler_SetFarClipPlane Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetFovAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetFovAngle(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetFovAngle");

	Params::LGUICanvasScaler_SetFovAngle Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetMatchFromWidthToHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetMatchFromWidthToHeight(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetMatchFromWidthToHeight");

	Params::LGUICanvasScaler_SetMatchFromWidthToHeight Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetNearClipPlane
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetNearClipPlane(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetNearClipPlane");

	Params::LGUICanvasScaler_SetNearClipPlane Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetProjectionType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECameraProjectionMode                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetProjectionType(ECameraProjectionMode value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetProjectionType");

	Params::LGUICanvasScaler_SetProjectionType Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetReferenceResolution
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetReferenceResolution(const struct FVector2D& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetReferenceResolution");

	Params::LGUICanvasScaler_SetReferenceResolution Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetScreenMatchMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUIScreenMatchMode                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetScreenMatchMode(ELGUIScreenMatchMode value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetScreenMatchMode");

	Params::LGUICanvasScaler_SetScreenMatchMode Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetUIScaleMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUIScaleMode                          value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetUIScaleMode(ELGUIScaleMode value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetUIScaleMode");

	Params::LGUICanvasScaler_SetUIScaleMode Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.ConvertPositionFromLGUICanvasToViewport
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUICanvasScaler::ConvertPositionFromLGUICanvasToViewport(const struct FVector2D& position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "ConvertPositionFromLGUICanvasToViewport");

	Params::LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport Parms{};

	Parms.position = std::move(position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.ConvertPositionFromViewportToLGUICanvas
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUICanvasScaler::ConvertPositionFromViewportToLGUICanvas(const struct FVector2D& position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "ConvertPositionFromViewportToLGUICanvas");

	Params::LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas Parms{};

	Parms.position = std::move(position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetFarClipPlane
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvasScaler::GetFarClipPlane() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetFarClipPlane");

	Params::LGUICanvasScaler_GetFarClipPlane Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetFovAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvasScaler::GetFovAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetFovAngle");

	Params::LGUICanvasScaler_GetFovAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetNearClipPlane
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvasScaler::GetNearClipPlane() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetNearClipPlane");

	Params::LGUICanvasScaler_GetNearClipPlane Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetProjectionType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECameraProjectionMode                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECameraProjectionMode ULGUICanvasScaler::GetProjectionType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetProjectionType");

	Params::LGUICanvasScaler_GetProjectionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.Project3DToScreen
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   Position3D                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutPosition2D                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvasScaler::Project3DToScreen(const struct FVector& Position3D, struct FVector2D* OutPosition2D) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "Project3DToScreen");

	Params::LGUICanvasScaler_Project3DToScreen Parms{};

	Parms.Position3D = std::move(Position3D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition2D != nullptr)
		*OutPosition2D = std::move(Parms.OutPosition2D);

	return Parms.ReturnValue;
}


// Function LGUI.LGUIComponentsRegistry.GetComponents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> ULGUIComponentsRegistry::GetComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIComponentsRegistry", "GetComponents");

	Params::LGUIComponentsRegistry_GetComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIComponentsRegistry.SetComponents
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class AActor*>&            NewComponents                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULGUIComponentsRegistry::SetComponents(const TArray<class AActor*>& NewComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIComponentsRegistry", "SetComponents");

	Params::LGUIComponentsRegistry_SetComponents Parms{};

	Parms.NewComponents = std::move(NewComponents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpineRenderable.AdjustSize
// (Final, Native, Public, BlueprintCallable)

void UUISpineRenderable::AdjustSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpineRenderable", "AdjustSize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpineRenderable.AfterSkeletonUpdate
// (Final, Native, Protected)
// Parameters:
// class USpineSkeletonComponent*          SkeletonComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpineRenderable::AfterSkeletonUpdate(class USpineSkeletonComponent* SkeletonComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpineRenderable", "AfterSkeletonUpdate");

	Params::UISpineRenderable_AfterSkeletonUpdate Parms{};

	Parms.SkeletonComponent = SkeletonComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpineRenderable.TestPlayPreviewAnimInRuntime
// (Final, Native, Public)

void UUISpineRenderable::TestPlayPreviewAnimInRuntime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpineRenderable", "TestPlayPreviewAnimInRuntime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpineRenderable.GetMeshesNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUISpineRenderable::GetMeshesNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpineRenderable", "GetMeshesNum");

	Params::UISpineRenderable_GetMeshesNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpineRenderable.GetTotalVerticeNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUISpineRenderable::GetTotalVerticeNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpineRenderable", "GetTotalVerticeNum");

	Params::UISpineRenderable_GetTotalVerticeNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_Selector.SetOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_Selector::SetOffset(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_Selector", "SetOffset");

	Params::UIEffectTextAnimation_Selector_SetOffset Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_Selector.GetOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_Selector::GetOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_Selector", "GetOffset");

	Params::UIEffectTextAnimation_Selector_GetOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.SetFlipDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RichTextTagSelector::SetFlipDirection(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RichTextTagSelector", "SetFlipDirection");

	Params::UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.SetRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RichTextTagSelector::SetRange(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RichTextTagSelector", "SetRange");

	Params::UIEffectTextAnimation_RichTextTagSelector_SetRange Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.SetTagName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RichTextTagSelector::SetTagName(const class FName& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RichTextTagSelector", "SetTagName");

	Params::UIEffectTextAnimation_RichTextTagSelector_SetTagName Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.GetFlipDirection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIEffectTextAnimation_RichTextTagSelector::GetFlipDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RichTextTagSelector", "GetFlipDirection");

	Params::UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.GetRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_RichTextTagSelector::GetRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RichTextTagSelector", "GetRange");

	Params::UIEffectTextAnimation_RichTextTagSelector_GetRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.GetTagName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName UUIEffectTextAnimation_RichTextTagSelector::GetTagName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RichTextTagSelector", "GetTagName");

	Params::UIEffectTextAnimation_RichTextTagSelector_GetTagName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.GetLGUIEventSystemInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIEventSystem*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIEventSystem* ULGUIEventSystem::GetLGUIEventSystemInstance(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "GetLGUIEventSystemInstance");

	Params::LGUIEventSystem_GetLGUIEventSystemInstance Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.ClearEvent
// (Final, Native, Public, BlueprintCallable)

void ULGUIEventSystem::ClearEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "ClearEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.GetCurrentInputModule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIBaseInputModule*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIBaseInputModule* ULGUIEventSystem::GetCurrentInputModule()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "GetCurrentInputModule");

	Params::LGUIEventSystem_GetCurrentInputModule Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.GetCurrentSelectedComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ULGUIEventSystem::GetCurrentSelectedComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "GetCurrentSelectedComponent");

	Params::LGUIEventSystem_GetCurrentSelectedComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.InputNavigationBegin
// (Final, Native, Public, BlueprintCallable)

void ULGUIEventSystem::InputNavigationBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "InputNavigationBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.InputNavigationDown
// (Final, Native, Public, BlueprintCallable)

void ULGUIEventSystem::InputNavigationDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "InputNavigationDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.InputNavigationEnd
// (Final, Native, Public, BlueprintCallable)

void ULGUIEventSystem::InputNavigationEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "InputNavigationEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.InputNavigationLeft
// (Final, Native, Public, BlueprintCallable)

void ULGUIEventSystem::InputNavigationLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "InputNavigationLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.InputNavigationNext
// (Final, Native, Public, BlueprintCallable)

void ULGUIEventSystem::InputNavigationNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "InputNavigationNext");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.InputNavigationPrev
// (Final, Native, Public, BlueprintCallable)

void ULGUIEventSystem::InputNavigationPrev()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "InputNavigationPrev");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.InputNavigationRight
// (Final, Native, Public, BlueprintCallable)

void ULGUIEventSystem::InputNavigationRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "InputNavigationRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.InputNavigationUp
// (Final, Native, Public, BlueprintCallable)

void ULGUIEventSystem::InputNavigationUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "InputNavigationUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.InputScroll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const float&                            inAxisValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::InputScroll(const float& inAxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "InputScroll");

	Params::LGUIEventSystem_InputScroll Parms{};

	Parms.inAxisValue = inAxisValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.InputTrigger
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    inTriggerPress                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMouseButtonType                        inMouseButtonType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::InputTrigger(bool inTriggerPress, EMouseButtonType inMouseButtonType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "InputTrigger");

	Params::LGUIEventSystem_InputTrigger Parms{};

	Parms.inTriggerPress = inTriggerPress;
	Parms.inMouseButtonType = inMouseButtonType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.IsRaycastEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIEventSystem::IsRaycastEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "IsRaycastEnable");

	Params::LGUIEventSystem_IsRaycastEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.Navigate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUINavigationDirection                direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUISelectableComponent*           Selectable                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ULGUIEventSystem::Navigate(ELGUINavigationDirection direction, class UUISelectableComponent* Selectable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "Navigate");

	Params::LGUIEventSystem_Navigate Parms{};

	Parms.direction = direction;
	Parms.Selectable = Selectable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.RegisterGlobalListener
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIBaseEventData* eventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIEventSystem::RegisterGlobalListener(const TDelegate<void(class ULGUIBaseEventData* eventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "RegisterGlobalListener");

	Params::LGUIEventSystem_RegisterGlobalListener Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.RegisterHitEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(bool isHit, const struct FHitResult& hitResult, class USceneComponent* hitComponent)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIEventSystem::RegisterHitEvent(const TDelegate<void(bool isHit, const struct FHitResult& hitResult, class USceneComponent* hitComponent)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "RegisterHitEvent");

	Params::LGUIEventSystem_RegisterHitEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.RegisterPointerEnterExitEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(bool bEnter)>&     PointerEnterExitDelegate                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULGUIEventSystem::RegisterPointerEnterExitEvent(const TDelegate<void(bool bEnter)>& PointerEnterExitDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "RegisterPointerEnterExitEvent");

	Params::LGUIEventSystem_RegisterPointerEnterExitEvent Parms{};

	Parms.PointerEnterExitDelegate = PointerEnterExitDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.SetRaycastEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    clearEvent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::SetRaycastEnable(bool enable, bool clearEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "SetRaycastEnable");

	Params::LGUIEventSystem_SetRaycastEnable Parms{};

	Parms.enable = enable;
	Parms.clearEvent = clearEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.SetSelectComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InSelectComp                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIBaseEventData*               eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::SetSelectComponent(class USceneComponent* InSelectComp, class ULGUIBaseEventData* eventData, ELGUIEventFireType eventFireType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "SetSelectComponent");

	Params::LGUIEventSystem_SetSelectComponent Parms{};

	Parms.InSelectComp = InSelectComp;
	Parms.eventData = eventData;
	Parms.eventFireType = eventFireType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.SetSelectComponentWithDefault
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InSelectComp                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::SetSelectComponentWithDefault(class USceneComponent* InSelectComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "SetSelectComponentWithDefault");

	Params::LGUIEventSystem_SetSelectComponentWithDefault Parms{};

	Parms.InSelectComp = InSelectComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.UnregisterGlobalListener
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InHandle                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIEventSystem::UnregisterGlobalListener(const struct FLGUIDelegateHandleWrapper& InHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "UnregisterGlobalListener");

	Params::LGUIEventSystem_UnregisterGlobalListener Parms{};

	Parms.InHandle = std::move(InHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.UnregisterHitEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InHandle                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIEventSystem::UnregisterHitEvent(const struct FLGUIDelegateHandleWrapper& InHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "UnregisterHitEvent");

	Params::LGUIEventSystem_UnregisterHitEvent Parms{};

	Parms.InHandle = std::move(InHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.UnRegisterPointerEnterExitEvent
// (Final, Native, Public, BlueprintCallable)

void ULGUIEventSystem::UnRegisterPointerEnterExitEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "UnRegisterPointerEnterExitEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.IsNavigationActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIEventSystem::IsNavigationActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "IsNavigationActive");

	Params::LGUIEventSystem_IsNavigationActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystemActor.PreDestroy
// (Final, Native, Public, BlueprintCallable)

void ALGUIEventSystemActor::PreDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystemActor", "PreDestroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteBase_BP.MarkRebuildGeometry_BP
// (Final, Native, Public, BlueprintCallable)

void UUISpriteBase_BP::MarkRebuildGeometry_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteBase_BP", "MarkRebuildGeometry_BP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteBase_BP.MarkVertexChanged_BP
// (Final, Native, Public, BlueprintCallable)

void UUISpriteBase_BP::MarkVertexChanged_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteBase_BP", "MarkVertexChanged_BP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteBase_BP.OnBeforeCreateOrUpdateGeometry_BP
// (Event, Protected, BlueprintEvent)

void UUISpriteBase_BP::OnBeforeCreateOrUpdateGeometry_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteBase_BP", "OnBeforeCreateOrUpdateGeometry_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.UISpriteBase_BP.OnCreateGeometry_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUICreateGeometryHelper*        InCreateGeometryHelper                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUISpriteData_BaseObject*       InSpriteData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpriteBase_BP::OnCreateGeometry_BP(class ULGUICreateGeometryHelper* InCreateGeometryHelper, class ULGUISpriteData_BaseObject* InSpriteData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteBase_BP", "OnCreateGeometry_BP");

	Params::UISpriteBase_BP_OnCreateGeometry_BP Parms{};

	Parms.InCreateGeometryHelper = InCreateGeometryHelper;
	Parms.InSpriteData = InSpriteData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UISpriteBase_BP.OnUpdateGeometry_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUIUpdateGeometryHelper*        InUpdateGoemetryHelper                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUISpriteData_BaseObject*       InSpriteData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexPositionChanged                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexUVChanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexColorChanged                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpriteBase_BP::OnUpdateGeometry_BP(class ULGUIUpdateGeometryHelper* InUpdateGoemetryHelper, class ULGUISpriteData_BaseObject* InSpriteData, bool InVertexPositionChanged, bool InVertexUVChanged, bool InVertexColorChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteBase_BP", "OnUpdateGeometry_BP");

	Params::UISpriteBase_BP_OnUpdateGeometry_BP Parms{};

	Parms.InUpdateGoemetryHelper = InUpdateGoemetryHelper;
	Parms.InSpriteData = InSpriteData;
	Parms.InVertexPositionChanged = InVertexPositionChanged;
	Parms.InVertexUVChanged = InVertexUVChanged;
	Parms.InVertexColorChanged = InVertexColorChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUIFontData.GetDefaultFont
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULGUIFontData*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIFontData* ULGUIFontData::GetDefaultFont()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIFontData", "GetDefaultFont");

	Params::LGUIFontData_GetDefaultFont Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIFontData.GetFonts
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class ULGUIFontData*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ULGUIFontData*> ULGUIFontData::GetFonts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIFontData", "GetFonts");

	Params::LGUIFontData_GetFonts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIFontData.RebuildAllFontText
// (Final, Native, Static, Public, BlueprintCallable)

void ULGUIFontData::RebuildAllFontText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIFontData", "RebuildAllFontText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIFontData.SetAllFontCurrentCulture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ECulture                                newCulture                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIFontData::SetAllFontCurrentCulture(ECulture newCulture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIFontData", "SetAllFontCurrentCulture");

	Params::LGUIFontData_SetAllFontCurrentCulture Parms{};

	Parms.newCulture = newCulture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIFontData.GetCharMapSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULGUIFontData::GetCharMapSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIFontData", "GetCharMapSize");

	Params::LGUIFontData_GetCharMapSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIFontData.GetFontPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULGUIFontData::GetFontPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIFontData", "GetFontPath");

	Params::LGUIFontData_GetFontPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIFontData.GetFontTexture
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* ULGUIFontData::GetFontTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIFontData", "GetFontTexture");

	Params::LGUIFontData_GetFontTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIFontData.GetFreeRectNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULGUIFontData::GetFreeRectNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIFontData", "GetFreeRectNum");

	Params::LGUIFontData_GetFreeRectNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIFontData.GetTobeClearNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULGUIFontData::GetTobeClearNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIFontData", "GetTobeClearNum");

	Params::LGUIFontData_GetTobeClearNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIFontData.GetUsedRectNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULGUIFontData::GetUsedRectNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIFontData", "GetUsedRectNum");

	Params::LGUIFontData_GetUsedRectNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseActor.ActivateAllChildrenInteraction
// (Final, Native, Public, BlueprintCallable)

void AUIBaseActor::ActivateAllChildrenInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "ActivateAllChildrenInteraction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.CleanIdleAnimSeqActorCache
// (Final, Native, Public)

void AUIBaseActor::CleanIdleAnimSeqActorCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "CleanIdleAnimSeqActorCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.ClearAllSequence
// (Final, Native, Public)

void AUIBaseActor::ClearAllSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "ClearAllSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.GetLoadStateOfSequenceByKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESequenceLoadState                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESequenceLoadState AUIBaseActor::GetLoadStateOfSequenceByKey(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "GetLoadStateOfSequenceByKey");

	Params::UIBaseActor_GetLoadStateOfSequenceByKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseActor.GetSeqInfoByKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceInfo                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSequenceInfo AUIBaseActor::GetSeqInfoByKey(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "GetSeqInfoByKey");

	Params::UIBaseActor_GetSeqInfoByKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseActor.GetSequencePlayContextOfKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USequencePlayContext*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USequencePlayContext* AUIBaseActor::GetSequencePlayContextOfKey(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "GetSequencePlayContextOfKey");

	Params::UIBaseActor_GetSequencePlayContextOfKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseActor.GetSequencePlayerByKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ALevelSequenceActor*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ALevelSequenceActor* AUIBaseActor::GetSequencePlayerByKey(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "GetSequencePlayerByKey");

	Params::UIBaseActor_GetSequencePlayerByKey Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseActor.LoadSequenceAssetAsyncByKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class ULevelSequence* Sequence)>&OnLoaded                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AUIBaseActor::LoadSequenceAssetAsyncByKey(const class FString& Key, const TDelegate<void(class ULevelSequence* Sequence)>& OnLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "LoadSequenceAssetAsyncByKey");

	Params::UIBaseActor_LoadSequenceAssetAsyncByKey Parms{};

	Parms.Key = std::move(Key);
	Parms.OnLoaded = OnLoaded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.PauseSequenceByKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIBaseActor::PauseSequenceByKey(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "PauseSequenceByKey");

	Params::UIBaseActor_PauseSequenceByKey Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.PlayLevelSequenceByKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIBaseActor::PlayLevelSequenceByKey(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "PlayLevelSequenceByKey");

	Params::UIBaseActor_PlayLevelSequenceByKey Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.ReplaySequenceByKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIBaseActor::ReplaySequenceByKey(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "ReplaySequenceByKey");

	Params::UIBaseActor_ReplaySequenceByKey Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.ResumeSequenceByKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIBaseActor::ResumeSequenceByKey(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "ResumeSequenceByKey");

	Params::UIBaseActor_ResumeSequenceByKey Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.SequenceJumpToEnd
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FSoftObjectPath&           SoftPath                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIBaseActor::SequenceJumpToEnd(const struct FSoftObjectPath& SoftPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "SequenceJumpToEnd");

	Params::UIBaseActor_SequenceJumpToEnd Parms{};

	Parms.SoftPath = std::move(SoftPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.SequenceJumpToSecondByKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FFrameTime&                Time                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIBaseActor::SequenceJumpToSecondByKey(const class FString& Name_0, const struct FFrameTime& Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "SequenceJumpToSecondByKey");

	Params::UIBaseActor_SequenceJumpToSecondByKey Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Time = std::move(Time);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.SequencePlayReverseByKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIBaseActor::SequencePlayReverseByKey(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "SequencePlayReverseByKey");

	Params::UIBaseActor_SequencePlayReverseByKey Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.StopSequenceByKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIBaseActor::StopSequenceByKey(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "StopSequenceByKey");

	Params::UIBaseActor_StopSequenceByKey Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.ExecuteSequencePlayEvent
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class FString&                    sequenceName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    eventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIBaseActor::ExecuteSequencePlayEvent(const class FString& sequenceName, const class FString& eventName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "ExecuteSequencePlayEvent");

	Params::UIBaseActor_ExecuteSequencePlayEvent Parms{};

	Parms.sequenceName = std::move(sequenceName);
	Parms.eventName = std::move(eventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.GetUIItem
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* AUIBaseActor::GetUIItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "GetUIItem");

	Params::UIBaseActor_GetUIItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIImageSequencePlayer.Pause
// (Final, Native, Public, BlueprintCallable)

void ULGUIImageSequencePlayer::Pause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "Pause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.Play
// (Final, Native, Public, BlueprintCallable)

void ULGUIImageSequencePlayer::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.SeekFrame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   frameNumber                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIImageSequencePlayer::SeekFrame(int32 frameNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "SeekFrame");

	Params::LGUIImageSequencePlayer_SeekFrame Parms{};

	Parms.frameNumber = frameNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.SeekTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIImageSequencePlayer::SeekTime(float time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "SeekTime");

	Params::LGUIImageSequencePlayer_SeekTime Parms{};

	Parms.time = time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.SetFps
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIImageSequencePlayer::SetFps(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "SetFps");

	Params::LGUIImageSequencePlayer_SetFps Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.SetLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIImageSequencePlayer::SetLoop(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "SetLoop");

	Params::LGUIImageSequencePlayer_SetLoop Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.Stop
// (Final, Native, Public, BlueprintCallable)

void ULGUIImageSequencePlayer::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.GetDuration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIImageSequencePlayer::GetDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "GetDuration");

	Params::LGUIImageSequencePlayer_GetDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIImageSequencePlayer.GetFps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIImageSequencePlayer::GetFps() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "GetFps");

	Params::LGUIImageSequencePlayer_GetFps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIImageSequencePlayer.GetIsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIImageSequencePlayer::GetIsPlaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "GetIsPlaying");

	Params::LGUIImageSequencePlayer_GetIsPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIImageSequencePlayer.GetLoop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIImageSequencePlayer::GetLoop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "GetLoop");

	Params::LGUIImageSequencePlayer_GetLoop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.SetEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RangeSelector::SetEnd(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "SetEnd");

	Params::UIEffectTextAnimation_RangeSelector_SetEnd Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.SetFlipDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RangeSelector::SetFlipDirection(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "SetFlipDirection");

	Params::UIEffectTextAnimation_RangeSelector_SetFlipDirection Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.SetRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RangeSelector::SetRange(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "SetRange");

	Params::UIEffectTextAnimation_RangeSelector_SetRange Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.SetStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RangeSelector::SetStart(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "SetStart");

	Params::UIEffectTextAnimation_RangeSelector_SetStart Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.GetEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_RangeSelector::GetEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "GetEnd");

	Params::UIEffectTextAnimation_RangeSelector_GetEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.GetFlipDirection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIEffectTextAnimation_RangeSelector::GetFlipDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "GetFlipDirection");

	Params::UIEffectTextAnimation_RangeSelector_GetFlipDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.GetRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_RangeSelector::GetRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "GetRange");

	Params::UIEffectTextAnimation_RangeSelector_GetRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.GetStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_RangeSelector::GetStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "GetStart");

	Params::UIEffectTextAnimation_RangeSelector_GetStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIManagerActor.GetGlobalUiBlurIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ALGUIManagerActor::GetGlobalUiBlurIndex(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIManagerActor", "GetGlobalUiBlurIndex");

	Params::LGUIManagerActor_GetGlobalUiBlurIndex Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIManagerActor.SetDebugRootLayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObj                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          LayerItem                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALGUIManagerActor::SetDebugRootLayer(class UObject* WorldContextObj, class UUIItem* LayerItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIManagerActor", "SetDebugRootLayer");

	Params::LGUIManagerActor_SetDebugRootLayer Parms{};

	Parms.WorldContextObj = WorldContextObj;
	Parms.LayerItem = LayerItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.ResetSelectableDelegate
// (Final, Native, Static, Public, BlueprintCallable)

void UUISelectableComponent::ResetSelectableDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UISelectableComponent", "ResetSelectableDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetSelectableDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class UUISelectableComponent* SelectableComponent, bool bCreate)>&Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetSelectableDelegate(const TDelegate<void(class UUISelectableComponent* SelectableComponent, bool bCreate)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UISelectableComponent", "SetSelectableDelegate");

	Params::UISelectableComponent_SetSelectableDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetShieldMobileHighlight
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetShieldMobileHighlight(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UISelectableComponent", "SetShieldMobileHighlight");

	Params::UISelectableComponent_SetShieldMobileHighlight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetShieldPCPress
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetShieldPCPress(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UISelectableComponent", "SetShieldPCPress");

	Params::UISelectableComponent_SetShieldPCPress Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.ApplySelectionState
// (Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bImmediateSet                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::ApplySelectionState(bool bImmediateSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "ApplySelectionState");

	Params::UISelectableComponent_ApplySelectionState Parms{};

	Parms.bImmediateSet = bImmediateSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.GetCanClickWhenDisable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISelectableComponent::GetCanClickWhenDisable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetCanClickWhenDisable");

	Params::UISelectableComponent_GetCanClickWhenDisable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetSelectionState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableSelectionState             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableSelectionState UUISelectableComponent::GetSelectionState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetSelectionState");

	Params::UISelectableComponent_GetSelectionState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetSelfInteractive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISelectableComponent::GetSelfInteractive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetSelfInteractive");

	Params::UISelectableComponent_GetSelfInteractive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.NotifyFocusListener
// (Final, Native, Public, BlueprintCallable)

void UUISelectableComponent::NotifyFocusListener()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "NotifyFocusListener");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.NotifyUnFocusListener
// (Final, Native, Public, BlueprintCallable)

void UUISelectableComponent::NotifyUnFocusListener()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "NotifyUnFocusListener");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.PlayUIAnimationByPlayInfo
// (Final, Native, Public)
// Parameters:
// const struct FAnimationPlayInfo&        PlayInfo                                               (Parm, NativeAccessSpecifierPublic)

void UUISelectableComponent::PlayUIAnimationByPlayInfo(const struct FAnimationPlayInfo& PlayInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "PlayUIAnimationByPlayInfo");

	Params::UISelectableComponent_PlayUIAnimationByPlayInfo Parms{};

	Parms.PlayInfo = std::move(PlayInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetCanClickWhenDisable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    CanClickEnbale                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetCanClickWhenDisable(bool CanClickEnbale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetCanClickWhenDisable");

	Params::UISelectableComponent_SetCanClickWhenDisable Parms{};

	Parms.CanClickEnbale = CanClickEnbale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetHighlightedColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetHighlightedColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetHighlightedColor");

	Params::UISelectableComponent_SetHighlightedColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetHighlightedSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUISpriteData_BaseObject*       NewSprite                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetHighlightedSprite(class ULGUISpriteData_BaseObject* NewSprite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetHighlightedSprite");

	Params::UISelectableComponent_SetHighlightedSprite Parms{};

	Parms.NewSprite = NewSprite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetIsCustomAnim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsCustomAnim                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetIsCustomAnim(bool bIsCustomAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetIsCustomAnim");

	Params::UISelectableComponent_SetIsCustomAnim Parms{};

	Parms.bIsCustomAnim = bIsCustomAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetIsCustomTransition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsCustomTransition                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetIsCustomTransition(bool bIsCustomTransition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetIsCustomTransition");

	Params::UISelectableComponent_SetIsCustomTransition Parms{};

	Parms.bIsCustomTransition = bIsCustomTransition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationDown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableNavigationMode             value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationDown(EUISelectableNavigationMode value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationDown");

	Params::UISelectableComponent_SetNavigationDown Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationDownExplicit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           value                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationDownExplicit(class UUISelectableComponent* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationDownExplicit");

	Params::UISelectableComponent_SetNavigationDownExplicit Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationGroup
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UUINavigationGroupComponent*      Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationGroup(class UUINavigationGroupComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationGroup");

	Params::UISelectableComponent_SetNavigationGroup Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationGroupParent
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationGroupParent(class UUISelectableComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationGroupParent");

	Params::UISelectableComponent_SetNavigationGroupParent Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationLeft
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableNavigationMode             value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationLeft(EUISelectableNavigationMode value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationLeft");

	Params::UISelectableComponent_SetNavigationLeft Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationLeftExplicit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           value                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationLeftExplicit(class UUISelectableComponent* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationLeftExplicit");

	Params::UISelectableComponent_SetNavigationLeftExplicit Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationNext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableNavigationMode             value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationNext(EUISelectableNavigationMode value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationNext");

	Params::UISelectableComponent_SetNavigationNext Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationNextExplicit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           value                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationNextExplicit(class UUISelectableComponent* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationNextExplicit");

	Params::UISelectableComponent_SetNavigationNextExplicit Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationPrev
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableNavigationMode             value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationPrev(EUISelectableNavigationMode value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationPrev");

	Params::UISelectableComponent_SetNavigationPrev Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationPrevExplicit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           value                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationPrevExplicit(class UUISelectableComponent* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationPrevExplicit");

	Params::UISelectableComponent_SetNavigationPrevExplicit Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationRight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableNavigationMode             value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationRight(EUISelectableNavigationMode value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationRight");

	Params::UISelectableComponent_SetNavigationRight Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationRightExplicit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           value                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationRightExplicit(class UUISelectableComponent* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationRightExplicit");

	Params::UISelectableComponent_SetNavigationRightExplicit Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableNavigationMode             value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationUp(EUISelectableNavigationMode value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationUp");

	Params::UISelectableComponent_SetNavigationUp Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationUpExplicit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           value                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationUpExplicit(class UUISelectableComponent* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationUpExplicit");

	Params::UISelectableComponent_SetNavigationUpExplicit Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNormalColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNormalColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNormalColor");

	Params::UISelectableComponent_SetNormalColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNormalSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUISpriteData_BaseObject*       NewSprite                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNormalSprite(class ULGUISpriteData_BaseObject* NewSprite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNormalSprite");

	Params::UISelectableComponent_SetNormalSprite Parms{};

	Parms.NewSprite = NewSprite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetPressedColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetPressedColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetPressedColor");

	Params::UISelectableComponent_SetPressedColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetPressedSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUISpriteData_BaseObject*       NewSprite                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetPressedSprite(class ULGUISpriteData_BaseObject* NewSprite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetPressedSprite");

	Params::UISelectableComponent_SetPressedSprite Parms{};

	Parms.NewSprite = NewSprite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetScrollView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIScrollViewWithScrollbarComponent*Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetScrollView(class UUIScrollViewWithScrollbarComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetScrollView");

	Params::UISelectableComponent_SetScrollView Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetSelectionState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableSelectionState             NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetSelectionState(EUISelectableSelectionState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetSelectionState");

	Params::UISelectableComponent_SetSelectionState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetSelfInteractive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InteractiveEnable                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetSelfInteractive(bool InteractiveEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetSelfInteractive");

	Params::UISelectableComponent_SetSelfInteractive Parms{};

	Parms.InteractiveEnable = InteractiveEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetTransitionTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AUIBaseActor*                     value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetTransitionTarget(class AUIBaseActor* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetTransitionTarget");

	Params::UISelectableComponent_SetTransitionTarget Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.GetDisabledSprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* UUISelectableComponent::GetDisabledSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetDisabledSprite");

	Params::UISelectableComponent_GetDisabledSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetHighlightedColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUISelectableComponent::GetHighlightedColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetHighlightedColor");

	Params::UISelectableComponent_GetHighlightedColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetHighlightedSprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* UUISelectableComponent::GetHighlightedSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetHighlightedSprite");

	Params::UISelectableComponent_GetHighlightedSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableNavigationMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableNavigationMode UUISelectableComponent::GetNavigationDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationDown");

	Params::UISelectableComponent_GetNavigationDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationDownExplicit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUISelectableComponent::GetNavigationDownExplicit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationDownExplicit");

	Params::UISelectableComponent_GetNavigationDownExplicit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableNavigationMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableNavigationMode UUISelectableComponent::GetNavigationLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationLeft");

	Params::UISelectableComponent_GetNavigationLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationLeftExplicit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUISelectableComponent::GetNavigationLeftExplicit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationLeftExplicit");

	Params::UISelectableComponent_GetNavigationLeftExplicit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationNext
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableNavigationMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableNavigationMode UUISelectableComponent::GetNavigationNext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationNext");

	Params::UISelectableComponent_GetNavigationNext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationNextExplicit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUISelectableComponent::GetNavigationNextExplicit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationNextExplicit");

	Params::UISelectableComponent_GetNavigationNextExplicit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationPrev
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableNavigationMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableNavigationMode UUISelectableComponent::GetNavigationPrev() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationPrev");

	Params::UISelectableComponent_GetNavigationPrev Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationPrevExplicit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUISelectableComponent::GetNavigationPrevExplicit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationPrevExplicit");

	Params::UISelectableComponent_GetNavigationPrevExplicit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationRight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableNavigationMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableNavigationMode UUISelectableComponent::GetNavigationRight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationRight");

	Params::UISelectableComponent_GetNavigationRight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationRightExplicit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUISelectableComponent::GetNavigationRightExplicit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationRightExplicit");

	Params::UISelectableComponent_GetNavigationRightExplicit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationUp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableNavigationMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableNavigationMode UUISelectableComponent::GetNavigationUp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationUp");

	Params::UISelectableComponent_GetNavigationUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationUpExplicit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUISelectableComponent::GetNavigationUpExplicit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationUpExplicit");

	Params::UISelectableComponent_GetNavigationUpExplicit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNormalColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUISelectableComponent::GetNormalColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNormalColor");

	Params::UISelectableComponent_GetNormalColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNormalSprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* UUISelectableComponent::GetNormalSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNormalSprite");

	Params::UISelectableComponent_GetNormalSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetPressedColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUISelectableComponent::GetPressedColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetPressedColor");

	Params::UISelectableComponent_GetPressedColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetPressedSprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* UUISelectableComponent::GetPressedSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetPressedSprite");

	Params::UISelectableComponent_GetPressedSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetSelectedSprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* UUISelectableComponent::GetSelectedSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetSelectedSprite");

	Params::UISelectableComponent_GetSelectedSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetTransitionTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUISelectableComponent::GetTransitionTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetTransitionTarget");

	Params::UISelectableComponent_GetTransitionTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.IsInteractable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISelectableComponent::IsInteractable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "IsInteractable");

	Params::UISelectableComponent_IsInteractable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIExtendToggle.SetAllTransitionsEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtendToggle::SetAllTransitionsEnable(bool bIsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggle", "SetAllTransitionsEnable");

	Params::UIExtendToggle_SetAllTransitionsEnable Parms{};

	Parms.bIsEnable = bIsEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIExtendToggle.SetToggleGroup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           TogGroupActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtendToggle::SetToggleGroup(class AActor* TogGroupActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggle", "SetToggleGroup");

	Params::UIExtendToggle_SetToggleGroup Parms{};

	Parms.TogGroupActor = TogGroupActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIExtendToggle.SetToggleState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EToggleState                            State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFireEvent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EToggleChangeStateResult                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EToggleChangeStateResult UUIExtendToggle::SetToggleState(EToggleState State, bool bFireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggle", "SetToggleState");

	Params::UIExtendToggle_SetToggleState Parms{};

	Parms.State = State;
	Parms.bFireEvent = bFireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIExtendToggle.SetToggleStateForce
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EToggleState                            State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFireEvent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIngnoreAnim                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtendToggle::SetToggleStateForce(EToggleState State, bool bFireEvent, bool bIngnoreAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggle", "SetToggleStateForce");

	Params::UIExtendToggle_SetToggleStateForce Parms{};

	Parms.State = State;
	Parms.bFireEvent = bFireEvent;
	Parms.bIngnoreAnim = bIngnoreAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIExtendToggle.GetToggleGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIExtendToggleGroup*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIExtendToggleGroup* UUIExtendToggle::GetToggleGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggle", "GetToggleGroup");

	Params::UIExtendToggle_GetToggleGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIExtendToggle.GetToggleState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EToggleState                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EToggleState UUIExtendToggle::GetToggleState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggle", "GetToggleState");

	Params::UIExtendToggle_GetToggleState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPlayTween.RegisterOnComplete
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void()>&                InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIPlayTween::RegisterOnComplete(const TDelegate<void()>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTween", "RegisterOnComplete");

	Params::LGUIPlayTween_RegisterOnComplete Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPlayTween.Start
// (Final, Native, Public, BlueprintCallable)

void ULGUIPlayTween::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTween", "Start");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTween.Stop
// (Final, Native, Public, BlueprintCallable)

void ULGUIPlayTween::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTween", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTween.UnregisterOnComplete
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIPlayTween::UnregisterOnComplete(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTween", "UnregisterOnComplete");

	Params::LGUIPlayTween_UnregisterOnComplete Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTween.GetTweener
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIPlayTween::GetTweener() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTween", "GetTweener");

	Params::LGUIPlayTween_GetTweener Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutBase.SetGridAnimationInterval
// (Native, Protected, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutBase::SetGridAnimationInterval(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutBase", "SetGridAnimationInterval");

	Params::UILayoutBase_SetGridAnimationInterval Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutBase.SetGridAnimationStartTime
// (Native, Protected, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutBase::SetGridAnimationStartTime(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutBase", "SetGridAnimationStartTime");

	Params::UILayoutBase_SetGridAnimationStartTime Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutBase.SetInAnimation
// (Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    state                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutBase::SetInAnimation(bool state)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutBase", "SetInAnimation");

	Params::UILayoutBase_SetInAnimation Parms{};

	Parms.state = state;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutBase.GetGridAnimationInterval
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUILayoutBase::GetGridAnimationInterval() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutBase", "GetGridAnimationInterval");

	Params::UILayoutBase_GetGridAnimationInterval Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutBase.GetGridAnimationStartTime
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUILayoutBase::GetGridAnimationStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutBase", "GetGridAnimationStartTime");

	Params::UILayoutBase_GetGridAnimationStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutBase.GetInAnimation
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUILayoutBase::GetInAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutBase", "GetInAnimation");

	Params::UILayoutBase_GetInAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutWithAnimation.CancelAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    callComplete                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutWithAnimation::CancelAnimation(bool callComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation", "CancelAnimation");

	Params::UILayoutWithAnimation_CancelAnimation Parms{};

	Parms.callComplete = callComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutWithAnimation.SetAnimationDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutWithAnimation::SetAnimationDuration(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation", "SetAnimationDuration");

	Params::UILayoutWithAnimation_SetAnimationDuration Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutWithAnimation.SetAnimationType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUILayoutChangePositionAnimationType    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutWithAnimation::SetAnimationType(EUILayoutChangePositionAnimationType value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation", "SetAnimationType");

	Params::UILayoutWithAnimation_SetAnimationType Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutWithAnimation.GetAnimationDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUILayoutWithAnimation::GetAnimationDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation", "GetAnimationDuration");

	Params::UILayoutWithAnimation_GetAnimationDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutWithAnimation.GetAnimationType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUILayoutChangePositionAnimationType    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUILayoutChangePositionAnimationType UUILayoutWithAnimation::GetAnimationType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation", "GetAnimationType");

	Params::UILayoutWithAnimation_GetAnimationType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIExtendToggleTextureTransition.SetAllTransitionStateTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtendToggleTextureTransition::SetAllTransitionStateTexture(class UTexture* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggleTextureTransition", "SetAllTransitionStateTexture");

	Params::UIExtendToggleTextureTransition_SetAllTransitionStateTexture Parms{};

	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIExtendToggleTextureTransition.SetTargetStateTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EToggleTransitionState                  State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceNoTriggerOnChange                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtendToggleTextureTransition::SetTargetStateTexture(EToggleTransitionState State, class UTexture* Texture, bool ForceNoTriggerOnChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggleTextureTransition", "SetTargetStateTexture");

	Params::UIExtendToggleTextureTransition_SetTargetStateTexture Parms{};

	Parms.State = State;
	Parms.Texture = Texture;
	Parms.ForceNoTriggerOnChange = ForceNoTriggerOnChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIButtonComponent.OnPointerDown_Implementation
// (Native, Protected)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIButtonComponent::OnPointerDown_Implementation(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIButtonComponent", "OnPointerDown_Implementation");

	Params::UIButtonComponent_OnPointerDown_Implementation Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIButtonComponent.RegisterClickEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void()>&                InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIButtonComponent::RegisterClickEvent(const TDelegate<void()>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIButtonComponent", "RegisterClickEvent");

	Params::UIButtonComponent_RegisterClickEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIButtonComponent.UnregisterClickEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIButtonComponent::UnregisterClickEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIButtonComponent", "UnregisterClickEvent");

	Params::UIButtonComponent_UnregisterClickEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIExtendButtonComponent.SetDelegateForHelpClick
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(int32 helpGroupId)>&delegateObj                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIExtendButtonComponent::SetDelegateForHelpClick(const TDelegate<void(int32 helpGroupId)>& delegateObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIExtendButtonComponent", "SetDelegateForHelpClick");

	Params::UIExtendButtonComponent_SetDelegateForHelpClick Parms{};

	Parms.delegateObj = delegateObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFrameAnimController.Pause
// (Final, Native, Protected, BlueprintCallable)

void UUIFrameAnimController::Pause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFrameAnimController", "Pause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFrameAnimController.Play
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bLooping                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIFrameAnimController::Play(bool bLooping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFrameAnimController", "Play");

	Params::UIFrameAnimController_Play Parms{};

	Parms.bLooping = bLooping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFrameAnimController.Resume
// (Final, Native, Protected, BlueprintCallable)

void UUIFrameAnimController::Resume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFrameAnimController", "Resume");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFrameAnimController.Stop
// (Final, Native, Protected, BlueprintCallable)

void UUIFrameAnimController::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFrameAnimController", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTweenComponent.Play
// (Final, Native, Public, BlueprintCallable)

void ULGUIPlayTweenComponent::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTweenComponent", "Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTweenComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void ULGUIPlayTweenComponent::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTweenComponent", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTweenComponent.GetPlayTween
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIPlayTween*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIPlayTween* ULGUIPlayTweenComponent::GetPlayTween() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTweenComponent", "GetPlayTween");

	Params::LGUIPlayTweenComponent_GetPlayTween Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPlayTweenSequenceComponent.Play
// (Final, Native, Public, BlueprintCallable)

void ULGUIPlayTweenSequenceComponent::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTweenSequenceComponent", "Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTweenSequenceComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void ULGUIPlayTweenSequenceComponent::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTweenSequenceComponent", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUILayoutAlignmentType                value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetAlign(ELGUILayoutAlignmentType value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetAlign");

	Params::UIHorizontalLayout_SetAlign Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetExpendChildrenHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetExpendChildrenHeight(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetExpendChildrenHeight");

	Params::UIHorizontalLayout_SetExpendChildrenHeight Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetExpendChildrenWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetExpendChildrenWidth(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetExpendChildrenWidth");

	Params::UIHorizontalLayout_SetExpendChildrenWidth Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetHeightFitToChildren(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetHeightFitToChildren");

	Params::UIHorizontalLayout_SetHeightFitToChildren Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetPadding(const struct FMargin& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetPadding");

	Params::UIHorizontalLayout_SetPadding Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetSpacing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetSpacing(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetSpacing");

	Params::UIHorizontalLayout_SetSpacing Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetWidthFitToChildren(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetWidthFitToChildren");

	Params::UIHorizontalLayout_SetWidthFitToChildren Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.GetActuralRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIHorizontalLayout::GetActuralRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetActuralRange");

	Params::UIHorizontalLayout_GetActuralRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUILayoutAlignmentType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUILayoutAlignmentType UUIHorizontalLayout::GetAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetAlign");

	Params::UIHorizontalLayout_GetAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetExpendChildrenHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetExpendChildrenHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetExpendChildrenHeight");

	Params::UIHorizontalLayout_GetExpendChildrenHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetExpendChildrenWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetExpendChildrenWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetExpendChildrenWidth");

	Params::UIHorizontalLayout_GetExpendChildrenWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetHeightFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetHeightFitToChildren");

	Params::UIHorizontalLayout_GetHeightFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin UUIHorizontalLayout::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetPadding");

	Params::UIHorizontalLayout_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetSpacing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIHorizontalLayout::GetSpacing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetSpacing");

	Params::UIHorizontalLayout_GetSpacing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetWidthFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetWidthFitToChildren");

	Params::UIHorizontalLayout_GetWidthFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerClickInterface.OnPointerClick
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerClickInterface::OnPointerClick(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerClickInterface", "OnPointerClick");

	Params::LGUIPointerClickInterface_OnPointerClick Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDownUpInterface.OnPointerDown
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDownUpInterface::OnPointerDown(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDownUpInterface", "OnPointerDown");

	Params::LGUIPointerDownUpInterface_OnPointerDown Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDownUpInterface.OnPointerUp
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDownUpInterface::OnPointerUp(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDownUpInterface", "OnPointerUp");

	Params::LGUIPointerDownUpInterface_OnPointerUp Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDragDropInterface.OnPointerDragDrop
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDragDropInterface::OnPointerDragDrop(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDragDropInterface", "OnPointerDragDrop");

	Params::LGUIPointerDragDropInterface_OnPointerDragDrop Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDragEnterExitInterface.OnPointerDragEnter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDragEnterExitInterface::OnPointerDragEnter(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDragEnterExitInterface", "OnPointerDragEnter");

	Params::LGUIPointerDragEnterExitInterface_OnPointerDragEnter Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDragEnterExitInterface.OnPointerDragExit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDragEnterExitInterface::OnPointerDragExit(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDragEnterExitInterface", "OnPointerDragExit");

	Params::LGUIPointerDragEnterExitInterface_OnPointerDragExit Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDragInterface.OnPointerBeginDrag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDragInterface::OnPointerBeginDrag(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDragInterface", "OnPointerBeginDrag");

	Params::LGUIPointerDragInterface_OnPointerBeginDrag Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDragInterface.OnPointerDrag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDragInterface::OnPointerDrag(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDragInterface", "OnPointerDrag");

	Params::LGUIPointerDragInterface_OnPointerDrag Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDragInterface.OnPointerEndDrag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDragInterface::OnPointerEndDrag(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDragInterface", "OnPointerEndDrag");

	Params::LGUIPointerDragInterface_OnPointerEndDrag Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEnterExitInterface.OnPointerEnter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerEnterExitInterface::OnPointerEnter(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerEnterExitInterface", "OnPointerEnter");

	Params::LGUIPointerEnterExitInterface_OnPointerEnter Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEnterExitInterface.OnPointerExit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerEnterExitInterface::OnPointerExit(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerEnterExitInterface", "OnPointerExit");

	Params::LGUIPointerEnterExitInterface_OnPointerExit Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.EndAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easeType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIPolygon::EndAngleTo(float endValue, float duration, float delay, ELTweenEase easeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "EndAngleTo");

	Params::UIPolygon_EndAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.easeType = easeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.SetEndAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygon::SetEndAngle(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "SetEndAngle");

	Params::UIPolygon_SetEndAngle Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygon.SetSides
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygon::SetSides(int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "SetSides");

	Params::UIPolygon_SetSides Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygon.SetStartAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygon::SetStartAngle(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "SetStartAngle");

	Params::UIPolygon_SetStartAngle Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygon.SetUVType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIPolygonUVType                        value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygon::SetUVType(EUIPolygonUVType value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "SetUVType");

	Params::UIPolygon_SetUVType Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygon.SetVertexOffsetArray
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<float>&                    value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIPolygon::SetVertexOffsetArray(const TArray<float>& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "SetVertexOffsetArray");

	Params::UIPolygon_SetVertexOffsetArray Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygon.StartAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easeType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIPolygon::StartAngleTo(float endValue, float duration, float delay, ELTweenEase easeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "StartAngleTo");

	Params::UIPolygon_StartAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.easeType = easeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.GetEndAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIPolygon::GetEndAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "GetEndAngle");

	Params::UIPolygon_GetEndAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.GetSides
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIPolygon::GetSides() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "GetSides");

	Params::UIPolygon_GetSides Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.GetStartAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIPolygon::GetStartAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "GetStartAngle");

	Params::UIPolygon_GetStartAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.GetUVType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIPolygonUVType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIPolygonUVType UUIPolygon::GetUVType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "GetUVType");

	Params::UIPolygon_GetUVType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.GetVertexOffsetArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<float>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<float> UUIPolygon::GetVertexOffsetArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "GetVertexOffsetArray");

	Params::UIPolygon_GetVertexOffsetArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.GetCumulativeMoveDelta
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIPointerEventData::GetCumulativeMoveDelta() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetCumulativeMoveDelta");

	Params::LGUIPointerEventData_GetCumulativeMoveDelta Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.GetDragRayDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIPointerEventData::GetDragRayDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetDragRayDirection");

	Params::LGUIPointerEventData_GetDragRayDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.GetDragRayOrigin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIPointerEventData::GetDragRayOrigin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetDragRayOrigin");

	Params::LGUIPointerEventData_GetDragRayOrigin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.GetLocalPointInPlane
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIPointerEventData::GetLocalPointInPlane() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetLocalPointInPlane");

	Params::LGUIPointerEventData_GetLocalPointInPlane Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.GetWorldPointInPlane
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIPointerEventData::GetWorldPointInPlane() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetWorldPointInPlane");

	Params::LGUIPointerEventData_GetWorldPointInPlane Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.GetWorldPointSpherical
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIPointerEventData::GetWorldPointSpherical() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetWorldPointSpherical");

	Params::LGUIPointerEventData_GetWorldPointSpherical Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerInterruptInterface.NeedInterrupt
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIBaseEventData*               EventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerInterruptInterface::NeedInterrupt(class ULGUIBaseEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerInterruptInterface", "NeedInterrupt");

	Params::LGUIPointerInterruptInterface_NeedInterrupt Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerScrollInterface.OnPointerScroll
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerScrollInterface::OnPointerScroll(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerScrollInterface", "OnPointerScroll");

	Params::LGUIPointerScrollInterface_OnPointerScroll Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerSelectDeselectInterface.OnPointerDeselect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIBaseEventData*               eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerSelectDeselectInterface::OnPointerDeselect(class ULGUIBaseEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerSelectDeselectInterface", "OnPointerDeselect");

	Params::LGUIPointerSelectDeselectInterface_OnPointerDeselect Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerSelectDeselectInterface.OnPointerSelect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIBaseEventData*               eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerSelectDeselectInterface::OnPointerSelect(class ULGUIBaseEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerSelectDeselectInterface", "OnPointerSelect");

	Params::LGUIPointerSelectDeselectInterface_OnPointerSelect Parms{};

	Parms.eventData = eventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UINavigationGroupComponent.ResetNavigateGroupDelegate
// (Final, Native, Static, Public, BlueprintCallable)

void UUINavigationGroupComponent::ResetNavigateGroupDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UINavigationGroupComponent", "ResetNavigateGroupDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINavigationGroupComponent.SetNavigateGroupDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class UUINavigationGroupComponent* NavigationGroupComponent, EUINavigationGroupMode mode)>&Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUINavigationGroupComponent::SetNavigateGroupDelegate(const TDelegate<void(class UUINavigationGroupComponent* NavigationGroupComponent, EUINavigationGroupMode mode)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UINavigationGroupComponent", "SetNavigateGroupDelegate");

	Params::UINavigationGroupComponent_SetNavigateGroupDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINavigationGroupComponent.SetNavigateTolerance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const float                             Tolerance                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINavigationGroupComponent::SetNavigateTolerance(const float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UINavigationGroupComponent", "SetNavigateTolerance");

	Params::UINavigationGroupComponent_SetNavigateTolerance Parms{};

	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINavigationGroupComponent.GetRootNavigationGrade
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UUISelectableComponent*>*  Result                                                 (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UUINavigationGroupComponent::GetRootNavigationGrade(TArray<class UUISelectableComponent*>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINavigationGroupComponent", "GetRootNavigationGrade");

	Params::UINavigationGroupComponent_GetRootNavigationGrade Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function LGUI.UINavigationGroupComponent.Navigate
// (Final, Native, Public, BlueprintCallable)

void UUINavigationGroupComponent::Navigate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINavigationGroupComponent", "Navigate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINavigationGroupComponent.NavigateToNextGroup
// (Final, Native, Public, BlueprintCallable)

void UUINavigationGroupComponent::NavigateToNextGroup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINavigationGroupComponent", "NavigateToNextGroup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINavigationGroupComponent.NavigateToPrevGroup
// (Final, Native, Public, BlueprintCallable)

void UUINavigationGroupComponent::NavigateToPrevGroup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINavigationGroupComponent", "NavigateToPrevGroup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIScreenSpaceInteraction.SetClickThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIScreenSpaceInteraction::SetClickThreshold(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIScreenSpaceInteraction", "SetClickThreshold");

	Params::LGUIScreenSpaceInteraction_SetClickThreshold Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIScreenSpaceInteraction.SetHoldToDrag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIScreenSpaceInteraction::SetHoldToDrag(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIScreenSpaceInteraction", "SetHoldToDrag");

	Params::LGUIScreenSpaceInteraction_SetHoldToDrag Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIScreenSpaceInteraction.SetHoldToDragTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIScreenSpaceInteraction::SetHoldToDragTime(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIScreenSpaceInteraction", "SetHoldToDragTime");

	Params::LGUIScreenSpaceInteraction_SetHoldToDragTime Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIScreenSpaceInteraction.GetClickThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIScreenSpaceInteraction::GetClickThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIScreenSpaceInteraction", "GetClickThreshold");

	Params::LGUIScreenSpaceInteraction_GetClickThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIScreenSpaceInteraction.GetHoldToDrag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIScreenSpaceInteraction::GetHoldToDrag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIScreenSpaceInteraction", "GetHoldToDrag");

	Params::LGUIScreenSpaceInteraction_GetHoldToDrag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIScreenSpaceInteraction.GetHoldToDragTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIScreenSpaceInteraction::GetHoldToDragTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIScreenSpaceInteraction", "GetHoldToDragTime");

	Params::LGUIScreenSpaceInteraction_GetHoldToDragTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIScreenSpaceInteractionForNoneUI.SetClickThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIScreenSpaceInteractionForNoneUI::SetClickThreshold(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIScreenSpaceInteractionForNoneUI", "SetClickThreshold");

	Params::LGUIScreenSpaceInteractionForNoneUI_SetClickThreshold Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIScreenSpaceInteractionForNoneUI.SetHoldToDrag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIScreenSpaceInteractionForNoneUI::SetHoldToDrag(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIScreenSpaceInteractionForNoneUI", "SetHoldToDrag");

	Params::LGUIScreenSpaceInteractionForNoneUI_SetHoldToDrag Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIScreenSpaceInteractionForNoneUI.SetHoldToDragTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIScreenSpaceInteractionForNoneUI::SetHoldToDragTime(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIScreenSpaceInteractionForNoneUI", "SetHoldToDragTime");

	Params::LGUIScreenSpaceInteractionForNoneUI_SetHoldToDragTime Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIScreenSpaceInteractionForNoneUI.GetClickThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIScreenSpaceInteractionForNoneUI::GetClickThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIScreenSpaceInteractionForNoneUI", "GetClickThreshold");

	Params::LGUIScreenSpaceInteractionForNoneUI_GetClickThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIScreenSpaceInteractionForNoneUI.GetHoldToDrag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIScreenSpaceInteractionForNoneUI::GetHoldToDrag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIScreenSpaceInteractionForNoneUI", "GetHoldToDrag");

	Params::LGUIScreenSpaceInteractionForNoneUI_GetHoldToDrag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIScreenSpaceInteractionForNoneUI.GetHoldToDragTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIScreenSpaceInteractionForNoneUI::GetHoldToDragTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIScreenSpaceInteractionForNoneUI", "GetHoldToDragTime");

	Params::LGUIScreenSpaceInteractionForNoneUI_GetHoldToDragTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByAspectRatio.SetAspectRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByAspectRatio::SetAspectRatio(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByAspectRatio", "SetAspectRatio");

	Params::UISizeControlByAspectRatio_SetAspectRatio Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByAspectRatio.SetControlMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISizeControlByAspectRatioMode         value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByAspectRatio::SetControlMode(EUISizeControlByAspectRatioMode value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByAspectRatio", "SetControlMode");

	Params::UISizeControlByAspectRatio_SetControlMode Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByAspectRatio.GetAspectRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISizeControlByAspectRatio::GetAspectRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByAspectRatio", "GetAspectRatio");

	Params::UISizeControlByAspectRatio_GetAspectRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByAspectRatio.GetControlMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISizeControlByAspectRatioMode         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISizeControlByAspectRatioMode UUISizeControlByAspectRatio::GetControlMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByAspectRatio", "GetControlMode");

	Params::UISizeControlByAspectRatio_GetControlMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData_BaseObject.GetAtlasTexture
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* ULGUISpriteData_BaseObject::GetAtlasTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData_BaseObject", "GetAtlasTexture");

	Params::LGUISpriteData_BaseObject_GetAtlasTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData_BaseObject.GetSpriteInfo
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FLGUISpriteInfo                  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUISpriteInfo ULGUISpriteData_BaseObject::GetSpriteInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData_BaseObject", "GetSpriteInfo");

	Params::LGUISpriteData_BaseObject_GetSpriteInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData_BaseObject.IsIndividual
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUISpriteData_BaseObject::IsIndividual() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData_BaseObject", "IsIndividual");

	Params::LGUISpriteData_BaseObject_IsIndividual Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData.CreateLGUISpriteData
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       inSpriteTexture                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 inHorizontalBorder                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 inVerticalBorder                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             inPackingTag                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUISpriteData*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData* ULGUISpriteData::CreateLGUISpriteData(class UObject* Outer_0, class UTexture2D* inSpriteTexture, const struct FVector2D& inHorizontalBorder, const struct FVector2D& inVerticalBorder, class FName inPackingTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUISpriteData", "CreateLGUISpriteData");

	Params::LGUISpriteData_CreateLGUISpriteData Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.inSpriteTexture = inSpriteTexture;
	Parms.inHorizontalBorder = std::move(inHorizontalBorder);
	Parms.inVerticalBorder = std::move(inVerticalBorder);
	Parms.inPackingTag = inPackingTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData.GetPackingTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName ULGUISpriteData::GetPackingTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData", "GetPackingTag");

	Params::LGUISpriteData_GetPackingTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData.GetSpriteTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* ULGUISpriteData::GetSpriteTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData", "GetSpriteTexture");

	Params::LGUISpriteData_GetSpriteTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData.HavePackingTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUISpriteData::HavePackingTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData", "HavePackingTag");

	Params::LGUISpriteData_HavePackingTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableTransitionComponent.CollectTweener
// (Native, Public, BlueprintCallable)
// Parameters:
// class ULTweener*                        InItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::CollectTweener(class ULTweener* InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "CollectTweener");

	Params::UISelectableTransitionComponent_CollectTweener Parms{};

	Parms.InItem = InItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableTransitionComponent.CollectTweeners
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSet<class ULTweener*>&           InItems                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::CollectTweeners(const TSet<class ULTweener*>& InItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "CollectTweeners");

	Params::UISelectableTransitionComponent_CollectTweeners Parms{};

	Parms.InItems = std::move(InItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableTransitionComponent.OnDisabledBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    InImmediateSet                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::OnDisabledBP(bool InImmediateSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "OnDisabledBP");

	Params::UISelectableTransitionComponent_OnDisabledBP Parms{};

	Parms.InImmediateSet = InImmediateSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UISelectableTransitionComponent.OnHighlightedBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    InImmediateSet                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::OnHighlightedBP(bool InImmediateSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "OnHighlightedBP");

	Params::UISelectableTransitionComponent_OnHighlightedBP Parms{};

	Parms.InImmediateSet = InImmediateSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UISelectableTransitionComponent.OnNormalBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    InImmediateSet                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::OnNormalBP(bool InImmediateSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "OnNormalBP");

	Params::UISelectableTransitionComponent_OnNormalBP Parms{};

	Parms.InImmediateSet = InImmediateSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UISelectableTransitionComponent.OnPressedBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    InImmediateSet                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::OnPressedBP(bool InImmediateSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "OnPressedBP");

	Params::UISelectableTransitionComponent_OnPressedBP Parms{};

	Parms.InImmediateSet = InImmediateSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UISelectableTransitionComponent.OnStartCustomTransitionBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             InTransitionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InImmediateSet                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::OnStartCustomTransitionBP(class FName InTransitionName, bool InImmediateSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "OnStartCustomTransitionBP");

	Params::UISelectableTransitionComponent_OnStartCustomTransitionBP Parms{};

	Parms.InTransitionName = InTransitionName;
	Parms.InImmediateSet = InImmediateSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UISelectableTransitionComponent.StopTransition
// (Native, Public, BlueprintCallable)

void UUISelectableTransitionComponent::StopTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "StopTransition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableStateHolder.SetAllTransitionsEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableStateHolder::SetAllTransitionsEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableStateHolder", "SetAllTransitionsEnable");

	Params::UISelectableStateHolder_SetAllTransitionsEnable Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIWorldSpaceInteraction.SetClickThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIWorldSpaceInteraction::SetClickThreshold(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteraction", "SetClickThreshold");

	Params::LGUIWorldSpaceInteraction_SetClickThreshold Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIWorldSpaceInteraction.SetHoldToDrag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIWorldSpaceInteraction::SetHoldToDrag(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteraction", "SetHoldToDrag");

	Params::LGUIWorldSpaceInteraction_SetHoldToDrag Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIWorldSpaceInteraction.SetHoldToDragTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIWorldSpaceInteraction::SetHoldToDragTime(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteraction", "SetHoldToDragTime");

	Params::LGUIWorldSpaceInteraction_SetHoldToDragTime Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIWorldSpaceInteraction.SetInteractionSource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUIWorldSpaceInteractionSource        value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIWorldSpaceInteraction::SetInteractionSource(ELGUIWorldSpaceInteractionSource value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteraction", "SetInteractionSource");

	Params::LGUIWorldSpaceInteraction_SetInteractionSource Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIWorldSpaceInteraction.GetClickThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIWorldSpaceInteraction::GetClickThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteraction", "GetClickThreshold");

	Params::LGUIWorldSpaceInteraction_GetClickThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIWorldSpaceInteraction.GetHoldToDrag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIWorldSpaceInteraction::GetHoldToDrag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteraction", "GetHoldToDrag");

	Params::LGUIWorldSpaceInteraction_GetHoldToDrag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIWorldSpaceInteraction.GetHoldToDragTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIWorldSpaceInteraction::GetHoldToDragTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteraction", "GetHoldToDragTime");

	Params::LGUIWorldSpaceInteraction_GetHoldToDragTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIWorldSpaceInteraction.GetInteractionSource
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUIWorldSpaceInteractionSource        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUIWorldSpaceInteractionSource ULGUIWorldSpaceInteraction::GetInteractionSource() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteraction", "GetInteractionSource");

	Params::LGUIWorldSpaceInteraction_GetInteractionSource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.SetClickThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIWorldSpaceInteractionForNoneUI::SetClickThreshold(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteractionForNoneUI", "SetClickThreshold");

	Params::LGUIWorldSpaceInteractionForNoneUI_SetClickThreshold Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.SetHoldToDrag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIWorldSpaceInteractionForNoneUI::SetHoldToDrag(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteractionForNoneUI", "SetHoldToDrag");

	Params::LGUIWorldSpaceInteractionForNoneUI_SetHoldToDrag Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.SetHoldToDragTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIWorldSpaceInteractionForNoneUI::SetHoldToDragTime(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteractionForNoneUI", "SetHoldToDragTime");

	Params::LGUIWorldSpaceInteractionForNoneUI_SetHoldToDragTime Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.SetInteractionSource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUIWorldSpaceInteractionSource        value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIWorldSpaceInteractionForNoneUI::SetInteractionSource(ELGUIWorldSpaceInteractionSource value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteractionForNoneUI", "SetInteractionSource");

	Params::LGUIWorldSpaceInteractionForNoneUI_SetInteractionSource Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.GetClickThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIWorldSpaceInteractionForNoneUI::GetClickThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteractionForNoneUI", "GetClickThreshold");

	Params::LGUIWorldSpaceInteractionForNoneUI_GetClickThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.GetHoldToDrag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIWorldSpaceInteractionForNoneUI::GetHoldToDrag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteractionForNoneUI", "GetHoldToDrag");

	Params::LGUIWorldSpaceInteractionForNoneUI_GetHoldToDrag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.GetHoldToDragTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIWorldSpaceInteractionForNoneUI::GetHoldToDragTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteractionForNoneUI", "GetHoldToDragTime");

	Params::LGUIWorldSpaceInteractionForNoneUI_GetHoldToDragTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.GetInteractionSource
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUIWorldSpaceInteractionSource        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUIWorldSpaceInteractionSource ULGUIWorldSpaceInteractionForNoneUI::GetInteractionSource() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceInteractionForNoneUI", "GetInteractionSource");

	Params::LGUIWorldSpaceInteractionForNoneUI_GetInteractionSource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.SequencePlayContext.ExecutePlay
// (Final, Native, Public, BlueprintCallable)

void USequencePlayContext::ExecutePlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SequencePlayContext", "ExecutePlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.SequencePlayContext.SetBatchRoots
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class AUIBaseActor*>&      BatchRoots                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USequencePlayContext::SetBatchRoots(const TArray<class AUIBaseActor*>& BatchRoots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SequencePlayContext", "SetBatchRoots");

	Params::SequencePlayContext_SetBatchRoots Parms{};

	Parms.BatchRoots = std::move(BatchRoots);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.SequencePlayContext.TryStop
// (Final, Native, Public, BlueprintCallable)

void USequencePlayContext::TryStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SequencePlayContext", "TryStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByOther.SetAdditionalHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByOther::SetAdditionalHeight(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "SetAdditionalHeight");

	Params::UISizeControlByOther_SetAdditionalHeight Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByOther.SetAdditionalWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByOther::SetAdditionalWidth(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "SetAdditionalWidth");

	Params::UISizeControlByOther_SetAdditionalWidth Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByOther.SetControlHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByOther::SetControlHeight(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "SetControlHeight");

	Params::UISizeControlByOther_SetControlHeight Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByOther.SetControlWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByOther::SetControlWidth(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "SetControlWidth");

	Params::UISizeControlByOther_SetControlWidth Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByOther.SetTargetActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AUIBaseActor*                     NewTargetActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByOther::SetTargetActor(class AUIBaseActor* NewTargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "SetTargetActor");

	Params::UISizeControlByOther_SetTargetActor Parms{};

	Parms.NewTargetActor = NewTargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByOther.GetAdditionalHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISizeControlByOther::GetAdditionalHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "GetAdditionalHeight");

	Params::UISizeControlByOther_GetAdditionalHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByOther.GetAdditionalWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISizeControlByOther::GetAdditionalWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "GetAdditionalWidth");

	Params::UISizeControlByOther_GetAdditionalWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByOther.GetControlHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISizeControlByOther::GetControlHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "GetControlHeight");

	Params::UISizeControlByOther_GetControlHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByOther.GetControlWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISizeControlByOther::GetControlWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "GetControlWidth");

	Params::UISizeControlByOther_GetControlWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByOther.GetTargetActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUISizeControlByOther::GetTargetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "GetTargetActor");

	Params::UISizeControlByOther_GetTargetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.SequencerManager.BatchPlaySequenceOnActors
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSoftObjectPath&           SequencePath                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AUIBaseActor*>&      BatchRoots                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FMovieSceneSequencePlaybackSettings&PlaySetting                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class ALevelSequenceActor*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ALevelSequenceActor* USequencerManager::BatchPlaySequenceOnActors(class UObject* Context, const struct FSoftObjectPath& SequencePath, const TArray<class AUIBaseActor*>& BatchRoots, const struct FMovieSceneSequencePlaybackSettings& PlaySetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SequencerManager", "BatchPlaySequenceOnActors");

	Params::SequencerManager_BatchPlaySequenceOnActors Parms{};

	Parms.Context = Context;
	Parms.SequencePath = std::move(SequencePath);
	Parms.BatchRoots = std::move(BatchRoots);
	Parms.PlaySetting = std::move(PlaySetting);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.SequencerManager.GetBatchPlayContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USequencePlayContext*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USequencePlayContext* USequencerManager::GetBatchPlayContext(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SequencerManager", "GetBatchPlayContext");

	Params::SequencerManager_GetBatchPlayContext Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.SequencerManager.GetSequenceLoadState
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    Context                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSoftObjectPath&           Path                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESequenceLoadState                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESequenceLoadState USequencerManager::GetSequenceLoadState(const class UObject* Context, const struct FSoftObjectPath& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SequencerManager", "GetSequenceLoadState");

	Params::SequencerManager_GetSequenceLoadState Parms{};

	Parms.Context = Context;
	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.SequencerManager.LoadSequenceAssetAsync
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    Context                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSoftObjectPath&           Path                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class ULevelSequence* Sequence)>&OnLoad                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USequencerManager::LoadSequenceAssetAsync(const class UObject* Context, const struct FSoftObjectPath& Path, const TDelegate<void(class ULevelSequence* Sequence)>& OnLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SequencerManager", "LoadSequenceAssetAsync");

	Params::SequencerManager_LoadSequenceAssetAsync Parms{};

	Parms.Context = Context;
	Parms.Path = std::move(Path);
	Parms.OnLoad = OnLoad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.SequencerManager.ClearInvalidBind
// (Final, Native, Public)
// Parameters:
// class ALevelSequenceActor*              SeqActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USequencerManager::ClearInvalidBind(class ALevelSequenceActor* SeqActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SequencerManager", "ClearInvalidBind");

	Params::SequencerManager_ClearInvalidBind Parms{};

	Parms.SeqActor = SeqActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableGroupComponent.OnComponentHighlighted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableGroupComponent::OnComponentHighlighted(class UUISelectableComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableGroupComponent", "OnComponentHighlighted");

	Params::UISelectableGroupComponent_OnComponentHighlighted Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableGroupComponent.OnComponentSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableGroupComponent::OnComponentSelected(class UUISelectableComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableGroupComponent", "OnComponentSelected");

	Params::UISelectableGroupComponent_OnComponentSelected Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableGroupComponent.OnComponentUnhighlighted
// (Final, Native, Public, BlueprintCallable)

void UUISelectableGroupComponent::OnComponentUnhighlighted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableGroupComponent", "OnComponentUnhighlighted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableGroupComponent.OnComponentUnselected
// (Final, Native, Public, BlueprintCallable)

void UUISelectableGroupComponent::OnComponentUnselected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableGroupComponent", "OnComponentUnselected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIStaticMesh.SetMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIStaticMesh::SetMesh(class UStaticMesh* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMesh", "SetMesh");

	Params::UIStaticMesh_SetMesh Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIStaticMesh.SetVertexColorType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIStaticMeshVertexColorType            value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIStaticMesh::SetVertexColorType(EUIStaticMeshVertexColorType value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMesh", "SetVertexColorType");

	Params::UIStaticMesh_SetVertexColorType Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIStaticMesh.GetMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* UUIStaticMesh::GetMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMesh", "GetMesh");

	Params::UIStaticMesh_GetMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIStaticMesh.GetVertexColorType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIStaticMeshVertexColorType            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIStaticMeshVertexColorType UUIStaticMesh::GetVertexColorType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMesh", "GetVertexColorType");

	Params::UIStaticMesh_GetVertexColorType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UI2DLineRaw.AdjustSize
// (Final, Native, Public, BlueprintCallable)

void UUI2DLineRaw::AdjustSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRaw", "AdjustSize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UI2DLineRaw.SetPoints
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FVector2D>&         InPoints                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAdjustSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUI2DLineRaw::SetPoints(const TArray<struct FVector2D>& InPoints, bool bAdjustSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRaw", "SetPoints");

	Params::UI2DLineRaw_SetPoints Parms{};

	Parms.InPoints = std::move(InPoints);
	Parms.bAdjustSize = bAdjustSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIAndroidBackComponent.ClearAndroidBackComponent
// (Final, Native, Static, Public, BlueprintCallable)

void UUIAndroidBackComponent::ClearAndroidBackComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIAndroidBackComponent", "ClearAndroidBackComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIAndroidBackComponent.GetActiveAndroidBackComponentSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIAndroidBackComponent::GetActiveAndroidBackComponentSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIAndroidBackComponent", "GetActiveAndroidBackComponentSize");

	Params::UIAndroidBackComponent_GetActiveAndroidBackComponentSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIAndroidBackComponent.GetTopActiveAndroidBack
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIAndroidBackComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIAndroidBackComponent* UUIAndroidBackComponent::GetTopActiveAndroidBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIAndroidBackComponent", "GetTopActiveAndroidBack");

	Params::UIAndroidBackComponent_GetTopActiveAndroidBack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpriteTransition.SetAllTransitionSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUISpriteData_BaseObject*       NewSprite                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpriteTransition::SetAllTransitionSprite(class ULGUISpriteData_BaseObject* NewSprite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteTransition", "SetAllTransitionSprite");

	Params::UISpriteTransition_SetAllTransitionSprite Parms{};

	Parms.NewSprite = NewSprite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteTransition.SetStateSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableSelectionState             State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUISpriteData_BaseObject*       NewSprite                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpriteTransition::SetStateSprite(EUISelectableSelectionState State, class ULGUISpriteData_BaseObject* NewSprite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteTransition", "SetStateSprite");

	Params::UISpriteTransition_SetStateSprite Parms{};

	Parms.State = State;
	Parms.NewSprite = NewSprite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIArtText.CheckTextValid
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIArtText::CheckTextValid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "CheckTextValid");

	Params::UIArtText_CheckTextValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIArtText.SetArtTextData
// (Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIArtTextData*                 NewArtTextData                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIArtText::SetArtTextData(class ULGUIArtTextData* NewArtTextData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "SetArtTextData");

	Params::UIArtText_SetArtTextData Parms{};

	Parms.NewArtTextData = NewArtTextData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIArtText.SetHorizontalAlign
// (Native, Public, BlueprintCallable)
// Parameters:
// const EUIArtTextHorizontalAlign         NewHorizontalAlign                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIArtText::SetHorizontalAlign(const EUIArtTextHorizontalAlign NewHorizontalAlign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "SetHorizontalAlign");

	Params::UIArtText_SetHorizontalAlign Parms{};

	Parms.NewHorizontalAlign = NewHorizontalAlign;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIArtText.SetIsWidthControlledByText
// (Native, Public, BlueprintCallable)
// Parameters:
// const bool                              NewValue                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIArtText::SetIsWidthControlledByText(const bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "SetIsWidthControlledByText");

	Params::UIArtText_SetIsWidthControlledByText Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIArtText.SetSize
// (Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewSize                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIArtText::SetSize(const float NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "SetSize");

	Params::UIArtText_SetSize Parms{};

	Parms.NewSize = NewSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIArtText.SetSpace
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewSpace                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIArtText::SetSpace(const struct FVector2D& NewSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "SetSpace");

	Params::UIArtText_SetSpace Parms{};

	Parms.NewSpace = std::move(NewSpace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIArtText.SetText
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewText                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIArtText::SetText(const class FString& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "SetText");

	Params::UIArtText_SetText Parms{};

	Parms.NewText = std::move(NewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIArtText.GetArtTextData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIArtTextData*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIArtTextData* UUIArtText::GetArtTextData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "GetArtTextData");

	Params::UIArtText_GetArtTextData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIArtText.GetHorizontalAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIArtTextHorizontalAlign               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIArtTextHorizontalAlign UUIArtText::GetHorizontalAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "GetHorizontalAlign");

	Params::UIArtText_GetHorizontalAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIArtText.GetIsWidthControlledByText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIArtText::GetIsWidthControlledByText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "GetIsWidthControlledByText");

	Params::UIArtText_GetIsWidthControlledByText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIArtText.GetSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIArtText::GetSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "GetSize");

	Params::UIArtText_GetSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIArtText.GetSpace
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIArtText::GetSpace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "GetSpace");

	Params::UIArtText_GetSpace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIArtText.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUIArtText::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArtText", "GetText");

	Params::UIArtText_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextureBase.OnDynamicAtlasSlotBuilt
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FDynamicAtlasSlotManagedHandle&ManagedHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUITextureBase::OnDynamicAtlasSlotBuilt(const struct FDynamicAtlasSlotManagedHandle& ManagedHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase", "OnDynamicAtlasSlotBuilt");

	Params::UITextureBase_OnDynamicAtlasSlotBuilt Parms{};

	Parms.ManagedHandle = std::move(ManagedHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextureBase.SetDynamicAtlasTextureAsync
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    InAtlasTag                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSoftObjectPath&           InSoftObjectPath                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextureBase::SetDynamicAtlasTextureAsync(const class FString& InAtlasTag, const struct FSoftObjectPath& InSoftObjectPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase", "SetDynamicAtlasTextureAsync");

	Params::UITextureBase_SetDynamicAtlasTextureAsync Parms{};

	Parms.InAtlasTag = std::move(InAtlasTag);
	Parms.InSoftObjectPath = std::move(InSoftObjectPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextureBase.SetSizeFromTexture
// (Final, Native, Public, BlueprintCallable)

void UUITextureBase::SetSizeFromTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase", "SetSizeFromTexture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextureBase.SetTexture
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         newTexture                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextureBase::SetTexture(class UTexture* newTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase", "SetTexture");

	Params::UITextureBase_SetTexture Parms{};

	Parms.newTexture = newTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextureBase.GetTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UUITextureBase::GetTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase", "GetTexture");

	Params::UITextureBase_GetTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPostProcessRenderable.SetMaskTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPostProcessRenderable::SetMaskTexture(class UTexture2D* newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPostProcessRenderable", "SetMaskTexture");

	Params::UIPostProcessRenderable_SetMaskTexture Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPostProcessRenderable.GetMaskTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UUIPostProcessRenderable::GetMaskTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPostProcessRenderable", "GetMaskTexture");

	Params::UIPostProcessRenderable_GetMaskTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundBlur.SetApplyAlphaToBlur
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBackgroundBlur::SetApplyAlphaToBlur(bool newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "SetApplyAlphaToBlur");

	Params::UIBackgroundBlur_SetApplyAlphaToBlur Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBackgroundBlur.SetBlurStrength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBackgroundBlur::SetBlurStrength(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "SetBlurStrength");

	Params::UIBackgroundBlur_SetBlurStrength Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBackgroundBlur.SetMaxDownSampleLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBackgroundBlur::SetMaxDownSampleLevel(int32 newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "SetMaxDownSampleLevel");

	Params::UIBackgroundBlur_SetMaxDownSampleLevel Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBackgroundBlur.SetStrengthTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBackgroundBlur::SetStrengthTexture(class UTexture2D* newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "SetStrengthTexture");

	Params::UIBackgroundBlur_SetStrengthTexture Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBackgroundBlur.GetApplyAlphaToBlur
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIBackgroundBlur::GetApplyAlphaToBlur() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "GetApplyAlphaToBlur");

	Params::UIBackgroundBlur_GetApplyAlphaToBlur Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundBlur.GetBlurStrength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIBackgroundBlur::GetBlurStrength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "GetBlurStrength");

	Params::UIBackgroundBlur_GetBlurStrength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundBlur.GetMaxDownSampleLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIBackgroundBlur::GetMaxDownSampleLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "GetMaxDownSampleLevel");

	Params::UIBackgroundBlur_GetMaxDownSampleLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundBlur.GetStrengthTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UUIBackgroundBlur::GetStrengthTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "GetStrengthTexture");

	Params::UIBackgroundBlur_GetStrengthTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpriteSheetTexturePlayer.SetHeightCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpriteSheetTexturePlayer::SetHeightCount(int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSheetTexturePlayer", "SetHeightCount");

	Params::UISpriteSheetTexturePlayer_SetHeightCount Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteSheetTexturePlayer.SetWidthCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpriteSheetTexturePlayer::SetWidthCount(int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSheetTexturePlayer", "SetWidthCount");

	Params::UISpriteSheetTexturePlayer_SetWidthCount Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteSheetTexturePlayer.GetHeightCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUISpriteSheetTexturePlayer::GetHeightCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSheetTexturePlayer", "GetHeightCount");

	Params::UISpriteSheetTexturePlayer_GetHeightCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpriteSheetTexturePlayer.GetWidthCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUISpriteSheetTexturePlayer::GetWidthCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSheetTexturePlayer", "GetWidthCount");

	Params::UISpriteSheetTexturePlayer_GetWidthCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundPixelate.SetApplyAlphaToStrength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBackgroundPixelate::SetApplyAlphaToStrength(bool newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundPixelate", "SetApplyAlphaToStrength");

	Params::UIBackgroundPixelate_SetApplyAlphaToStrength Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBackgroundPixelate.SetPixelateStrength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBackgroundPixelate::SetPixelateStrength(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundPixelate", "SetPixelateStrength");

	Params::UIBackgroundPixelate_SetPixelateStrength Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBackgroundPixelate.GetApplyAlphaToStrength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIBackgroundPixelate::GetApplyAlphaToStrength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundPixelate", "GetApplyAlphaToStrength");

	Params::UIBackgroundPixelate_GetApplyAlphaToStrength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundPixelate.GetPixelateStrength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIBackgroundPixelate::GetPixelateStrength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundPixelate", "GetPixelateStrength");

	Params::UIBackgroundPixelate_GetPixelateStrength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleComponent.RegisterToggleEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(bool InBool)>&     InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIToggleComponent::RegisterToggleEvent(const TDelegate<void(bool InBool)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "RegisterToggleEvent");

	Params::UIToggleComponent_RegisterToggleEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleComponent.SetState
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    fireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIToggleComponent::SetState(bool newState, bool fireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "SetState");

	Params::UIToggleComponent_SetState Parms{};

	Parms.newState = newState;
	Parms.fireEvent = fireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleComponent.SetToggleGroup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIToggleGroupComponent*          InGroupComp                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIToggleComponent::SetToggleGroup(class UUIToggleGroupComponent* InGroupComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "SetToggleGroup");

	Params::UIToggleComponent_SetToggleGroup Parms{};

	Parms.InGroupComp = InGroupComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleComponent.SetValue
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    fireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIToggleComponent::SetValue(bool newValue, bool fireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "SetValue");

	Params::UIToggleComponent_SetValue Parms{};

	Parms.newValue = newValue;
	Parms.fireEvent = fireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleComponent.UnregisterToggleEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIToggleComponent::UnregisterToggleEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "UnregisterToggleEvent");

	Params::UIToggleComponent_UnregisterToggleEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleComponent.GetIndexInGroup
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIToggleComponent::GetIndexInGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "GetIndexInGroup");

	Params::UIToggleComponent_GetIndexInGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleComponent.GetState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIToggleComponent::GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "GetState");

	Params::UIToggleComponent_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleComponent.GetToggleGroupActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UUIToggleComponent::GetToggleGroupActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "GetToggleGroupActor");

	Params::UIToggleComponent_GetToggleGroupActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleComponent.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIToggleComponent::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "GetValue");

	Params::UIToggleComponent_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICreateGeometryHelper.AddTriangle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   index0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   index1                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   index2                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICreateGeometryHelper::AddTriangle(int32 index0, int32 index1, int32 index2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICreateGeometryHelper", "AddTriangle");

	Params::LGUICreateGeometryHelper_AddTriangle Parms{};

	Parms.index0 = index0;
	Parms.index1 = index1;
	Parms.index2 = index2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICreateGeometryHelper.AddVertexFull
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 uv0                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 uv1                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 uv2                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 uv3                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   normal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   tangent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICreateGeometryHelper::AddVertexFull(const struct FVector& position, const struct FColor& color, const struct FVector2D& uv0, const struct FVector2D& uv1, const struct FVector2D& uv2, const struct FVector2D& uv3, const struct FVector& normal, const struct FVector& tangent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICreateGeometryHelper", "AddVertexFull");

	Params::LGUICreateGeometryHelper_AddVertexFull Parms{};

	Parms.position = std::move(position);
	Parms.color = std::move(color);
	Parms.uv0 = std::move(uv0);
	Parms.uv1 = std::move(uv1);
	Parms.uv2 = std::move(uv2);
	Parms.uv3 = std::move(uv3);
	Parms.normal = std::move(normal);
	Parms.tangent = std::move(tangent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICreateGeometryHelper.AddVertexSimple
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 uv0                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICreateGeometryHelper::AddVertexSimple(const struct FVector& position, const struct FColor& color, const struct FVector2D& uv0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICreateGeometryHelper", "AddVertexSimple");

	Params::LGUICreateGeometryHelper_AddVertexSimple Parms{};

	Parms.position = std::move(position);
	Parms.color = std::move(color);
	Parms.uv0 = std::move(uv0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICreateGeometryHelper.AddVertexStruct
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FLGUIGeometryVertex&       vertex                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUICreateGeometryHelper::AddVertexStruct(const struct FLGUIGeometryVertex& vertex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICreateGeometryHelper", "AddVertexStruct");

	Params::LGUICreateGeometryHelper_AddVertexStruct Parms{};

	Parms.vertex = std::move(vertex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIUpdateGeometryHelper.BeginUpdateVertices
// (Final, Native, Public, BlueprintCallable)

void ULGUIUpdateGeometryHelper::BeginUpdateVertices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIUpdateGeometryHelper", "BeginUpdateVertices");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIUpdateGeometryHelper.EndUpdateVertices
// (Final, Native, Public, BlueprintCallable)

void ULGUIUpdateGeometryHelper::EndUpdateVertices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIUpdateGeometryHelper", "EndUpdateVertices");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable_BP.MarkRebuildGeometry_BP
// (Final, Native, Public, BlueprintCallable)

void UUIBatchGeometryRenderable_BP::MarkRebuildGeometry_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable_BP", "MarkRebuildGeometry_BP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable_BP.MarkVertexChanged_BP
// (Final, Native, Public, BlueprintCallable)

void UUIBatchGeometryRenderable_BP::MarkVertexChanged_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable_BP", "MarkVertexChanged_BP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchGeometryRenderable_BP.OnBeforeCreateOrUpdateGeometry_BP
// (Event, Protected, BlueprintEvent)

void UUIBatchGeometryRenderable_BP::OnBeforeCreateOrUpdateGeometry_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable_BP", "OnBeforeCreateOrUpdateGeometry_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.UIBatchGeometryRenderable_BP.OnCreateGeometry_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUICreateGeometryHelper*        InCreateGeometryHelper                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchGeometryRenderable_BP::OnCreateGeometry_BP(class ULGUICreateGeometryHelper* InCreateGeometryHelper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable_BP", "OnCreateGeometry_BP");

	Params::UIBatchGeometryRenderable_BP_OnCreateGeometry_BP Parms{};

	Parms.InCreateGeometryHelper = InCreateGeometryHelper;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UIBatchGeometryRenderable_BP.OnUpdateGeometry_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUIUpdateGeometryHelper*        InUpdateGoemetryHelper                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexPositionChanged                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexUVChanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexColorChanged                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchGeometryRenderable_BP::OnUpdateGeometry_BP(class ULGUIUpdateGeometryHelper* InUpdateGoemetryHelper, bool InVertexPositionChanged, bool InVertexUVChanged, bool InVertexColorChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchGeometryRenderable_BP", "OnUpdateGeometry_BP");

	Params::UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP Parms{};

	Parms.InUpdateGoemetryHelper = InUpdateGoemetryHelper;
	Parms.InVertexPositionChanged = InVertexPositionChanged;
	Parms.InVertexUVChanged = InVertexUVChanged;
	Parms.InVertexColorChanged = InVertexColorChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UIComboBox.CreateComboBoxFromArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            InItemNameArray                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 InSelectIndex, const class FString& InSelectItem)>&InCallback                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AUIBaseActor*                     InParentActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectedItemIndex                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EComboBoxPosition                       InPosition                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIComboBox*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIComboBox* UUIComboBox::CreateComboBoxFromArray(const TArray<class FString>& InItemNameArray, const TDelegate<void(int32 InSelectIndex, const class FString& InSelectItem)>& InCallback, class AUIBaseActor* InParentActor, int32 InSelectedItemIndex, EComboBoxPosition InPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIComboBox", "CreateComboBoxFromArray");

	Params::UIComboBox_CreateComboBoxFromArray Parms{};

	Parms.InItemNameArray = std::move(InItemNameArray);
	Parms.InCallback = InCallback;
	Parms.InParentActor = InParentActor;
	Parms.InSelectedItemIndex = InSelectedItemIndex;
	Parms.InPosition = InPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextureTransitionComponent.SetAllStateTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         NewTexture                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextureTransitionComponent::SetAllStateTexture(class UTexture* NewTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureTransitionComponent", "SetAllStateTexture");

	Params::UITextureTransitionComponent_SetAllStateTexture Parms{};

	Parms.NewTexture = NewTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextureTransitionComponent.SetStateTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableSelectionState             State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         NewTexture                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextureTransitionComponent::SetStateTexture(EUISelectableSelectionState State, class UTexture* NewTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureTransitionComponent", "SetStateTexture");

	Params::UITextureTransitionComponent_SetStateTexture Parms{};

	Parms.State = State;
	Parms.NewTexture = NewTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.WwiseAudioComponent.GetAudioStateSystemLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWwiseAudioComponent::GetAudioStateSystemLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WwiseAudioComponent", "GetAudioStateSystemLevel");

	Params::WwiseAudioComponent_GetAudioStateSystemLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICustomDepthStencilMask.SetFullScreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUICustomDepthStencilMask::SetFullScreen(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICustomDepthStencilMask", "SetFullScreen");

	Params::UICustomDepthStencilMask_SetFullScreen Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UICustomDepthStencilMask.SetSourceType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUICustomDepthStencilMaskSourceType     value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUICustomDepthStencilMask::SetSourceType(EUICustomDepthStencilMaskSourceType value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICustomDepthStencilMask", "SetSourceType");

	Params::UICustomDepthStencilMask_SetSourceType Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UICustomDepthStencilMask.SetStencilValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUICustomDepthStencilMask::SetStencilValue(int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICustomDepthStencilMask", "SetStencilValue");

	Params::UICustomDepthStencilMask_SetStencilValue Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UICustomDepthStencilMask.GetFullScreen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUICustomDepthStencilMask::GetFullScreen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICustomDepthStencilMask", "GetFullScreen");

	Params::UICustomDepthStencilMask_GetFullScreen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICustomDepthStencilMask.GetSourceType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUICustomDepthStencilMaskSourceType     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUICustomDepthStencilMaskSourceType UUICustomDepthStencilMask::GetSourceType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICustomDepthStencilMask", "GetSourceType");

	Params::UICustomDepthStencilMask_GetSourceType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICustomDepthStencilMask.GetStencilValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUICustomDepthStencilMask::GetStencilValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICustomDepthStencilMask", "GetStencilValue");

	Params::UICustomDepthStencilMask_GetStencilValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.SetAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUILayoutAlignmentType                value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetAlign(ELGUILayoutAlignmentType value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetAlign");

	Params::UIVerticalLayout_SetAlign Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetExpendChildrenHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetExpendChildrenHeight(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetExpendChildrenHeight");

	Params::UIVerticalLayout_SetExpendChildrenHeight Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetExpendChildrenWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetExpendChildrenWidth(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetExpendChildrenWidth");

	Params::UIVerticalLayout_SetExpendChildrenWidth Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetHeightFitToChildren(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetHeightFitToChildren");

	Params::UIVerticalLayout_SetHeightFitToChildren Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetPadding(const struct FMargin& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetPadding");

	Params::UIVerticalLayout_SetPadding Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetSpacing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetSpacing(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetSpacing");

	Params::UIVerticalLayout_SetSpacing Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetWidthFitToChildren(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetWidthFitToChildren");

	Params::UIVerticalLayout_SetWidthFitToChildren Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.GetActuralRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIVerticalLayout::GetActuralRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetActuralRange");

	Params::UIVerticalLayout_GetActuralRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUILayoutAlignmentType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUILayoutAlignmentType UUIVerticalLayout::GetAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetAlign");

	Params::UIVerticalLayout_GetAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetExpendChildrenHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetExpendChildrenHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetExpendChildrenHeight");

	Params::UIVerticalLayout_GetExpendChildrenHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetExpendChildrenWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetExpendChildrenWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetExpendChildrenWidth");

	Params::UIVerticalLayout_GetExpendChildrenWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetHeightFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetHeightFitToChildren");

	Params::UIVerticalLayout_GetHeightFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin UUIVerticalLayout::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetPadding");

	Params::UIVerticalLayout_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetSpacing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIVerticalLayout::GetSpacing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetSpacing");

	Params::UIVerticalLayout_GetSpacing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetWidthFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetWidthFitToChildren");

	Params::UIVerticalLayout_GetWidthFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICustomMesh.CleanData
// (Final, Native, Public, BlueprintCallable)

void UUICustomMesh::CleanData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICustomMesh", "CleanData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UICustomMesh.CreateMeshSection
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FVector>&           Vertices                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<int32>&                    Triangles                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FVector>&           Normals                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FVector2D>&         UV0                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FVector2D>&         UV1                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FVector2D>&         UV2                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FVector2D>&         UV3                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FVector2D>&         UV4                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FVector2D>&         UV5                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FVector2D>&         UV6                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FVector2D>&         UV7                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FColor>&            VertexColors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FVector>&           Tangents                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUICustomMesh::CreateMeshSection(int32 SectionIndex, const TArray<struct FVector>& Vertices, const TArray<int32>& Triangles, const TArray<struct FVector>& Normals, const TArray<struct FVector2D>& UV0, const TArray<struct FVector2D>& UV1, const TArray<struct FVector2D>& UV2, const TArray<struct FVector2D>& UV3, const TArray<struct FVector2D>& UV4, const TArray<struct FVector2D>& UV5, const TArray<struct FVector2D>& UV6, const TArray<struct FVector2D>& UV7, const TArray<struct FColor>& VertexColors, const TArray<struct FVector>& Tangents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICustomMesh", "CreateMeshSection");

	Params::UICustomMesh_CreateMeshSection Parms{};

	Parms.SectionIndex = SectionIndex;
	Parms.Vertices = std::move(Vertices);
	Parms.Triangles = std::move(Triangles);
	Parms.Normals = std::move(Normals);
	Parms.UV0 = std::move(UV0);
	Parms.UV1 = std::move(UV1);
	Parms.UV2 = std::move(UV2);
	Parms.UV3 = std::move(UV3);
	Parms.UV4 = std::move(UV4);
	Parms.UV5 = std::move(UV5);
	Parms.UV6 = std::move(UV6);
	Parms.UV7 = std::move(UV7);
	Parms.VertexColors = std::move(VertexColors);
	Parms.Tangents = std::move(Tangents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UICustomMesh.ReadStaticMeshData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      MeshComponent                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUICustomMesh::ReadStaticMeshData(class UStaticMesh* MeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICustomMesh", "ReadStaticMeshData");

	Params::UICustomMesh_ReadStaticMeshData Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDraggableComponent.NotifyNavigateToNext
// (Final, Native, Public, BlueprintCallable)

void UUIDraggableComponent::NotifyNavigateToNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDraggableComponent", "NotifyNavigateToNext");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDraggableComponent.NotifyNavigateToPrev
// (Final, Native, Public, BlueprintCallable)

void UUIDraggableComponent::NotifyNavigateToPrev()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDraggableComponent", "NotifyNavigateToPrev");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.AddOptions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FUIDropdownOptionData>&InOptions                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIDropdownComponent::AddOptions(const TArray<struct FUIDropdownOptionData>& InOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "AddOptions");

	Params::UIDropdownComponent_AddOptions Parms{};

	Parms.InOptions = std::move(InOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.Hide
// (Final, Native, Public, BlueprintCallable)

void UUIDropdownComponent::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "Hide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.MarkRecreateList
// (Final, Native, Public, BlueprintCallable)

void UUIDropdownComponent::MarkRecreateList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "MarkRecreateList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.RegisterSelectionChangeEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(int32 InSelectIndex)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIDropdownComponent::RegisterSelectionChangeEvent(const TDelegate<void(int32 InSelectIndex)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "RegisterSelectionChangeEvent");

	Params::UIDropdownComponent_RegisterSelectionChangeEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.SetHorizontalPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIDropdownHorizontalPosition           InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetHorizontalPosition(EUIDropdownHorizontalPosition InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetHorizontalPosition");

	Params::UIDropdownComponent_SetHorizontalPosition Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.SetMaxHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetMaxHeight(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetMaxHeight");

	Params::UIDropdownComponent_SetMaxHeight Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.SetOptions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FUIDropdownOptionData>&InOptions                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetOptions(const TArray<struct FUIDropdownOptionData>& InOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetOptions");

	Params::UIDropdownComponent_SetOptions Parms{};

	Parms.InOptions = std::move(InOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    fireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetValue(int32 newValue, bool fireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetValue");

	Params::UIDropdownComponent_SetValue Parms{};

	Parms.newValue = newValue;
	Parms.fireEvent = fireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.SetVerticalOverlap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetVerticalOverlap(bool newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetVerticalOverlap");

	Params::UIDropdownComponent_SetVerticalOverlap Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.SetVerticalPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIDropdownVerticalPosition             InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetVerticalPosition(EUIDropdownVerticalPosition InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetVerticalPosition");

	Params::UIDropdownComponent_SetVerticalPosition Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.Show
// (Final, Native, Public, BlueprintCallable)

void UUIDropdownComponent::Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "Show");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.UnbindAllToggleDelegate
// (Final, Native, Public, BlueprintCallable)

void UUIDropdownComponent::UnbindAllToggleDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "UnbindAllToggleDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.UnregisterSelectionChangeEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIDropdownComponent::UnregisterSelectionChangeEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "UnregisterSelectionChangeEvent");

	Params::UIDropdownComponent_UnregisterSelectionChangeEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.GetCurrentOption
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FUIDropdownOptionData            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FUIDropdownOptionData UUIDropdownComponent::GetCurrentOption() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetCurrentOption");

	Params::UIDropdownComponent_GetCurrentOption Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetHorizontalPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIDropdownHorizontalPosition           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIDropdownHorizontalPosition UUIDropdownComponent::GetHorizontalPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetHorizontalPosition");

	Params::UIDropdownComponent_GetHorizontalPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetMaxHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIDropdownComponent::GetMaxHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetMaxHeight");

	Params::UIDropdownComponent_GetMaxHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetOption
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIDropdownOptionData            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FUIDropdownOptionData UUIDropdownComponent::GetOption(int32 index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetOption");

	Params::UIDropdownComponent_GetOption Parms{};

	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetOptions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FUIDropdownOptionData>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FUIDropdownOptionData> UUIDropdownComponent::GetOptions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetOptions");

	Params::UIDropdownComponent_GetOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIDropdownComponent::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetValue");

	Params::UIDropdownComponent_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetVerticalOverlap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIDropdownComponent::GetVerticalOverlap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetVerticalOverlap");

	Params::UIDropdownComponent_GetVerticalOverlap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetVerticalPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIDropdownVerticalPosition             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIDropdownVerticalPosition UUIDropdownComponent::GetVerticalPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetVerticalPosition");

	Params::UIDropdownComponent_GetVerticalPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.GeometryHandle.SetAdditionalUV
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   AdditionalUVChannel                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 UV                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryHandle::SetAdditionalUV(int32 AdditionalUVChannel, const struct FVector2D& UV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeometryHandle", "SetAdditionalUV");

	Params::GeometryHandle_SetAdditionalUV Parms{};

	Parms.AdditionalUVChannel = AdditionalUVChannel;
	Parms.UV = std::move(UV);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.GeometryHandle.IsGeometryValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGeometryHandle::IsGeometryValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeometryHandle", "IsGeometryValid");

	Params::GeometryHandle_IsGeometryValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIMultiTemplateLayout.SetAutoAdjustScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIMultiTemplateLayout::SetAutoAdjustScale(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMultiTemplateLayout", "SetAutoAdjustScale");

	Params::UIMultiTemplateLayout_SetAutoAdjustScale Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIMultiTemplateLayout.SetDirectionType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUILayoutDirectionType                NewDirectionType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIMultiTemplateLayout::SetDirectionType(ELGUILayoutDirectionType NewDirectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMultiTemplateLayout", "SetDirectionType");

	Params::UIMultiTemplateLayout_SetDirectionType Parms{};

	Parms.NewDirectionType = NewDirectionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIMultiTemplateLayout.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIMultiTemplateLayout::SetPadding(const struct FMargin& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMultiTemplateLayout", "SetPadding");

	Params::UIMultiTemplateLayout_SetPadding Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIMultiTemplateLayout.SetSizeFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIMultiTemplateLayout::SetSizeFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMultiTemplateLayout", "SetSizeFitToChildren");

	Params::UIMultiTemplateLayout_SetSizeFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIMultiTemplateLayout.SetSpacing
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIMultiTemplateLayout::SetSpacing(const struct FVector2D& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMultiTemplateLayout", "SetSpacing");

	Params::UIMultiTemplateLayout_SetSpacing Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIMultiTemplateLayout.GetAutoAdjustScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIMultiTemplateLayout::GetAutoAdjustScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMultiTemplateLayout", "GetAutoAdjustScale");

	Params::UIMultiTemplateLayout_GetAutoAdjustScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIMultiTemplateLayout.GetDirectionType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUILayoutDirectionType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUILayoutDirectionType UUIMultiTemplateLayout::GetDirectionType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMultiTemplateLayout", "GetDirectionType");

	Params::UIMultiTemplateLayout_GetDirectionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIMultiTemplateLayout.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin UUIMultiTemplateLayout::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMultiTemplateLayout", "GetPadding");

	Params::UIMultiTemplateLayout_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIMultiTemplateLayout.GetSizeFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIMultiTemplateLayout::GetSizeFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMultiTemplateLayout", "GetSizeFitToChildren");

	Params::UIMultiTemplateLayout_GetSizeFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIMultiTemplateLayout.GetSpacing
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIMultiTemplateLayout::GetSpacing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMultiTemplateLayout", "GetSpacing");

	Params::UIMultiTemplateLayout_GetSpacing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDynamicBatchMesh.AddBatchGeometryRenderable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIBatchGeometryRenderable*       Renderable                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryHandle*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGeometryHandle* UUIDynamicBatchMesh::AddBatchGeometryRenderable(class UUIBatchGeometryRenderable* Renderable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynamicBatchMesh", "AddBatchGeometryRenderable");

	Params::UIDynamicBatchMesh_AddBatchGeometryRenderable Parms{};

	Parms.Renderable = Renderable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIInteractionGroup.SetIgnoreParentGroup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIInteractionGroup::SetIgnoreParentGroup(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInteractionGroup", "SetIgnoreParentGroup");

	Params::UIInteractionGroup_SetIgnoreParentGroup Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIInteractionGroup.SetInteractable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIInteractionGroup::SetInteractable(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInteractionGroup", "SetInteractable");

	Params::UIInteractionGroup_SetInteractable Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIInteractionGroup.GetIgnoreParentGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIInteractionGroup::GetIgnoreParentGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInteractionGroup", "GetIgnoreParentGroup");

	Params::UIInteractionGroup_GetIgnoreParentGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIInteractionGroup.GetInteractable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIInteractionGroup::GetInteractable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInteractionGroup", "GetInteractable");

	Params::UIInteractionGroup_GetInteractable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDynmaicTextureAtlasMgr.OnDynamicAtlasExpandCallback
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FTextureExpandParam&       TextureExpandParam                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUIDynmaicTextureAtlasMgr::OnDynamicAtlasExpandCallback(const struct FTextureExpandParam& TextureExpandParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynmaicTextureAtlasMgr", "OnDynamicAtlasExpandCallback");

	Params::UIDynmaicTextureAtlasMgr_OnDynamicAtlasExpandCallback Parms{};

	Parms.TextureExpandParam = std::move(TextureExpandParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.GetDecelerationRateDegbug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIScrollViewComponent::GetDecelerationRateDegbug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIScrollViewComponent", "GetDecelerationRateDegbug");

	Params::UIScrollViewComponent_GetDecelerationRateDegbug Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetElasticityDegbug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIScrollViewComponent::GetElasticityDegbug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIScrollViewComponent", "GetElasticityDegbug");

	Params::UIScrollViewComponent_GetElasticityDegbug Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetScrollOutOfRangeModulusDebug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIScrollViewComponent::GetScrollOutOfRangeModulusDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIScrollViewComponent", "GetScrollOutOfRangeModulusDebug");

	Params::UIScrollViewComponent_GetScrollOutOfRangeModulusDebug Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetScrollSensitivityDebug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIScrollViewComponent::GetScrollSensitivityDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIScrollViewComponent", "GetScrollSensitivityDebug");

	Params::UIScrollViewComponent_GetScrollSensitivityDebug Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetScrollUseDebug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIScrollViewComponent::GetScrollUseDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIScrollViewComponent", "GetScrollUseDebug");

	Params::UIScrollViewComponent_GetScrollUseDebug Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.SetDecelerationRateDebug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetDecelerationRateDebug(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIScrollViewComponent", "SetDecelerationRateDebug");

	Params::UIScrollViewComponent_SetDecelerationRateDebug Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetElasticityDebug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetElasticityDebug(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIScrollViewComponent", "SetElasticityDebug");

	Params::UIScrollViewComponent_SetElasticityDebug Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetScrollOutOfRangeModulusDebug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetScrollOutOfRangeModulusDebug(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIScrollViewComponent", "SetScrollOutOfRangeModulusDebug");

	Params::UIScrollViewComponent_SetScrollOutOfRangeModulusDebug Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetScrollSensitivityDebug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetScrollSensitivityDebug(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIScrollViewComponent", "SetScrollSensitivityDebug");

	Params::UIScrollViewComponent_SetScrollSensitivityDebug Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetScrollUseDebug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetScrollUseDebug(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIScrollViewComponent", "SetScrollUseDebug");

	Params::UIScrollViewComponent_SetScrollUseDebug Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetCanScroll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCanScroll                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetCanScroll(bool bCanScroll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetCanScroll");

	Params::UIScrollViewComponent_SetCanScroll Parms{};

	Parms.bCanScroll = bCanScroll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetHorizontal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetHorizontal(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetHorizontal");

	Params::UIScrollViewComponent_SetHorizontal Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetRayCastTargetForScrollView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newRayCastTarget                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetRayCastTargetForScrollView(bool newRayCastTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetRayCastTargetForScrollView");

	Params::UIScrollViewComponent_SetRayCastTargetForScrollView Parms{};

	Parms.newRayCastTarget = newRayCastTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetScrollProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetScrollProgress(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetScrollProgress");

	Params::UIScrollViewComponent_SetScrollProgress Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetScrollProgressIncrement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetScrollProgressIncrement(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetScrollProgressIncrement");

	Params::UIScrollViewComponent_SetScrollProgressIncrement Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetScrollValue
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetScrollValue(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetScrollValue");

	Params::UIScrollViewComponent_SetScrollValue Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetUnderSizeScrollEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetUnderSizeScrollEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetUnderSizeScrollEnabled");

	Params::UIScrollViewComponent_SetUnderSizeScrollEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetVelocity(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetVelocity");

	Params::UIScrollViewComponent_SetVelocity Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetVertical
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetVertical(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetVertical");

	Params::UIScrollViewComponent_SetVertical Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.StopMovement
// (Final, Native, Public, BlueprintCallable)

void UUIScrollViewComponent::StopMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "StopMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.CheckContentUnderSize
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIScrollViewComponent::CheckContentUnderSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "CheckContentUnderSize");

	Params::UIScrollViewComponent_CheckContentUnderSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetCanScroll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIScrollViewComponent::GetCanScroll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetCanScroll");

	Params::UIScrollViewComponent_GetCanScroll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetContent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIScrollViewComponent::GetContent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetContent");

	Params::UIScrollViewComponent_GetContent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetHorizontal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIScrollViewComponent::GetHorizontal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetHorizontal");

	Params::UIScrollViewComponent_GetHorizontal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetRayCastTargetForScrollView
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIScrollViewComponent::GetRayCastTargetForScrollView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetRayCastTargetForScrollView");

	Params::UIScrollViewComponent_GetRayCastTargetForScrollView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetUnderSizeScrollEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIScrollViewComponent::GetUnderSizeScrollEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetUnderSizeScrollEnabled");

	Params::UIScrollViewComponent_GetUnderSizeScrollEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetVertical
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIScrollViewComponent::GetVertical() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetVertical");

	Params::UIScrollViewComponent_GetVertical Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.BindParentUIItem
// (Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::BindParentUIItem(class UUISelectableComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "BindParentUIItem");

	Params::UIScrollViewWithScrollbarComponent_BindParentUIItem Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.FindNavigationComponent
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUINavigationWrapMode                   Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasOtherNode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUIScrollViewWithScrollbarComponent::FindNavigationComponent(class UUISelectableComponent* Component, const struct FVector& Direction, EUINavigationWrapMode Mode, bool bHasOtherNode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "FindNavigationComponent");

	Params::UIScrollViewWithScrollbarComponent_FindNavigationComponent Parms{};

	Parms.Component = Component;
	Parms.Direction = std::move(Direction);
	Parms.Mode = Mode;
	Parms.bHasOtherNode = bHasOtherNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.GetOutOfBottomBoundsType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOutOfBoundsType*                       OutOfTopOrBottomType                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOutOfBoundsType*                       OutOfLeftOrRightType                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ErrorTolerance                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::GetOutOfBottomBoundsType(class UUIItem* UIItem, EOutOfBoundsType* OutOfTopOrBottomType, EOutOfBoundsType* OutOfLeftOrRightType, float ErrorTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "GetOutOfBottomBoundsType");

	Params::UIScrollViewWithScrollbarComponent_GetOutOfBottomBoundsType Parms{};

	Parms.UIItem = UIItem;
	Parms.ErrorTolerance = ErrorTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOfTopOrBottomType != nullptr)
		*OutOfTopOrBottomType = Parms.OutOfTopOrBottomType;

	if (OutOfLeftOrRightType != nullptr)
		*OutOfLeftOrRightType = Parms.OutOfLeftOrRightType;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.ResetIsChangeNavigation
// (Final, Native, Public, BlueprintCallable)

void UUIScrollViewWithScrollbarComponent::ResetIsChangeNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "ResetIsChangeNavigation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.ScrollTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTweenAnim                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::ScrollTo(class UUIItem* UIItem, bool bTweenAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "ScrollTo");

	Params::UIScrollViewWithScrollbarComponent_ScrollTo Parms{};

	Parms.UIItem = UIItem;
	Parms.bTweenAnim = bTweenAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.ScrollToBottom
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D*                       NewPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTweenAnim                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::ScrollToBottom(struct FVector2D* NewPosition, class UUIItem* UIItem, bool bTweenAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "ScrollToBottom");

	Params::UIScrollViewWithScrollbarComponent_ScrollToBottom Parms{};

	Parms.UIItem = UIItem;
	Parms.bTweenAnim = bTweenAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewPosition != nullptr)
		*NewPosition = std::move(Parms.NewPosition);
}


// Function LGUI.UIScrollViewWithScrollbarComponent.ScrollToLeft
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D*                       NewPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTweenAnim                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::ScrollToLeft(struct FVector2D* NewPosition, class UUIItem* UIItem, bool bTweenAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "ScrollToLeft");

	Params::UIScrollViewWithScrollbarComponent_ScrollToLeft Parms{};

	Parms.UIItem = UIItem;
	Parms.bTweenAnim = bTweenAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewPosition != nullptr)
		*NewPosition = std::move(Parms.NewPosition);
}


// Function LGUI.UIScrollViewWithScrollbarComponent.ScrollToRight
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D*                       NewPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTweenAnim                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::ScrollToRight(struct FVector2D* NewPosition, class UUIItem* UIItem, bool bTweenAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "ScrollToRight");

	Params::UIScrollViewWithScrollbarComponent_ScrollToRight Parms{};

	Parms.UIItem = UIItem;
	Parms.bTweenAnim = bTweenAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewPosition != nullptr)
		*NewPosition = std::move(Parms.NewPosition);
}


// Function LGUI.UIScrollViewWithScrollbarComponent.ScrollToSelectableComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::ScrollToSelectableComponent(class UUISelectableComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "ScrollToSelectableComponent");

	Params::UIScrollViewWithScrollbarComponent_ScrollToSelectableComponent Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.ScrollToTop
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D*                       NewPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTweenAnim                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::ScrollToTop(struct FVector2D* NewPosition, class UUIItem* UIItem, bool bTweenAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "ScrollToTop");

	Params::UIScrollViewWithScrollbarComponent_ScrollToTop Parms{};

	Parms.UIItem = UIItem;
	Parms.bTweenAnim = bTweenAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewPosition != nullptr)
		*NewPosition = std::move(Parms.NewPosition);
}


// Function LGUI.UIScrollViewWithScrollbarComponent.SetHorizontalScrollbarVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EScrollViewScrollbarVisibility          value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::SetHorizontalScrollbarVisibility(EScrollViewScrollbarVisibility value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "SetHorizontalScrollbarVisibility");

	Params::UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.SetVerticalScrollbarVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EScrollViewScrollbarVisibility          value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::SetVerticalScrollbarVisibility(EScrollViewScrollbarVisibility value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "SetVerticalScrollbarVisibility");

	Params::UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.UnBindParentUIItem
// (Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::UnBindParentUIItem(class UUISelectableComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "UnBindParentUIItem");

	Params::UIScrollViewWithScrollbarComponent_UnBindParentUIItem Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.GetHorizontalScrollbar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIScrollViewWithScrollbarComponent::GetHorizontalScrollbar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "GetHorizontalScrollbar");

	Params::UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.GetHorizontalScrollbarVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EScrollViewScrollbarVisibility          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EScrollViewScrollbarVisibility UUIScrollViewWithScrollbarComponent::GetHorizontalScrollbarVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "GetHorizontalScrollbarVisibility");

	Params::UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.GetVerticalScrollbar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIScrollViewWithScrollbarComponent::GetVerticalScrollbar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "GetVerticalScrollbar");

	Params::UIScrollViewWithScrollbarComponent_GetVerticalScrollbar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.GetVerticalScrollbarVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EScrollViewScrollbarVisibility          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EScrollViewScrollbarVisibility UUIScrollViewWithScrollbarComponent::GetVerticalScrollbarVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "GetVerticalScrollbarVisibility");

	Params::UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.GetViewport
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIScrollViewWithScrollbarComponent::GetViewport() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "GetViewport");

	Params::UIScrollViewWithScrollbarComponent_GetViewport Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDynScrollViewComponent.GetItemPositionToContent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          TargetItem                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIDynScrollViewComponent::GetItemPositionToContent(class UUIItem* TargetItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "GetItemPositionToContent");

	Params::UIDynScrollViewComponent_GetItemPositionToContent Parms{};

	Parms.TargetItem = TargetItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDynScrollViewComponent.GetItemPositionToViewport
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          TargetItem                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIDynScrollViewComponent::GetItemPositionToViewport(class UUIItem* TargetItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "GetItemPositionToViewport");

	Params::UIDynScrollViewComponent_GetItemPositionToViewport Parms{};

	Parms.TargetItem = TargetItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDynScrollViewComponent.GetRealUsingItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIDynScrollViewComponent::GetRealUsingItem(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "GetRealUsingItem");

	Params::UIDynScrollViewComponent_GetRealUsingItem Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDynScrollViewComponent.NavigateScrollToUIItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReversed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUINavigationWrapMode                   Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDynScrollViewComponent::NavigateScrollToUIItem(class UUIItem* UIItem, bool bReversed, EUINavigationWrapMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "NavigateScrollToUIItem");

	Params::UIDynScrollViewComponent_NavigateScrollToUIItem Parms{};

	Parms.UIItem = UIItem;
	Parms.bReversed = bReversed;
	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.Refresh
// (Final, Native, Public, BlueprintCallable)

void UUIDynScrollViewComponent::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "Refresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.RefreshByData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AUIBaseActor*                     Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    KeepContentPosition                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDynScrollViewComponent::RefreshByData(class AUIBaseActor* Item, int32 ItemNum, bool KeepContentPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "RefreshByData");

	Params::UIDynScrollViewComponent_RefreshByData Parms{};

	Parms.Item = Item;
	Parms.ItemNum = ItemNum;
	Parms.KeepContentPosition = KeepContentPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.ScrollItemIndex
// (Final, Native, Public)
// Parameters:
// bool                                    bReversed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDynScrollViewComponent::ScrollItemIndex(bool bReversed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "ScrollItemIndex");

	Params::UIDynScrollViewComponent_ScrollItemIndex Parms{};

	Parms.bReversed = bReversed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.ScrollToEndItemIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bScrollToTop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDynScrollViewComponent::ScrollToEndItemIndex(bool bScrollToTop, float Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "ScrollToEndItemIndex");

	Params::UIDynScrollViewComponent_ScrollToEndItemIndex Parms{};

	Parms.bScrollToTop = bScrollToTop;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.ScrollToItemIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bScrollToTop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTweenAnim                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDynScrollViewComponent::ScrollToItemIndex(int32 ItemIndex, bool bScrollToTop, float Offset, bool bTweenAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "ScrollToItemIndex");

	Params::UIDynScrollViewComponent_ScrollToItemIndex Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.bScrollToTop = bScrollToTop;
	Parms.Offset = Offset;
	Parms.bTweenAnim = bTweenAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.ScrollToLastItem
// (Final, Native, Public, BlueprintCallable)

void UUIDynScrollViewComponent::ScrollToLastItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "ScrollToLastItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.ScrollToNextLine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bReversed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDynScrollViewComponent::ScrollToNextLine(bool bReversed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "ScrollToNextLine");

	Params::UIDynScrollViewComponent_ScrollToNextLine Parms{};

	Parms.bReversed = bReversed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.ScrollToOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDynScrollViewComponent::ScrollToOffset(float Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "ScrollToOffset");

	Params::UIDynScrollViewComponent_ScrollToOffset Parms{};

	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.ScrollToStartItemIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bScrollToTop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDynScrollViewComponent::ScrollToStartItemIndex(bool bScrollToTop, float Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "ScrollToStartItemIndex");

	Params::UIDynScrollViewComponent_ScrollToStartItemIndex Parms{};

	Parms.bScrollToTop = bScrollToTop;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.ScrollToUIItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          UIItem                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bScrollToTop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDynScrollViewComponent::ScrollToUIItem(class UUIItem* UIItem, bool bScrollToTop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "ScrollToUIItem");

	Params::UIDynScrollViewComponent_ScrollToUIItem Parms{};

	Parms.UIItem = UIItem;
	Parms.bScrollToTop = bScrollToTop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.SetGridAnimationInterval
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDynScrollViewComponent::SetGridAnimationInterval(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "SetGridAnimationInterval");

	Params::UIDynScrollViewComponent_SetGridAnimationInterval Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.SetGridAnimationStartTime
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDynScrollViewComponent::SetGridAnimationStartTime(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "SetGridAnimationStartTime");

	Params::UIDynScrollViewComponent_SetGridAnimationStartTime Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.SetInAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    state                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDynScrollViewComponent::SetInAnimation(bool state)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "SetInAnimation");

	Params::UIDynScrollViewComponent_SetInAnimation Parms{};

	Parms.state = state;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDynScrollViewComponent.GetGridAnimationInterval
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIDynScrollViewComponent::GetGridAnimationInterval() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "GetGridAnimationInterval");

	Params::UIDynScrollViewComponent_GetGridAnimationInterval Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDynScrollViewComponent.GetGridAnimationStartTime
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIDynScrollViewComponent::GetGridAnimationStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "GetGridAnimationStartTime");

	Params::UIDynScrollViewComponent_GetGridAnimationStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDynScrollViewComponent.GetInAnimation
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIDynScrollViewComponent::GetInAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "GetInAnimation");

	Params::UIDynScrollViewComponent_GetInAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDynScrollViewComponent.GetItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIDynScrollViewComponent::GetItem(int32 ItemIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "GetItem");

	Params::UIDynScrollViewComponent_GetItem Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDynScrollViewComponent.GetItemDisplayIndex
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  DisplayIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIDynScrollViewComponent::GetItemDisplayIndex(int32 ItemIndex, int32* DisplayIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "GetItemDisplayIndex");

	Params::UIDynScrollViewComponent_GetItemDisplayIndex Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DisplayIndex != nullptr)
		*DisplayIndex = Parms.DisplayIndex;

	return Parms.ReturnValue;
}


// Function LGUI.UIDynScrollViewComponent.GetItemIndex
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   DisplayIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  ItemIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIDynScrollViewComponent::GetItemIndex(int32 DisplayIndex, int32* ItemIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDynScrollViewComponent", "GetItemIndex");

	Params::UIDynScrollViewComponent_GetItemIndex Parms{};

	Parms.DisplayIndex = DisplayIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ItemIndex != nullptr)
		*ItemIndex = Parms.ItemIndex;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectLongShadow.SetGradientColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    newColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectLongShadow::SetGradientColor(const struct FColor& newColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "SetGradientColor");

	Params::UIEffectLongShadow_SetGradientColor Parms{};

	Parms.newColor = std::move(newColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectLongShadow.SetShadowColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    newColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectLongShadow::SetShadowColor(const struct FColor& newColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "SetShadowColor");

	Params::UIEffectLongShadow_SetShadowColor Parms{};

	Parms.newColor = std::move(newColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectLongShadow.SetShadowSegment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   newSegment                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectLongShadow::SetShadowSegment(uint8 newSegment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "SetShadowSegment");

	Params::UIEffectLongShadow_SetShadowSegment Parms{};

	Parms.newSegment = newSegment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectLongShadow.SetShadowSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   newSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectLongShadow::SetShadowSize(const struct FVector& newSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "SetShadowSize");

	Params::UIEffectLongShadow_SetShadowSize Parms{};

	Parms.newSize = std::move(newSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectLongShadow.SetUseGradientColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newBool                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectLongShadow::SetUseGradientColor(bool newBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "SetUseGradientColor");

	Params::UIEffectLongShadow_SetUseGradientColor Parms{};

	Parms.newBool = newBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectLongShadow.GetGradientColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectLongShadow::GetGradientColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "GetGradientColor");

	Params::UIEffectLongShadow_GetGradientColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectLongShadow.GetShadowColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectLongShadow::GetShadowColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "GetShadowColor");

	Params::UIEffectLongShadow_GetShadowColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectLongShadow.GetShadowSegments
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UUIEffectLongShadow::GetShadowSegments() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "GetShadowSegments");

	Params::UIEffectLongShadow_GetShadowSegments Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectLongShadow.GetShadowSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectLongShadow::GetShadowSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "GetShadowSize");

	Params::UIEffectLongShadow_GetShadowSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectLongShadow.GetUseGradientColor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIEffectLongShadow::GetUseGradientColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "GetUseGradientColor");

	Params::UIEffectLongShadow_GetUseGradientColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectOutline.SetOutlineColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    newColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectOutline::SetOutlineColor(const struct FColor& newColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectOutline", "SetOutlineColor");

	Params::UIEffectOutline_SetOutlineColor Parms{};

	Parms.newColor = std::move(newColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectOutline.SetOutlineSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 newSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectOutline::SetOutlineSize(const struct FVector2D& newSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectOutline", "SetOutlineSize");

	Params::UIEffectOutline_SetOutlineSize Parms{};

	Parms.newSize = std::move(newSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectOutline.SetUse8Direction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectOutline::SetUse8Direction(bool newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectOutline", "SetUse8Direction");

	Params::UIEffectOutline_SetUse8Direction Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectOutline.GetOutlineColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectOutline::GetOutlineColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectOutline", "GetOutlineColor");

	Params::UIEffectOutline_GetOutlineColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectOutline.GetOutlineSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIEffectOutline::GetOutlineSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectOutline", "GetOutlineSize");

	Params::UIEffectOutline_GetOutlineSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectOutline.GetUse8Direction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIEffectOutline::GetUse8Direction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectOutline", "GetUse8Direction");

	Params::UIEffectOutline_GetUse8Direction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectShadow.SetShadowColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    newColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectShadow::SetShadowColor(const struct FColor& newColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectShadow", "SetShadowColor");

	Params::UIEffectShadow_SetShadowColor Parms{};

	Parms.newColor = std::move(newColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectShadow.SetShadowOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 newOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectShadow::SetShadowOffset(const struct FVector2D& newOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectShadow", "SetShadowOffset");

	Params::UIEffectShadow_SetShadowOffset Parms{};

	Parms.newOffset = std::move(newOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectShadow.GetShadowColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectShadow::GetShadowColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectShadow", "GetShadowColor");

	Params::UIEffectShadow_GetShadowColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectShadow.GetShadowOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIEffectShadow::GetShadowOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectShadow", "GetShadowOffset");

	Params::UIEffectShadow_GetShadowOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UUIEffectTextAnimation_Property*>&value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation::SetProperties(const TArray<class UUIEffectTextAnimation_Property*>& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "SetProperties");

	Params::UIEffectTextAnimation_SetProperties Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation.SetProperty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIEffectTextAnimation_Property*  value                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation::SetProperty(int32 index, class UUIEffectTextAnimation_Property* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "SetProperty");

	Params::UIEffectTextAnimation_SetProperty Parms{};

	Parms.index = index;
	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation.SetSelector
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIEffectTextAnimation_Selector*  value                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation::SetSelector(class UUIEffectTextAnimation_Selector* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "SetSelector");

	Params::UIEffectTextAnimation_SetSelector Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation.SetSelectorOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation::SetSelectorOffset(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "SetSelectorOffset");

	Params::UIEffectTextAnimation_SetSelectorOffset Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UUIEffectTextAnimation_Property*>ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UUIEffectTextAnimation_Property*> UUIEffectTextAnimation::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "GetProperties");

	Params::UIEffectTextAnimation_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation.GetProperty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIEffectTextAnimation_Property*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIEffectTextAnimation_Property* UUIEffectTextAnimation::GetProperty(int32 index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "GetProperty");

	Params::UIEffectTextAnimation_GetProperty Parms{};

	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation.GetSelector
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIEffectTextAnimation_Selector*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIEffectTextAnimation_Selector* UUIEffectTextAnimation::GetSelector() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "GetSelector");

	Params::UIEffectTextAnimation_GetSelector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation.GetSelectorOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation::GetSelectorOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "GetSelectorOffset");

	Params::UIEffectTextAnimation_GetSelectorOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PropertyWithEase.SetEaseCurve
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCurveFloat*                      value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PropertyWithEase::SetEaseCurve(class UCurveFloat* value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PropertyWithEase", "SetEaseCurve");

	Params::UIEffectTextAnimation_PropertyWithEase_SetEaseCurve Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PropertyWithEase.SetEaseType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELTweenEase                             value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PropertyWithEase::SetEaseType(ELTweenEase value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PropertyWithEase", "SetEaseType");

	Params::UIEffectTextAnimation_PropertyWithEase_SetEaseType Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PropertyWithEase.GetCurveFloat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCurveFloat*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCurveFloat* UUIEffectTextAnimation_PropertyWithEase::GetCurveFloat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PropertyWithEase", "GetCurveFloat");

	Params::UIEffectTextAnimation_PropertyWithEase_GetCurveFloat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PropertyWithEase.GetEaseType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELTweenEase                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELTweenEase UUIEffectTextAnimation_PropertyWithEase::GetEaseType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PropertyWithEase", "GetEaseType");

	Params::UIEffectTextAnimation_PropertyWithEase_GetEaseType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PositionProperty.SetPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PositionProperty::SetPosition(const struct FVector& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionProperty", "SetPosition");

	Params::UIEffectTextAnimation_PositionProperty_SetPosition Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PositionProperty.GetPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_PositionProperty::GetPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionProperty", "GetPosition");

	Params::UIEffectTextAnimation_PositionProperty_GetPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.SetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PositionRandomProperty::SetMax(const struct FVector& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionRandomProperty", "SetMax");

	Params::UIEffectTextAnimation_PositionRandomProperty_SetMax Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.SetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PositionRandomProperty::SetMin(const struct FVector& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionRandomProperty", "SetMin");

	Params::UIEffectTextAnimation_PositionRandomProperty_SetMin Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.SetSeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PositionRandomProperty::SetSeed(int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionRandomProperty", "SetSeed");

	Params::UIEffectTextAnimation_PositionRandomProperty_SetSeed Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.GetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_PositionRandomProperty::GetMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionRandomProperty", "GetMax");

	Params::UIEffectTextAnimation_PositionRandomProperty_GetMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.GetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_PositionRandomProperty::GetMin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionRandomProperty", "GetMin");

	Params::UIEffectTextAnimation_PositionRandomProperty_GetMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.GetSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIEffectTextAnimation_PositionRandomProperty::GetSeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionRandomProperty", "GetSeed");

	Params::UIEffectTextAnimation_PositionRandomProperty_GetSeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RotationProperty.SetRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RotationProperty::SetRotator(const struct FRotator& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationProperty", "SetRotator");

	Params::UIEffectTextAnimation_RotationProperty_SetRotator Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RotationProperty.GetRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UUIEffectTextAnimation_RotationProperty::GetRotator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationProperty", "GetRotator");

	Params::UIEffectTextAnimation_RotationProperty_GetRotator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.SetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RotationRandomProperty::SetMax(const struct FRotator& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationRandomProperty", "SetMax");

	Params::UIEffectTextAnimation_RotationRandomProperty_SetMax Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.SetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RotationRandomProperty::SetMin(const struct FRotator& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationRandomProperty", "SetMin");

	Params::UIEffectTextAnimation_RotationRandomProperty_SetMin Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.SetSeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RotationRandomProperty::SetSeed(int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationRandomProperty", "SetSeed");

	Params::UIEffectTextAnimation_RotationRandomProperty_SetSeed Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.GetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UUIEffectTextAnimation_RotationRandomProperty::GetMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationRandomProperty", "GetMax");

	Params::UIEffectTextAnimation_RotationRandomProperty_GetMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.GetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UUIEffectTextAnimation_RotationRandomProperty::GetMin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationRandomProperty", "GetMin");

	Params::UIEffectTextAnimation_RotationRandomProperty_GetMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.GetSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIEffectTextAnimation_RotationRandomProperty::GetSeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationRandomProperty", "GetSeed");

	Params::UIEffectTextAnimation_RotationRandomProperty_GetSeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ScaleProperty.SetScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ScaleProperty::SetScale(const struct FVector& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleProperty", "SetScale");

	Params::UIEffectTextAnimation_ScaleProperty_SetScale Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ScaleProperty.GetScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_ScaleProperty::GetScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleProperty", "GetScale");

	Params::UIEffectTextAnimation_ScaleProperty_GetScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.SetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ScaleRandomProperty::SetMax(const struct FVector& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleRandomProperty", "SetMax");

	Params::UIEffectTextAnimation_ScaleRandomProperty_SetMax Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.SetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ScaleRandomProperty::SetMin(const struct FVector& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleRandomProperty", "SetMin");

	Params::UIEffectTextAnimation_ScaleRandomProperty_SetMin Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.SetSeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ScaleRandomProperty::SetSeed(int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleRandomProperty", "SetSeed");

	Params::UIEffectTextAnimation_ScaleRandomProperty_SetSeed Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.GetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_ScaleRandomProperty::GetMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleRandomProperty", "GetMax");

	Params::UIEffectTextAnimation_ScaleRandomProperty_GetMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.GetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_ScaleRandomProperty::GetMin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleRandomProperty", "GetMin");

	Params::UIEffectTextAnimation_ScaleRandomProperty_GetMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.GetSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIEffectTextAnimation_ScaleRandomProperty::GetSeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleRandomProperty", "GetSeed");

	Params::UIEffectTextAnimation_ScaleRandomProperty_GetSeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_AlphaProperty.SetAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_AlphaProperty::SetAlpha(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_AlphaProperty", "SetAlpha");

	Params::UIEffectTextAnimation_AlphaProperty_SetAlpha Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_AlphaProperty.GetAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_AlphaProperty::GetAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_AlphaProperty", "GetAlpha");

	Params::UIEffectTextAnimation_AlphaProperty_GetAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ColorProperty.SetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ColorProperty::SetColor(const struct FColor& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorProperty", "SetColor");

	Params::UIEffectTextAnimation_ColorProperty_SetColor Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ColorProperty.SetUseHSV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ColorProperty::SetUseHSV(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorProperty", "SetUseHSV");

	Params::UIEffectTextAnimation_ColorProperty_SetUseHSV Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ColorProperty.GetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectTextAnimation_ColorProperty::GetColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorProperty", "GetColor");

	Params::UIEffectTextAnimation_ColorProperty_GetColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ColorProperty.GetUseHSV
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIEffectTextAnimation_ColorProperty::GetUseHSV() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorProperty", "GetUseHSV");

	Params::UIEffectTextAnimation_ColorProperty_GetUseHSV Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ColorRandomProperty::SetMax(const struct FColor& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "SetMax");

	Params::UIEffectTextAnimation_ColorRandomProperty_SetMax Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ColorRandomProperty::SetMin(const struct FColor& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "SetMin");

	Params::UIEffectTextAnimation_ColorRandomProperty_SetMin Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetSeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ColorRandomProperty::SetSeed(int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "SetSeed");

	Params::UIEffectTextAnimation_ColorRandomProperty_SetSeed Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetUseHSV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ColorRandomProperty::SetUseHSV(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "SetUseHSV");

	Params::UIEffectTextAnimation_ColorRandomProperty_SetUseHSV Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectTextAnimation_ColorRandomProperty::GetMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "GetMax");

	Params::UIEffectTextAnimation_ColorRandomProperty_GetMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectTextAnimation_ColorRandomProperty::GetMin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "GetMin");

	Params::UIEffectTextAnimation_ColorRandomProperty_GetMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIEffectTextAnimation_ColorRandomProperty::GetSeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "GetSeed");

	Params::UIEffectTextAnimation_ColorRandomProperty_GetSeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetUseHSV
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIEffectTextAnimation_ColorRandomProperty::GetUseHSV() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "GetUseHSV");

	Params::UIEffectTextAnimation_ColorRandomProperty_GetUseHSV Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PropertyWithWave.SetFrequency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PropertyWithWave::SetFrequency(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PropertyWithWave", "SetFrequency");

	Params::UIEffectTextAnimation_PropertyWithWave_SetFrequency Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PropertyWithWave.GetFrequency
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_PropertyWithWave::GetFrequency() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PropertyWithWave", "GetFrequency");

	Params::UIEffectTextAnimation_PropertyWithWave_GetFrequency Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PositionWaveProperty.SetPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PositionWaveProperty::SetPosition(const struct FVector& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionWaveProperty", "SetPosition");

	Params::UIEffectTextAnimation_PositionWaveProperty_SetPosition Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PositionWaveProperty.GetPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_PositionWaveProperty::GetPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionWaveProperty", "GetPosition");

	Params::UIEffectTextAnimation_PositionWaveProperty_GetPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RotationWaveProperty.SetRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RotationWaveProperty::SetRotator(const struct FRotator& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationWaveProperty", "SetRotator");

	Params::UIEffectTextAnimation_RotationWaveProperty_SetRotator Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RotationWaveProperty.GetRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UUIEffectTextAnimation_RotationWaveProperty::GetRotator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationWaveProperty", "GetRotator");

	Params::UIEffectTextAnimation_RotationWaveProperty_GetRotator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ScaleWaveProperty.SetScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ScaleWaveProperty::SetScale(const struct FVector& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleWaveProperty", "SetScale");

	Params::UIEffectTextAnimation_ScaleWaveProperty_SetScale Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ScaleWaveProperty.GetScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_ScaleWaveProperty::GetScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleWaveProperty", "GetScale");

	Params::UIEffectTextAnimation_ScaleWaveProperty_GetScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RandomSelector.SetEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RandomSelector::SetEnd(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RandomSelector", "SetEnd");

	Params::UIEffectTextAnimation_RandomSelector_SetEnd Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RandomSelector.SetSeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RandomSelector::SetSeed(int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RandomSelector", "SetSeed");

	Params::UIEffectTextAnimation_RandomSelector_SetSeed Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RandomSelector.SetStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RandomSelector::SetStart(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RandomSelector", "SetStart");

	Params::UIEffectTextAnimation_RandomSelector_SetStart Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RandomSelector.GetEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_RandomSelector::GetEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RandomSelector", "GetEnd");

	Params::UIEffectTextAnimation_RandomSelector_GetEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RandomSelector.GetSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIEffectTextAnimation_RandomSelector::GetSeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RandomSelector", "GetSeed");

	Params::UIEffectTextAnimation_RandomSelector_GetSeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RandomSelector.GetStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_RandomSelector::GetStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RandomSelector", "GetStart");

	Params::UIEffectTextAnimation_RandomSelector_GetStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerBeginDrag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerBeginDrag(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerBeginDrag");

	Params::UIEventTriggerComponent_RegisterOnPointerBeginDrag Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerClick
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerClick(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerClick");

	Params::UIEventTriggerComponent_RegisterOnPointerClick Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDeselect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIBaseEventData* eventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerDeselect(const TDelegate<void(class ULGUIBaseEventData* eventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerDeselect");

	Params::UIEventTriggerComponent_RegisterOnPointerDeselect Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDown
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerDown(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerDown");

	Params::UIEventTriggerComponent_RegisterOnPointerDown Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDrag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerDrag(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerDrag");

	Params::UIEventTriggerComponent_RegisterOnPointerDrag Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDragDrop
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerDragDrop(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerDragDrop");

	Params::UIEventTriggerComponent_RegisterOnPointerDragDrop Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDragEnter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerDragEnter(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerDragEnter");

	Params::UIEventTriggerComponent_RegisterOnPointerDragEnter Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDragExit
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerDragExit(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerDragExit");

	Params::UIEventTriggerComponent_RegisterOnPointerDragExit Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerEndDrag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerEndDrag(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerEndDrag");

	Params::UIEventTriggerComponent_RegisterOnPointerEndDrag Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerEnter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerEnter(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerEnter");

	Params::UIEventTriggerComponent_RegisterOnPointerEnter Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerExit
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerExit(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerExit");

	Params::UIEventTriggerComponent_RegisterOnPointerExit Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerScroll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerScroll(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerScroll");

	Params::UIEventTriggerComponent_RegisterOnPointerScroll Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerSelect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIBaseEventData* eventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerSelect(const TDelegate<void(class ULGUIBaseEventData* eventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerSelect");

	Params::UIEventTriggerComponent_RegisterOnPointerSelect Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerUp
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerUp(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerUp");

	Params::UIEventTriggerComponent_RegisterOnPointerUp Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerBeginDrag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerBeginDrag(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerBeginDrag");

	Params::UIEventTriggerComponent_UnregisterOnPointerBeginDrag Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerClick
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerClick(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerClick");

	Params::UIEventTriggerComponent_UnregisterOnPointerClick Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDeselect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerDeselect(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerDeselect");

	Params::UIEventTriggerComponent_UnregisterOnPointerDeselect Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDown
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerDown(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerDown");

	Params::UIEventTriggerComponent_UnregisterOnPointerDown Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDrag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerDrag(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerDrag");

	Params::UIEventTriggerComponent_UnregisterOnPointerDrag Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDragDrop
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerDragDrop(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerDragDrop");

	Params::UIEventTriggerComponent_UnregisterOnPointerDragDrop Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDragEnter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerDragEnter(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerDragEnter");

	Params::UIEventTriggerComponent_UnregisterOnPointerDragEnter Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDragExit
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerDragExit(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerDragExit");

	Params::UIEventTriggerComponent_UnregisterOnPointerDragExit Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerEndDrag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerEndDrag(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerEndDrag");

	Params::UIEventTriggerComponent_UnregisterOnPointerEndDrag Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerEnter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerEnter(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerEnter");

	Params::UIEventTriggerComponent_UnregisterOnPointerEnter Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerExit
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerExit(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerExit");

	Params::UIEventTriggerComponent_UnregisterOnPointerExit Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerScroll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerScroll(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerScroll");

	Params::UIEventTriggerComponent_UnregisterOnPointerScroll Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerSelect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerSelect(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerSelect");

	Params::UIEventTriggerComponent_UnregisterOnPointerSelect Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerUp
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerUp(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerUp");

	Params::UIEventTriggerComponent_UnregisterOnPointerUp Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIExtendToggleGroup.BindOnExtendToggleGroupActive
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class UUIExtendToggleGroup* ExtendToggleGroup, bool bCreate)>&Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIExtendToggleGroup::BindOnExtendToggleGroupActive(const TDelegate<void(class UUIExtendToggleGroup* ExtendToggleGroup, bool bCreate)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIExtendToggleGroup", "BindOnExtendToggleGroupActive");

	Params::UIExtendToggleGroup_BindOnExtendToggleGroupActive Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIExtendToggleGroup.UnBindOnExtendToggleGroupActive
// (Final, Native, Static, Public, BlueprintCallable)

void UUIExtendToggleGroup::UnBindOnExtendToggleGroupActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIExtendToggleGroup", "UnBindOnExtendToggleGroupActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIExtendToggleGroup.GetAllowNoneSelect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIExtendToggleGroup::GetAllowNoneSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggleGroup", "GetAllowNoneSelect");

	Params::UIExtendToggleGroup_GetAllowNoneSelect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIExtendToggleGroup.SetAllowNoneSelect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowNoneSelection                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtendToggleGroup::SetAllowNoneSelect(bool bAllowNoneSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggleGroup", "SetAllowNoneSelect");

	Params::UIExtendToggleGroup_SetAllowNoneSelect Parms{};

	Parms.bAllowNoneSelection = bAllowNoneSelection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIExtendToggleGroup.SetGroupEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtendToggleGroup::SetGroupEnable(bool bInEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggleGroup", "SetGroupEnable");

	Params::UIExtendToggleGroup_SetGroupEnable Parms{};

	Parms.bInEnable = bInEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIExtendToggleGroup.GetCurSelection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIExtendToggle*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIExtendToggle* UUIExtendToggleGroup::GetCurSelection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggleGroup", "GetCurSelection");

	Params::UIExtendToggleGroup_GetCurSelection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIExtendToggleSpriteTransition.SetAllStateSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUISpriteData_BaseObject*       NewSprite                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtendToggleSpriteTransition::SetAllStateSprite(class ULGUISpriteData_BaseObject* NewSprite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggleSpriteTransition", "SetAllStateSprite");

	Params::UIExtendToggleSpriteTransition_SetAllStateSprite Parms{};

	Parms.NewSprite = NewSprite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIExtendToggleSpriteTransition.SetStateSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EToggleTransitionState                  State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUISpriteData_BaseObject*       NewSprite                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceNoTriggerOnChange                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtendToggleSpriteTransition::SetStateSprite(EToggleTransitionState State, class ULGUISpriteData_BaseObject* NewSprite, bool ForceNoTriggerOnChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtendToggleSpriteTransition", "SetStateSprite");

	Params::UIExtendToggleSpriteTransition_SetStateSprite Parms{};

	Parms.State = State;
	Parms.NewSprite = NewSprite;
	Parms.ForceNoTriggerOnChange = ForceNoTriggerOnChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFlyoutMenu.CreateFlyoutMenuFromArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            InItemNameArray                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(int32 InSelectIndex, const class FString& InSelectItem)>&InCallback                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AUIBaseActor*                     InParentActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InWidth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFlyoutMenuVerticalPosition             InVerticalPosition                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFlyoutMenuHorizontalAlignment          InHorizontalAlign                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIFlyoutMenu*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIFlyoutMenu* UUIFlyoutMenu::CreateFlyoutMenuFromArray(const TArray<class FString>& InItemNameArray, const TDelegate<void(int32 InSelectIndex, const class FString& InSelectItem)>& InCallback, class AUIBaseActor* InParentActor, int32 InWidth, EFlyoutMenuVerticalPosition InVerticalPosition, EFlyoutMenuHorizontalAlignment InHorizontalAlign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIFlyoutMenu", "CreateFlyoutMenuFromArray");

	Params::UIFlyoutMenu_CreateFlyoutMenuFromArray Parms{};

	Parms.InItemNameArray = std::move(InItemNameArray);
	Parms.InCallback = InCallback;
	Parms.InParentActor = InParentActor;
	Parms.InWidth = InWidth;
	Parms.InVerticalPosition = InVerticalPosition;
	Parms.InHorizontalAlign = InHorizontalAlign;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.SetAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUILayoutAlignmentType                value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetAlign(ELGUILayoutAlignmentType value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetAlign");

	Params::UIGridLayout_SetAlign Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetCellSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetCellSize(const struct FVector2D& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetCellSize");

	Params::UIGridLayout_SetCellSize Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetDependOnSizeOrCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetDependOnSizeOrCount(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetDependOnSizeOrCount");

	Params::UIGridLayout_SetDependOnSizeOrCount Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetExpendChildSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetExpendChildSize(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetExpendChildSize");

	Params::UIGridLayout_SetExpendChildSize Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetHeightFitToChildren(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetHeightFitToChildren");

	Params::UIGridLayout_SetHeightFitToChildren Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetHorizontalOrVertical
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetHorizontalOrVertical(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetHorizontalOrVertical");

	Params::UIGridLayout_SetHorizontalOrVertical Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetLastLineCanAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetLastLineCanAlign(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetLastLineCanAlign");

	Params::UIGridLayout_SetLastLineCanAlign Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetLineCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetLineCount(int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetLineCount");

	Params::UIGridLayout_SetLineCount Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetMaxItemCountInOneLine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetMaxItemCountInOneLine(int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetMaxItemCountInOneLine");

	Params::UIGridLayout_SetMaxItemCountInOneLine Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIGridLayout::SetPadding(const struct FMargin& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetPadding");

	Params::UIGridLayout_SetPadding Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetSpacing
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetSpacing(const struct FVector2D& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetSpacing");

	Params::UIGridLayout_SetSpacing Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetWidthFitToChildren(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetWidthFitToChildren");

	Params::UIGridLayout_SetWidthFitToChildren Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.GetActuralRange
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIGridLayout::GetActuralRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetActuralRange");

	Params::UIGridLayout_GetActuralRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUILayoutAlignmentType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUILayoutAlignmentType UUIGridLayout::GetAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetAlign");

	Params::UIGridLayout_GetAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetCellSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIGridLayout::GetCellSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetCellSize");

	Params::UIGridLayout_GetCellSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetDependOnSizeOrCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGridLayout::GetDependOnSizeOrCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetDependOnSizeOrCount");

	Params::UIGridLayout_GetDependOnSizeOrCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetExpendChildSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGridLayout::GetExpendChildSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetExpendChildSize");

	Params::UIGridLayout_GetExpendChildSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGridLayout::GetHeightFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetHeightFitToChildren");

	Params::UIGridLayout_GetHeightFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetHorizontalOrVertical
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGridLayout::GetHorizontalOrVertical() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetHorizontalOrVertical");

	Params::UIGridLayout_GetHorizontalOrVertical Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetLastLineCanAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGridLayout::GetLastLineCanAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetLastLineCanAlign");

	Params::UIGridLayout_GetLastLineCanAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetLineCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIGridLayout::GetLineCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetLineCount");

	Params::UIGridLayout_GetLineCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetMaxItemCountInOneLine
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIGridLayout::GetMaxItemCountInOneLine() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetMaxItemCountInOneLine");

	Params::UIGridLayout_GetMaxItemCountInOneLine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin UUIGridLayout::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetPadding");

	Params::UIGridLayout_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetSpacing
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIGridLayout::GetSpacing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetSpacing");

	Params::UIGridLayout_GetSpacing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGridLayout::GetWidthFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetWidthFitToChildren");

	Params::UIGridLayout_GetWidthFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIInputAdaptZone.OnMouseMoved
// (Final, Native, Protected)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIInputAdaptZone::OnMouseMoved(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInputAdaptZone", "OnMouseMoved");

	Params::UIInputAdaptZone_OnMouseMoved Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIInputAdaptZone.OnPressAnyKey
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FKey&                      Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIInputAdaptZone::OnPressAnyKey(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInputAdaptZone", "OnPressAnyKey");

	Params::UIInputAdaptZone_OnPressAnyKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIInputAdaptZone.OnTouchBegin
// (Final, Native, Protected, HasDefaults)
// Parameters:
// ETouchIndex                             TouchIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIInputAdaptZone::OnTouchBegin(ETouchIndex TouchIndex, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInputAdaptZone", "OnTouchBegin");

	Params::UIInputAdaptZone_OnTouchBegin Parms{};

	Parms.TouchIndex = TouchIndex;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIInturnAnimController.OnItemAnimFinish
// (Final, Native, Protected)

void UUIInturnAnimController::OnItemAnimFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInturnAnimController", "OnItemAnimFinish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIInturnAnimController.Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewAnimName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AssignNum                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsScrollViewItem                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIInturnAnimController::Play(const class FString& NewAnimName, int32 AssignNum, bool bIsScrollViewItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInturnAnimController", "Play");

	Params::UIInturnAnimController_Play Parms{};

	Parms.NewAnimName = std::move(NewAnimName);
	Parms.AssignNum = AssignNum;
	Parms.bIsScrollViewItem = bIsScrollViewItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIInturnAnimController.PlayInEditor
// (Final, Native, Public, BlueprintCallable)

void UUIInturnAnimController::PlayInEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInturnAnimController", "PlayInEditor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIInturnAnimController.PlayWithActors
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<TWeakObjectPtr<class AUIBaseActor>>&SpecChildren                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// const class FString&                    NewAnimName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIInturnAnimController::PlayWithActors(const TArray<TWeakObjectPtr<class AUIBaseActor>>& SpecChildren, const class FString& NewAnimName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInturnAnimController", "PlayWithActors");

	Params::UIInturnAnimController_PlayWithActors Parms{};

	Parms.SpecChildren = std::move(SpecChildren);
	Parms.NewAnimName = std::move(NewAnimName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIInturnAnimController.PlayWithItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UUIItem*>&           SpecChildren                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const class FString&                    NewAnimName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIInturnAnimController::PlayWithItems(const TArray<class UUIItem*>& SpecChildren, const class FString& NewAnimName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInturnAnimController", "PlayWithItems");

	Params::UIInturnAnimController_PlayWithItems Parms{};

	Parms.SpecChildren = std::move(SpecChildren);
	Parms.NewAnimName = std::move(NewAnimName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIInturnAnimController.SetItemDefaultAlphaZero
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsItemDefaultAlphaZero                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIInturnAnimController::SetItemDefaultAlphaZero(bool IsItemDefaultAlphaZero)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInturnAnimController", "SetItemDefaultAlphaZero");

	Params::UIInturnAnimController_SetItemDefaultAlphaZero Parms{};

	Parms.IsItemDefaultAlphaZero = IsItemDefaultAlphaZero;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIInturnAnimController.Stop
// (Final, Native, Public, BlueprintCallable)

void UUIInturnAnimController::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInturnAnimController", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIInturnAnimController.GetItemDefaultAlphaZero
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIInturnAnimController::GetItemDefaultAlphaZero() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInturnAnimController", "GetItemDefaultAlphaZero");

	Params::UIInturnAnimController_GetItemDefaultAlphaZero Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIInturnAnimController.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIInturnAnimController::IsPlaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIInturnAnimController", "IsPlaying");

	Params::UIInturnAnimController_IsPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutElement.SetConstantSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutElement::SetConstantSize(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutElement", "SetConstantSize");

	Params::UILayoutElement_SetConstantSize Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutElement.SetLayoutType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELayoutElementType                      InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutElement::SetLayoutType(ELayoutElementType InType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutElement", "SetLayoutType");

	Params::UILayoutElement_SetLayoutType Parms{};

	Parms.InType = InType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutElement.SetRatioSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutElement::SetRatioSize(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutElement", "SetRatioSize");

	Params::UILayoutElement_SetRatioSize Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutElement.GetConstantSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUILayoutElement::GetConstantSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutElement", "GetConstantSize");

	Params::UILayoutElement_GetConstantSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutElement.GetIgnoreLayout
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUILayoutElement::GetIgnoreLayout() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutElement", "GetIgnoreLayout");

	Params::UILayoutElement_GetIgnoreLayout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutElement.GetLayoutType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELayoutElementType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELayoutElementType UUILayoutElement::GetLayoutType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutElement", "GetLayoutType");

	Params::UILayoutElement_GetLayoutType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutElement.GetRatioSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUILayoutElement::GetRatioSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutElement", "GetRatioSize");

	Params::UILayoutElement_GetRatioSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILoopScrollViewComponent.Refresh
// (Final, Native, Public, BlueprintCallable)

void UUILoopScrollViewComponent::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "Refresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILoopScrollViewComponent.RefreshByData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AUIBaseActor*                     UIItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   GridNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    KeepContentPosition                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILoopScrollViewComponent::RefreshByData(class AUIBaseActor* UIItem, int32 GridNum, bool KeepContentPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "RefreshByData");

	Params::UILoopScrollViewComponent_RefreshByData Parms{};

	Parms.UIItem = UIItem;
	Parms.GridNum = GridNum;
	Parms.KeepContentPosition = KeepContentPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILoopScrollViewComponent.ResetPreview
// (Final, Native, Public)

void UUILoopScrollViewComponent::ResetPreview()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "ResetPreview");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILoopScrollViewComponent.ScrollToGridIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   GridIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTweenAnim                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILoopScrollViewComponent::ScrollToGridIndex(int32 GridIndex, bool bTweenAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "ScrollToGridIndex");

	Params::UILoopScrollViewComponent_ScrollToGridIndex Parms{};

	Parms.GridIndex = GridIndex;
	Parms.bTweenAnim = bTweenAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILoopScrollViewComponent.ScrollToNextLine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bReversed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILoopScrollViewComponent::ScrollToNextLine(bool bReversed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "ScrollToNextLine");

	Params::UILoopScrollViewComponent_ScrollToNextLine Parms{};

	Parms.bReversed = bReversed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILoopScrollViewComponent.SetGridAnimationInterval
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILoopScrollViewComponent::SetGridAnimationInterval(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "SetGridAnimationInterval");

	Params::UILoopScrollViewComponent_SetGridAnimationInterval Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILoopScrollViewComponent.SetGridAnimationStartTime
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILoopScrollViewComponent::SetGridAnimationStartTime(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "SetGridAnimationStartTime");

	Params::UILoopScrollViewComponent_SetGridAnimationStartTime Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILoopScrollViewComponent.SetInAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    state                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILoopScrollViewComponent::SetInAnimation(bool state)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "SetInAnimation");

	Params::UILoopScrollViewComponent_SetInAnimation Parms{};

	Parms.state = state;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILoopScrollViewComponent.SetNavigationIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   GridIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILoopScrollViewComponent::SetNavigationIndex(int32 GridIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "SetNavigationIndex");

	Params::UILoopScrollViewComponent_SetNavigationIndex Parms{};

	Parms.GridIndex = GridIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILoopScrollViewComponent.GetGrid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   GridIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUILoopScrollViewComponent::GetGrid(int32 GridIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "GetGrid");

	Params::UILoopScrollViewComponent_GetGrid Parms{};

	Parms.GridIndex = GridIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILoopScrollViewComponent.GetGridAnimationInterval
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUILoopScrollViewComponent::GetGridAnimationInterval() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "GetGridAnimationInterval");

	Params::UILoopScrollViewComponent_GetGridAnimationInterval Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILoopScrollViewComponent.GetGridAnimationStartTime
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUILoopScrollViewComponent::GetGridAnimationStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "GetGridAnimationStartTime");

	Params::UILoopScrollViewComponent_GetGridAnimationStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILoopScrollViewComponent.GetInAnimation
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUILoopScrollViewComponent::GetInAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILoopScrollViewComponent", "GetInAnimation");

	Params::UILoopScrollViewComponent_GetInAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UINavigationBehaviour.OnCheckCanSetNavigationBP
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUINavigationBehaviour::OnCheckCanSetNavigationBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINavigationBehaviour", "OnCheckCanSetNavigationBP");

	Params::UINavigationBehaviour_OnCheckCanSetNavigationBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LGUI.UINavigationBehaviour.OnCheckLoopScrollChangeNavigationBP
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUINavigationBehaviour::OnCheckLoopScrollChangeNavigationBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINavigationBehaviour", "OnCheckLoopScrollChangeNavigationBP");

	Params::UINavigationBehaviour_OnCheckLoopScrollChangeNavigationBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LGUI.UINavigationBehaviour.OnNotifyInteractiveBP
// (Event, Protected, BlueprintEvent)

void UUINavigationBehaviour::OnNotifyInteractiveBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINavigationBehaviour", "OnNotifyInteractiveBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.UINavigationBehaviour.OnNotifyNavigationEnterBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINavigationBehaviour::OnNotifyNavigationEnterBP(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINavigationBehaviour", "OnNotifyNavigationEnterBP");

	Params::UINavigationBehaviour_OnNotifyNavigationEnterBP Parms{};

	Parms.eventData = eventData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UINavigationBehaviour.OnNotifyNavigationSelectBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            eventData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINavigationBehaviour::OnNotifyNavigationSelectBP(class ULGUIPointerEventData* eventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINavigationBehaviour", "OnNotifyNavigationSelectBP");

	Params::UINavigationBehaviour_OnNotifyNavigationSelectBP Parms{};

	Parms.eventData = eventData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UINavigationBehaviour.OnNotifyNotInteractiveBP
// (Event, Protected, BlueprintEvent)

void UUINavigationBehaviour::OnNotifyNotInteractiveBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINavigationBehaviour", "OnNotifyNotInteractiveBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.UINavigationTextChangeListener.OnNotifyTextChangeBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    NotifyText                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUINavigationTextChangeListener::OnNotifyTextChangeBP(const class FString& NotifyText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINavigationTextChangeListener", "OnNotifyTextChangeBP");

	Params::UINavigationTextChangeListener_OnNotifyTextChangeBP Parms{};

	Parms.NotifyText = std::move(NotifyText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UINiagaraActor.ActivateSystem
// (Final, Native, Public, BlueprintCallable)

void AUINiagaraActor::ActivateSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagaraActor", "ActivateSystem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagaraActor.DeactivateSystem
// (Final, Native, Public, BlueprintCallable)

void AUINiagaraActor::DeactivateSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagaraActor", "DeactivateSystem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagaraActor.SwitchToStop
// (Final, Native, Public, BlueprintCallable)

void AUINiagaraActor::SwitchToStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagaraActor", "SwitchToStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UINiagaraActor.GetUINiagara
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUINiagara*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUINiagara* AUINiagaraActor::GetUINiagara() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINiagaraActor", "GetUINiagara");

	Params::UINiagaraActor_GetUINiagara Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRing.EndAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easeType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIRing::EndAngleTo(float endValue, float duration, float delay, ELTweenEase easeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "EndAngleTo");

	Params::UIRing_EndAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.easeType = easeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRing.SetEndAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRing::SetEndAngle(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "SetEndAngle");

	Params::UIRing_SetEndAngle Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRing.SetSegment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRing::SetSegment(int32 newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "SetSegment");

	Params::UIRing_SetSegment Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRing.SetStartAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRing::SetStartAngle(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "SetStartAngle");

	Params::UIRing_SetStartAngle Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRing.StartAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easeType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIRing::StartAngleTo(float endValue, float duration, float delay, ELTweenEase easeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "StartAngleTo");

	Params::UIRing_StartAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.duration = duration;
	Parms.delay = delay;
	Parms.easeType = easeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRing.GetEndAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIRing::GetEndAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "GetEndAngle");

	Params::UIRing_GetEndAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRing.GetSegment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIRing::GetSegment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "GetSegment");

	Params::UIRing_GetSegment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRing.GetStartAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIRing::GetStartAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "GetStartAngle");

	Params::UIRing_GetStartAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollbarComponent.ResetScrollbarDelegate
// (Final, Native, Static, Private, BlueprintCallable)

void UUIScrollbarComponent::ResetScrollbarDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIScrollbarComponent", "ResetScrollbarDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollbarComponent.SetScrollbarDelegate
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class UUIScrollbarComponent* ScrollbarComponent, bool ativeOrInactive)>&Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIScrollbarComponent::SetScrollbarDelegate(const TDelegate<void(class UUIScrollbarComponent* ScrollbarComponent, bool ativeOrInactive)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIScrollbarComponent", "SetScrollbarDelegate");

	Params::UIScrollbarComponent_SetScrollbarDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollbarComponent.ChangeSchedule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUINavigationDirection                InDirection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollbarComponent::ChangeSchedule(ELGUINavigationDirection InDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "ChangeSchedule");

	Params::UIScrollbarComponent_ChangeSchedule Parms{};

	Parms.InDirection = InDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollbarComponent.RegisterSlideEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(float InFloat)>&   InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIScrollbarComponent::RegisterSlideEvent(const TDelegate<void(float InFloat)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "RegisterSlideEvent");

	Params::UIScrollbarComponent_RegisterSlideEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollbarComponent.SetSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InSize                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollbarComponent::SetSize(float InSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "SetSize");

	Params::UIScrollbarComponent_SetSize Parms{};

	Parms.InSize = InSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollbarComponent.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollbarComponent::SetValue(float InValue, bool FireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "SetValue");

	Params::UIScrollbarComponent_SetValue Parms{};

	Parms.InValue = InValue;
	Parms.FireEvent = FireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollbarComponent.SetValueAndSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InSize                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollbarComponent::SetValueAndSize(float InValue, float InSize, bool FireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "SetValueAndSize");

	Params::UIScrollbarComponent_SetValueAndSize Parms{};

	Parms.InValue = InValue;
	Parms.InSize = InSize;
	Parms.FireEvent = FireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollbarComponent.UnregisterSlideEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIScrollbarComponent::UnregisterSlideEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "UnregisterSlideEvent");

	Params::UIScrollbarComponent_UnregisterSlideEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollbarComponent.GetSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIScrollbarComponent::GetSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "GetSize");

	Params::UIScrollbarComponent_GetSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollbarComponent.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIScrollbarComponent::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "GetValue");

	Params::UIScrollbarComponent_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableButtonComponent.SetForceSelect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    forceSelect                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableButtonComponent::SetForceSelect(bool forceSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableButtonComponent", "SetForceSelect");

	Params::UISelectableButtonComponent_SetForceSelect Parms{};

	Parms.forceSelect = forceSelect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISliderComponent.RegisterSlideEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(float InFloat)>&   InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUISliderComponent::RegisterSlideEvent(const TDelegate<void(float InFloat)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "RegisterSlideEvent");

	Params::UISliderComponent_RegisterSlideEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISliderComponent.SetMaxValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMaxValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    KeepRelativeValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISliderComponent::SetMaxValue(float InMaxValue, bool KeepRelativeValue, bool FireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "SetMaxValue");

	Params::UISliderComponent_SetMaxValue Parms{};

	Parms.InMaxValue = InMaxValue;
	Parms.KeepRelativeValue = KeepRelativeValue;
	Parms.FireEvent = FireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISliderComponent.SetMinValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMinValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    KeepRelativeValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISliderComponent::SetMinValue(float InMinValue, bool KeepRelativeValue, bool FireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "SetMinValue");

	Params::UISliderComponent_SetMinValue Parms{};

	Parms.InMinValue = InMinValue;
	Parms.KeepRelativeValue = KeepRelativeValue;
	Parms.FireEvent = FireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISliderComponent.SetProgressIncrement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   incrementValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    needRound                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISliderComponent::SetProgressIncrement(float incrementValue, bool needRound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "SetProgressIncrement");

	Params::UISliderComponent_SetProgressIncrement Parms{};

	Parms.incrementValue = incrementValue;
	Parms.needRound = needRound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISliderComponent.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISliderComponent::SetValue(float InValue, bool FireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "SetValue");

	Params::UISliderComponent_SetValue Parms{};

	Parms.InValue = InValue;
	Parms.FireEvent = FireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISliderComponent.UnregisterSlideEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUISliderComponent::UnregisterSlideEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "UnregisterSlideEvent");

	Params::UISliderComponent_UnregisterSlideEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISliderComponent.GetMaxValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISliderComponent::GetMaxValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "GetMaxValue");

	Params::UISliderComponent_GetMaxValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISliderComponent.GetMinValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISliderComponent::GetMinValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "GetMinValue");

	Params::UISliderComponent_GetMinValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISliderComponent.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISliderComponent::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "GetValue");

	Params::UISliderComponent_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISprite.SetFillAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetFillAmount(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetFillAmount");

	Params::UISprite_SetFillAmount Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetFillDirectionFlip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetFillDirectionFlip(bool newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetFillDirectionFlip");

	Params::UISprite_SetFillDirectionFlip Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetFillMethod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISpriteFillMethod                     newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetFillMethod(EUISpriteFillMethod newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetFillMethod");

	Params::UISprite_SetFillMethod Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetFillOrigin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetFillOrigin(uint8 newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetFillOrigin");

	Params::UISprite_SetFillOrigin Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetOffsetX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetOffsetX(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetOffsetX");

	Params::UISprite_SetOffsetX Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetOffsetY
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetOffsetY(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetOffsetY");

	Params::UISprite_SetOffsetY Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetSpriteType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISpriteType                           newType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetSpriteType(EUISpriteType newType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetSpriteType");

	Params::UISprite_SetSpriteType Parms{};

	Parms.newType = newType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetTileOffset
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              In                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetTileOffset(const struct FLinearColor& In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetTileOffset");

	Params::UISprite_SetTileOffset Parms{};

	Parms.In = std::move(In);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetTileX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetTileX(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetTileX");

	Params::UISprite_SetTileX Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetTileY
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetTileY(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetTileY");

	Params::UISprite_SetTileY Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.GetFillAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISprite::GetFillAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "GetFillAmount");

	Params::UISprite_GetFillAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISprite.GetFillDirectionFlip
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISprite::GetFillDirectionFlip() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "GetFillDirectionFlip");

	Params::UISprite_GetFillDirectionFlip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISprite.GetFillMethod
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISpriteFillMethod                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISpriteFillMethod UUISprite::GetFillMethod() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "GetFillMethod");

	Params::UISprite_GetFillMethod Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISprite.GetFillOrigin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UUISprite::GetFillOrigin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "GetFillOrigin");

	Params::UISprite_GetFillOrigin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISprite.GetSpriteType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISpriteType                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISpriteType UUISprite::GetSpriteType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "GetSpriteType");

	Params::UISprite_GetSpriteType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpriteAnimator.ResetSpriteImporter
// (Final, Native, Public, BlueprintCallable)

void UUISpriteAnimator::ResetSpriteImporter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteAnimator", "ResetSpriteImporter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteAnimator.SetCurFrame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   newCurFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpriteAnimator::SetCurFrame(int32 newCurFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteAnimator", "SetCurFrame");

	Params::UISpriteAnimator_SetCurFrame Parms{};

	Parms.newCurFrame = newCurFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteAnimator.GetCurFrame
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUISpriteAnimator::GetCurFrame() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteAnimator", "GetCurFrame");

	Params::UISpriteAnimator_GetCurFrame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpriteSequencePlayer.SetSpriteSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<class ULGUISpriteData_BaseObject*>&value                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UUISpriteSequencePlayer::SetSpriteSequence(const TArray<class ULGUISpriteData_BaseObject*>& value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSequencePlayer", "SetSpriteSequence");

	Params::UISpriteSequencePlayer_SetSpriteSequence Parms{};

	Parms.value = std::move(value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteSequencePlayer.GetSpriteSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class ULGUISpriteData_BaseObject*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<class ULGUISpriteData_BaseObject*> UUISpriteSequencePlayer::GetSpriteSequence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSequencePlayer", "GetSpriteSequence");

	Params::UISpriteSequencePlayer_GetSpriteSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.SpriteTransitionUtil.SetSpriteByTransitionInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUISprite*                        Sprite                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSpriteTransitionOfState&  Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USpriteTransitionUtil::SetSpriteByTransitionInfo(class UUISprite* Sprite, const struct FSpriteTransitionOfState& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpriteTransitionUtil", "SetSpriteByTransitionInfo");

	Params::SpriteTransitionUtil_SetSpriteByTransitionInfo Parms{};

	Parms.Sprite = Sprite;
	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.SpriteTransitionUtil.SetSpriteSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUISprite*                        Sprite                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSnapSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpriteTransitionUtil::SetSpriteSize(class UUISprite* Sprite, bool bSnapSize, float Width, float Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpriteTransitionUtil", "SetSpriteSize");

	Params::SpriteTransitionUtil_SetSpriteSize Parms{};

	Parms.Sprite = Sprite;
	Parms.bSnapSize = bSnapSize;
	Parms.Width = Width;
	Parms.Height = Height;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.OnTsLanguageChange
// (Final, Native, Static, Public, BlueprintCallable)

void UUIText::OnTsLanguageChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIText", "OnTsLanguageChange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetGmReplaceFontDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class UUIText* uiText)>&Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIText::SetGmReplaceFontDelegate(const TDelegate<void(class UUIText* uiText)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIText", "SetGmReplaceFontDelegate");

	Params::UIText_SetGmReplaceFontDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetLocalTextDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const class FString& TableName, int32 TextKey, class UUIText* uiText)>&Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIText::SetLocalTextDelegate(const TDelegate<void(const class FString& TableName, int32 TextKey, class UUIText* uiText)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIText", "SetLocalTextDelegate");

	Params::UIText_SetLocalTextDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetLocalTextNewDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const class FString& TextKey, class UUIText* uiText, const bool isMainText)>&Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIText::SetLocalTextNewDelegate(const TDelegate<void(const class FString& TextKey, class UUIText* uiText, const bool isMainText)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIText", "SetLocalTextNewDelegate");

	Params::UIText_SetLocalTextNewDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetTextTranslateDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class UUIText* uiText)>&Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIText::SetTextTranslateDelegate(const TDelegate<void(class UUIText* uiText)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIText", "SetTextTranslateDelegate");

	Params::UIText_SetTextTranslateDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetTsGameRichTextDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const class FString& RichTextType, const TArray<class FString>& Params)>&Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIText::SetTsGameRichTextDelegate(const TDelegate<void(const class FString& RichTextType, const TArray<class FString>& Params)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIText", "SetTsGameRichTextDelegate");

	Params::UIText_SetTsGameRichTextDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.AddFloatArgs
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::AddFloatArgs(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "AddFloatArgs");

	Params::UIText_AddFloatArgs Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.AddFormatTableInfo
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ConfigTableName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::AddFormatTableInfo(const class FString& ConfigTableName, int32 Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "AddFormatTableInfo");

	Params::UIText_AddFormatTableInfo Parms{};

	Parms.ConfigTableName = std::move(ConfigTableName);
	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.AddFormatTableInfoNew
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::AddFormatTableInfoNew(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "AddFormatTableInfoNew");

	Params::UIText_AddFormatTableInfoNew Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.AddInt64Args
// (Native, Public, BlueprintCallable)
// Parameters:
// int64                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::AddInt64Args(int64 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "AddInt64Args");

	Params::UIText_AddInt64Args Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.AddIntArgs
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::AddIntArgs(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "AddIntArgs");

	Params::UIText_AddIntArgs Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.AddStringArgs
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::AddStringArgs(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "AddStringArgs");

	Params::UIText_AddStringArgs Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.Clear
// (Native, Public, BlueprintCallable)

void UUIText::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.GetDisplayCharLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIText::GetDisplayCharLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetDisplayCharLength");

	Params::UIText_GetDisplayCharLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRealFontSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIText::GetRealFontSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRealFontSize");

	Params::UIText_GetRealFontSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRealSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIText::GetRealSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRealSize");

	Params::UIText_GetRealSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRenderLineCharNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIText::GetRenderLineCharNum(int32 index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRenderLineCharNum");

	Params::UIText_GetRenderLineCharNum Parms{};

	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRenderLineHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LineIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIText::GetRenderLineHeight(int32 LineIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRenderLineHeight");

	Params::UIText_GetRenderLineHeight Parms{};

	Parms.LineIndex = LineIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRenderLineNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIText::GetRenderLineNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRenderLineNum");

	Params::UIText_GetRenderLineNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetTextLineNumArray
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>*                          OutArray                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UUIText::GetTextLineNumArray(TArray<int32>* OutArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetTextLineNumArray");

	Params::UIText_GetTextLineNumArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutArray != nullptr)
		*OutArray = std::move(Parms.OutArray);
}


// Function LGUI.UIText.GetTextRenderSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIText::GetTextRenderSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetTextRenderSize");

	Params::UIText_GetTextRenderSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.OnTextTextureLoaded
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FDynamicAtlasSlotManagedHandle>&ManagedHandle                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIText::OnTextTextureLoaded(const TArray<struct FDynamicAtlasSlotManagedHandle>& ManagedHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "OnTextTextureLoaded");

	Params::UIText_OnTextTextureLoaded Parms{};

	Parms.ManagedHandle = std::move(ManagedHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetAdjustHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newAdjustHeight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetAdjustHeight(bool newAdjustHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetAdjustHeight");

	Params::UIText_SetAdjustHeight Parms{};

	Parms.newAdjustHeight = newAdjustHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetAdjustWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newAdjustWidth                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetAdjustWidth(bool newAdjustWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetAdjustWidth");

	Params::UIText_SetAdjustWidth Parms{};

	Parms.newAdjustWidth = newAdjustWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetEnableHyperLinksHighlight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetEnableHyperLinksHighlight(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetEnableHyperLinksHighlight");

	Params::UIText_SetEnableHyperLinksHighlight Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetFilterAnoRichTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFilter                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetFilterAnoRichTag(bool bFilter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetFilterAnoRichTag");

	Params::UIText_SetFilterAnoRichTag Parms{};

	Parms.bFilter = bFilter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetFont
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIFontData_BaseObject*         newFont                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetFont(class ULGUIFontData_BaseObject* newFont)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetFont");

	Params::UIText_SetFont Parms{};

	Parms.newFont = newFont;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetFontSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetFontSize(float newSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetFontSize");

	Params::UIText_SetFontSize Parms{};

	Parms.newSize = newSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetFontSpace
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 newSpace                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetFontSpace(const struct FVector2D& newSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetFontSpace");

	Params::UIText_SetFontSpace Parms{};

	Parms.newSpace = std::move(newSpace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetFontSpacePercentage
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 newSpace                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetFontSpacePercentage(const struct FVector2D& newSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetFontSpacePercentage");

	Params::UIText_SetFontSpacePercentage Parms{};

	Parms.newSpace = std::move(newSpace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetFontStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUITextFontStyle                        newFontStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetFontStyle(EUITextFontStyle newFontStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetFontStyle");

	Params::UIText_SetFontStyle Parms{};

	Parms.newFontStyle = newFontStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetGameRichText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetGameRichText(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetGameRichText");

	Params::UIText_SetGameRichText Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetHyperLinksHoverSpiteActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetHyperLinksHoverSpiteActive(bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetHyperLinksHoverSpiteActive");

	Params::UIText_SetHyperLinksHoverSpiteActive Parms{};

	Parms.bActive = bActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetMaxHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewMaxHeight                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetMaxHeight(int32 NewMaxHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetMaxHeight");

	Params::UIText_SetMaxHeight Parms{};

	Parms.NewMaxHeight = NewMaxHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetMaxWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewMaxWidth                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetMaxWidth(int32 NewMaxWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetMaxWidth");

	Params::UIText_SetMaxWidth Parms{};

	Parms.NewMaxWidth = NewMaxWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetOverflowType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUITextOverflowType                     newOverflowType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetOverflowType(EUITextOverflowType newOverflowType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetOverflowType");

	Params::UIText_SetOverflowType Parms{};

	Parms.newOverflowType = newOverflowType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetParagraphHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUITextParagraphHorizontalAlign         newHAlign                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetParagraphHorizontalAlignment(EUITextParagraphHorizontalAlign newHAlign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetParagraphHorizontalAlignment");

	Params::UIText_SetParagraphHorizontalAlignment Parms{};

	Parms.newHAlign = newHAlign;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetParagraphVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUITextParagraphVerticalAlign           newVAlign                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetParagraphVerticalAlignment(EUITextParagraphVerticalAlign newVAlign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetParagraphVerticalAlignment");

	Params::UIText_SetParagraphVerticalAlignment Parms{};

	Parms.newVAlign = newVAlign;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetRichText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newRichText                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetRichText(bool newRichText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetRichText");

	Params::UIText_SetRichText Parms{};

	Parms.newRichText = newRichText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    newText                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DisableTranslate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetText(const class FString& newText, bool DisableTranslate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetText");

	Params::UIText_SetText Parms{};

	Parms.newText = std::move(newText);
	Parms.DisableTranslate = DisableTranslate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.ShowText
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ConfigTableName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::ShowText(const class FString& ConfigTableName, int32 Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "ShowText");

	Params::UIText_ShowText Parms{};

	Parms.ConfigTableName = std::move(ConfigTableName);
	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.ShowTextNew
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::ShowTextNew(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "ShowTextNew");

	Params::UIText_ShowTextNew Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.GetAdjustHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIText::GetAdjustHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetAdjustHeight");

	Params::UIText_GetAdjustHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetAdjustWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIText::GetAdjustWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetAdjustWidth");

	Params::UIText_GetAdjustWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetAlignCenter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIText::GetAlignCenter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetAlignCenter");

	Params::UIText_GetAlignCenter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetAutoEllipsis
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIText::GetAutoEllipsis() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetAutoEllipsis");

	Params::UIText_GetAutoEllipsis Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetAutoEllipsisSplitWord
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIText::GetAutoEllipsisSplitWord() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetAutoEllipsisSplitWord");

	Params::UIText_GetAutoEllipsisSplitWord Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFont
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIFontData_BaseObject*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIFontData_BaseObject* UUIText::GetFont() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFont");

	Params::UIText_GetFont Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFontGlowColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIText::GetFontGlowColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFontGlowColor");

	Params::UIText_GetFontGlowColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFontGlowSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIText::GetFontGlowSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFontGlowSize");

	Params::UIText_GetFontGlowSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFontOutlineColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIText::GetFontOutlineColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFontOutlineColor");

	Params::UIText_GetFontOutlineColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFontOutlineSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIText::GetFontOutlineSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFontOutlineSize");

	Params::UIText_GetFontOutlineSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFontSpace
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIText::GetFontSpace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFontSpace");

	Params::UIText_GetFontSpace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFontSpaceFinal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIText::GetFontSpaceFinal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFontSpaceFinal");

	Params::UIText_GetFontSpaceFinal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFontSpacePercentage
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIText::GetFontSpacePercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFontSpacePercentage");

	Params::UIText_GetFontSpacePercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFontStyle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUITextFontStyle                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUITextFontStyle UUIText::GetFontStyle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFontStyle");

	Params::UIText_GetFontStyle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetHyperlinks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UUIText::GetHyperlinks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetHyperlinks");

	Params::UIText_GetHyperlinks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetMaxHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIText::GetMaxHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetMaxHeight");

	Params::UIText_GetMaxHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetMaxWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIText::GetMaxWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetMaxWidth");

	Params::UIText_GetMaxWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetOverflowType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUITextOverflowType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUITextOverflowType UUIText::GetOverflowType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetOverflowType");

	Params::UIText_GetOverflowType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRichText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIText::GetRichText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRichText");

	Params::UIText_GetRichText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIText::GetSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetSize");

	Params::UIText_GetSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUIText::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetText");

	Params::UIText_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.IsEnableHyperLinksHighlight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIText::IsEnableHyperLinksHighlight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "IsEnableHyperLinksHighlight");

	Params::UIText_IsEnableHyperLinksHighlight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.IsFilterAnoRichTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIText::IsFilterAnoRichTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "IsFilterAnoRichTag");

	Params::UIText_IsFilterAnoRichTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextAdditionalUVModifier.SetAdditionalUV
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   AdditionalUVChannel                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 UV                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextAdditionalUVModifier::SetAdditionalUV(int32 AdditionalUVChannel, const struct FVector2D& UV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextAdditionalUVModifier", "SetAdditionalUV");

	Params::UITextAdditionalUVModifier_SetAdditionalUV Parms{};

	Parms.AdditionalUVChannel = AdditionalUVChannel;
	Parms.UV = std::move(UV);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.ActivateInputText
// (Final, Native, Public, BlueprintCallable)

void UUITextInputComponent::ActivateInputText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "ActivateInputText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.ClearCustomInputTypeEvent
// (Final, Native, Public, BlueprintCallable)

void UUITextInputComponent::ClearCustomInputTypeEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "ClearCustomInputTypeEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.DeactivateInputText
// (Final, Native, Public, BlueprintCallable)

void UUITextInputComponent::DeactivateInputText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "DeactivateInputText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.IsInputActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUITextInputComponent::IsInputActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "IsInputActive");

	Params::UITextInputComponent_IsInputActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.RegisterInputActivateEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(bool InActivate)>& InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUITextInputComponent::RegisterInputActivateEvent(const TDelegate<void(bool InActivate)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "RegisterInputActivateEvent");

	Params::UITextInputComponent_RegisterInputActivateEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.RegisterSubmitEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const class FString& InString)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUITextInputComponent::RegisterSubmitEvent(const TDelegate<void(const class FString& InString)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "RegisterSubmitEvent");

	Params::UITextInputComponent_RegisterSubmitEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.RegisterValueChangeEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const class FString& InString)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUITextInputComponent::RegisterValueChangeEvent(const TDelegate<void(const class FString& InString)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "RegisterValueChangeEvent");

	Params::UITextInputComponent_RegisterValueChangeEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.SetCustomInputTypeFunction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const class FString& InString)>&InFunction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetCustomInputTypeFunction(const TDelegate<void(const class FString& InString)>& InFunction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetCustomInputTypeFunction");

	Params::UITextInputComponent_SetCustomInputTypeFunction Parms{};

	Parms.InFunction = InFunction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetInputType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUITextInputType                      newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetInputType(ELGUITextInputType newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetInputType");

	Params::UITextInputComponent_SetInputType Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InText                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InFireEvent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetText(const class FString& InText, bool InFireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetText");

	Params::UITextInputComponent_SetText Parms{};

	Parms.InText = std::move(InText);
	Parms.InFireEvent = InFireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.UnregisterInputActivateEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUITextInputComponent::UnregisterInputActivateEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "UnregisterInputActivateEvent");

	Params::UITextInputComponent_UnregisterInputActivateEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.UnregisterSubmitEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUITextInputComponent::UnregisterSubmitEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "UnregisterSubmitEvent");

	Params::UITextInputComponent_UnregisterSubmitEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.UnregisterValueChangeEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUITextInputComponent::UnregisterValueChangeEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "UnregisterValueChangeEvent");

	Params::UITextInputComponent_UnregisterValueChangeEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.GetInputType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUITextInputType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUITextInputType UUITextInputComponent::GetInputType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetInputType");

	Params::UITextInputComponent_GetInputType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUITextInputComponent::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetText");

	Params::UITextInputComponent_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetTextComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIText*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIText* UUITextInputComponent::GetTextComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetTextComponent");

	Params::UITextInputComponent_GetTextComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.SetCurFrame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newCurFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetCurFrame(float newCurFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetCurFrame");

	Params::UITexture_SetCurFrame Parms{};

	Parms.newCurFrame = newCurFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetFillAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetFillAmount(float newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetFillAmount");

	Params::UITexture_SetFillAmount Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetFillDirectionFlip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetFillDirectionFlip(bool newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetFillDirectionFlip");

	Params::UITexture_SetFillDirectionFlip Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetFillMethod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISpriteFillMethod                     newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetFillMethod(EUISpriteFillMethod newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetFillMethod");

	Params::UITexture_SetFillMethod Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetFillOrigin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   newValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetFillOrigin(uint8 newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetFillOrigin");

	Params::UITexture_SetFillOrigin Parms{};

	Parms.newValue = newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetSpriteData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FLGUISpriteInfo&           newSpriteData                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UUITexture::SetSpriteData(const struct FLGUISpriteInfo& newSpriteData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetSpriteData");

	Params::UITexture_SetSpriteData Parms{};

	Parms.newSpriteData = std::move(newSpriteData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetTextureData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUITextureData*                 NewTextureData                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetTextureData(class ULGUITextureData* NewTextureData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetTextureData");

	Params::UITexture_SetTextureData Parms{};

	Parms.NewTextureData = NewTextureData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetTextureType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUITextureType                          newType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetTextureType(EUITextureType newType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetTextureType");

	Params::UITexture_SetTextureType Parms{};

	Parms.newType = newType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetUVRect
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector4&                  newUVRect                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetUVRect(const struct FVector4& newUVRect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetUVRect");

	Params::UITexture_SetUVRect Parms{};

	Parms.newUVRect = std::move(newUVRect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.GetFillAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUITexture::GetFillAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetFillAmount");

	Params::UITexture_GetFillAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetFillDirectionFlip
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUITexture::GetFillDirectionFlip() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetFillDirectionFlip");

	Params::UITexture_GetFillDirectionFlip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetFillMethod
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISpriteFillMethod                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISpriteFillMethod UUITexture::GetFillMethod() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetFillMethod");

	Params::UITexture_GetFillMethod Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetFillOrigin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UUITexture::GetFillOrigin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetFillOrigin");

	Params::UITexture_GetFillOrigin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetSpriteData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLGUISpriteInfo                  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUISpriteInfo UUITexture::GetSpriteData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetSpriteData");

	Params::UITexture_GetSpriteData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetTextureData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUITextureData*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUITextureData* UUITexture::GetTextureData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetTextureData");

	Params::UITexture_GetTextureData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetTextureType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUITextureType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUITextureType UUITexture::GetTextureType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetTextureType");

	Params::UITexture_GetTextureType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetUVRect
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector4                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector4 UUITexture::GetUVRect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetUVRect");

	Params::UITexture_GetUVRect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextureBase_BP.MarkRebuildGeometry_BP
// (Final, Native, Public, BlueprintCallable)

void UUITextureBase_BP::MarkRebuildGeometry_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase_BP", "MarkRebuildGeometry_BP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextureBase_BP.MarkVertexChanged_BP
// (Final, Native, Public, BlueprintCallable)

void UUITextureBase_BP::MarkVertexChanged_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase_BP", "MarkVertexChanged_BP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextureBase_BP.OnBeforeCreateOrUpdateGeometry_BP
// (Event, Protected, BlueprintEvent)

void UUITextureBase_BP::OnBeforeCreateOrUpdateGeometry_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase_BP", "OnBeforeCreateOrUpdateGeometry_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.UITextureBase_BP.OnCreateGeometry_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUICreateGeometryHelper*        InCreateGeometryHelper                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextureBase_BP::OnCreateGeometry_BP(class ULGUICreateGeometryHelper* InCreateGeometryHelper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase_BP", "OnCreateGeometry_BP");

	Params::UITextureBase_BP_OnCreateGeometry_BP Parms{};

	Parms.InCreateGeometryHelper = InCreateGeometryHelper;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UITextureBase_BP.OnUpdateGeometry_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUIUpdateGeometryHelper*        InUpdateGoemetryHelper                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexPositionChanged                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexUVChanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexColorChanged                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextureBase_BP::OnUpdateGeometry_BP(class ULGUIUpdateGeometryHelper* InUpdateGoemetryHelper, bool InVertexPositionChanged, bool InVertexUVChanged, bool InVertexColorChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase_BP", "OnUpdateGeometry_BP");

	Params::UITextureBase_BP_OnUpdateGeometry_BP Parms{};

	Parms.InUpdateGoemetryHelper = InUpdateGoemetryHelper;
	Parms.InVertexPositionChanged = InVertexPositionChanged;
	Parms.InVertexUVChanged = InVertexUVChanged;
	Parms.InVertexColorChanged = InVertexColorChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.TextureTransitionUtil.SetTextureByTransitionInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUITexture*                       Texture                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTextureTransitionOfState& Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UTextureTransitionUtil::SetTextureByTransitionInfo(class UUITexture* Texture, const struct FTextureTransitionOfState& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TextureTransitionUtil", "SetTextureByTransitionInfo");

	Params::TextureTransitionUtil_SetTextureByTransitionInfo Parms{};

	Parms.Texture = Texture;
	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.TextureTransitionUtil.SetTextureSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUITexture*                       Texture                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsSnapSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextureTransitionUtil::SetTextureSize(class UUITexture* Texture, bool bIsSnapSize, float Width, float Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TextureTransitionUtil", "SetTextureSize");

	Params::TextureTransitionUtil_SetTextureSize Parms{};

	Parms.Texture = Texture;
	Parms.bIsSnapSize = bIsSnapSize;
	Parms.Width = Width;
	Parms.Height = Height;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.ClearSelection
// (Final, Native, Public, BlueprintCallable)

void UUIToggleGroupComponent::ClearSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "ClearSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.OnComponentHighlighted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIToggleComponent*               Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIToggleGroupComponent::OnComponentHighlighted(class UUIToggleComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "OnComponentHighlighted");

	Params::UIToggleGroupComponent_OnComponentHighlighted Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.OnComponentSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIToggleComponent*               Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIToggleGroupComponent::OnComponentSelected(class UUIToggleComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "OnComponentSelected");

	Params::UIToggleGroupComponent_OnComponentSelected Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.OnComponentUnhighlighted
// (Final, Native, Public, BlueprintCallable)

void UUIToggleGroupComponent::OnComponentUnhighlighted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "OnComponentUnhighlighted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.OnComponentUnselected
// (Final, Native, Public, BlueprintCallable)

void UUIToggleGroupComponent::OnComponentUnselected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "OnComponentUnselected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.RegisterToggleEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(int32 Index)>&     InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIToggleGroupComponent::RegisterToggleEvent(const TDelegate<void(int32 Index)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "RegisterToggleEvent");

	Params::UIToggleGroupComponent_RegisterToggleEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleGroupComponent.SetAllowNoneSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InBool                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIToggleGroupComponent::SetAllowNoneSelected(bool InBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "SetAllowNoneSelected");

	Params::UIToggleGroupComponent_SetAllowNoneSelected Parms{};

	Parms.InBool = InBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.SetSelection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIToggleComponent*               Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIToggleGroupComponent::SetSelection(class UUIToggleComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "SetSelection");

	Params::UIToggleGroupComponent_SetSelection Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.UnregisterToggleEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIToggleGroupComponent::UnregisterToggleEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "UnregisterToggleEvent");

	Params::UIToggleGroupComponent_UnregisterToggleEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.GetAllowNoneSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIToggleGroupComponent::GetAllowNoneSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "GetAllowNoneSelected");

	Params::UIToggleGroupComponent_GetAllowNoneSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleGroupComponent.GetSelectedItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIToggleComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIToggleComponent* UUIToggleGroupComponent::GetSelectedItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "GetSelectedItem");

	Params::UIToggleGroupComponent_GetSelectedItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleGroupComponent.GetToggleByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIToggleComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIToggleComponent* UUIToggleGroupComponent::GetToggleByIndex(int32 InIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "GetToggleByIndex");

	Params::UIToggleGroupComponent_GetToggleByIndex Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleGroupComponent.GetToggleIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UUIToggleComponent*         InComp                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIToggleGroupComponent::GetToggleIndex(const class UUIToggleComponent* InComp) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "GetToggleIndex");

	Params::UIToggleGroupComponent_GetToggleIndex Parms{};

	Parms.InComp = InComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIViewTweenParams.GetTweenAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIViewTweenParams::GetTweenAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIViewTweenParams", "GetTweenAlpha");

	Params::UIViewTweenParams_GetTweenAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIViewTweenParams.GetTweenSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIViewTweenParams::GetTweenSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIViewTweenParams", "GetTweenSize");

	Params::UIViewTweenParams_GetTweenSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIViewTweenParams.GetTweenTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIViewTweenParams::GetTweenTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIViewTweenParams", "GetTweenTime");

	Params::UIViewTweenParams_GetTweenTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIViewTweenParams.GetViewNameBlackList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UUIViewTweenParams::GetViewNameBlackList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIViewTweenParams", "GetViewNameBlackList");

	Params::UIViewTweenParams_GetViewNameBlackList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.ViewportUITexture.GetSceneCapture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USceneCaptureComponent2D*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneCaptureComponent2D* UViewportUITexture::GetSceneCapture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ViewportUITexture", "GetSceneCapture");

	Params::ViewportUITexture_GetSceneCapture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.ViewportUITexture.ViewPointToWorld
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 InViewPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutWorldLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutWorldDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UViewportUITexture::ViewPointToWorld(const struct FVector2D& InViewPoint, struct FVector* OutWorldLocation, struct FVector* OutWorldDirection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ViewportUITexture", "ViewPointToWorld");

	Params::ViewportUITexture_ViewPointToWorld Parms{};

	Parms.InViewPoint = std::move(InViewPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWorldLocation != nullptr)
		*OutWorldLocation = std::move(Parms.OutWorldLocation);

	if (OutWorldDirection != nullptr)
		*OutWorldDirection = std::move(Parms.OutWorldDirection);
}


// Function LGUI.ViewportUITexture.WorldToViewPoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   InWorldLocation                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutViewPoint                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UViewportUITexture::WorldToViewPoint(const struct FVector& InWorldLocation, struct FVector2D* OutViewPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ViewportUITexture", "WorldToViewPoint");

	Params::ViewportUITexture_WorldToViewPoint Parms{};

	Parms.InWorldLocation = std::move(InWorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutViewPoint != nullptr)
		*OutViewPoint = std::move(Parms.OutViewPoint);

	return Parms.ReturnValue;
}


// Function LGUI.ViewportUITextureActor.GetUITexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UViewportUITexture*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UViewportUITexture* AViewportUITextureActor::GetUITexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ViewportUITextureActor", "GetUITexture");

	Params::ViewportUITextureActor_GetUITexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

