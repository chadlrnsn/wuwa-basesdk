#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimNotifyStateEffect

#include "Basic.hpp"

#include "ESkillEffectType_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass AnimNotifyStateEffect.AnimNotifyStateEffect_C
// 0x00D0 (0x0150 - 0x0080)
class UAnimNotifyStateEffect_C final : public UKuroEffectMakerANS
{
public:
	bool                                          UseSocketTransform;                                // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseClipboardTransform;                             // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DetachWhenSkillEnd;                                // 0x0082(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESkillEffectType                              WhenSkillEnd;                                      // 0x0083(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FasterStop;                                        // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UEffectModelBase>        EffectDataAssetRef;                                // 0x0088(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash)
	float                                         AutoDetachTime;                                    // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayOnEnd;                                         // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  WithOutTag;                                        // 0x00C0(0x0020)(Edit, BlueprintVisible)
	bool                                          NeedAnyTag;                                        // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, bool>               PlayNeedTags;                                      // 0x00E8(0x0050)(Edit, BlueprintVisible)
	bool                                          IsWeaponEffect;                                    // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RecycleWhenEnd;                                    // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AlwaysLoop;                                        // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SyncEventTimeToEffectTime;                         // 0x013B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreWhenInvisible;                               // 0x013C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EffectSlotName;                                    // 0x0140(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSyncEffectTimeScale;                             // 0x014C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	bool K2_ValidateAssets();
	bool K2_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	bool K2_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	bool K2_PostChangeProperty(const class FName PropertyName);
	bool K2_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	void AttachEffectToWeapon(class USkeletalMeshComponent* meshComp, class AActor* outer, float effectHandle);
	void Init();

	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimNotifyStateEffect_C">();
	}
	static class UAnimNotifyStateEffect_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyStateEffect_C>();
	}
};
static_assert(alignof(UAnimNotifyStateEffect_C) == 0x000008, "Wrong alignment on UAnimNotifyStateEffect_C");
static_assert(sizeof(UAnimNotifyStateEffect_C) == 0x000150, "Wrong size on UAnimNotifyStateEffect_C");
static_assert(offsetof(UAnimNotifyStateEffect_C, UseSocketTransform) == 0x000080, "Member 'UAnimNotifyStateEffect_C::UseSocketTransform' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, UseClipboardTransform) == 0x000081, "Member 'UAnimNotifyStateEffect_C::UseClipboardTransform' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, DetachWhenSkillEnd) == 0x000082, "Member 'UAnimNotifyStateEffect_C::DetachWhenSkillEnd' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, WhenSkillEnd) == 0x000083, "Member 'UAnimNotifyStateEffect_C::WhenSkillEnd' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, FasterStop) == 0x000084, "Member 'UAnimNotifyStateEffect_C::FasterStop' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, EffectDataAssetRef) == 0x000088, "Member 'UAnimNotifyStateEffect_C::EffectDataAssetRef' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, AutoDetachTime) == 0x0000B8, "Member 'UAnimNotifyStateEffect_C::AutoDetachTime' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, PlayOnEnd) == 0x0000BC, "Member 'UAnimNotifyStateEffect_C::PlayOnEnd' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, WithOutTag) == 0x0000C0, "Member 'UAnimNotifyStateEffect_C::WithOutTag' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, NeedAnyTag) == 0x0000E0, "Member 'UAnimNotifyStateEffect_C::NeedAnyTag' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, PlayNeedTags) == 0x0000E8, "Member 'UAnimNotifyStateEffect_C::PlayNeedTags' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, IsWeaponEffect) == 0x000138, "Member 'UAnimNotifyStateEffect_C::IsWeaponEffect' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, RecycleWhenEnd) == 0x000139, "Member 'UAnimNotifyStateEffect_C::RecycleWhenEnd' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, AlwaysLoop) == 0x00013A, "Member 'UAnimNotifyStateEffect_C::AlwaysLoop' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, SyncEventTimeToEffectTime) == 0x00013B, "Member 'UAnimNotifyStateEffect_C::SyncEventTimeToEffectTime' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, IgnoreWhenInvisible) == 0x00013C, "Member 'UAnimNotifyStateEffect_C::IgnoreWhenInvisible' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, EffectSlotName) == 0x000140, "Member 'UAnimNotifyStateEffect_C::EffectSlotName' has a wrong offset!");
static_assert(offsetof(UAnimNotifyStateEffect_C, IsSyncEffectTimeScale) == 0x00014C, "Member 'UAnimNotifyStateEffect_C::IsSyncEffectTimeScale' has a wrong offset!");

}

