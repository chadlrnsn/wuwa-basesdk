#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsAnimNotifyStateRotate

#include "Basic.hpp"

#include "EAnsRotateBlackboardType_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "EAnsRotateDetectionType_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsAnimNotifyStateRotate.TsAnimNotifyStateRotate_C
// 0x0070 (0x00B8 - 0x0048)
class UTsAnimNotifyStateRotate_C final : public UKuroAnimNotifyState
{
public:
	float                                         旋转速度;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否自动朝向目标;                                  // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          是否平滑旋转;                                      // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否应用旋转偏移;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         旋转偏移;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          设置为朝向黑板目标;                                // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EAnsRotateBlackboardType                      黑板类型;                                          // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 朝向黑板目标名;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	float                                         停止旋转阈值;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         继续旋转阈值;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          在横板模式中禁用;                                  // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          只在横板模式中生效;                                // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  屏蔽标签列表;                                      // 0x0088(0x0020)(Edit, BlueprintVisible)
	bool                                          定向旋转功能;                                      // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         定向旋转阈值最小值;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         定向旋转阈值最大值;                                // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnsRotateDetectionType                       定向旋转方式;                                      // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          调试定向旋转范围;                                  // 0x00B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)

public:
	bool K2_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	bool K2_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	void Initialize();
	bool IsInContinueDetectionAngle(float angle);
	bool K2_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);

	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsAnimNotifyStateRotate_C">();
	}
	static class UTsAnimNotifyStateRotate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsAnimNotifyStateRotate_C>();
	}
};
static_assert(alignof(UTsAnimNotifyStateRotate_C) == 0x000008, "Wrong alignment on UTsAnimNotifyStateRotate_C");
static_assert(sizeof(UTsAnimNotifyStateRotate_C) == 0x0000B8, "Wrong size on UTsAnimNotifyStateRotate_C");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 旋转速度) == 0x000048, "Member 'UTsAnimNotifyStateRotate_C::旋转速度' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 是否自动朝向目标) == 0x00004C, "Member 'UTsAnimNotifyStateRotate_C::是否自动朝向目标' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 是否平滑旋转) == 0x00004D, "Member 'UTsAnimNotifyStateRotate_C::是否平滑旋转' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, Curve) == 0x000050, "Member 'UTsAnimNotifyStateRotate_C::Curve' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 是否应用旋转偏移) == 0x000058, "Member 'UTsAnimNotifyStateRotate_C::是否应用旋转偏移' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 旋转偏移) == 0x00005C, "Member 'UTsAnimNotifyStateRotate_C::旋转偏移' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 设置为朝向黑板目标) == 0x000060, "Member 'UTsAnimNotifyStateRotate_C::设置为朝向黑板目标' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 黑板类型) == 0x000061, "Member 'UTsAnimNotifyStateRotate_C::黑板类型' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 朝向黑板目标名) == 0x000068, "Member 'UTsAnimNotifyStateRotate_C::朝向黑板目标名' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 停止旋转阈值) == 0x000078, "Member 'UTsAnimNotifyStateRotate_C::停止旋转阈值' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 继续旋转阈值) == 0x00007C, "Member 'UTsAnimNotifyStateRotate_C::继续旋转阈值' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 在横板模式中禁用) == 0x000080, "Member 'UTsAnimNotifyStateRotate_C::在横板模式中禁用' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 只在横板模式中生效) == 0x000081, "Member 'UTsAnimNotifyStateRotate_C::只在横板模式中生效' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 屏蔽标签列表) == 0x000088, "Member 'UTsAnimNotifyStateRotate_C::屏蔽标签列表' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 定向旋转功能) == 0x0000A8, "Member 'UTsAnimNotifyStateRotate_C::定向旋转功能' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 定向旋转阈值最小值) == 0x0000AC, "Member 'UTsAnimNotifyStateRotate_C::定向旋转阈值最小值' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 定向旋转阈值最大值) == 0x0000B0, "Member 'UTsAnimNotifyStateRotate_C::定向旋转阈值最大值' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 定向旋转方式) == 0x0000B4, "Member 'UTsAnimNotifyStateRotate_C::定向旋转方式' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateRotate_C, 调试定向旋转范围) == 0x0000B5, "Member 'UTsAnimNotifyStateRotate_C::调试定向旋转范围' has a wrong offset!");

}

