#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Base_Sanhua

#include "Basic.hpp"

#include "TsBaseCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Base_Sanhua.BP_Base_Sanhua_C
// 0x0030 (0x0780 - 0x0750)
class ABP_Base_Sanhua_C : public ATsBaseCharacter_C
{
public:
	class UKuroAdjustableCapsuleComponent*        Bip001LThighTwist;                                 // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroAdjustableCapsuleComponent*        Bip001RThighTwist;                                 // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroAdjustableCapsuleComponent*        Bip001Spine2;                                      // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 huiying;                                           // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 WeaponCase1;                                       // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 WeaponCase0;                                       // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void FightCommand(bool isInAir);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Base_Sanhua_C">();
	}
	static class ABP_Base_Sanhua_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Base_Sanhua_C>();
	}
};
static_assert(alignof(ABP_Base_Sanhua_C) == 0x000010, "Wrong alignment on ABP_Base_Sanhua_C");
static_assert(sizeof(ABP_Base_Sanhua_C) == 0x000780, "Wrong size on ABP_Base_Sanhua_C");
static_assert(offsetof(ABP_Base_Sanhua_C, Bip001LThighTwist) == 0x000750, "Member 'ABP_Base_Sanhua_C::Bip001LThighTwist' has a wrong offset!");
static_assert(offsetof(ABP_Base_Sanhua_C, Bip001RThighTwist) == 0x000758, "Member 'ABP_Base_Sanhua_C::Bip001RThighTwist' has a wrong offset!");
static_assert(offsetof(ABP_Base_Sanhua_C, Bip001Spine2) == 0x000760, "Member 'ABP_Base_Sanhua_C::Bip001Spine2' has a wrong offset!");
static_assert(offsetof(ABP_Base_Sanhua_C, huiying) == 0x000768, "Member 'ABP_Base_Sanhua_C::huiying' has a wrong offset!");
static_assert(offsetof(ABP_Base_Sanhua_C, WeaponCase1) == 0x000770, "Member 'ABP_Base_Sanhua_C::WeaponCase1' has a wrong offset!");
static_assert(offsetof(ABP_Base_Sanhua_C, WeaponCase0) == 0x000778, "Member 'ABP_Base_Sanhua_C::WeaponCase0' has a wrong offset!");

}

