#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplitScreen_New

#include "Basic.hpp"

#include "BP_SplitScreen_New_classes.hpp"
#include "BP_SplitScreen_New_parameters.hpp"


namespace SDK
{

// Function BP_SplitScreen_New.BP_SplitScreen_New_C.ExecuteUbergraph_BP_SplitScreen_New
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplitScreen_New_C::ExecuteUbergraph_BP_SplitScreen_New(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_New_C", "ExecuteUbergraph_BP_SplitScreen_New");

	Params::BP_SplitScreen_New_C_ExecuteUbergraph_BP_SplitScreen_New Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplitScreen_New.BP_SplitScreen_New_C.EditorTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplitScreen_New_C::EditorTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_New_C", "EditorTick");

	Params::BP_SplitScreen_New_C_EditorTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplitScreen_New.BP_SplitScreen_New_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplitScreen_New_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_New_C", "ReceiveTick");

	Params::BP_SplitScreen_New_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplitScreen_New.BP_SplitScreen_New_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SplitScreen_New_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_New_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplitScreen_New.BP_SplitScreen_New_C.Start
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplitScreen_New_C::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_New_C", "Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplitScreen_New.BP_SplitScreen_New_C.End
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplitScreen_New_C::End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_New_C", "End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplitScreen_New.BP_SplitScreen_New_C.InitKuroMaterialController
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UKuroMaterialControllerComponent* KuroMaterialControllerComponent                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UChildActorComponent*             CharacterActorComponent                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPointLightComponent*             PointLightComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PointLight_Location                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     PointLight_ToonLightColor                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     EyeLightSimulation_TongKong                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     EyeLightSimulation_YanBai                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     EyeLightSimulation_Color                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   E_LinkPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Channel0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Channel1                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Channel2                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LightYaw                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FaceLightYaw                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RoleId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   returnHandle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplitScreen_New_C::InitKuroMaterialController(class UKuroMaterialControllerComponent* KuroMaterialControllerComponent, class UChildActorComponent* CharacterActorComponent, class UPointLightComponent* PointLightComponent, const struct FVector& PointLight_Location, const struct FLinearColor& PointLight_ToonLightColor, const struct FLinearColor& EyeLightSimulation_TongKong, const struct FLinearColor& EyeLightSimulation_YanBai, const struct FLinearColor& EyeLightSimulation_Color, float E_LinkPos, bool Channel0, bool Channel1, bool Channel2, float LightYaw, float FaceLightYaw, int32 RoleId, int32* returnHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_New_C", "InitKuroMaterialController");

	Params::BP_SplitScreen_New_C_InitKuroMaterialController Parms{};

	Parms.KuroMaterialControllerComponent = KuroMaterialControllerComponent;
	Parms.CharacterActorComponent = CharacterActorComponent;
	Parms.PointLightComponent = PointLightComponent;
	Parms.PointLight_Location = std::move(PointLight_Location);
	Parms.PointLight_ToonLightColor = std::move(PointLight_ToonLightColor);
	Parms.EyeLightSimulation_TongKong = std::move(EyeLightSimulation_TongKong);
	Parms.EyeLightSimulation_YanBai = std::move(EyeLightSimulation_YanBai);
	Parms.EyeLightSimulation_Color = std::move(EyeLightSimulation_Color);
	Parms.E_LinkPos = E_LinkPos;
	Parms.Channel0 = Channel0;
	Parms.Channel1 = Channel1;
	Parms.Channel2 = Channel2;
	Parms.LightYaw = LightYaw;
	Parms.FaceLightYaw = FaceLightYaw;
	Parms.RoleId = RoleId;

	UObject::ProcessEvent(Func, &Parms);

	if (returnHandle != nullptr)
		*returnHandle = Parms.returnHandle;
}


// Function BP_SplitScreen_New.BP_SplitScreen_New_C.Reset
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplitScreen_New_C::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_New_C", "Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplitScreen_New.BP_SplitScreen_New_C.SetPosByViewSize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplitScreen_New_C::SetPosByViewSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_New_C", "SetPosByViewSize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplitScreen_New.BP_SplitScreen_New_C.EulerToForward
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Yaw                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_SplitScreen_New_C::EulerToForward(float Pitch, float Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_New_C", "EulerToForward");

	Params::BP_SplitScreen_New_C_EulerToForward Parms{};

	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SplitScreen_New.BP_SplitScreen_New_C.SetLightDirection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LightYaw                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FaceLightYaw                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplitScreen_New_C::SetLightDirection(class USkeletalMeshComponent* Mesh, float LightYaw, float FaceLightYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_New_C", "SetLightDirection");

	Params::BP_SplitScreen_New_C_SetLightDirection Parms{};

	Parms.Mesh = Mesh;
	Parms.LightYaw = LightYaw;
	Parms.FaceLightYaw = FaceLightYaw;

	UObject::ProcessEvent(Func, &Parms);
}

}

