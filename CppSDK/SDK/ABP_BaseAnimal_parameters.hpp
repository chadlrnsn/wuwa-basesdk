#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_BaseAnimal

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ECharState_structs.hpp"


namespace SDK::Params
{

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.ExecuteUbergraph_ABP_BaseAnimal
// 0x00E8 (0x00E8 - 0x0000)
struct ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_3; // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_3;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_4; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_4;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_5; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_5;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_6; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_6;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_8;                // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_7; // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_7;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_9;                // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_8;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_9;                  // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_8; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_10;               // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_8;            // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_10;                 // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_5;          // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_9; // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_9;            // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_6;          // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_10; // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_10;           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_7;          // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_8;          // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_9;          // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_11; // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_11;           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_11;               // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_12; // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_11;                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_12;           // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_12;                 // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B[0x1];                                       // 0x007B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_13; // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_13;           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_14; // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_14;           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_15; // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_15;           // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_12;               // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_13;                 // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_16; // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_16;           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_10;         // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_11;         // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_12;         // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_13;         // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_13;               // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_14;                 // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_15;                 // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_17; // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_17;           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character;            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_GameplayTag;                          // 0x00DC(0x000C)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal");
static_assert(sizeof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal) == 0x0000E8, "Wrong size on ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, EntryPoint) == 0x000000, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000004, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000005, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000006, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000007, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000008, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x00000C, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue) == 0x000010, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x000011, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue) == 0x000012, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_1) == 0x000013, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000014, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1) == 0x000018, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001D, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_2) == 0x00001E, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_2) == 0x00001F, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x000020, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_3) == 0x000021, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_3) == 0x000022, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2) == 0x000024, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000028, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_4) == 0x000029, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_4) == 0x00002A, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_5) == 0x00002B, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_3) == 0x00002C, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_3) == 0x000030, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_6) == 0x000031, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_5) == 0x000032, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_4) == 0x000034, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_4) == 0x000038, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_5) == 0x00003C, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_6) == 0x000040, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_5) == 0x000041, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_6) == 0x000044, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_7) == 0x000048, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_6) == 0x000049, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_7) == 0x00004A, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_8) == 0x00004B, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_7) == 0x00004C, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_7) == 0x000050, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_9) == 0x000051, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_8) == 0x000052, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_9) == 0x000053, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_8) == 0x000054, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_10) == 0x000058, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_8) == 0x000059, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_10) == 0x00005A, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_5) == 0x00005B, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_9) == 0x00005C, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_9) == 0x000060, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_6) == 0x000061, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_10) == 0x000064, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_10) == 0x000068, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_7) == 0x000069, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_8) == 0x00006A, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_9) == 0x00006B, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_11) == 0x00006C, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_11) == 0x000070, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_11) == 0x000071, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_12) == 0x000074, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_11) == 0x000078, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_12) == 0x000079, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_12) == 0x00007A, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_13) == 0x00007C, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_13) == 0x000080, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_14) == 0x000084, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_14) == 0x000088, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_15) == 0x00008C, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_15) == 0x000090, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_12) == 0x000091, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_13) == 0x000092, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanAND_ReturnValue) == 0x000093, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_16) == 0x000094, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_16) == 0x000098, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_10) == 0x000099, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_11) == 0x00009A, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_12) == 0x00009B, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_EqualEqual_IntInt_ReturnValue_13) == 0x00009C, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_EqualEqual_IntInt_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Not_PreBool_ReturnValue_13) == 0x00009D, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Not_PreBool_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_14) == 0x00009E, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x00009F, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_BooleanOR_ReturnValue_15) == 0x0000A0, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_BooleanOR_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_17) == 0x0000A4, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_Less_FloatFloat_ReturnValue_17) == 0x0000A8, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_Less_FloatFloat_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_TryGetPawnOwner_ReturnValue) == 0x0000B0, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, K2Node_Event_DeltaTimeX) == 0x0000B8, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_IsValid_ReturnValue) == 0x0000BC, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, K2Node_DynamicCast_AsTs_Base_Character) == 0x0000C0, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::K2Node_DynamicCast_AsTs_Base_Character' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x0000D0, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, CallFunc_IsValid_ReturnValue_1) == 0x0000D8, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, K2Node_SwitchEnum_CmpSuccess) == 0x0000D9, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal, K2Node_Event_GameplayTag) == 0x0000DC, "Member 'ABP_BaseAnimal_C_ExecuteUbergraph_ABP_BaseAnimal::K2Node_Event_GameplayTag' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.FeedStart
// 0x000C (0x000C - 0x0000)
struct ABP_BaseAnimal_C_FeedStart final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_BaseAnimal_C_FeedStart) == 0x000004, "Wrong alignment on ABP_BaseAnimal_C_FeedStart");
static_assert(sizeof(ABP_BaseAnimal_C_FeedStart) == 0x00000C, "Wrong size on ABP_BaseAnimal_C_FeedStart");
static_assert(offsetof(ABP_BaseAnimal_C_FeedStart, GameplayTag) == 0x000000, "Member 'ABP_BaseAnimal_C_FeedStart::GameplayTag' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_BaseAnimal_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_BaseAnimal_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_BaseAnimal_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_BaseAnimal_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_BaseAnimal_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_BaseAnimal_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_BaseAnimal_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.更新待机表演
// 0x0018 (0x0018 - 0x0000)
struct ABP_BaseAnimal_C_更新待机表演 final
{
public:
	class UAnimSequence*                          CallFunc_Array_Get_Item;                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_BaseAnimal_C_更新待机表演) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_更新待机表演");
static_assert(sizeof(ABP_BaseAnimal_C_更新待机表演) == 0x000018, "Wrong size on ABP_BaseAnimal_C_更新待机表演");
static_assert(offsetof(ABP_BaseAnimal_C_更新待机表演, CallFunc_Array_Get_Item) == 0x000000, "Member 'ABP_BaseAnimal_C_更新待机表演::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新待机表演, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ABP_BaseAnimal_C_更新待机表演::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新待机表演, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'ABP_BaseAnimal_C_更新待机表演::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新待机表演, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'ABP_BaseAnimal_C_更新待机表演::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新待机表演, CallFunc_RandomInteger_ReturnValue) == 0x000014, "Member 'ABP_BaseAnimal_C_更新待机表演::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.更新交互表演
// 0x0018 (0x0018 - 0x0000)
struct ABP_BaseAnimal_C_更新交互表演 final
{
public:
	class UAnimSequence*                          CallFunc_Array_Get_Item;                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_BaseAnimal_C_更新交互表演) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_更新交互表演");
static_assert(sizeof(ABP_BaseAnimal_C_更新交互表演) == 0x000018, "Wrong size on ABP_BaseAnimal_C_更新交互表演");
static_assert(offsetof(ABP_BaseAnimal_C_更新交互表演, CallFunc_Array_Get_Item) == 0x000000, "Member 'ABP_BaseAnimal_C_更新交互表演::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新交互表演, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ABP_BaseAnimal_C_更新交互表演::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新交互表演, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'ABP_BaseAnimal_C_更新交互表演::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新交互表演, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'ABP_BaseAnimal_C_更新交互表演::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新交互表演, CallFunc_RandomInteger_ReturnValue) == 0x000014, "Member 'ABP_BaseAnimal_C_更新交互表演::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.更新特殊交互表演
// 0x0078 (0x0078 - 0x0000)
struct ABP_BaseAnimal_C_更新特殊交互表演 final
{
public:
	struct FGameplayTag                           ___struct_Variable;                                // 0x0000(0x000C)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ___struct_Variable_1;                              // 0x000C(0x000C)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ___struct_Variable_2;                              // 0x0018(0x000C)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ContainsTag_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Map_Find_Value;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Map_Find_Value_1;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ContainsTag_ReturnValue_1;                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ___struct_Variable_3;                              // 0x0044(0x000C)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ContainsTag_ReturnValue_2;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Map_Find_Value_2;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Map_Find_Value_3;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ContainsTag_ReturnValue_3;                // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_BaseAnimal_C_更新特殊交互表演) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_更新特殊交互表演");
static_assert(sizeof(ABP_BaseAnimal_C_更新特殊交互表演) == 0x000078, "Wrong size on ABP_BaseAnimal_C_更新特殊交互表演");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, ___struct_Variable) == 0x000000, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::___struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, ___struct_Variable_1) == 0x00000C, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::___struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, ___struct_Variable_2) == 0x000018, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::___struct_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_ContainsTag_ReturnValue) == 0x000024, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_ContainsTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_Map_Find_Value) == 0x000028, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_Map_Find_ReturnValue) == 0x000030, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_Map_Find_Value_1) == 0x000038, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_Map_Find_ReturnValue_1) == 0x000040, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_ContainsTag_ReturnValue_1) == 0x000041, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_ContainsTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_IsValid_ReturnValue_1) == 0x000042, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, ___struct_Variable_3) == 0x000044, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::___struct_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_ContainsTag_ReturnValue_2) == 0x000050, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_ContainsTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_Map_Find_Value_2) == 0x000058, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_Map_Find_ReturnValue_2) == 0x000060, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_IsValid_ReturnValue_2) == 0x000061, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_Map_Find_Value_3) == 0x000068, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_Map_Find_ReturnValue_3) == 0x000070, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_IsValid_ReturnValue_3) == 0x000071, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新特殊交互表演, CallFunc_ContainsTag_ReturnValue_3) == 0x000072, "Member 'ABP_BaseAnimal_C_更新特殊交互表演::CallFunc_ContainsTag_ReturnValue_3' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.OnInteractStart
// 0x0001 (0x0001 - 0x0000)
struct ABP_BaseAnimal_C_OnInteractStart final
{
public:
	bool                                          CallFunc_ContainsTag_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_BaseAnimal_C_OnInteractStart) == 0x000001, "Wrong alignment on ABP_BaseAnimal_C_OnInteractStart");
static_assert(sizeof(ABP_BaseAnimal_C_OnInteractStart) == 0x000001, "Wrong size on ABP_BaseAnimal_C_OnInteractStart");
static_assert(offsetof(ABP_BaseAnimal_C_OnInteractStart, CallFunc_ContainsTag_ReturnValue) == 0x000000, "Member 'ABP_BaseAnimal_C_OnInteractStart::CallFunc_ContainsTag_ReturnValue' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.更新视线
// 0x000C (0x000C - 0x0000)
struct ABP_BaseAnimal_C_更新视线 final
{
public:
	struct FVector                                CallFunc_GetSightDirect_ReturnValue;               // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_BaseAnimal_C_更新视线) == 0x000004, "Wrong alignment on ABP_BaseAnimal_C_更新视线");
static_assert(sizeof(ABP_BaseAnimal_C_更新视线) == 0x00000C, "Wrong size on ABP_BaseAnimal_C_更新视线");
static_assert(offsetof(ABP_BaseAnimal_C_更新视线, CallFunc_GetSightDirect_ReturnValue) == 0x000000, "Member 'ABP_BaseAnimal_C_更新视线::CallFunc_GetSightDirect_ReturnValue' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.OnAlertStart
// 0x0020 (0x0020 - 0x0000)
struct ABP_BaseAnimal_C_OnAlertStart final
{
public:
	struct FGameplayTag                           ___struct_Variable;                                // 0x0000(0x000C)(ConstParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_BaseAnimal_C_OnAlertStart) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_OnAlertStart");
static_assert(sizeof(ABP_BaseAnimal_C_OnAlertStart) == 0x000020, "Wrong size on ABP_BaseAnimal_C_OnAlertStart");
static_assert(offsetof(ABP_BaseAnimal_C_OnAlertStart, ___struct_Variable) == 0x000000, "Member 'ABP_BaseAnimal_C_OnAlertStart::___struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnAlertStart, CallFunc_Map_Find_Value) == 0x000010, "Member 'ABP_BaseAnimal_C_OnAlertStart::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnAlertStart, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'ABP_BaseAnimal_C_OnAlertStart::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnAlertStart, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'ABP_BaseAnimal_C_OnAlertStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.OnTakeOffStart
// 0x0020 (0x0020 - 0x0000)
struct ABP_BaseAnimal_C_OnTakeOffStart final
{
public:
	struct FGameplayTag                           ___struct_Variable;                                // 0x0000(0x000C)(ConstParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ContainsTag_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_BaseAnimal_C_OnTakeOffStart) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_OnTakeOffStart");
static_assert(sizeof(ABP_BaseAnimal_C_OnTakeOffStart) == 0x000020, "Wrong size on ABP_BaseAnimal_C_OnTakeOffStart");
static_assert(offsetof(ABP_BaseAnimal_C_OnTakeOffStart, ___struct_Variable) == 0x000000, "Member 'ABP_BaseAnimal_C_OnTakeOffStart::___struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnTakeOffStart, CallFunc_Map_Find_Value) == 0x000010, "Member 'ABP_BaseAnimal_C_OnTakeOffStart::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnTakeOffStart, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'ABP_BaseAnimal_C_OnTakeOffStart::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnTakeOffStart, CallFunc_ContainsTag_ReturnValue) == 0x000019, "Member 'ABP_BaseAnimal_C_OnTakeOffStart::CallFunc_ContainsTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnTakeOffStart, CallFunc_IsValid_ReturnValue) == 0x00001A, "Member 'ABP_BaseAnimal_C_OnTakeOffStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.OnUnderAttackStart
// 0x0020 (0x0020 - 0x0000)
struct ABP_BaseAnimal_C_OnUnderAttackStart final
{
public:
	struct FGameplayTag                           ___struct_Variable;                                // 0x0000(0x000C)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ContainsTag_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_BaseAnimal_C_OnUnderAttackStart) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_OnUnderAttackStart");
static_assert(sizeof(ABP_BaseAnimal_C_OnUnderAttackStart) == 0x000020, "Wrong size on ABP_BaseAnimal_C_OnUnderAttackStart");
static_assert(offsetof(ABP_BaseAnimal_C_OnUnderAttackStart, ___struct_Variable) == 0x000000, "Member 'ABP_BaseAnimal_C_OnUnderAttackStart::___struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnUnderAttackStart, CallFunc_ContainsTag_ReturnValue) == 0x00000C, "Member 'ABP_BaseAnimal_C_OnUnderAttackStart::CallFunc_ContainsTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnUnderAttackStart, CallFunc_Map_Find_Value) == 0x000010, "Member 'ABP_BaseAnimal_C_OnUnderAttackStart::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnUnderAttackStart, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'ABP_BaseAnimal_C_OnUnderAttackStart::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnUnderAttackStart, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'ABP_BaseAnimal_C_OnUnderAttackStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.更新移动信息
// 0x00E8 (0x00E8 - 0x0000)
struct ABP_BaseAnimal_C_更新移动信息 final
{
public:
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_GetInputDirect_ReturnValue;               // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_VectorDoubleToVector_ReturnValue;    // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetInputRotator_ReturnValue;              // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_2;           // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_GetInputDirect_ReturnValue_1;             // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharState                                    CallFunc_GetCharUnifiedMoveState_ReturnValue;      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_D_VSizeSquared_ReturnValue;               // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_D_Greater_FloatFloat_ReturnValue;         // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_BaseAnimal_C_更新移动信息) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_更新移动信息");
static_assert(sizeof(ABP_BaseAnimal_C_更新移动信息) == 0x0000E8, "Wrong size on ABP_BaseAnimal_C_更新移动信息");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000000, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_GetForwardVector_ReturnValue) == 0x00000C, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_GetInputDirect_ReturnValue) == 0x000018, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_GetInputDirect_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_Conv_VectorDoubleToVector_ReturnValue) == 0x000030, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_Conv_VectorDoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_Cross_VectorVector_ReturnValue) == 0x00003C, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_Dot_VectorVector_ReturnValue) == 0x000048, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_BreakVector_X) == 0x00004C, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_BreakVector_Y) == 0x000050, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_BreakVector_Z) == 0x000054, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_DegAcos_ReturnValue) == 0x000058, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00005C, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000060, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x000064, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_GetForwardVector_ReturnValue_1) == 0x000070, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_GetInputRotator_ReturnValue) == 0x00007C, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_GetInputRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_GetForwardVector_ReturnValue_2) == 0x000088, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_GetForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x000094, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x0000A0, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_BreakVector_X_1) == 0x0000A4, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_BreakVector_Y_1) == 0x0000A8, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_BreakVector_Z_1) == 0x0000AC, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0000B0, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x0000B1, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_GetInputDirect_ReturnValue_1) == 0x0000B8, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_GetInputDirect_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_GetCharUnifiedMoveState_ReturnValue) == 0x0000D0, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_GetCharUnifiedMoveState_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_D_VSizeSquared_ReturnValue) == 0x0000D8, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_D_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, K2Node_SwitchEnum_CmpSuccess) == 0x0000E0, "Member 'ABP_BaseAnimal_C_更新移动信息::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_更新移动信息, CallFunc_D_Greater_FloatFloat_ReturnValue) == 0x0000E1, "Member 'ABP_BaseAnimal_C_更新移动信息::CallFunc_D_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.OnFeedStart
// 0x0020 (0x0020 - 0x0000)
struct ABP_BaseAnimal_C_OnFeedStart final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_BaseAnimal_C_OnFeedStart) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_OnFeedStart");
static_assert(sizeof(ABP_BaseAnimal_C_OnFeedStart) == 0x000020, "Wrong size on ABP_BaseAnimal_C_OnFeedStart");
static_assert(offsetof(ABP_BaseAnimal_C_OnFeedStart, GameplayTag) == 0x000000, "Member 'ABP_BaseAnimal_C_OnFeedStart::GameplayTag' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnFeedStart, CallFunc_Map_Find_Value) == 0x000010, "Member 'ABP_BaseAnimal_C_OnFeedStart::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnFeedStart, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'ABP_BaseAnimal_C_OnFeedStart::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_OnFeedStart, CallFunc_Montage_Play_ReturnValue) == 0x00001C, "Member 'ABP_BaseAnimal_C_OnFeedStart::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_BaseAnimal_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_BaseAnimal_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_AnimGraph");
static_assert(sizeof(ABP_BaseAnimal_C_AnimGraph) == 0x000010, "Wrong size on ABP_BaseAnimal_C_AnimGraph");
static_assert(offsetof(ABP_BaseAnimal_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_BaseAnimal_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.基础层
// 0x0010 (0x0010 - 0x0000)
struct ABP_BaseAnimal_C_基础层 final
{
public:
	struct FPoseLink                              基础层_0;                                          // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_BaseAnimal_C_基础层) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_基础层");
static_assert(sizeof(ABP_BaseAnimal_C_基础层) == 0x000010, "Wrong size on ABP_BaseAnimal_C_基础层");
static_assert(offsetof(ABP_BaseAnimal_C_基础层, 基础层_0) == 0x000000, "Member 'ABP_BaseAnimal_C_基础层::基础层_0' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.后处理层
// 0x0020 (0x0020 - 0x0000)
struct ABP_BaseAnimal_C_后处理层 final
{
public:
	struct FPoseLink                              基础输入;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              后处理层_0;                                        // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_BaseAnimal_C_后处理层) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_后处理层");
static_assert(sizeof(ABP_BaseAnimal_C_后处理层) == 0x000020, "Wrong size on ABP_BaseAnimal_C_后处理层");
static_assert(offsetof(ABP_BaseAnimal_C_后处理层, 基础输入) == 0x000000, "Member 'ABP_BaseAnimal_C_后处理层::基础输入' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_后处理层, 后处理层_0) == 0x000010, "Member 'ABP_BaseAnimal_C_后处理层::后处理层_0' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.演出层
// 0x0020 (0x0020 - 0x0000)
struct ABP_BaseAnimal_C_演出层 final
{
public:
	struct FPoseLink                              状态机输入;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              演出层_0;                                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_BaseAnimal_C_演出层) == 0x000008, "Wrong alignment on ABP_BaseAnimal_C_演出层");
static_assert(sizeof(ABP_BaseAnimal_C_演出层) == 0x000020, "Wrong size on ABP_BaseAnimal_C_演出层");
static_assert(offsetof(ABP_BaseAnimal_C_演出层, 状态机输入) == 0x000000, "Member 'ABP_BaseAnimal_C_演出层::状态机输入' has a wrong offset!");
static_assert(offsetof(ABP_BaseAnimal_C_演出层, 演出层_0) == 0x000010, "Member 'ABP_BaseAnimal_C_演出层::演出层_0' has a wrong offset!");

// Function ABP_BaseAnimal.ABP_BaseAnimal_C.GetCurrentActionTime
// 0x0004 (0x0004 - 0x0000)
struct ABP_BaseAnimal_C_GetCurrentActionTime final
{
public:
	float                                         ActionTime_0;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_BaseAnimal_C_GetCurrentActionTime) == 0x000004, "Wrong alignment on ABP_BaseAnimal_C_GetCurrentActionTime");
static_assert(sizeof(ABP_BaseAnimal_C_GetCurrentActionTime) == 0x000004, "Wrong size on ABP_BaseAnimal_C_GetCurrentActionTime");
static_assert(offsetof(ABP_BaseAnimal_C_GetCurrentActionTime, ActionTime_0) == 0x000000, "Member 'ABP_BaseAnimal_C_GetCurrentActionTime::ActionTime_0' has a wrong offset!");

}

