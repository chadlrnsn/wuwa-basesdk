#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ABPLogicParams

#include "Basic.hpp"

#include "EHitAnim_structs.hpp"
#include "SClimbState_structs.hpp"
#include "ECharParentMoveState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SClimbInfo_structs.hpp"
#include "ECharState_structs.hpp"
#include "ECharViewDirectionState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ABPLogicParams.BP_ABPLogicParams_C
// 0x00C0 (0x00F0 - 0x0030)
class UBP_ABPLogicParams_C final : public UObject
{
public:
	bool                                          AcceptedNewBeHitRef;                               // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EHitAnim                                      BeHitAnimRef;                                      // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnterFkRef;                                        // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DoubleHitInAirRef;                                 // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                BeHitDirectRef;                                    // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BeHitLocationRef;                                  // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharState                                    CharMoveStateRef;                                  // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharParentMoveState                          CharPositionStateRef;                              // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharViewDirectionState                       CharCameraStateRef;                                // 0x004E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BattleIdleTimeRef;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DegMovementSlopeRef;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SightDirectRef;                                    // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RagQuitStateRef;                                   // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsJumpRef;                                         // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AccelerationRef;                                   // 0x0068(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMovingRef;                                       // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedRef;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputDirectRef;                                    // 0x007C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFallingIntoWaterRef;                             // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GroundedTimeRef;                                   // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMoveInputRef;                                   // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSClimbInfo                            ClimbInfoRef;                                      // 0x0094(0x001C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSClimbState                           ClimbStateRef;                                     // 0x00B0(0x0003)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3[0x1];                                       // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClimbRadiusRef;                                    // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InputRotatorRef;                                   // 0x00B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ClimbOnWallAngleRef;                               // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprintSwimOffsetRef;                               // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprintSwimOffsetLerpSpeedRef;                      // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SlideForwardRef;                                   // 0x00D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SlideSwitchThisFrameRef;                           // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SlideStandModeRef;                                 // 0x00DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpUpRateRef;                                     // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LookAtRef;                                         // 0x00E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableBlendSpaceLookAtRef;                         // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOnVehicle;                                       // 0x00ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ABPLogicParams_C">();
	}
	static class UBP_ABPLogicParams_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ABPLogicParams_C>();
	}
};
static_assert(alignof(UBP_ABPLogicParams_C) == 0x000008, "Wrong alignment on UBP_ABPLogicParams_C");
static_assert(sizeof(UBP_ABPLogicParams_C) == 0x0000F0, "Wrong size on UBP_ABPLogicParams_C");
static_assert(offsetof(UBP_ABPLogicParams_C, AcceptedNewBeHitRef) == 0x000030, "Member 'UBP_ABPLogicParams_C::AcceptedNewBeHitRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, BeHitAnimRef) == 0x000031, "Member 'UBP_ABPLogicParams_C::BeHitAnimRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, EnterFkRef) == 0x000032, "Member 'UBP_ABPLogicParams_C::EnterFkRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, DoubleHitInAirRef) == 0x000033, "Member 'UBP_ABPLogicParams_C::DoubleHitInAirRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, BeHitDirectRef) == 0x000034, "Member 'UBP_ABPLogicParams_C::BeHitDirectRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, BeHitLocationRef) == 0x000040, "Member 'UBP_ABPLogicParams_C::BeHitLocationRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, CharMoveStateRef) == 0x00004C, "Member 'UBP_ABPLogicParams_C::CharMoveStateRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, CharPositionStateRef) == 0x00004D, "Member 'UBP_ABPLogicParams_C::CharPositionStateRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, CharCameraStateRef) == 0x00004E, "Member 'UBP_ABPLogicParams_C::CharCameraStateRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, BattleIdleTimeRef) == 0x000050, "Member 'UBP_ABPLogicParams_C::BattleIdleTimeRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, DegMovementSlopeRef) == 0x000054, "Member 'UBP_ABPLogicParams_C::DegMovementSlopeRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, SightDirectRef) == 0x000058, "Member 'UBP_ABPLogicParams_C::SightDirectRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, RagQuitStateRef) == 0x000064, "Member 'UBP_ABPLogicParams_C::RagQuitStateRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, IsJumpRef) == 0x000065, "Member 'UBP_ABPLogicParams_C::IsJumpRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, AccelerationRef) == 0x000068, "Member 'UBP_ABPLogicParams_C::AccelerationRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, IsMovingRef) == 0x000074, "Member 'UBP_ABPLogicParams_C::IsMovingRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, SpeedRef) == 0x000078, "Member 'UBP_ABPLogicParams_C::SpeedRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, InputDirectRef) == 0x00007C, "Member 'UBP_ABPLogicParams_C::InputDirectRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, IsFallingIntoWaterRef) == 0x000088, "Member 'UBP_ABPLogicParams_C::IsFallingIntoWaterRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, GroundedTimeRef) == 0x00008C, "Member 'UBP_ABPLogicParams_C::GroundedTimeRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, HasMoveInputRef) == 0x000090, "Member 'UBP_ABPLogicParams_C::HasMoveInputRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, ClimbInfoRef) == 0x000094, "Member 'UBP_ABPLogicParams_C::ClimbInfoRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, ClimbStateRef) == 0x0000B0, "Member 'UBP_ABPLogicParams_C::ClimbStateRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, ClimbRadiusRef) == 0x0000B4, "Member 'UBP_ABPLogicParams_C::ClimbRadiusRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, InputRotatorRef) == 0x0000B8, "Member 'UBP_ABPLogicParams_C::InputRotatorRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, ClimbOnWallAngleRef) == 0x0000C4, "Member 'UBP_ABPLogicParams_C::ClimbOnWallAngleRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, SprintSwimOffsetRef) == 0x0000C8, "Member 'UBP_ABPLogicParams_C::SprintSwimOffsetRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, SprintSwimOffsetLerpSpeedRef) == 0x0000CC, "Member 'UBP_ABPLogicParams_C::SprintSwimOffsetLerpSpeedRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, SlideForwardRef) == 0x0000D0, "Member 'UBP_ABPLogicParams_C::SlideForwardRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, SlideSwitchThisFrameRef) == 0x0000DC, "Member 'UBP_ABPLogicParams_C::SlideSwitchThisFrameRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, SlideStandModeRef) == 0x0000DD, "Member 'UBP_ABPLogicParams_C::SlideStandModeRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, JumpUpRateRef) == 0x0000E0, "Member 'UBP_ABPLogicParams_C::JumpUpRateRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, LookAtRef) == 0x0000E4, "Member 'UBP_ABPLogicParams_C::LookAtRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, EnableBlendSpaceLookAtRef) == 0x0000EC, "Member 'UBP_ABPLogicParams_C::EnableBlendSpaceLookAtRef' has a wrong offset!");
static_assert(offsetof(UBP_ABPLogicParams_C, IsOnVehicle) == 0x0000ED, "Member 'UBP_ABPLogicParams_C::IsOnVehicle' has a wrong offset!");

}

