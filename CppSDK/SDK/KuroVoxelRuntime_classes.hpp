#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroVoxelRuntime

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "KuroWorldPartition_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class KuroVoxelRuntime.KuroVoxelGlobalActor
// 0x0008 (0x02B8 - 0x02B0)
class AKuroVoxelGlobalActor final : public AActor
{
public:
	class UKuroVoxelGlobalComponent*              KuroVoxelGlobalComp;                               // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroVoxelGlobalActor">();
	}
	static class AKuroVoxelGlobalActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKuroVoxelGlobalActor>();
	}
};
static_assert(alignof(AKuroVoxelGlobalActor) == 0x000008, "Wrong alignment on AKuroVoxelGlobalActor");
static_assert(sizeof(AKuroVoxelGlobalActor) == 0x0002B8, "Wrong size on AKuroVoxelGlobalActor");
static_assert(offsetof(AKuroVoxelGlobalActor, KuroVoxelGlobalComp) == 0x0002B0, "Member 'AKuroVoxelGlobalActor::KuroVoxelGlobalComp' has a wrong offset!");

// Class KuroVoxelRuntime.KuroVoxelGlobalComponent
// 0x0070 (0x0290 - 0x0220)
class UKuroVoxelGlobalComponent final : public USceneComponent
{
public:
	uint8                                         Pad_218[0x74];                                     // 0x0218(0x0074)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Version;                                           // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroVoxelGlobalComponent">();
	}
	static class UKuroVoxelGlobalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroVoxelGlobalComponent>();
	}
};
static_assert(alignof(UKuroVoxelGlobalComponent) == 0x000010, "Wrong alignment on UKuroVoxelGlobalComponent");
static_assert(sizeof(UKuroVoxelGlobalComponent) == 0x000290, "Wrong size on UKuroVoxelGlobalComponent");
static_assert(offsetof(UKuroVoxelGlobalComponent, Version) == 0x00028C, "Member 'UKuroVoxelGlobalComponent::Version' has a wrong offset!");

// Class KuroVoxelRuntime.KuroVoxelPartitionActor
// 0x0010 (0x02C8 - 0x02B8)
class AKuroVoxelPartitionActor final : public AKuroWorldPartitionActor
{
public:
	class UKuroVoxelPartitionComponent*           KuroVoxelPartitionComp;                            // 0x02B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanAddToMgrWhenChunkIDCollision;                   // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroVoxelPartitionActor">();
	}
	static class AKuroVoxelPartitionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKuroVoxelPartitionActor>();
	}
};
static_assert(alignof(AKuroVoxelPartitionActor) == 0x000008, "Wrong alignment on AKuroVoxelPartitionActor");
static_assert(sizeof(AKuroVoxelPartitionActor) == 0x0002C8, "Wrong size on AKuroVoxelPartitionActor");
static_assert(offsetof(AKuroVoxelPartitionActor, KuroVoxelPartitionComp) == 0x0002B8, "Member 'AKuroVoxelPartitionActor::KuroVoxelPartitionComp' has a wrong offset!");
static_assert(offsetof(AKuroVoxelPartitionActor, CanAddToMgrWhenChunkIDCollision) == 0x0002C0, "Member 'AKuroVoxelPartitionActor::CanAddToMgrWhenChunkIDCollision' has a wrong offset!");

// Class KuroVoxelRuntime.KuroVoxelPartitionComponent
// 0x0018 (0x00D8 - 0x00C0)
class UKuroVoxelPartitionComponent final : public UActorComponent
{
public:
	uint8                                         Pad_C0[0x10];                                      // 0x00C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Version;                                           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroVoxelPartitionComponent">();
	}
	static class UKuroVoxelPartitionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroVoxelPartitionComponent>();
	}
};
static_assert(alignof(UKuroVoxelPartitionComponent) == 0x000008, "Wrong alignment on UKuroVoxelPartitionComponent");
static_assert(sizeof(UKuroVoxelPartitionComponent) == 0x0000D8, "Wrong size on UKuroVoxelPartitionComponent");
static_assert(offsetof(UKuroVoxelPartitionComponent, Priority) == 0x0000D0, "Member 'UKuroVoxelPartitionComponent::Priority' has a wrong offset!");
static_assert(offsetof(UKuroVoxelPartitionComponent, Version) == 0x0000D4, "Member 'UKuroVoxelPartitionComponent::Version' has a wrong offset!");

// Class KuroVoxelRuntime.KuroVoxelSystem
// 0x00F8 (0x0130 - 0x0038)
class UKuroVoxelSystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FIntPoint, class AKuroVoxelPartitionActor*> LoadedPartitionActorsMap;                          // 0x0040(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TSet<class AKuroVoxelPartitionActor*>         ToAddActorSet;                                     // 0x0090(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x50];                                      // 0x00E0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static uint8 D_GetMaterialIDAtPos(class UWorld* World, const struct FVectorDouble& UEPos);
	static struct FKuroVoxelInfo D_GetVoxelInfoAtPos(class UWorld* World, const struct FVectorDouble& UEPos, int32* ErrorCode, double SearchStep);
	static bool D_IsCavernAtPos(class UWorld* World, const struct FVectorDouble& UEPos);
	static bool D_TryGetVoxelInfoAtPos(class UWorld* World, const struct FVectorDouble& UEPos, struct FKuroVoxelInfo* OutVoxelInfo, int32* ErrorCode, double SearchStep);
	static uint8 GetMaterialIDAtPos(class UWorld* World, const struct FVector& UEPos);
	static class FString GetMtlNameByID(uint8 MtlID);
	static struct FKuroVoxelInfo GetVoxelInfoAtPos(class UWorld* World, const struct FVector& UEPos, int32* ErrorCode, float SearchStep);
	static bool IsCavernAtPos(class UWorld* World, const struct FVector& UEPos);
	static bool IsVoxelSystemInitialized(class UWorld* World);
	static bool TryGetVoxelInfoAtPos(class UWorld* World, const struct FVector& UEPos, struct FKuroVoxelInfo* OutVoxelInfo, int32* ErrorCode, float SearchStep);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroVoxelSystem">();
	}
	static class UKuroVoxelSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroVoxelSystem>();
	}
};
static_assert(alignof(UKuroVoxelSystem) == 0x000008, "Wrong alignment on UKuroVoxelSystem");
static_assert(sizeof(UKuroVoxelSystem) == 0x000130, "Wrong size on UKuroVoxelSystem");
static_assert(offsetof(UKuroVoxelSystem, LoadedPartitionActorsMap) == 0x000040, "Member 'UKuroVoxelSystem::LoadedPartitionActorsMap' has a wrong offset!");
static_assert(offsetof(UKuroVoxelSystem, ToAddActorSet) == 0x000090, "Member 'UKuroVoxelSystem::ToAddActorSet' has a wrong offset!");

}

