#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RippleSwim

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RippleSwim.BP_RippleSwim_C
// 0x02B8 (0x0568 - 0x02B0)
class ABP_RippleSwim_C final : public AUKuroCustomCookActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               AddNewMaterial;                                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               tempToPrevMaterial;                                // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DrawMaterial;                                      // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSim;                                              // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Plane;                                             // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevState;                                         // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         State;                                             // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RippleWater_Data_C*                 Current_Ripple_State;                              // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Step;                                              // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         captureSize;                                       // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               rippleMaterial;                                    // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 prevRT;                                            // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 currentRT;                                         // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 tempRTRef;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerLocation;                                    // 0x0320(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Offset;                                            // 0x032C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TestActor;                                         // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerSize;                                        // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           Global_MPC;                                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayerInWaterLast;                                // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RippleDistanceNormal;                              // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RippleDistanceFluo;                                // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PositionOffset;                                    // 0x035C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastRippleLocationNormal;                          // 0x0364(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RippleOffset;                                      // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastRippleLocationFluo;                            // 0x0374(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwimRippleOffset;                                  // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PlayerPosNormal;                                   // 0x0384(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PlayerPosFluo;                                     // 0x038C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastRipplePastTime;                                // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RippleWater_Data_C*                 Swim_Ripple;                                       // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RippleWater_Data_C*                 Gongduola_Ripple;                                  // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RippleWater_Data_C*                 Fly_Ripple;                                        // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RippleWater_Data_C*                 Drop_Ripple;                                       // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InFixedRippleArea;                                 // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 PersistRT;                                         // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 FinalRT;                                           // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCustomRippleState;                                // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SceneBattleInteract_C*              BulletConfig;                                      // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BulletUV;                                          // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LastBulletUV;                                      // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSetUV;                                            // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowDebugData;                                    // 0x03F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          开启翱翔水交互;                                    // 0x03F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F3[0x5];                                      // 0x03F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        翱翔射线长度;                                      // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrRippleOffset;                                  // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrRippleIntensity;                               // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RippleIntensity;                                   // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyMaxDistance;                                    // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyMinDistance;                                    // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RippleAttenuation;                                 // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          AvailblePoint;                                     // 0x0418(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          LastAvailblePoint;                                 // 0x0430(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletMinConnectDistance;                          // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletMaxConnectDistance;                          // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance;                                          // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletLastHitTime0;                                // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVectorDouble>                  BulletPointList0;                                  // 0x0460(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         BulletLastHitTime1;                                // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVectorDouble>                  BulletPointList1;                                  // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         BulletLastHitTime2;                                // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVectorDouble>                  BulletPointList2;                                  // 0x0490(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CatMullStep;                                       // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tension;                                           // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVectorDouble>                  AvailblePointList;                                 // 0x04B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTextureRenderTarget2D*                 PointRT;                                           // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               AddPointsMaterial;                                 // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               AddCapsuleMaterial;                                // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Fly_Ray_Debug_Type;                                // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CurrentRippleCenter;                               // 0x04DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseOldRipple;                                      // 0x04E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E5[0x3];                                      // 0x04E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NewCaptureSize;                                    // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               NewRipplePrevMaterial;                             // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Weapon_0_Debug_Color;                              // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Weapon_1_Debug_Color;                              // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Weapon_2_Debug_Color;                              // 0x0518(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RippleCenterOffset;                                // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RippleWater_Data_C*                 Fuludelisi_Ripple;                                 // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Tag_Container;                                     // 0x0538(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bEnableSwimRipple;                                 // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_559[0x3];                                      // 0x0559(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaterDepth;                                        // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallJumpDepthThreshold;                            // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_RippleSwim(int32 EntryPoint);
	void TestHitEvent(const struct FVectorDouble& ImpactPoint, class UBP_SceneBattleInteract_C* Config, const struct FVectorDouble& OriginPoint, int32 Id);
	void OnBulletHitPos(const struct FVectorDouble& ImpactPoint, class UBP_SceneBattleInteract_C* Config, const struct FVectorDouble& OriginPoint, int32 Id);
	void BulletHitPos(const struct FVectorDouble& ImpactPoint, class UBP_SceneBattleInteract_C* Config, const struct FVectorDouble& OriginPoint, int32 Id);
	void OnBulletHitWater(const struct FVectorDouble& ImpactPoint, class UBP_SceneBattleInteract_C* Config, const struct FVectorDouble& OriginPoint, int32 Id);
	void BeforeCookForMobile();
	void Refresh();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void AboveWater(const struct FVector& Location, bool* bAboveWater);
	void SetWaterRippleData(class UBP_RippleWater_Data_C* InputPin);
	void Clear_RT();
	void CalcTexCoord(const struct FVectorDouble& RippleCenter, const struct FVectorDouble& RipplePointLocation, float CaptureSize, struct FVector* TexCoord);
	void Change_Ripple_Preset(class UBP_RippleWater_Data_C* NewRippleState);
	void Choose_Available_Point(const struct FVectorDouble& CollisionPoint, const struct FVectorDouble& WeaponPoint, class UBP_SceneBattleInteract_C* ConfigDA, struct FVectorDouble* AvailblePoint_0);
	void CalcDistance2D(const struct FVectorDouble& V1, const struct FVectorDouble& V2, double* Distance_0);
	void CatmullRom(TArray<struct FVector2D>& PointList, int32 StepCount, bool* Vaild, TArray<struct FVector2D>* CurveList);
	void GetPoints(TArray<struct FVector2D>& PointList, bool* Vaild, struct FVector2D* P_0, struct FVector2D* P_1, struct FVector2D* P_2, struct FVector2D* P_3);
	void GetPointsV3(TArray<struct FVectorDouble>& PointList, bool* Vaild, struct FVector2D* P_0, struct FVector2D* P_1, struct FVector2D* P_2, struct FVector2D* P_3);
	void CalcTexCoord2D(const struct FVectorDouble& RippleCenter, const struct FVector2D& RipplePointLocation, float CaptureSize, struct FVector2D* TexCoord);
	void Calc_Catmull_Weapon_0(class UBP_SceneBattleInteract_C* BulletConfig_0, const struct FVectorDouble& AvailblePoint_0);
	void Compare_New_Point_Weapon_0(const struct FVectorDouble& V2, bool* Vaild);
	void Calc_Catmull_Weapon_1(class UBP_SceneBattleInteract_C* BulletConfig_0, const struct FVectorDouble& AvailblePoint_0);
	void Compare_New_Point_Weapon_1(const struct FVectorDouble& V2, bool* Vaild);
	void Calc_Catmull_Weapon_2(class UBP_SceneBattleInteract_C* BulletConfig_0, const struct FVectorDouble& AvailblePoint_0);
	void Compare_New_Point_Weapon_2(const struct FVectorDouble& V2, bool* Vaild);
	void Calc_Capsule_Weapon_2(class UBP_SceneBattleInteract_C* BulletConfig_0, const struct FVectorDouble& AvailblePoint_0);
	void Calc_Circle_Weapon_2(class UBP_SceneBattleInteract_C* BulletConfig_0, const struct FVectorDouble& AvailblePoint_0);
	void TexcoordToPosition(const struct FVectorDouble& RippleCenter, const struct FVector2D& RippleUV, float CaptureSize, struct FVector2D* Position);
	void SetOldRipple();
	void SetNewRipple();
	void Set_Bullet_Data(class UBP_SceneBattleInteract_C* Config);
	void SetCloseSwimRipple();
	void CheckAndSetPos(float DeltaSeconds, float* LastRippleTime);
	void Ripple_Simulation();
	void Ripple_Stamp();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RippleSwim_C">();
	}
	static class ABP_RippleSwim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RippleSwim_C>();
	}
};
static_assert(alignof(ABP_RippleSwim_C) == 0x000008, "Wrong alignment on ABP_RippleSwim_C");
static_assert(sizeof(ABP_RippleSwim_C) == 0x000568, "Wrong size on ABP_RippleSwim_C");
static_assert(offsetof(ABP_RippleSwim_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_RippleSwim_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_RippleSwim_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, AddNewMaterial) == 0x0002C0, "Member 'ABP_RippleSwim_C::AddNewMaterial' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, tempToPrevMaterial) == 0x0002C8, "Member 'ABP_RippleSwim_C::tempToPrevMaterial' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, DrawMaterial) == 0x0002D0, "Member 'ABP_RippleSwim_C::DrawMaterial' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bSim) == 0x0002D8, "Member 'ABP_RippleSwim_C::bSim' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Plane) == 0x0002E0, "Member 'ABP_RippleSwim_C::Plane' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PrevState) == 0x0002E8, "Member 'ABP_RippleSwim_C::PrevState' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, State) == 0x0002EC, "Member 'ABP_RippleSwim_C::State' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Current_Ripple_State) == 0x0002F0, "Member 'ABP_RippleSwim_C::Current_Ripple_State' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Step) == 0x0002F8, "Member 'ABP_RippleSwim_C::Step' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, captureSize) == 0x0002FC, "Member 'ABP_RippleSwim_C::captureSize' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, rippleMaterial) == 0x000300, "Member 'ABP_RippleSwim_C::rippleMaterial' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, prevRT) == 0x000308, "Member 'ABP_RippleSwim_C::prevRT' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, currentRT) == 0x000310, "Member 'ABP_RippleSwim_C::currentRT' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, tempRTRef) == 0x000318, "Member 'ABP_RippleSwim_C::tempRTRef' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PlayerLocation) == 0x000320, "Member 'ABP_RippleSwim_C::PlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Offset) == 0x00032C, "Member 'ABP_RippleSwim_C::Offset' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, TestActor) == 0x000338, "Member 'ABP_RippleSwim_C::TestActor' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PlayerSize) == 0x000340, "Member 'ABP_RippleSwim_C::PlayerSize' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Global_MPC) == 0x000348, "Member 'ABP_RippleSwim_C::Global_MPC' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bPlayerInWaterLast) == 0x000350, "Member 'ABP_RippleSwim_C::bPlayerInWaterLast' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, RippleDistanceNormal) == 0x000354, "Member 'ABP_RippleSwim_C::RippleDistanceNormal' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, RippleDistanceFluo) == 0x000358, "Member 'ABP_RippleSwim_C::RippleDistanceFluo' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PositionOffset) == 0x00035C, "Member 'ABP_RippleSwim_C::PositionOffset' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, LastRippleLocationNormal) == 0x000364, "Member 'ABP_RippleSwim_C::LastRippleLocationNormal' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, RippleOffset) == 0x000370, "Member 'ABP_RippleSwim_C::RippleOffset' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, LastRippleLocationFluo) == 0x000374, "Member 'ABP_RippleSwim_C::LastRippleLocationFluo' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, SwimRippleOffset) == 0x000380, "Member 'ABP_RippleSwim_C::SwimRippleOffset' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PlayerPosNormal) == 0x000384, "Member 'ABP_RippleSwim_C::PlayerPosNormal' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PlayerPosFluo) == 0x00038C, "Member 'ABP_RippleSwim_C::PlayerPosFluo' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, LastRipplePastTime) == 0x000394, "Member 'ABP_RippleSwim_C::LastRipplePastTime' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Swim_Ripple) == 0x000398, "Member 'ABP_RippleSwim_C::Swim_Ripple' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Gongduola_Ripple) == 0x0003A0, "Member 'ABP_RippleSwim_C::Gongduola_Ripple' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Fly_Ripple) == 0x0003A8, "Member 'ABP_RippleSwim_C::Fly_Ripple' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Drop_Ripple) == 0x0003B0, "Member 'ABP_RippleSwim_C::Drop_Ripple' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, InFixedRippleArea) == 0x0003B8, "Member 'ABP_RippleSwim_C::InFixedRippleArea' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PersistRT) == 0x0003C0, "Member 'ABP_RippleSwim_C::PersistRT' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, FinalRT) == 0x0003C8, "Member 'ABP_RippleSwim_C::FinalRT' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bCustomRippleState) == 0x0003D0, "Member 'ABP_RippleSwim_C::bCustomRippleState' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletConfig) == 0x0003D8, "Member 'ABP_RippleSwim_C::BulletConfig' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletUV) == 0x0003E0, "Member 'ABP_RippleSwim_C::BulletUV' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, LastBulletUV) == 0x0003E8, "Member 'ABP_RippleSwim_C::LastBulletUV' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bSetUV) == 0x0003F0, "Member 'ABP_RippleSwim_C::bSetUV' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bShowDebugData) == 0x0003F1, "Member 'ABP_RippleSwim_C::bShowDebugData' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, 开启翱翔水交互) == 0x0003F2, "Member 'ABP_RippleSwim_C::开启翱翔水交互' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, 翱翔射线长度) == 0x0003F8, "Member 'ABP_RippleSwim_C::翱翔射线长度' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, CurrRippleOffset) == 0x000400, "Member 'ABP_RippleSwim_C::CurrRippleOffset' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, CurrRippleIntensity) == 0x000404, "Member 'ABP_RippleSwim_C::CurrRippleIntensity' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, RippleIntensity) == 0x000408, "Member 'ABP_RippleSwim_C::RippleIntensity' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, FlyMaxDistance) == 0x00040C, "Member 'ABP_RippleSwim_C::FlyMaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, FlyMinDistance) == 0x000410, "Member 'ABP_RippleSwim_C::FlyMinDistance' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, RippleAttenuation) == 0x000414, "Member 'ABP_RippleSwim_C::RippleAttenuation' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, AvailblePoint) == 0x000418, "Member 'ABP_RippleSwim_C::AvailblePoint' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, LastAvailblePoint) == 0x000430, "Member 'ABP_RippleSwim_C::LastAvailblePoint' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletMinConnectDistance) == 0x000448, "Member 'ABP_RippleSwim_C::BulletMinConnectDistance' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletMaxConnectDistance) == 0x00044C, "Member 'ABP_RippleSwim_C::BulletMaxConnectDistance' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Distance) == 0x000450, "Member 'ABP_RippleSwim_C::Distance' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletLastHitTime0) == 0x000458, "Member 'ABP_RippleSwim_C::BulletLastHitTime0' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletPointList0) == 0x000460, "Member 'ABP_RippleSwim_C::BulletPointList0' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletLastHitTime1) == 0x000470, "Member 'ABP_RippleSwim_C::BulletLastHitTime1' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletPointList1) == 0x000478, "Member 'ABP_RippleSwim_C::BulletPointList1' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletLastHitTime2) == 0x000488, "Member 'ABP_RippleSwim_C::BulletLastHitTime2' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletPointList2) == 0x000490, "Member 'ABP_RippleSwim_C::BulletPointList2' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, CatMullStep) == 0x0004A0, "Member 'ABP_RippleSwim_C::CatMullStep' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Alpha) == 0x0004A4, "Member 'ABP_RippleSwim_C::Alpha' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Tension) == 0x0004A8, "Member 'ABP_RippleSwim_C::Tension' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, AvailblePointList) == 0x0004B0, "Member 'ABP_RippleSwim_C::AvailblePointList' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PointRT) == 0x0004C0, "Member 'ABP_RippleSwim_C::PointRT' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, AddPointsMaterial) == 0x0004C8, "Member 'ABP_RippleSwim_C::AddPointsMaterial' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, AddCapsuleMaterial) == 0x0004D0, "Member 'ABP_RippleSwim_C::AddCapsuleMaterial' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Fly_Ray_Debug_Type) == 0x0004D8, "Member 'ABP_RippleSwim_C::Fly_Ray_Debug_Type' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, CurrentRippleCenter) == 0x0004DC, "Member 'ABP_RippleSwim_C::CurrentRippleCenter' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, UseOldRipple) == 0x0004E4, "Member 'ABP_RippleSwim_C::UseOldRipple' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, NewCaptureSize) == 0x0004E8, "Member 'ABP_RippleSwim_C::NewCaptureSize' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, NewRipplePrevMaterial) == 0x0004F0, "Member 'ABP_RippleSwim_C::NewRipplePrevMaterial' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Weapon_0_Debug_Color) == 0x0004F8, "Member 'ABP_RippleSwim_C::Weapon_0_Debug_Color' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Weapon_1_Debug_Color) == 0x000508, "Member 'ABP_RippleSwim_C::Weapon_1_Debug_Color' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Weapon_2_Debug_Color) == 0x000518, "Member 'ABP_RippleSwim_C::Weapon_2_Debug_Color' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, RippleCenterOffset) == 0x000528, "Member 'ABP_RippleSwim_C::RippleCenterOffset' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Fuludelisi_Ripple) == 0x000530, "Member 'ABP_RippleSwim_C::Fuludelisi_Ripple' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Tag_Container) == 0x000538, "Member 'ABP_RippleSwim_C::Tag_Container' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bEnableSwimRipple) == 0x000558, "Member 'ABP_RippleSwim_C::bEnableSwimRipple' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, WaterDepth) == 0x00055C, "Member 'ABP_RippleSwim_C::WaterDepth' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, FallJumpDepthThreshold) == 0x000560, "Member 'ABP_RippleSwim_C::FallJumpDepthThreshold' has a wrong offset!");

}

