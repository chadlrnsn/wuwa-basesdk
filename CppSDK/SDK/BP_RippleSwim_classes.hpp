#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RippleSwim

#include "Basic.hpp"

#include "KuroRenderingRuntimeBPPlugin_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RippleSwim.BP_RippleSwim_C
// 0x0160 (0x0410 - 0x02B0)
class ABP_RippleSwim_C final : public AUKuroCustomCookActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               AddNewMaterial;                                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               tempToPrevMaterial;                                // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DrawMaterial;                                      // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSim;                                              // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOfflineCharacter;                                 // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DA[0x6];                                      // 0x02DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Plane;                                             // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RippleWater_Data_C*                 Current_Ripple_State;                              // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Step;                                              // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         captureSize;                                       // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               rippleMaterial;                                    // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 prevRT;                                            // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 currentRT;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 tempRTRef;                                         // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerLocation;                                    // 0x0318(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Offset;                                            // 0x0324(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TestActor;                                         // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerSize;                                        // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           Global_MPC;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayerInWaterLast;                                // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RippleDistanceNormal;                              // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RippleDistanceFluo;                                // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PassedTime;                                        // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PositionOffset;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastRippleLocationNormal;                          // 0x0360(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwimRippleOffset;                                  // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastRippleLocationFluo;                            // 0x0370(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PlayerPosNormal;                                   // 0x037C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PlayerPosFluo;                                     // 0x0384(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastRipplePastTime;                                // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInWater;                                          // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_RippleWater_Data_C*                 Swim_Ripple;                                       // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RippleWater_Data_C*                 Gongduola_Ripple;                                  // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RippleWater_Data_C*                 Fly_Ripple;                                        // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InFixedRippleArea;                                 // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 PersistRT;                                         // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 FinalRT;                                           // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCustomRippleState;                                // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SceneBattleInteract_C*              BulletConfig;                                      // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BulletUV;                                          // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BulletTimerHandle;                                 // 0x03E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bSetUV;                                            // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSelfRipple;                                       // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EA[0x2];                                      // 0x03EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BulletRadius;                                      // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletHitInterval;                                 // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletHitTimeLast;                                 // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrBulletIntensity;                               // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletIntensity;                                   // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletDensity;                                     // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletAttenuation_;                                // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowDebugData;                                    // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         State;                                             // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Change_Ripple_Preset(class UBP_RippleWater_Data_C* NewRippleState);
	void CalcTexCoord(const struct FVectorDouble& RippleCenter, const struct FVectorDouble& RipplePointLocation, float CaptureSize, struct FVector* TexCoord);
	void Clear_RT();
	void SetWaterRippleData(class UBP_RippleWater_Data_C* InputPin, bool* NewParam);
	void AboveWater(const struct FVector& Location, bool* bAboveWater);
	void UserConstructionScript();
	void BeforeCookForMobile();
	void OnBulletHitWater(const struct FVectorDouble& ImpactPoint, class UBP_SceneBattleInteract_C* Config, const struct FVectorDouble& OriginPoint, int32 Id);
	void EditorTick();
	void SetBulletUV();
	void Refresh();
	void ReceiveTick(float DeltaSeconds);
	void ResetBulletUV();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_RippleSwim(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RippleSwim_C">();
	}
	static class ABP_RippleSwim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RippleSwim_C>();
	}
};
static_assert(alignof(ABP_RippleSwim_C) == 0x000008, "Wrong alignment on ABP_RippleSwim_C");
static_assert(sizeof(ABP_RippleSwim_C) == 0x000410, "Wrong size on ABP_RippleSwim_C");
static_assert(offsetof(ABP_RippleSwim_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_RippleSwim_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_RippleSwim_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, AddNewMaterial) == 0x0002C0, "Member 'ABP_RippleSwim_C::AddNewMaterial' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, tempToPrevMaterial) == 0x0002C8, "Member 'ABP_RippleSwim_C::tempToPrevMaterial' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, DrawMaterial) == 0x0002D0, "Member 'ABP_RippleSwim_C::DrawMaterial' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bSim) == 0x0002D8, "Member 'ABP_RippleSwim_C::bSim' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bOfflineCharacter) == 0x0002D9, "Member 'ABP_RippleSwim_C::bOfflineCharacter' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Plane) == 0x0002E0, "Member 'ABP_RippleSwim_C::Plane' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Current_Ripple_State) == 0x0002E8, "Member 'ABP_RippleSwim_C::Current_Ripple_State' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Step) == 0x0002F0, "Member 'ABP_RippleSwim_C::Step' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, captureSize) == 0x0002F4, "Member 'ABP_RippleSwim_C::captureSize' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, rippleMaterial) == 0x0002F8, "Member 'ABP_RippleSwim_C::rippleMaterial' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, prevRT) == 0x000300, "Member 'ABP_RippleSwim_C::prevRT' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, currentRT) == 0x000308, "Member 'ABP_RippleSwim_C::currentRT' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, tempRTRef) == 0x000310, "Member 'ABP_RippleSwim_C::tempRTRef' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PlayerLocation) == 0x000318, "Member 'ABP_RippleSwim_C::PlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Offset) == 0x000324, "Member 'ABP_RippleSwim_C::Offset' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, TestActor) == 0x000330, "Member 'ABP_RippleSwim_C::TestActor' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PlayerSize) == 0x000338, "Member 'ABP_RippleSwim_C::PlayerSize' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Global_MPC) == 0x000340, "Member 'ABP_RippleSwim_C::Global_MPC' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bPlayerInWaterLast) == 0x000348, "Member 'ABP_RippleSwim_C::bPlayerInWaterLast' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, RippleDistanceNormal) == 0x00034C, "Member 'ABP_RippleSwim_C::RippleDistanceNormal' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, RippleDistanceFluo) == 0x000350, "Member 'ABP_RippleSwim_C::RippleDistanceFluo' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PassedTime) == 0x000354, "Member 'ABP_RippleSwim_C::PassedTime' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PositionOffset) == 0x000358, "Member 'ABP_RippleSwim_C::PositionOffset' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, LastRippleLocationNormal) == 0x000360, "Member 'ABP_RippleSwim_C::LastRippleLocationNormal' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, SwimRippleOffset) == 0x00036C, "Member 'ABP_RippleSwim_C::SwimRippleOffset' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, LastRippleLocationFluo) == 0x000370, "Member 'ABP_RippleSwim_C::LastRippleLocationFluo' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PlayerPosNormal) == 0x00037C, "Member 'ABP_RippleSwim_C::PlayerPosNormal' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PlayerPosFluo) == 0x000384, "Member 'ABP_RippleSwim_C::PlayerPosFluo' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, LastRipplePastTime) == 0x00038C, "Member 'ABP_RippleSwim_C::LastRipplePastTime' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bInWater) == 0x000390, "Member 'ABP_RippleSwim_C::bInWater' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Swim_Ripple) == 0x000398, "Member 'ABP_RippleSwim_C::Swim_Ripple' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Gongduola_Ripple) == 0x0003A0, "Member 'ABP_RippleSwim_C::Gongduola_Ripple' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, Fly_Ripple) == 0x0003A8, "Member 'ABP_RippleSwim_C::Fly_Ripple' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, InFixedRippleArea) == 0x0003B0, "Member 'ABP_RippleSwim_C::InFixedRippleArea' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, PersistRT) == 0x0003B8, "Member 'ABP_RippleSwim_C::PersistRT' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, FinalRT) == 0x0003C0, "Member 'ABP_RippleSwim_C::FinalRT' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bCustomRippleState) == 0x0003C8, "Member 'ABP_RippleSwim_C::bCustomRippleState' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletConfig) == 0x0003D0, "Member 'ABP_RippleSwim_C::BulletConfig' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletUV) == 0x0003D8, "Member 'ABP_RippleSwim_C::BulletUV' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletTimerHandle) == 0x0003E0, "Member 'ABP_RippleSwim_C::BulletTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bSetUV) == 0x0003E8, "Member 'ABP_RippleSwim_C::bSetUV' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bSelfRipple) == 0x0003E9, "Member 'ABP_RippleSwim_C::bSelfRipple' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletRadius) == 0x0003EC, "Member 'ABP_RippleSwim_C::BulletRadius' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletHitInterval) == 0x0003F0, "Member 'ABP_RippleSwim_C::BulletHitInterval' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletHitTimeLast) == 0x0003F4, "Member 'ABP_RippleSwim_C::BulletHitTimeLast' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, CurrBulletIntensity) == 0x0003F8, "Member 'ABP_RippleSwim_C::CurrBulletIntensity' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletIntensity) == 0x0003FC, "Member 'ABP_RippleSwim_C::BulletIntensity' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletDensity) == 0x000400, "Member 'ABP_RippleSwim_C::BulletDensity' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, BulletAttenuation_) == 0x000404, "Member 'ABP_RippleSwim_C::BulletAttenuation_' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, bShowDebugData) == 0x000408, "Member 'ABP_RippleSwim_C::bShowDebugData' has a wrong offset!");
static_assert(offsetof(ABP_RippleSwim_C, State) == 0x00040C, "Member 'ABP_RippleSwim_C::State' has a wrong offset!");

}

