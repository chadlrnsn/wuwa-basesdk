#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Base

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "SSkillInfo_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "EPawnChannel_structs.hpp"
#include "EAimViewState_structs.hpp"


namespace SDK::Params
{

// Function GA_Base.GA_Base_C.ExecuteUbergraph_GA_Base
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_ExecuteUbergraph_GA_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_OnActivateAbility_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_ExecuteUbergraph_GA_Base) == 0x000008, "Wrong alignment on GA_Base_C_ExecuteUbergraph_GA_Base");
static_assert(sizeof(GA_Base_C_ExecuteUbergraph_GA_Base) == 0x000018, "Wrong size on GA_Base_C_ExecuteUbergraph_GA_Base");
static_assert(offsetof(GA_Base_C_ExecuteUbergraph_GA_Base, EntryPoint) == 0x000000, "Member 'GA_Base_C_ExecuteUbergraph_GA_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Base_C_ExecuteUbergraph_GA_Base, K2Node_Event_bWasCancelled) == 0x000004, "Member 'GA_Base_C_ExecuteUbergraph_GA_Base::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_Base_C_ExecuteUbergraph_GA_Base, CallFunc_K2_CommitAbility_ReturnValue) == 0x000005, "Member 'GA_Base_C_ExecuteUbergraph_GA_Base::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_ExecuteUbergraph_GA_Base, CallFunc__________) == 0x000008, "Member 'GA_Base_C_ExecuteUbergraph_GA_Base::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_ExecuteUbergraph_GA_Base, CallFunc_OnActivateAbility_ReturnValue) == 0x000010, "Member 'GA_Base_C_ExecuteUbergraph_GA_Base::CallFunc_OnActivateAbility_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_Base_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_Base_C_K2_OnEndAbility");
static_assert(sizeof(GA_Base_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_Base_C_K2_OnEndAbility");
static_assert(offsetof(GA_Base_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_Base_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取施法者
// 0x0020 (0x0020 - 0x0000)
struct GA_Base_C_获取施法者 final
{
public:
	class ATsBaseCharacter_C*                     施法者;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_获取施法者) == 0x000008, "Wrong alignment on GA_Base_C_获取施法者");
static_assert(sizeof(GA_Base_C_获取施法者) == 0x000020, "Wrong size on GA_Base_C_获取施法者");
static_assert(offsetof(GA_Base_C_获取施法者, 施法者) == 0x000000, "Member 'GA_Base_C_获取施法者::施法者' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取施法者, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_Base_C_获取施法者::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取施法者, K2Node_DynamicCast_AsTs_Base_Character) == 0x000010, "Member 'GA_Base_C_获取施法者::K2Node_DynamicCast_AsTs_Base_Character' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取施法者, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GA_Base_C_获取施法者::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取当前技能配置Id
// 0x0010 (0x0010 - 0x0000)
struct GA_Base_C_获取当前技能配置Id final
{
public:
	class FString                                 当前技能数据名_0;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取当前技能配置Id) == 0x000008, "Wrong alignment on GA_Base_C_获取当前技能配置Id");
static_assert(sizeof(GA_Base_C_获取当前技能配置Id) == 0x000010, "Wrong size on GA_Base_C_获取当前技能配置Id");
static_assert(offsetof(GA_Base_C_获取当前技能配置Id, 当前技能数据名_0) == 0x000000, "Member 'GA_Base_C_获取当前技能配置Id::当前技能数据名_0' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取当前技能配置
// 0x0180 (0x0180 - 0x0000)
struct GA_Base_C_获取当前技能配置 final
{
public:
	struct FSSkillInfo                            当前技能数据_0;                                    // 0x0000(0x0180)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取当前技能配置) == 0x000008, "Wrong alignment on GA_Base_C_获取当前技能配置");
static_assert(sizeof(GA_Base_C_获取当前技能配置) == 0x000180, "Wrong size on GA_Base_C_获取当前技能配置");
static_assert(offsetof(GA_Base_C_获取当前技能配置, 当前技能数据_0) == 0x000000, "Member 'GA_Base_C_获取当前技能配置::当前技能数据_0' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取技能动画
// 0x0338 (0x0338 - 0x0000)
struct GA_Base_C_获取技能动画 final
{
public:
	int32                                         编号;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           动画;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSSkillInfo                            SkillInfo;                                         // 0x0010(0x0180)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UAnimMontage*                           Montage;                                           // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSSkillInfo                            CallFunc________________;                          // 0x0198(0x0180)(HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character;            // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetSkillMontageInstance_ReturnValue;      // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取技能动画) == 0x000008, "Wrong alignment on GA_Base_C_获取技能动画");
static_assert(sizeof(GA_Base_C_获取技能动画) == 0x000338, "Wrong size on GA_Base_C_获取技能动画");
static_assert(offsetof(GA_Base_C_获取技能动画, 编号) == 0x000000, "Member 'GA_Base_C_获取技能动画::编号' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能动画, 动画) == 0x000008, "Member 'GA_Base_C_获取技能动画::动画' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能动画, SkillInfo) == 0x000010, "Member 'GA_Base_C_获取技能动画::SkillInfo' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能动画, Montage) == 0x000190, "Member 'GA_Base_C_获取技能动画::Montage' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能动画, CallFunc________________) == 0x000198, "Member 'GA_Base_C_获取技能动画::CallFunc________________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能动画, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x000318, "Member 'GA_Base_C_获取技能动画::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能动画, K2Node_DynamicCast_AsTs_Base_Character) == 0x000320, "Member 'GA_Base_C_获取技能动画::K2Node_DynamicCast_AsTs_Base_Character' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能动画, K2Node_DynamicCast_bSuccess) == 0x000328, "Member 'GA_Base_C_获取技能动画::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能动画, CallFunc_GetSkillMontageInstance_ReturnValue) == 0x000330, "Member 'GA_Base_C_获取技能动画::CallFunc_GetSkillMontageInstance_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取技能所有动画
// 0x0040 (0x0040 - 0x0000)
struct GA_Base_C_获取技能所有动画 final
{
public:
	TArray<class UAnimMontage*>                   技能动画数组;                                      // 0x0000(0x0010)(Parm, OutParm)
	bool                                          LoopCondition;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TempInt;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   MontageArray;                                      // 0x0018(0x0010)(Edit, BlueprintVisible)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc__________;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取技能所有动画) == 0x000008, "Wrong alignment on GA_Base_C_获取技能所有动画");
static_assert(sizeof(GA_Base_C_获取技能所有动画) == 0x000040, "Wrong size on GA_Base_C_获取技能所有动画");
static_assert(offsetof(GA_Base_C_获取技能所有动画, 技能动画数组) == 0x000000, "Member 'GA_Base_C_获取技能所有动画::技能动画数组' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能所有动画, LoopCondition) == 0x000010, "Member 'GA_Base_C_获取技能所有动画::LoopCondition' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能所有动画, TempInt) == 0x000014, "Member 'GA_Base_C_获取技能所有动画::TempInt' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能所有动画, MontageArray) == 0x000018, "Member 'GA_Base_C_获取技能所有动画::MontageArray' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能所有动画, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'GA_Base_C_获取技能所有动画::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能所有动画, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'GA_Base_C_获取技能所有动画::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能所有动画, CallFunc__________) == 0x000030, "Member 'GA_Base_C_获取技能所有动画::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能所有动画, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'GA_Base_C_获取技能所有动画::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能所有动画, CallFunc_Array_Add_ReturnValue) == 0x00003C, "Member 'GA_Base_C_获取技能所有动画::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取技能标签
// 0x0190 (0x0190 - 0x0000)
struct GA_Base_C_获取技能标签 final
{
public:
	TArray<struct FGameplayTag>                   技能标签;                                          // 0x0000(0x0010)(Parm, OutParm)
	struct FSSkillInfo                            CallFunc________________;                          // 0x0010(0x0180)(HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取技能标签) == 0x000008, "Wrong alignment on GA_Base_C_获取技能标签");
static_assert(sizeof(GA_Base_C_获取技能标签) == 0x000190, "Wrong size on GA_Base_C_获取技能标签");
static_assert(offsetof(GA_Base_C_获取技能标签, 技能标签) == 0x000000, "Member 'GA_Base_C_获取技能标签::技能标签' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能标签, CallFunc________________) == 0x000010, "Member 'GA_Base_C_获取技能标签::CallFunc________________' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取AbilitySystemComponent
// 0x0010 (0x0010 - 0x0000)
struct GA_Base_C_获取AbilitySystemComponent final
{
public:
	class UBaseAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取AbilitySystemComponent) == 0x000008, "Wrong alignment on GA_Base_C_获取AbilitySystemComponent");
static_assert(sizeof(GA_Base_C_获取AbilitySystemComponent) == 0x000010, "Wrong size on GA_Base_C_获取AbilitySystemComponent");
static_assert(offsetof(GA_Base_C_获取AbilitySystemComponent, AbilitySystemComponent) == 0x000000, "Member 'GA_Base_C_获取AbilitySystemComponent::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取AbilitySystemComponent, CallFunc__________) == 0x000008, "Member 'GA_Base_C_获取AbilitySystemComponent::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取技能目标
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_获取技能目标 final
{
public:
	class ATsBaseCharacter_C*                     目标;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 技能目标;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetSkillTarget_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取技能目标) == 0x000008, "Wrong alignment on GA_Base_C_获取技能目标");
static_assert(sizeof(GA_Base_C_获取技能目标) == 0x000018, "Wrong size on GA_Base_C_获取技能目标");
static_assert(offsetof(GA_Base_C_获取技能目标, 目标) == 0x000000, "Member 'GA_Base_C_获取技能目标::目标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能目标, 技能目标) == 0x000008, "Member 'GA_Base_C_获取技能目标::技能目标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能目标, CallFunc_GetSkillTarget_ReturnValue) == 0x000010, "Member 'GA_Base_C_获取技能目标::CallFunc_GetSkillTarget_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取技能目标距离
// 0x0060 (0x0060 - 0x0000)
struct GA_Base_C_获取技能目标距离 final
{
public:
	bool                                          平面2D;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         距离;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue;        // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc____________;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue_1;      // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_D_Vector_Distance_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_D_Vector_Distance2D_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_DoubleToFloat_ReturnValue;           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_DoubleToFloat_ReturnValue_1;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取技能目标距离) == 0x000008, "Wrong alignment on GA_Base_C_获取技能目标距离");
static_assert(sizeof(GA_Base_C_获取技能目标距离) == 0x000060, "Wrong size on GA_Base_C_获取技能目标距离");
static_assert(offsetof(GA_Base_C_获取技能目标距离, 平面2D) == 0x000000, "Member 'GA_Base_C_获取技能目标距离::平面2D' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能目标距离, 距离) == 0x000004, "Member 'GA_Base_C_获取技能目标距离::距离' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能目标距离, CallFunc__________) == 0x000008, "Member 'GA_Base_C_获取技能目标距离::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能目标距离, CallFunc_D_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'GA_Base_C_获取技能目标距离::CallFunc_D_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能目标距离, CallFunc____________) == 0x000028, "Member 'GA_Base_C_获取技能目标距离::CallFunc____________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能目标距离, CallFunc_D_K2_GetActorLocation_ReturnValue_1) == 0x000030, "Member 'GA_Base_C_获取技能目标距离::CallFunc_D_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能目标距离, CallFunc_D_Vector_Distance_ReturnValue) == 0x000048, "Member 'GA_Base_C_获取技能目标距离::CallFunc_D_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能目标距离, CallFunc_D_Vector_Distance2D_ReturnValue) == 0x000050, "Member 'GA_Base_C_获取技能目标距离::CallFunc_D_Vector_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能目标距离, CallFunc_Conv_DoubleToFloat_ReturnValue) == 0x000058, "Member 'GA_Base_C_获取技能目标距离::CallFunc_Conv_DoubleToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取技能目标距离, CallFunc_Conv_DoubleToFloat_ReturnValue_1) == 0x00005C, "Member 'GA_Base_C_获取技能目标距离::CallFunc_Conv_DoubleToFloat_ReturnValue_1' has a wrong offset!");

// Function GA_Base.GA_Base_C.是否拥有任意标签
// 0x0068 (0x0068 - 0x0000)
struct GA_Base_C_是否拥有任意标签 final
{
public:
	class ATsBaseCharacter_C*                     目标;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  标签;                                              // 0x0008(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          是否存在;                                          // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0030(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_是否拥有任意标签) == 0x000008, "Wrong alignment on GA_Base_C_是否拥有任意标签");
static_assert(sizeof(GA_Base_C_是否拥有任意标签) == 0x000068, "Wrong size on GA_Base_C_是否拥有任意标签");
static_assert(offsetof(GA_Base_C_是否拥有任意标签, 目标) == 0x000000, "Member 'GA_Base_C_是否拥有任意标签::目标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_是否拥有任意标签, 标签) == 0x000008, "Member 'GA_Base_C_是否拥有任意标签::标签' has a wrong offset!");
static_assert(offsetof(GA_Base_C_是否拥有任意标签, 是否存在) == 0x000028, "Member 'GA_Base_C_是否拥有任意标签::是否存在' has a wrong offset!");
static_assert(offsetof(GA_Base_C_是否拥有任意标签, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000030, "Member 'GA_Base_C_是否拥有任意标签::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_是否拥有任意标签, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000050, "Member 'GA_Base_C_是否拥有任意标签::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_是否拥有任意标签, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000060, "Member 'GA_Base_C_是否拥有任意标签::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置强制速度
// 0x0020 (0x0020 - 0x0000)
struct GA_Base_C_设置强制速度 final
{
public:
	struct FVectorDouble                          速度;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置强制速度) == 0x000008, "Wrong alignment on GA_Base_C_设置强制速度");
static_assert(sizeof(GA_Base_C_设置强制速度) == 0x000020, "Wrong size on GA_Base_C_设置强制速度");
static_assert(offsetof(GA_Base_C_设置强制速度, 速度) == 0x000000, "Member 'GA_Base_C_设置强制速度::速度' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置强制速度, CallFunc__________) == 0x000018, "Member 'GA_Base_C_设置强制速度::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置通道的碰撞响应
// 0x0010 (0x0010 - 0x0000)
struct GA_Base_C_设置通道的碰撞响应 final
{
public:
	class UPrimitiveComponent*                    目标;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             Channel;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            NewResponse;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置通道的碰撞响应) == 0x000008, "Wrong alignment on GA_Base_C_设置通道的碰撞响应");
static_assert(sizeof(GA_Base_C_设置通道的碰撞响应) == 0x000010, "Wrong size on GA_Base_C_设置通道的碰撞响应");
static_assert(offsetof(GA_Base_C_设置通道的碰撞响应, 目标) == 0x000000, "Member 'GA_Base_C_设置通道的碰撞响应::目标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置通道的碰撞响应, Channel) == 0x000008, "Member 'GA_Base_C_设置通道的碰撞响应::Channel' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置通道的碰撞响应, NewResponse) == 0x000009, "Member 'GA_Base_C_设置通道的碰撞响应::NewResponse' has a wrong offset!");

// Function GA_Base.GA_Base_C.通过Tag移除自身Buff
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_通过Tag移除自身Buff final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_通过Tag移除自身Buff) == 0x000008, "Wrong alignment on GA_Base_C_通过Tag移除自身Buff");
static_assert(sizeof(GA_Base_C_通过Tag移除自身Buff) == 0x000018, "Wrong size on GA_Base_C_通过Tag移除自身Buff");
static_assert(offsetof(GA_Base_C_通过Tag移除自身Buff, tag) == 0x000000, "Member 'GA_Base_C_通过Tag移除自身Buff::tag' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过Tag移除自身Buff, CallFunc__________) == 0x000010, "Member 'GA_Base_C_通过Tag移除自身Buff::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.通过 ID给对象添加Buff
// 0x0030 (0x0030 - 0x0000)
struct GA_Base_C_通过_ID给对象添加Buff final
{
public:
	class ATsBaseCharacter_C*                     Buff对象;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         BuffId;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Buff层数;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_通过_ID给对象添加Buff) == 0x000008, "Wrong alignment on GA_Base_C_通过_ID给对象添加Buff");
static_assert(sizeof(GA_Base_C_通过_ID给对象添加Buff) == 0x000030, "Wrong size on GA_Base_C_通过_ID给对象添加Buff");
static_assert(offsetof(GA_Base_C_通过_ID给对象添加Buff, Buff对象) == 0x000000, "Member 'GA_Base_C_通过_ID给对象添加Buff::Buff对象' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过_ID给对象添加Buff, BuffId) == 0x000008, "Member 'GA_Base_C_通过_ID给对象添加Buff::BuffId' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过_ID给对象添加Buff, Buff层数) == 0x000010, "Member 'GA_Base_C_通过_ID给对象添加Buff::Buff层数' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过_ID给对象添加Buff, CallFunc__________) == 0x000018, "Member 'GA_Base_C_通过_ID给对象添加Buff::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过_ID给对象添加Buff, CallFunc_Conv_IntToString_ReturnValue) == 0x000020, "Member 'GA_Base_C_通过_ID给对象添加Buff::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取Base属性值
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_获取Base属性值 final
{
public:
	class ATsBaseCharacter_C*                     目标;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         属性id;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         属性值;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeBaseValue_ReturnValue;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取Base属性值) == 0x000008, "Wrong alignment on GA_Base_C_获取Base属性值");
static_assert(sizeof(GA_Base_C_获取Base属性值) == 0x000018, "Wrong size on GA_Base_C_获取Base属性值");
static_assert(offsetof(GA_Base_C_获取Base属性值, 目标) == 0x000000, "Member 'GA_Base_C_获取Base属性值::目标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取Base属性值, 属性id) == 0x000008, "Member 'GA_Base_C_获取Base属性值::属性id' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取Base属性值, 属性值) == 0x00000C, "Member 'GA_Base_C_获取Base属性值::属性值' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取Base属性值, CallFunc_GetAttributeBaseValue_ReturnValue) == 0x000010, "Member 'GA_Base_C_获取Base属性值::CallFunc_GetAttributeBaseValue_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取Current属性值
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_获取Current属性值 final
{
public:
	class ATsBaseCharacter_C*                     目标;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         属性id;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         属性值;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取Current属性值) == 0x000008, "Wrong alignment on GA_Base_C_获取Current属性值");
static_assert(sizeof(GA_Base_C_获取Current属性值) == 0x000018, "Wrong size on GA_Base_C_获取Current属性值");
static_assert(offsetof(GA_Base_C_获取Current属性值, 目标) == 0x000000, "Member 'GA_Base_C_获取Current属性值::目标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取Current属性值, 属性id) == 0x000008, "Member 'GA_Base_C_获取Current属性值::属性id' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取Current属性值, 属性值) == 0x00000C, "Member 'GA_Base_C_获取Current属性值::属性值' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取Current属性值, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x000010, "Member 'GA_Base_C_获取Current属性值::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.通过 ID移除目标Buff
// 0x0028 (0x0028 - 0x0000)
struct GA_Base_C_通过_ID移除目标Buff final
{
public:
	int64                                         BuffId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         移除层数;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     目标;                                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_通过_ID移除目标Buff) == 0x000008, "Wrong alignment on GA_Base_C_通过_ID移除目标Buff");
static_assert(sizeof(GA_Base_C_通过_ID移除目标Buff) == 0x000028, "Wrong size on GA_Base_C_通过_ID移除目标Buff");
static_assert(offsetof(GA_Base_C_通过_ID移除目标Buff, BuffId) == 0x000000, "Member 'GA_Base_C_通过_ID移除目标Buff::BuffId' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过_ID移除目标Buff, 移除层数) == 0x000008, "Member 'GA_Base_C_通过_ID移除目标Buff::移除层数' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过_ID移除目标Buff, 目标) == 0x000010, "Member 'GA_Base_C_通过_ID移除目标Buff::目标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过_ID移除目标Buff, CallFunc__________) == 0x000018, "Member 'GA_Base_C_通过_ID移除目标Buff::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过_ID移除目标Buff, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'GA_Base_C_通过_ID移除目标Buff::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置材质效果
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_设置材质效果 final
{
public:
	class ATsBaseCharacter_C*                     设置对象;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPD_CharacterControllerData_C*          材质配置;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Handle;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddMaterialControllerData_ReturnValue;    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置材质效果) == 0x000008, "Wrong alignment on GA_Base_C_设置材质效果");
static_assert(sizeof(GA_Base_C_设置材质效果) == 0x000018, "Wrong size on GA_Base_C_设置材质效果");
static_assert(offsetof(GA_Base_C_设置材质效果, 设置对象) == 0x000000, "Member 'GA_Base_C_设置材质效果::设置对象' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置材质效果, 材质配置) == 0x000008, "Member 'GA_Base_C_设置材质效果::材质配置' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置材质效果, Handle) == 0x000010, "Member 'GA_Base_C_设置材质效果::Handle' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置材质效果, CallFunc_AddMaterialControllerData_ReturnValue) == 0x000014, "Member 'GA_Base_C_设置材质效果::CallFunc_AddMaterialControllerData_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.创建子弹
// 0x0080 (0x0080 - 0x0000)
struct GA_Base_C_创建子弹 final
{
public:
	class ATsBaseCharacter_C*                     施法者;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 子弹ID;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransformDouble                       初始变换;                                          // 0x0020(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FVectorDouble                          目标点;                                            // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         子弹;                                              // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CreateBulletFromGA_ReturnValue;           // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_创建子弹) == 0x000010, "Wrong alignment on GA_Base_C_创建子弹");
static_assert(sizeof(GA_Base_C_创建子弹) == 0x000080, "Wrong size on GA_Base_C_创建子弹");
static_assert(offsetof(GA_Base_C_创建子弹, 施法者) == 0x000000, "Member 'GA_Base_C_创建子弹::施法者' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建子弹, 子弹ID) == 0x000008, "Member 'GA_Base_C_创建子弹::子弹ID' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建子弹, 初始变换) == 0x000020, "Member 'GA_Base_C_创建子弹::初始变换' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建子弹, 目标点) == 0x000060, "Member 'GA_Base_C_创建子弹::目标点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建子弹, 子弹) == 0x000078, "Member 'GA_Base_C_创建子弹::子弹' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建子弹, CallFunc_CreateBulletFromGA_ReturnValue) == 0x00007C, "Member 'GA_Base_C_创建子弹::CallFunc_CreateBulletFromGA_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.使用技能
// 0x0030 (0x0030 - 0x0000)
struct GA_Base_C_使用技能 final
{
public:
	class ATsBaseCharacter_C*                     释放者;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   技能ID;                                            // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 技能目标;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket;                                            // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否成功释放;                                      // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          CallFunc_BeginSkill_ReturnValue;                   // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_使用技能) == 0x000008, "Wrong alignment on GA_Base_C_使用技能");
static_assert(sizeof(GA_Base_C_使用技能) == 0x000030, "Wrong size on GA_Base_C_使用技能");
static_assert(offsetof(GA_Base_C_使用技能, 释放者) == 0x000000, "Member 'GA_Base_C_使用技能::释放者' has a wrong offset!");
static_assert(offsetof(GA_Base_C_使用技能, 技能ID) == 0x000008, "Member 'GA_Base_C_使用技能::技能ID' has a wrong offset!");
static_assert(offsetof(GA_Base_C_使用技能, 技能目标) == 0x000018, "Member 'GA_Base_C_使用技能::技能目标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_使用技能, Socket) == 0x000020, "Member 'GA_Base_C_使用技能::Socket' has a wrong offset!");
static_assert(offsetof(GA_Base_C_使用技能, 是否成功释放) == 0x00002C, "Member 'GA_Base_C_使用技能::是否成功释放' has a wrong offset!");
static_assert(offsetof(GA_Base_C_使用技能, CallFunc_BeginSkill_ReturnValue) == 0x00002D, "Member 'GA_Base_C_使用技能::CallFunc_BeginSkill_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.召唤
// 0x0080 (0x0080 - 0x0000)
struct GA_Base_C_召唤 final
{
public:
	int32                                         配置表ID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransformDouble                       出生位置;                                          // 0x0010(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          是否成功;                                          // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     召唤物;                                            // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         实体ID;                                            // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CreatureDataId;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EntityID;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_召唤) == 0x000010, "Wrong alignment on GA_Base_C_召唤");
static_assert(sizeof(GA_Base_C_召唤) == 0x000080, "Wrong size on GA_Base_C_召唤");
static_assert(offsetof(GA_Base_C_召唤, 配置表ID) == 0x000000, "Member 'GA_Base_C_召唤::配置表ID' has a wrong offset!");
static_assert(offsetof(GA_Base_C_召唤, 出生位置) == 0x000010, "Member 'GA_Base_C_召唤::出生位置' has a wrong offset!");
static_assert(offsetof(GA_Base_C_召唤, 是否成功) == 0x000050, "Member 'GA_Base_C_召唤::是否成功' has a wrong offset!");
static_assert(offsetof(GA_Base_C_召唤, 召唤物) == 0x000058, "Member 'GA_Base_C_召唤::召唤物' has a wrong offset!");
static_assert(offsetof(GA_Base_C_召唤, 实体ID) == 0x000060, "Member 'GA_Base_C_召唤::实体ID' has a wrong offset!");
static_assert(offsetof(GA_Base_C_召唤, CreatureDataId) == 0x000068, "Member 'GA_Base_C_召唤::CreatureDataId' has a wrong offset!");
static_assert(offsetof(GA_Base_C_召唤, EntityID) == 0x000070, "Member 'GA_Base_C_召唤::EntityID' has a wrong offset!");

// Function GA_Base.GA_Base_C.是否联网
// 0x0003 (0x0003 - 0x0000)
struct GA_Base_C_是否联网 final
{
public:
	bool                                          联网;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EKuroNetMode                                  CallFunc_GetKuroNetMode_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_是否联网) == 0x000001, "Wrong alignment on GA_Base_C_是否联网");
static_assert(sizeof(GA_Base_C_是否联网) == 0x000003, "Wrong size on GA_Base_C_是否联网");
static_assert(offsetof(GA_Base_C_是否联网, 联网) == 0x000000, "Member 'GA_Base_C_是否联网::联网' has a wrong offset!");
static_assert(offsetof(GA_Base_C_是否联网, CallFunc_GetKuroNetMode_ReturnValue) == 0x000001, "Member 'GA_Base_C_是否联网::CallFunc_GetKuroNetMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_是否联网, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'GA_Base_C_是否联网::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取黑板 Int
// 0x0038 (0x0038 - 0x0000)
struct GA_Base_C_获取黑板_Int final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         值;                                                // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetIntValueByEntity_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取黑板_Int) == 0x000008, "Wrong alignment on GA_Base_C_获取黑板_Int");
static_assert(sizeof(GA_Base_C_获取黑板_Int) == 0x000038, "Wrong size on GA_Base_C_获取黑板_Int");
static_assert(offsetof(GA_Base_C_获取黑板_Int, 角色) == 0x000000, "Member 'GA_Base_C_获取黑板_Int::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板_Int, key) == 0x000008, "Member 'GA_Base_C_获取黑板_Int::key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板_Int, 值) == 0x000018, "Member 'GA_Base_C_获取黑板_Int::值' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板_Int, CallFunc_GetEntityId_self_CastInput) == 0x000020, "Member 'GA_Base_C_获取黑板_Int::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板_Int, CallFunc_GetEntityId_ReturnValue) == 0x000030, "Member 'GA_Base_C_获取黑板_Int::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板_Int, CallFunc_GetIntValueByEntity_ReturnValue) == 0x000034, "Member 'GA_Base_C_获取黑板_Int::CallFunc_GetIntValueByEntity_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置黑板Int
// 0x0038 (0x0038 - 0x0000)
struct GA_Base_C_设置黑板Int final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         值;                                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置黑板Int) == 0x000008, "Wrong alignment on GA_Base_C_设置黑板Int");
static_assert(sizeof(GA_Base_C_设置黑板Int) == 0x000038, "Wrong size on GA_Base_C_设置黑板Int");
static_assert(offsetof(GA_Base_C_设置黑板Int, 角色) == 0x000000, "Member 'GA_Base_C_设置黑板Int::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Int, key) == 0x000008, "Member 'GA_Base_C_设置黑板Int::key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Int, 值) == 0x000018, "Member 'GA_Base_C_设置黑板Int::值' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Int, CallFunc_GetEntityId_self_CastInput) == 0x000020, "Member 'GA_Base_C_设置黑板Int::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Int, CallFunc_GetEntityId_ReturnValue) == 0x000030, "Member 'GA_Base_C_设置黑板Int::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取黑板Long
// 0x0040 (0x0040 - 0x0000)
struct GA_Base_C_获取黑板Long final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int64                                         值;                                                // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_GetLongValueByEntity_ReturnValue;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取黑板Long) == 0x000008, "Wrong alignment on GA_Base_C_获取黑板Long");
static_assert(sizeof(GA_Base_C_获取黑板Long) == 0x000040, "Wrong size on GA_Base_C_获取黑板Long");
static_assert(offsetof(GA_Base_C_获取黑板Long, 角色) == 0x000000, "Member 'GA_Base_C_获取黑板Long::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板Long, key) == 0x000008, "Member 'GA_Base_C_获取黑板Long::key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板Long, 值) == 0x000018, "Member 'GA_Base_C_获取黑板Long::值' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板Long, CallFunc_GetEntityId_self_CastInput) == 0x000020, "Member 'GA_Base_C_获取黑板Long::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板Long, CallFunc_GetEntityId_ReturnValue) == 0x000030, "Member 'GA_Base_C_获取黑板Long::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板Long, CallFunc_GetLongValueByEntity_ReturnValue) == 0x000038, "Member 'GA_Base_C_获取黑板Long::CallFunc_GetLongValueByEntity_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置黑板Long
// 0x0038 (0x0038 - 0x0000)
struct GA_Base_C_设置黑板Long final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int64                                         值;                                                // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置黑板Long) == 0x000008, "Wrong alignment on GA_Base_C_设置黑板Long");
static_assert(sizeof(GA_Base_C_设置黑板Long) == 0x000038, "Wrong size on GA_Base_C_设置黑板Long");
static_assert(offsetof(GA_Base_C_设置黑板Long, 角色) == 0x000000, "Member 'GA_Base_C_设置黑板Long::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Long, key) == 0x000008, "Member 'GA_Base_C_设置黑板Long::key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Long, 值) == 0x000018, "Member 'GA_Base_C_设置黑板Long::值' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Long, CallFunc_GetEntityId_self_CastInput) == 0x000020, "Member 'GA_Base_C_设置黑板Long::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Long, CallFunc_GetEntityId_ReturnValue) == 0x000030, "Member 'GA_Base_C_设置黑板Long::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取实体ID
// 0x0028 (0x0028 - 0x0000)
struct GA_Base_C_获取实体ID final
{
public:
	class ATsBaseCharacter_C*                     对象;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         实体ID;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取实体ID) == 0x000008, "Wrong alignment on GA_Base_C_获取实体ID");
static_assert(sizeof(GA_Base_C_获取实体ID) == 0x000028, "Wrong size on GA_Base_C_获取实体ID");
static_assert(offsetof(GA_Base_C_获取实体ID, 对象) == 0x000000, "Member 'GA_Base_C_获取实体ID::对象' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取实体ID, 实体ID) == 0x000008, "Member 'GA_Base_C_获取实体ID::实体ID' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取实体ID, CallFunc_GetEntityId_self_CastInput) == 0x000010, "Member 'GA_Base_C_获取实体ID::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取实体ID, CallFunc_GetEntityId_ReturnValue) == 0x000020, "Member 'GA_Base_C_获取实体ID::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.根据实体ID获取对象
// 0x0030 (0x0030 - 0x0000)
struct GA_Base_C_根据实体ID获取对象 final
{
public:
	int32                                         实体ID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     对象;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否找到对象;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetDynamicEntity_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_根据实体ID获取对象) == 0x000008, "Wrong alignment on GA_Base_C_根据实体ID获取对象");
static_assert(sizeof(GA_Base_C_根据实体ID获取对象) == 0x000030, "Wrong size on GA_Base_C_根据实体ID获取对象");
static_assert(offsetof(GA_Base_C_根据实体ID获取对象, 实体ID) == 0x000000, "Member 'GA_Base_C_根据实体ID获取对象::实体ID' has a wrong offset!");
static_assert(offsetof(GA_Base_C_根据实体ID获取对象, 对象) == 0x000008, "Member 'GA_Base_C_根据实体ID获取对象::对象' has a wrong offset!");
static_assert(offsetof(GA_Base_C_根据实体ID获取对象, 是否找到对象) == 0x000010, "Member 'GA_Base_C_根据实体ID获取对象::是否找到对象' has a wrong offset!");
static_assert(offsetof(GA_Base_C_根据实体ID获取对象, CallFunc_GetDynamicEntity_ReturnValue) == 0x000018, "Member 'GA_Base_C_根据实体ID获取对象::CallFunc_GetDynamicEntity_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_根据实体ID获取对象, K2Node_DynamicCast_AsTs_Base_Character) == 0x000020, "Member 'GA_Base_C_根据实体ID获取对象::K2Node_DynamicCast_AsTs_Base_Character' has a wrong offset!");
static_assert(offsetof(GA_Base_C_根据实体ID获取对象, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'GA_Base_C_根据实体ID获取对象::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取黑板指定Key值关联对象
// 0x0038 (0x0038 - 0x0000)
struct GA_Base_C_获取黑板指定Key值关联对象 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     对象;                                              // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否找到对象;                                      // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_____EntityId__;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc_____ID_______;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_____ID___________;                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_获取黑板指定Key值关联对象) == 0x000008, "Wrong alignment on GA_Base_C_获取黑板指定Key值关联对象");
static_assert(sizeof(GA_Base_C_获取黑板指定Key值关联对象) == 0x000038, "Wrong size on GA_Base_C_获取黑板指定Key值关联对象");
static_assert(offsetof(GA_Base_C_获取黑板指定Key值关联对象, 角色) == 0x000000, "Member 'GA_Base_C_获取黑板指定Key值关联对象::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板指定Key值关联对象, key) == 0x000008, "Member 'GA_Base_C_获取黑板指定Key值关联对象::key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板指定Key值关联对象, 对象) == 0x000018, "Member 'GA_Base_C_获取黑板指定Key值关联对象::对象' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板指定Key值关联对象, 是否找到对象) == 0x000020, "Member 'GA_Base_C_获取黑板指定Key值关联对象::是否找到对象' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板指定Key值关联对象, CallFunc_____EntityId__) == 0x000024, "Member 'GA_Base_C_获取黑板指定Key值关联对象::CallFunc_____EntityId__' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板指定Key值关联对象, CallFunc_____ID_______) == 0x000028, "Member 'GA_Base_C_获取黑板指定Key值关联对象::CallFunc_____ID_______' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板指定Key值关联对象, CallFunc_____ID___________) == 0x000030, "Member 'GA_Base_C_获取黑板指定Key值关联对象::CallFunc_____ID___________' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置技能目标
// 0x0010 (0x0010 - 0x0000)
struct GA_Base_C_设置技能目标 final
{
public:
	class AActor*                                 SkillTarget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置技能目标) == 0x000008, "Wrong alignment on GA_Base_C_设置技能目标");
static_assert(sizeof(GA_Base_C_设置技能目标) == 0x000010, "Wrong size on GA_Base_C_设置技能目标");
static_assert(offsetof(GA_Base_C_设置技能目标, SkillTarget) == 0x000000, "Member 'GA_Base_C_设置技能目标::SkillTarget' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置技能目标, CallFunc__________) == 0x000008, "Member 'GA_Base_C_设置技能目标::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.面向目标
// 0x0088 (0x0088 - 0x0000)
struct GA_Base_C_面向目标 final
{
public:
	class ATsBaseCharacter_C*                     目标;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 面向目标_0;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue;        // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue_1;      // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Subtract_VectorVector_ReturnValue;      // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_VectorDoubleToVector_ReturnValue;    // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_LookRotation_UpFirst_ReturnValue;         // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActorRotationWithContext_ReturnValue;  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_面向目标) == 0x000008, "Wrong alignment on GA_Base_C_面向目标");
static_assert(sizeof(GA_Base_C_面向目标) == 0x000088, "Wrong size on GA_Base_C_面向目标");
static_assert(offsetof(GA_Base_C_面向目标, 目标) == 0x000000, "Member 'GA_Base_C_面向目标::目标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_面向目标, 面向目标_0) == 0x000008, "Member 'GA_Base_C_面向目标::面向目标_0' has a wrong offset!");
static_assert(offsetof(GA_Base_C_面向目标, CallFunc_D_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'GA_Base_C_面向目标::CallFunc_D_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_面向目标, CallFunc_GetActorUpVector_ReturnValue) == 0x000028, "Member 'GA_Base_C_面向目标::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_面向目标, CallFunc_D_K2_GetActorLocation_ReturnValue_1) == 0x000038, "Member 'GA_Base_C_面向目标::CallFunc_D_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_面向目标, CallFunc_D_Subtract_VectorVector_ReturnValue) == 0x000050, "Member 'GA_Base_C_面向目标::CallFunc_D_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_面向目标, CallFunc_Conv_VectorDoubleToVector_ReturnValue) == 0x000068, "Member 'GA_Base_C_面向目标::CallFunc_Conv_VectorDoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_面向目标, CallFunc_LookRotation_UpFirst_ReturnValue) == 0x000074, "Member 'GA_Base_C_面向目标::CallFunc_LookRotation_UpFirst_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_面向目标, CallFunc_SetActorRotationWithContext_ReturnValue) == 0x000080, "Member 'GA_Base_C_面向目标::CallFunc_SetActorRotationWithContext_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.销毁特定子弹
// 0x00C0 (0x00C0 - 0x0000)
struct GA_Base_C_销毁特定子弹 final
{
public:
	class FName                                   子弹名字;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否召唤子子弹;                                    // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TmpBulletIds;                                      // 0x0010(0x0010)(Edit, BlueprintVisible)
	TArray<class UObject*>                        tmpBullet;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<int32>                                 Array_Index;                                       // 0x0030(0x0010)(Edit, BlueprintVisible)
	int32                                         ___int_Array_Index_Variable;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable_1;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DestroyBullet_ReturnValue;                // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DestroyBullet_ReturnValue_1;              // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetBulletName_ReturnValue;                // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_____ID___ID;                              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetCharacterLaunchedBulletIds_ReturnValue; // 0x00B0(0x0010)(ReferenceParm)
};
static_assert(alignof(GA_Base_C_销毁特定子弹) == 0x000008, "Wrong alignment on GA_Base_C_销毁特定子弹");
static_assert(sizeof(GA_Base_C_销毁特定子弹) == 0x0000C0, "Wrong size on GA_Base_C_销毁特定子弹");
static_assert(offsetof(GA_Base_C_销毁特定子弹, 子弹名字) == 0x000000, "Member 'GA_Base_C_销毁特定子弹::子弹名字' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, 是否召唤子子弹) == 0x00000C, "Member 'GA_Base_C_销毁特定子弹::是否召唤子子弹' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, TmpBulletIds) == 0x000010, "Member 'GA_Base_C_销毁特定子弹::TmpBulletIds' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, tmpBullet) == 0x000020, "Member 'GA_Base_C_销毁特定子弹::tmpBullet' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, Array_Index) == 0x000030, "Member 'GA_Base_C_销毁特定子弹::Array_Index' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, ___int_Array_Index_Variable) == 0x000040, "Member 'GA_Base_C_销毁特定子弹::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, ___int_Loop_Counter_Variable) == 0x000044, "Member 'GA_Base_C_销毁特定子弹::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Subtract_IntInt_ReturnValue) == 0x000048, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00004C, "Member 'GA_Base_C_销毁特定子弹::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, ___int_Array_Index_Variable_1) == 0x000050, "Member 'GA_Base_C_销毁特定子弹::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, ___int_Loop_Counter_Variable_1) == 0x000054, "Member 'GA_Base_C_销毁特定子弹::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Array_Get_Item) == 0x00005C, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Greater_IntInt_ReturnValue) == 0x000064, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_DestroyBullet_ReturnValue) == 0x000065, "Member 'GA_Base_C_销毁特定子弹::CallFunc_DestroyBullet_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_DestroyBullet_ReturnValue_1) == 0x000066, "Member 'GA_Base_C_销毁特定子弹::CallFunc_DestroyBullet_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Array_Length_ReturnValue_1) == 0x000068, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00006C, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Max_ReturnValue) == 0x000074, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_GetBulletName_ReturnValue) == 0x000078, "Member 'GA_Base_C_销毁特定子弹::CallFunc_GetBulletName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Conv_StringToName_ReturnValue) == 0x000088, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Array_Length_ReturnValue_2) == 0x000094, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000099, "Member 'GA_Base_C_销毁特定子弹::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc__________) == 0x0000A0, "Member 'GA_Base_C_销毁特定子弹::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_____ID___ID) == 0x0000A8, "Member 'GA_Base_C_销毁特定子弹::CallFunc_____ID___ID' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_Array_Add_ReturnValue) == 0x0000AC, "Member 'GA_Base_C_销毁特定子弹::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_销毁特定子弹, CallFunc_GetCharacterLaunchedBulletIds_ReturnValue) == 0x0000B0, "Member 'GA_Base_C_销毁特定子弹::CallFunc_GetCharacterLaunchedBulletIds_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取目标Tag层数
// 0x0020 (0x0020 - 0x0000)
struct GA_Base_C_获取目标Tag层数 final
{
public:
	class ATsBaseCharacter_C*                     目标;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         层数;                                              // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTagCount_ReturnValue;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取目标Tag层数) == 0x000008, "Wrong alignment on GA_Base_C_获取目标Tag层数");
static_assert(sizeof(GA_Base_C_获取目标Tag层数) == 0x000020, "Wrong size on GA_Base_C_获取目标Tag层数");
static_assert(offsetof(GA_Base_C_获取目标Tag层数, 目标) == 0x000000, "Member 'GA_Base_C_获取目标Tag层数::目标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标Tag层数, Tag) == 0x000008, "Member 'GA_Base_C_获取目标Tag层数::Tag' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标Tag层数, 层数) == 0x000014, "Member 'GA_Base_C_获取目标Tag层数::层数' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标Tag层数, CallFunc_GetTagCount_ReturnValue) == 0x000018, "Member 'GA_Base_C_获取目标Tag层数::CallFunc_GetTagCount_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取地面坐标点
// 0x01C0 (0x01C0 - 0x0000)
struct GA_Base_C_获取地面坐标点 final
{
public:
	struct FVectorDouble                          指定点;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         深度;                                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          地面坐标;                                          // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否存在;                                          // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ___object_Variable;                                // 0x0040(0x0010)(ConstParm, ReferenceParm)
	double                                        CallFunc_BreakVectorDouble_X;                      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVectorDouble_Y;                      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVectorDouble_Z;                      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_FloatToDouble_ReturnValue;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_D_Subtract_FloatFloat_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_MakeVectorDouble_ReturnValue;             // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_D_LineTraceSingle_OutHit;                 // 0x0090(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_D_LineTraceSingle_ReturnValue;            // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_127[0x1];                                      // 0x0127(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_Conv_VectorToVectorDouble_ReturnValue;    // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取地面坐标点) == 0x000008, "Wrong alignment on GA_Base_C_获取地面坐标点");
static_assert(sizeof(GA_Base_C_获取地面坐标点) == 0x0001C0, "Wrong size on GA_Base_C_获取地面坐标点");
static_assert(offsetof(GA_Base_C_获取地面坐标点, 指定点) == 0x000000, "Member 'GA_Base_C_获取地面坐标点::指定点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, 深度) == 0x000018, "Member 'GA_Base_C_获取地面坐标点::深度' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, 地面坐标) == 0x000020, "Member 'GA_Base_C_获取地面坐标点::地面坐标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, 是否存在) == 0x000038, "Member 'GA_Base_C_获取地面坐标点::是否存在' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, ___object_Variable) == 0x000040, "Member 'GA_Base_C_获取地面坐标点::___object_Variable' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakVectorDouble_X) == 0x000050, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakVectorDouble_X' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakVectorDouble_Y) == 0x000058, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakVectorDouble_Y' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakVectorDouble_Z) == 0x000060, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakVectorDouble_Z' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_Conv_FloatToDouble_ReturnValue) == 0x000068, "Member 'GA_Base_C_获取地面坐标点::CallFunc_Conv_FloatToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_D_Subtract_FloatFloat_ReturnValue) == 0x000070, "Member 'GA_Base_C_获取地面坐标点::CallFunc_D_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_MakeVectorDouble_ReturnValue) == 0x000078, "Member 'GA_Base_C_获取地面坐标点::CallFunc_MakeVectorDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_D_LineTraceSingle_OutHit) == 0x000090, "Member 'GA_Base_C_获取地面坐标点::CallFunc_D_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_D_LineTraceSingle_ReturnValue) == 0x000124, "Member 'GA_Base_C_获取地面坐标点::CallFunc_D_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_bBlockingHit) == 0x000125, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_bInitialOverlap) == 0x000126, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_Time) == 0x000128, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_Distance) == 0x00012C, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_Location) == 0x000130, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_ImpactPoint) == 0x00013C, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_Normal) == 0x000148, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_ImpactNormal) == 0x000154, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_PhysMat) == 0x000160, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_HitActor) == 0x000168, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_HitComponent) == 0x000170, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_HitBoneName) == 0x000178, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_HitItem) == 0x000184, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_FaceIndex) == 0x000188, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_TraceStart) == 0x00018C, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_BreakHitResult_TraceEnd) == 0x000198, "Member 'GA_Base_C_获取地面坐标点::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取地面坐标点, CallFunc_Conv_VectorToVectorDouble_ReturnValue) == 0x0001A8, "Member 'GA_Base_C_获取地面坐标点::CallFunc_Conv_VectorToVectorDouble_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置当前技能打断等级
// 0x0010 (0x0010 - 0x0000)
struct GA_Base_C_设置当前技能打断等级 final
{
public:
	int32                                         打断等级;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置当前技能打断等级) == 0x000008, "Wrong alignment on GA_Base_C_设置当前技能打断等级");
static_assert(sizeof(GA_Base_C_设置当前技能打断等级) == 0x000010, "Wrong size on GA_Base_C_设置当前技能打断等级");
static_assert(offsetof(GA_Base_C_设置当前技能打断等级, 打断等级) == 0x000000, "Member 'GA_Base_C_设置当前技能打断等级::打断等级' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置当前技能打断等级, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000004, "Member 'GA_Base_C_设置当前技能打断等级::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置当前技能打断等级, CallFunc__________) == 0x000008, "Member 'GA_Base_C_设置当前技能打断等级::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.结束异步任务
// 0x0010 (0x0010 - 0x0000)
struct GA_Base_C_结束异步任务 final
{
public:
	class UGameplayTask*                          任务;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          有效;                                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_结束异步任务) == 0x000008, "Wrong alignment on GA_Base_C_结束异步任务");
static_assert(sizeof(GA_Base_C_结束异步任务) == 0x000010, "Wrong size on GA_Base_C_结束异步任务");
static_assert(offsetof(GA_Base_C_结束异步任务, 任务) == 0x000000, "Member 'GA_Base_C_结束异步任务::任务' has a wrong offset!");
static_assert(offsetof(GA_Base_C_结束异步任务, 有效) == 0x000008, "Member 'GA_Base_C_结束异步任务::有效' has a wrong offset!");
static_assert(offsetof(GA_Base_C_结束异步任务, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'GA_Base_C_结束异步任务::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.发送事件
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_发送事件 final
{
public:
	class AActor*                                 发送目标;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           事件Tag;                                           // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_发送事件) == 0x000008, "Wrong alignment on GA_Base_C_发送事件");
static_assert(sizeof(GA_Base_C_发送事件) == 0x000018, "Wrong size on GA_Base_C_发送事件");
static_assert(offsetof(GA_Base_C_发送事件, 发送目标) == 0x000000, "Member 'GA_Base_C_发送事件::发送目标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_发送事件, 事件Tag) == 0x000008, "Member 'GA_Base_C_发送事件::事件Tag' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取两者距离
// 0x0068 (0x0068 - 0x0000)
struct GA_Base_C_获取两者距离 final
{
public:
	class AActor*                                 目标A;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 目标B;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue;        // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue_1;      // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_D_Vector_Distance_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_DoubleToFloat_ReturnValue;           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取两者距离) == 0x000008, "Wrong alignment on GA_Base_C_获取两者距离");
static_assert(sizeof(GA_Base_C_获取两者距离) == 0x000068, "Wrong size on GA_Base_C_获取两者距离");
static_assert(offsetof(GA_Base_C_获取两者距离, 目标A) == 0x000000, "Member 'GA_Base_C_获取两者距离::目标A' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取两者距离, 目标B) == 0x000008, "Member 'GA_Base_C_获取两者距离::目标B' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取两者距离, ReturnValue) == 0x000010, "Member 'GA_Base_C_获取两者距离::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取两者距离, CallFunc_D_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'GA_Base_C_获取两者距离::CallFunc_D_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取两者距离, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'GA_Base_C_获取两者距离::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取两者距离, CallFunc_D_K2_GetActorLocation_ReturnValue_1) == 0x000038, "Member 'GA_Base_C_获取两者距离::CallFunc_D_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取两者距离, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'GA_Base_C_获取两者距离::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取两者距离, CallFunc_D_Vector_Distance_ReturnValue) == 0x000058, "Member 'GA_Base_C_获取两者距离::CallFunc_D_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取两者距离, CallFunc_BooleanAND_ReturnValue) == 0x000060, "Member 'GA_Base_C_获取两者距离::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取两者距离, CallFunc_Conv_DoubleToFloat_ReturnValue) == 0x000064, "Member 'GA_Base_C_获取两者距离::CallFunc_Conv_DoubleToFloat_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.创建并播放特效
// 0x0080 (0x0080 - 0x0000)
struct GA_Base_C_创建并播放特效 final
{
public:
	const class UObject*                          DA文件名;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransformDouble                       transform;                                         // 0x0010(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          AttachToCharacter;                                 // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanCharacterMonsterOrSummonedDisplayEffect_ReturnValue; // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SpawnEffect_ReturnValue;                  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_创建并播放特效) == 0x000010, "Wrong alignment on GA_Base_C_创建并播放特效");
static_assert(sizeof(GA_Base_C_创建并播放特效) == 0x000080, "Wrong size on GA_Base_C_创建并播放特效");
static_assert(offsetof(GA_Base_C_创建并播放特效, DA文件名) == 0x000000, "Member 'GA_Base_C_创建并播放特效::DA文件名' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建并播放特效, transform) == 0x000010, "Member 'GA_Base_C_创建并播放特效::transform' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建并播放特效, AttachToCharacter) == 0x000050, "Member 'GA_Base_C_创建并播放特效::AttachToCharacter' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建并播放特效, ReturnValue) == 0x000054, "Member 'GA_Base_C_创建并播放特效::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建并播放特效, CallFunc_GetPathName_ReturnValue) == 0x000058, "Member 'GA_Base_C_创建并播放特效::CallFunc_GetPathName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建并播放特效, CallFunc__________) == 0x000068, "Member 'GA_Base_C_创建并播放特效::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建并播放特效, CallFunc_CanCharacterMonsterOrSummonedDisplayEffect_ReturnValue) == 0x000070, "Member 'GA_Base_C_创建并播放特效::CallFunc_CanCharacterMonsterOrSummonedDisplayEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建并播放特效, CallFunc_Not_PreBool_ReturnValue) == 0x000071, "Member 'GA_Base_C_创建并播放特效::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_创建并播放特效, CallFunc_SpawnEffect_ReturnValue) == 0x000074, "Member 'GA_Base_C_创建并播放特效::CallFunc_SpawnEffect_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.施法者添加标签
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_施法者添加标签 final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_施法者添加标签) == 0x000008, "Wrong alignment on GA_Base_C_施法者添加标签");
static_assert(sizeof(GA_Base_C_施法者添加标签) == 0x000018, "Wrong size on GA_Base_C_施法者添加标签");
static_assert(offsetof(GA_Base_C_施法者添加标签, Tag) == 0x000000, "Member 'GA_Base_C_施法者添加标签::Tag' has a wrong offset!");
static_assert(offsetof(GA_Base_C_施法者添加标签, CallFunc__________) == 0x000010, "Member 'GA_Base_C_施法者添加标签::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.施法者移除标签
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_施法者移除标签 final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_施法者移除标签) == 0x000008, "Wrong alignment on GA_Base_C_施法者移除标签");
static_assert(sizeof(GA_Base_C_施法者移除标签) == 0x000018, "Wrong size on GA_Base_C_施法者移除标签");
static_assert(offsetof(GA_Base_C_施法者移除标签, tag) == 0x000000, "Member 'GA_Base_C_施法者移除标签::tag' has a wrong offset!");
static_assert(offsetof(GA_Base_C_施法者移除标签, CallFunc__________) == 0x000010, "Member 'GA_Base_C_施法者移除标签::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.通过ID获取对象Buff层数
// 0x0020 (0x0020 - 0x0000)
struct GA_Base_C_通过ID获取对象Buff层数 final
{
public:
	int64                                         buffId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          enforceOnGoingCheck;                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         层数;                                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBuffCountById_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_通过ID获取对象Buff层数) == 0x000008, "Wrong alignment on GA_Base_C_通过ID获取对象Buff层数");
static_assert(sizeof(GA_Base_C_通过ID获取对象Buff层数) == 0x000020, "Wrong size on GA_Base_C_通过ID获取对象Buff层数");
static_assert(offsetof(GA_Base_C_通过ID获取对象Buff层数, buffId) == 0x000000, "Member 'GA_Base_C_通过ID获取对象Buff层数::buffId' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过ID获取对象Buff层数, enforceOnGoingCheck) == 0x000008, "Member 'GA_Base_C_通过ID获取对象Buff层数::enforceOnGoingCheck' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过ID获取对象Buff层数, 层数) == 0x00000C, "Member 'GA_Base_C_通过ID获取对象Buff层数::层数' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过ID获取对象Buff层数, CallFunc__________) == 0x000010, "Member 'GA_Base_C_通过ID获取对象Buff层数::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过ID获取对象Buff层数, CallFunc_GetBuffCountById_ReturnValue) == 0x000018, "Member 'GA_Base_C_通过ID获取对象Buff层数::CallFunc_GetBuffCountById_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取当前技能攻速
// 0x01A8 (0x01A8 - 0x0000)
struct GA_Base_C_获取当前技能攻速 final
{
public:
	float                                         SpeedRatio;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         speed;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSSkillInfo                            CallFunc________________;                          // 0x0018(0x0180)(HasGetValueTypeHash)
	float                                         CallFunc___Current_______;                         // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x019D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19E[0x2];                                      // 0x019E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc___Current________1;                       // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取当前技能攻速) == 0x000008, "Wrong alignment on GA_Base_C_获取当前技能攻速");
static_assert(sizeof(GA_Base_C_获取当前技能攻速) == 0x0001A8, "Wrong size on GA_Base_C_获取当前技能攻速");
static_assert(offsetof(GA_Base_C_获取当前技能攻速, SpeedRatio) == 0x000000, "Member 'GA_Base_C_获取当前技能攻速::SpeedRatio' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取当前技能攻速, speed) == 0x000004, "Member 'GA_Base_C_获取当前技能攻速::speed' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取当前技能攻速, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'GA_Base_C_获取当前技能攻速::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取当前技能攻速, CallFunc__________) == 0x000010, "Member 'GA_Base_C_获取当前技能攻速::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取当前技能攻速, CallFunc________________) == 0x000018, "Member 'GA_Base_C_获取当前技能攻速::CallFunc________________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取当前技能攻速, CallFunc___Current_______) == 0x000198, "Member 'GA_Base_C_获取当前技能攻速::CallFunc___Current_______' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取当前技能攻速, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00019C, "Member 'GA_Base_C_获取当前技能攻速::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取当前技能攻速, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00019D, "Member 'GA_Base_C_获取当前技能攻速::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取当前技能攻速, CallFunc___Current________1) == 0x0001A0, "Member 'GA_Base_C_获取当前技能攻速::CallFunc___Current________1' has a wrong offset!");

// Function GA_Base.GA_Base_C.查询特定子弹数量
// 0x0088 (0x0088 - 0x0000)
struct GA_Base_C_查询特定子弹数量 final
{
public:
	class FName                                   子弹名字;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         子弹数量;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletCount;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable;                                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetCharacterLaunchedBulletIds_ReturnValue; // 0x0048(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetBulletName_ReturnValue;                // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_查询特定子弹数量) == 0x000008, "Wrong alignment on GA_Base_C_查询特定子弹数量");
static_assert(sizeof(GA_Base_C_查询特定子弹数量) == 0x000088, "Wrong size on GA_Base_C_查询特定子弹数量");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, 子弹名字) == 0x000000, "Member 'GA_Base_C_查询特定子弹数量::子弹名字' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, 子弹数量) == 0x00000C, "Member 'GA_Base_C_查询特定子弹数量::子弹数量' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, BulletCount) == 0x000010, "Member 'GA_Base_C_查询特定子弹数量::BulletCount' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, ___int_Array_Index_Variable) == 0x000014, "Member 'GA_Base_C_查询特定子弹数量::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, ___int_Loop_Counter_Variable) == 0x000018, "Member 'GA_Base_C_查询特定子弹数量::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'GA_Base_C_查询特定子弹数量::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, ___int_Variable) == 0x000020, "Member 'GA_Base_C_查询特定子弹数量::___int_Variable' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'GA_Base_C_查询特定子弹数量::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, CallFunc__________) == 0x000028, "Member 'GA_Base_C_查询特定子弹数量::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, CallFunc_GetEntityId_self_CastInput) == 0x000030, "Member 'GA_Base_C_查询特定子弹数量::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, CallFunc_GetEntityId_ReturnValue) == 0x000040, "Member 'GA_Base_C_查询特定子弹数量::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, CallFunc_GetCharacterLaunchedBulletIds_ReturnValue) == 0x000048, "Member 'GA_Base_C_查询特定子弹数量::CallFunc_GetCharacterLaunchedBulletIds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'GA_Base_C_查询特定子弹数量::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, CallFunc_Array_Get_Item) == 0x00005C, "Member 'GA_Base_C_查询特定子弹数量::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'GA_Base_C_查询特定子弹数量::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, CallFunc_GetBulletName_ReturnValue) == 0x000068, "Member 'GA_Base_C_查询特定子弹数量::CallFunc_GetBulletName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, CallFunc_Conv_StringToName_ReturnValue) == 0x000078, "Member 'GA_Base_C_查询特定子弹数量::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_查询特定子弹数量, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000084, "Member 'GA_Base_C_查询特定子弹数量::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取黑板EntityId
// 0x0038 (0x0038 - 0x0000)
struct GA_Base_C_获取黑板EntityId final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         值;                                                // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEntityIdByEntity_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取黑板EntityId) == 0x000008, "Wrong alignment on GA_Base_C_获取黑板EntityId");
static_assert(sizeof(GA_Base_C_获取黑板EntityId) == 0x000038, "Wrong size on GA_Base_C_获取黑板EntityId");
static_assert(offsetof(GA_Base_C_获取黑板EntityId, 角色) == 0x000000, "Member 'GA_Base_C_获取黑板EntityId::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板EntityId, key) == 0x000008, "Member 'GA_Base_C_获取黑板EntityId::key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板EntityId, 值) == 0x000018, "Member 'GA_Base_C_获取黑板EntityId::值' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板EntityId, CallFunc_GetEntityId_self_CastInput) == 0x000020, "Member 'GA_Base_C_获取黑板EntityId::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板EntityId, CallFunc_GetEntityId_ReturnValue) == 0x000030, "Member 'GA_Base_C_获取黑板EntityId::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板EntityId, CallFunc_GetEntityIdByEntity_ReturnValue) == 0x000034, "Member 'GA_Base_C_获取黑板EntityId::CallFunc_GetEntityIdByEntity_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置黑板EntityId
// 0x0038 (0x0038 - 0x0000)
struct GA_Base_C_设置黑板EntityId final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         值;                                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置黑板EntityId) == 0x000008, "Wrong alignment on GA_Base_C_设置黑板EntityId");
static_assert(sizeof(GA_Base_C_设置黑板EntityId) == 0x000038, "Wrong size on GA_Base_C_设置黑板EntityId");
static_assert(offsetof(GA_Base_C_设置黑板EntityId, 角色) == 0x000000, "Member 'GA_Base_C_设置黑板EntityId::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板EntityId, key) == 0x000008, "Member 'GA_Base_C_设置黑板EntityId::key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板EntityId, 值) == 0x000018, "Member 'GA_Base_C_设置黑板EntityId::值' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板EntityId, CallFunc_GetEntityId_self_CastInput) == 0x000020, "Member 'GA_Base_C_设置黑板EntityId::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板EntityId, CallFunc_GetEntityId_ReturnValue) == 0x000030, "Member 'GA_Base_C_设置黑板EntityId::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取黑板Vector
// 0x0060 (0x0060 - 0x0000)
struct GA_Base_C_获取黑板Vector final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FVectorDouble                          值;                                                // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_GetVectorValueByEntity_ReturnValue;       // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取黑板Vector) == 0x000008, "Wrong alignment on GA_Base_C_获取黑板Vector");
static_assert(sizeof(GA_Base_C_获取黑板Vector) == 0x000060, "Wrong size on GA_Base_C_获取黑板Vector");
static_assert(offsetof(GA_Base_C_获取黑板Vector, 角色) == 0x000000, "Member 'GA_Base_C_获取黑板Vector::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板Vector, key) == 0x000008, "Member 'GA_Base_C_获取黑板Vector::key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板Vector, 值) == 0x000018, "Member 'GA_Base_C_获取黑板Vector::值' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板Vector, CallFunc_GetEntityId_self_CastInput) == 0x000030, "Member 'GA_Base_C_获取黑板Vector::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板Vector, CallFunc_GetEntityId_ReturnValue) == 0x000040, "Member 'GA_Base_C_获取黑板Vector::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板Vector, CallFunc_GetVectorValueByEntity_ReturnValue) == 0x000048, "Member 'GA_Base_C_获取黑板Vector::CallFunc_GetVectorValueByEntity_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置黑板Vector
// 0x0048 (0x0048 - 0x0000)
struct GA_Base_C_设置黑板Vector final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FVectorDouble                          值;                                                // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置黑板Vector) == 0x000008, "Wrong alignment on GA_Base_C_设置黑板Vector");
static_assert(sizeof(GA_Base_C_设置黑板Vector) == 0x000048, "Wrong size on GA_Base_C_设置黑板Vector");
static_assert(offsetof(GA_Base_C_设置黑板Vector, 角色) == 0x000000, "Member 'GA_Base_C_设置黑板Vector::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Vector, key) == 0x000008, "Member 'GA_Base_C_设置黑板Vector::key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Vector, 值) == 0x000018, "Member 'GA_Base_C_设置黑板Vector::值' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Vector, CallFunc_GetEntityId_self_CastInput) == 0x000030, "Member 'GA_Base_C_设置黑板Vector::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Vector, CallFunc_GetEntityId_ReturnValue) == 0x000040, "Member 'GA_Base_C_设置黑板Vector::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取当前操作角色Actor
// 0x0020 (0x0020 - 0x0000)
struct GA_Base_C_获取当前操作角色Actor final
{
public:
	class ATsBaseCharacter_C*                     当前角色;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_获取当前操作角色Actor) == 0x000008, "Wrong alignment on GA_Base_C_获取当前操作角色Actor");
static_assert(sizeof(GA_Base_C_获取当前操作角色Actor) == 0x000020, "Wrong size on GA_Base_C_获取当前操作角色Actor");
static_assert(offsetof(GA_Base_C_获取当前操作角色Actor, 当前角色) == 0x000000, "Member 'GA_Base_C_获取当前操作角色Actor::当前角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取当前操作角色Actor, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000008, "Member 'GA_Base_C_获取当前操作角色Actor::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取当前操作角色Actor, K2Node_DynamicCast_AsTs_Base_Character) == 0x000010, "Member 'GA_Base_C_获取当前操作角色Actor::K2Node_DynamicCast_AsTs_Base_Character' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取当前操作角色Actor, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GA_Base_C_获取当前操作角色Actor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取当前GA的技能数据名
// 0x0010 (0x0010 - 0x0000)
struct GA_Base_C_获取当前GA的技能数据名 final
{
public:
	class FString                                 当前技能数据名_0;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取当前GA的技能数据名) == 0x000008, "Wrong alignment on GA_Base_C_获取当前GA的技能数据名");
static_assert(sizeof(GA_Base_C_获取当前GA的技能数据名) == 0x000010, "Wrong size on GA_Base_C_获取当前GA的技能数据名");
static_assert(offsetof(GA_Base_C_获取当前GA的技能数据名, 当前技能数据名_0) == 0x000000, "Member 'GA_Base_C_获取当前GA的技能数据名::当前技能数据名_0' has a wrong offset!");

// Function GA_Base.GA_Base_C.子弹冻结
// 0x0020 (0x0020 - 0x0000)
struct GA_Base_C_子弹冻结 final
{
public:
	class FString                                 子弹Id;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         冻结时间;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_子弹冻结) == 0x000008, "Wrong alignment on GA_Base_C_子弹冻结");
static_assert(sizeof(GA_Base_C_子弹冻结) == 0x000020, "Wrong size on GA_Base_C_子弹冻结");
static_assert(offsetof(GA_Base_C_子弹冻结, 子弹Id) == 0x000000, "Member 'GA_Base_C_子弹冻结::子弹Id' has a wrong offset!");
static_assert(offsetof(GA_Base_C_子弹冻结, 冻结时间) == 0x000010, "Member 'GA_Base_C_子弹冻结::冻结时间' has a wrong offset!");
static_assert(offsetof(GA_Base_C_子弹冻结, CallFunc__________) == 0x000018, "Member 'GA_Base_C_子弹冻结::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置黑板String
// 0x0040 (0x0040 - 0x0000)
struct GA_Base_C_设置黑板String final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 值;                                                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置黑板String) == 0x000008, "Wrong alignment on GA_Base_C_设置黑板String");
static_assert(sizeof(GA_Base_C_设置黑板String) == 0x000040, "Wrong size on GA_Base_C_设置黑板String");
static_assert(offsetof(GA_Base_C_设置黑板String, 角色) == 0x000000, "Member 'GA_Base_C_设置黑板String::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板String, Key) == 0x000008, "Member 'GA_Base_C_设置黑板String::Key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板String, 值) == 0x000018, "Member 'GA_Base_C_设置黑板String::值' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板String, CallFunc_GetEntityId_self_CastInput) == 0x000028, "Member 'GA_Base_C_设置黑板String::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板String, CallFunc_GetEntityId_ReturnValue) == 0x000038, "Member 'GA_Base_C_设置黑板String::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取黑板String
// 0x0050 (0x0050 - 0x0000)
struct GA_Base_C_获取黑板String final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 String;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetStringValueByEntity_ReturnValue;       // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取黑板String) == 0x000008, "Wrong alignment on GA_Base_C_获取黑板String");
static_assert(sizeof(GA_Base_C_获取黑板String) == 0x000050, "Wrong size on GA_Base_C_获取黑板String");
static_assert(offsetof(GA_Base_C_获取黑板String, 角色) == 0x000000, "Member 'GA_Base_C_获取黑板String::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板String, Key) == 0x000008, "Member 'GA_Base_C_获取黑板String::Key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板String, String) == 0x000018, "Member 'GA_Base_C_获取黑板String::String' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板String, CallFunc_GetEntityId_self_CastInput) == 0x000028, "Member 'GA_Base_C_获取黑板String::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板String, CallFunc_GetEntityId_ReturnValue) == 0x000038, "Member 'GA_Base_C_获取黑板String::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取黑板String, CallFunc_GetStringValueByEntity_ReturnValue) == 0x000040, "Member 'GA_Base_C_获取黑板String::CallFunc_GetStringValueByEntity_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取游戏事件管理器
// 0x0020 (0x0020 - 0x0000)
struct GA_Base_C_获取游戏事件管理器 final
{
public:
	class UBP_EventManager_C*                     事件管理器;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetBpEventManager_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_EventManager_C*                     K2Node_DynamicCast_AsBP_Event_Manager;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_获取游戏事件管理器) == 0x000008, "Wrong alignment on GA_Base_C_获取游戏事件管理器");
static_assert(sizeof(GA_Base_C_获取游戏事件管理器) == 0x000020, "Wrong size on GA_Base_C_获取游戏事件管理器");
static_assert(offsetof(GA_Base_C_获取游戏事件管理器, 事件管理器) == 0x000000, "Member 'GA_Base_C_获取游戏事件管理器::事件管理器' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取游戏事件管理器, CallFunc_GetBpEventManager_ReturnValue) == 0x000008, "Member 'GA_Base_C_获取游戏事件管理器::CallFunc_GetBpEventManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取游戏事件管理器, K2Node_DynamicCast_AsBP_Event_Manager) == 0x000010, "Member 'GA_Base_C_获取游戏事件管理器::K2Node_DynamicCast_AsBP_Event_Manager' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取游戏事件管理器, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GA_Base_C_获取游戏事件管理器::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取角色ID
// 0x0030 (0x0030 - 0x0000)
struct GA_Base_C_获取角色ID final
{
public:
	class ATsBaseCharacter_C*                     目标;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoleID;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRoleId_ReturnValue;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取角色ID) == 0x000008, "Wrong alignment on GA_Base_C_获取角色ID");
static_assert(sizeof(GA_Base_C_获取角色ID) == 0x000030, "Wrong size on GA_Base_C_获取角色ID");
static_assert(offsetof(GA_Base_C_获取角色ID, 目标) == 0x000000, "Member 'GA_Base_C_获取角色ID::目标' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取角色ID, RoleID) == 0x000008, "Member 'GA_Base_C_获取角色ID::RoleID' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取角色ID, CallFunc_GetEntityId_self_CastInput) == 0x000010, "Member 'GA_Base_C_获取角色ID::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取角色ID, CallFunc_GetEntityId_ReturnValue) == 0x000020, "Member 'GA_Base_C_获取角色ID::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取角色ID, CallFunc_GetRoleId_ReturnValue) == 0x000024, "Member 'GA_Base_C_获取角色ID::CallFunc_GetRoleId_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取角色ID, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000028, "Member 'GA_Base_C_获取角色ID::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.根据子弹实体ID销毁子弹
// 0x0008 (0x0008 - 0x0000)
struct GA_Base_C_根据子弹实体ID销毁子弹 final
{
public:
	int32                                         子弹ID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isSummonChildBullet;                               // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DestroyBullet_ReturnValue;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_根据子弹实体ID销毁子弹) == 0x000004, "Wrong alignment on GA_Base_C_根据子弹实体ID销毁子弹");
static_assert(sizeof(GA_Base_C_根据子弹实体ID销毁子弹) == 0x000008, "Wrong size on GA_Base_C_根据子弹实体ID销毁子弹");
static_assert(offsetof(GA_Base_C_根据子弹实体ID销毁子弹, 子弹ID) == 0x000000, "Member 'GA_Base_C_根据子弹实体ID销毁子弹::子弹ID' has a wrong offset!");
static_assert(offsetof(GA_Base_C_根据子弹实体ID销毁子弹, isSummonChildBullet) == 0x000004, "Member 'GA_Base_C_根据子弹实体ID销毁子弹::isSummonChildBullet' has a wrong offset!");
static_assert(offsetof(GA_Base_C_根据子弹实体ID销毁子弹, CallFunc_DestroyBullet_ReturnValue) == 0x000005, "Member 'GA_Base_C_根据子弹实体ID销毁子弹::CallFunc_DestroyBullet_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.移除召唤物
// 0x000C (0x000C - 0x0000)
struct GA_Base_C_移除召唤物 final
{
public:
	int32                                         召唤者ID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         移除召唤物ID;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_移除召唤物) == 0x000004, "Wrong alignment on GA_Base_C_移除召唤物");
static_assert(sizeof(GA_Base_C_移除召唤物) == 0x00000C, "Wrong size on GA_Base_C_移除召唤物");
static_assert(offsetof(GA_Base_C_移除召唤物, 召唤者ID) == 0x000000, "Member 'GA_Base_C_移除召唤物::召唤者ID' has a wrong offset!");
static_assert(offsetof(GA_Base_C_移除召唤物, 移除召唤物ID) == 0x000004, "Member 'GA_Base_C_移除召唤物::移除召唤物ID' has a wrong offset!");
static_assert(offsetof(GA_Base_C_移除召唤物, CallFunc_Conv_StringToInt_ReturnValue) == 0x000008, "Member 'GA_Base_C_移除召唤物::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.修改当前技能打断等级
// 0x0020 (0x0020 - 0x0000)
struct GA_Base_C_修改当前技能打断等级 final
{
public:
	float                                         priority;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_____GA______________;                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_修改当前技能打断等级) == 0x000008, "Wrong alignment on GA_Base_C_修改当前技能打断等级");
static_assert(sizeof(GA_Base_C_修改当前技能打断等级) == 0x000020, "Wrong size on GA_Base_C_修改当前技能打断等级");
static_assert(offsetof(GA_Base_C_修改当前技能打断等级, priority) == 0x000000, "Member 'GA_Base_C_修改当前技能打断等级::priority' has a wrong offset!");
static_assert(offsetof(GA_Base_C_修改当前技能打断等级, CallFunc__________) == 0x000008, "Member 'GA_Base_C_修改当前技能打断等级::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_修改当前技能打断等级, CallFunc_____GA______________) == 0x000010, "Member 'GA_Base_C_修改当前技能打断等级::CallFunc_____GA______________' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置接收同打断等级打断
// 0x0010 (0x0010 - 0x0000)
struct GA_Base_C_设置接收同打断等级打断 final
{
public:
	bool                                          skillAcceptInput;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置接收同打断等级打断) == 0x000008, "Wrong alignment on GA_Base_C_设置接收同打断等级打断");
static_assert(sizeof(GA_Base_C_设置接收同打断等级打断) == 0x000010, "Wrong size on GA_Base_C_设置接收同打断等级打断");
static_assert(offsetof(GA_Base_C_设置接收同打断等级打断, skillAcceptInput) == 0x000000, "Member 'GA_Base_C_设置接收同打断等级打断::skillAcceptInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置接收同打断等级打断, CallFunc__________) == 0x000008, "Member 'GA_Base_C_设置接收同打断等级打断::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.通过角度获取目标附近的合法点
// 0x0128 (0x0128 - 0x0000)
struct GA_Base_C_通过角度获取目标附近的合法点 final
{
public:
	class AActor*                                 目标Actor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         旋转;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         仰角;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         长度;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          合法点;                                            // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          碰撞挤压;                                          // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                碰撞中途点B;                                       // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                碰撞中途点A;                                       // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         目标半径;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         目标半高;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         施法者胶囊体半径;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         施法者胶囊体半高;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     施法者;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                目标方向;                                          // 0x0068(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          参考终点;                                          // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          目标原点;                                          // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc___Actor_________;                         // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue;        // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue_1;     // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_________________;                         // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_D_Vector_Distance2D_ReturnValue;          // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_DoubleToFloat_ReturnValue;           // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_通过角度获取目标附近的合法点) == 0x000008, "Wrong alignment on GA_Base_C_通过角度获取目标附近的合法点");
static_assert(sizeof(GA_Base_C_通过角度获取目标附近的合法点) == 0x000128, "Wrong size on GA_Base_C_通过角度获取目标附近的合法点");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 目标Actor) == 0x000000, "Member 'GA_Base_C_通过角度获取目标附近的合法点::目标Actor' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 旋转) == 0x000008, "Member 'GA_Base_C_通过角度获取目标附近的合法点::旋转' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 仰角) == 0x00000C, "Member 'GA_Base_C_通过角度获取目标附近的合法点::仰角' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 长度) == 0x000010, "Member 'GA_Base_C_通过角度获取目标附近的合法点::长度' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 合法点) == 0x000018, "Member 'GA_Base_C_通过角度获取目标附近的合法点::合法点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 碰撞挤压) == 0x000030, "Member 'GA_Base_C_通过角度获取目标附近的合法点::碰撞挤压' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 碰撞中途点B) == 0x000034, "Member 'GA_Base_C_通过角度获取目标附近的合法点::碰撞中途点B' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 碰撞中途点A) == 0x000040, "Member 'GA_Base_C_通过角度获取目标附近的合法点::碰撞中途点A' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 目标半径) == 0x00004C, "Member 'GA_Base_C_通过角度获取目标附近的合法点::目标半径' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 目标半高) == 0x000050, "Member 'GA_Base_C_通过角度获取目标附近的合法点::目标半高' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 施法者胶囊体半径) == 0x000054, "Member 'GA_Base_C_通过角度获取目标附近的合法点::施法者胶囊体半径' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 施法者胶囊体半高) == 0x000058, "Member 'GA_Base_C_通过角度获取目标附近的合法点::施法者胶囊体半高' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 施法者) == 0x000060, "Member 'GA_Base_C_通过角度获取目标附近的合法点::施法者' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 目标方向) == 0x000068, "Member 'GA_Base_C_通过角度获取目标附近的合法点::目标方向' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 参考终点) == 0x000078, "Member 'GA_Base_C_通过角度获取目标附近的合法点::参考终点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, 目标原点) == 0x000090, "Member 'GA_Base_C_通过角度获取目标附近的合法点::目标原点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, CallFunc___Actor_________) == 0x0000A8, "Member 'GA_Base_C_通过角度获取目标附近的合法点::CallFunc___Actor_________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0000C0, "Member 'GA_Base_C_通过角度获取目标附近的合法点::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x0000C4, "Member 'GA_Base_C_通过角度获取目标附近的合法点::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, CallFunc_D_K2_GetActorLocation_ReturnValue) == 0x0000C8, "Member 'GA_Base_C_通过角度获取目标附近的合法点::CallFunc_D_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, K2Node_DynamicCast_AsTs_Base_Character) == 0x0000E0, "Member 'GA_Base_C_通过角度获取目标附近的合法点::K2Node_DynamicCast_AsTs_Base_Character' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'GA_Base_C_通过角度获取目标附近的合法点::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, CallFunc_GetScaledCapsuleRadius_ReturnValue_1) == 0x0000EC, "Member 'GA_Base_C_通过角度获取目标附近的合法点::CallFunc_GetScaledCapsuleRadius_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x0000F0, "Member 'GA_Base_C_通过角度获取目标附近的合法点::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000F4, "Member 'GA_Base_C_通过角度获取目标附近的合法点::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, CallFunc__________) == 0x0000F8, "Member 'GA_Base_C_通过角度获取目标附近的合法点::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, CallFunc_________________) == 0x000100, "Member 'GA_Base_C_通过角度获取目标附近的合法点::CallFunc_________________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, CallFunc_D_Vector_Distance2D_ReturnValue) == 0x000118, "Member 'GA_Base_C_通过角度获取目标附近的合法点::CallFunc_D_Vector_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, CallFunc_Conv_DoubleToFloat_ReturnValue) == 0x000120, "Member 'GA_Base_C_通过角度获取目标附近的合法点::CallFunc_Conv_DoubleToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_通过角度获取目标附近的合法点, CallFunc_Less_FloatFloat_ReturnValue) == 0x000124, "Member 'GA_Base_C_通过角度获取目标附近的合法点::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取目标到终点的合法点
// 0x00E0 (0x00E0 - 0x0000)
struct GA_Base_C_获取目标到终点的合法点 final
{
public:
	class ATsBaseCharacter_C*                     目标Actor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          终点;                                              // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          合法点;                                            // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          碰撞挤压;                                          // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                碰撞中途点B;                                       // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                碰撞中途点A;                                       // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         目标半径;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         目标半高;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         施法者胶囊体半径;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         施法者胶囊体半高;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          起点;                                              // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue;        // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_________________;                         // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_D_Vector_Distance2D_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_DoubleToFloat_ReturnValue;           // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue_1;     // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取目标到终点的合法点) == 0x000008, "Wrong alignment on GA_Base_C_获取目标到终点的合法点");
static_assert(sizeof(GA_Base_C_获取目标到终点的合法点) == 0x0000E0, "Wrong size on GA_Base_C_获取目标到终点的合法点");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, 目标Actor) == 0x000000, "Member 'GA_Base_C_获取目标到终点的合法点::目标Actor' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, 终点) == 0x000008, "Member 'GA_Base_C_获取目标到终点的合法点::终点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, 合法点) == 0x000020, "Member 'GA_Base_C_获取目标到终点的合法点::合法点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, 碰撞挤压) == 0x000038, "Member 'GA_Base_C_获取目标到终点的合法点::碰撞挤压' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, 碰撞中途点B) == 0x00003C, "Member 'GA_Base_C_获取目标到终点的合法点::碰撞中途点B' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, 碰撞中途点A) == 0x000048, "Member 'GA_Base_C_获取目标到终点的合法点::碰撞中途点A' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, 目标半径) == 0x000054, "Member 'GA_Base_C_获取目标到终点的合法点::目标半径' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, 目标半高) == 0x000058, "Member 'GA_Base_C_获取目标到终点的合法点::目标半高' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, 施法者胶囊体半径) == 0x00005C, "Member 'GA_Base_C_获取目标到终点的合法点::施法者胶囊体半径' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, 施法者胶囊体半高) == 0x000060, "Member 'GA_Base_C_获取目标到终点的合法点::施法者胶囊体半高' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, 起点) == 0x000068, "Member 'GA_Base_C_获取目标到终点的合法点::起点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, CallFunc_D_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'GA_Base_C_获取目标到终点的合法点::CallFunc_D_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, CallFunc_Add_FloatFloat_ReturnValue) == 0x000098, "Member 'GA_Base_C_获取目标到终点的合法点::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, CallFunc_________________) == 0x0000A0, "Member 'GA_Base_C_获取目标到终点的合法点::CallFunc_________________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, CallFunc_D_Vector_Distance2D_ReturnValue) == 0x0000B8, "Member 'GA_Base_C_获取目标到终点的合法点::CallFunc_D_Vector_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x0000C0, "Member 'GA_Base_C_获取目标到终点的合法点::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, CallFunc_Conv_DoubleToFloat_ReturnValue) == 0x0000C4, "Member 'GA_Base_C_获取目标到终点的合法点::CallFunc_Conv_DoubleToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000C8, "Member 'GA_Base_C_获取目标到终点的合法点::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0000CC, "Member 'GA_Base_C_获取目标到终点的合法点::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, CallFunc__________) == 0x0000D0, "Member 'GA_Base_C_获取目标到终点的合法点::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, CallFunc_GetScaledCapsuleRadius_ReturnValue_1) == 0x0000D8, "Member 'GA_Base_C_获取目标到终点的合法点::CallFunc_GetScaledCapsuleRadius_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标到终点的合法点, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x0000DC, "Member 'GA_Base_C_获取目标到终点的合法点::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取目标正后方的合法点
// 0x0178 (0x0178 - 0x0000)
struct GA_Base_C_获取目标正后方的合法点 final
{
public:
	class AActor*                                 目标Actor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         向后距离;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          合法点;                                            // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          碰撞挤压;                                          // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               DebugLine;                                         // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                碰撞中途点B;                                       // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                碰撞中途点A;                                       // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         目标半径;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         目标半高;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         施法者胶囊体半径;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         施法者胶囊体半高;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     施法者;                                            // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          背后终点;                                          // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          目标原点;                                          // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          背后方向;                                          // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_FloatToDouble_ReturnValue;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_GetActorForwardVector_ReturnValue;      // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Multiply_VectorFloat_ReturnValue;       // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Multiply_VectorFloat_ReturnValue_1;     // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue;        // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Add_VectorVector_ReturnValue;           // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character;            // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue_1;     // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_________________;                         // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_D_Vector_Distance2D_ReturnValue;          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_DoubleToFloat_ReturnValue;           // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_获取目标正后方的合法点) == 0x000008, "Wrong alignment on GA_Base_C_获取目标正后方的合法点");
static_assert(sizeof(GA_Base_C_获取目标正后方的合法点) == 0x000178, "Wrong size on GA_Base_C_获取目标正后方的合法点");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 目标Actor) == 0x000000, "Member 'GA_Base_C_获取目标正后方的合法点::目标Actor' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 向后距离) == 0x000008, "Member 'GA_Base_C_获取目标正后方的合法点::向后距离' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 合法点) == 0x000010, "Member 'GA_Base_C_获取目标正后方的合法点::合法点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 碰撞挤压) == 0x000028, "Member 'GA_Base_C_获取目标正后方的合法点::碰撞挤压' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, DebugLine) == 0x000029, "Member 'GA_Base_C_获取目标正后方的合法点::DebugLine' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 碰撞中途点B) == 0x00002C, "Member 'GA_Base_C_获取目标正后方的合法点::碰撞中途点B' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 碰撞中途点A) == 0x000038, "Member 'GA_Base_C_获取目标正后方的合法点::碰撞中途点A' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 目标半径) == 0x000044, "Member 'GA_Base_C_获取目标正后方的合法点::目标半径' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 目标半高) == 0x000048, "Member 'GA_Base_C_获取目标正后方的合法点::目标半高' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 施法者胶囊体半径) == 0x00004C, "Member 'GA_Base_C_获取目标正后方的合法点::施法者胶囊体半径' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 施法者胶囊体半高) == 0x000050, "Member 'GA_Base_C_获取目标正后方的合法点::施法者胶囊体半高' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 施法者) == 0x000058, "Member 'GA_Base_C_获取目标正后方的合法点::施法者' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 背后终点) == 0x000060, "Member 'GA_Base_C_获取目标正后方的合法点::背后终点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 目标原点) == 0x000078, "Member 'GA_Base_C_获取目标正后方的合法点::目标原点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, 背后方向) == 0x000090, "Member 'GA_Base_C_获取目标正后方的合法点::背后方向' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_Conv_FloatToDouble_ReturnValue) == 0x0000A8, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_Conv_FloatToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_D_GetActorForwardVector_ReturnValue) == 0x0000B0, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_D_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_D_Multiply_VectorFloat_ReturnValue) == 0x0000C8, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_D_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_D_Multiply_VectorFloat_ReturnValue_1) == 0x0000E0, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_D_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_D_K2_GetActorLocation_ReturnValue) == 0x0000F8, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_D_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_D_Add_VectorVector_ReturnValue) == 0x000110, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_D_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000128, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x00012C, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, K2Node_DynamicCast_AsTs_Base_Character) == 0x000130, "Member 'GA_Base_C_获取目标正后方的合法点::K2Node_DynamicCast_AsTs_Base_Character' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, K2Node_DynamicCast_bSuccess) == 0x000138, "Member 'GA_Base_C_获取目标正后方的合法点::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x00013C, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_GetScaledCapsuleRadius_ReturnValue_1) == 0x000140, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_GetScaledCapsuleRadius_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_Add_FloatFloat_ReturnValue) == 0x000144, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc__________) == 0x000148, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_________________) == 0x000150, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_________________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_D_Vector_Distance2D_ReturnValue) == 0x000168, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_D_Vector_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_Conv_DoubleToFloat_ReturnValue) == 0x000170, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_Conv_DoubleToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取目标正后方的合法点, CallFunc_Less_FloatFloat_ReturnValue) == 0x000174, "Member 'GA_Base_C_获取目标正后方的合法点::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.对圆柱体类型的合法点检测
// 0x0708 (0x0708 - 0x0000)
struct GA_Base_C_对圆柱体类型的合法点检测 final
{
public:
	float                                         施法者半高;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         施法者半径;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         目标半高;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         目标半径;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          起点;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          终点;                                              // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          合法点;                                            // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DebugLine;                                         // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          碰撞中途点B;                                       // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          碰撞中途点A;                                       // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         目标对象半径;                                      // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         目标对象半高;                                      // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         施法者胶囊体半径;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         施法者胶囊体半高;                                  // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          目标终点;                                          // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          目标原点;                                          // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          目标方向;                                          // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ___object_Variable;                                // 0x00E8(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         ___object_Variable_1;                              // 0x00F8(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         ___object_Variable_2;                              // 0x0108(0x0010)(ConstParm, ReferenceParm)
	struct FVectorDouble                          CallFunc_D_Subtract_VectorVector_ReturnValue;      // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Normal_ReturnValue;                     // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_FloatToDouble_ReturnValue;           // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Multiply_VectorFloat_ReturnValue;       // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_D_Add_VectorVector_ReturnValue;           // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_FloatToDouble_ReturnValue_1;         // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVectorDouble_X;                      // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVectorDouble_Y;                      // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVectorDouble_Z;                      // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_D_Add_FloatFloat_ReturnValue;             // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_FloatToDouble_ReturnValue_2;         // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_MakeVectorDouble_ReturnValue;             // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Multiply_VectorFloat_ReturnValue_1;     // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_FloatToDouble_ReturnValue_3;         // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_MakeVectorDouble_ReturnValue_1;           // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_D_Subtract_VectorVector_ReturnValue_1;    // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_FloatToDouble_ReturnValue_4;         // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Add_VectorVector_ReturnValue_1;         // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVectorDouble_X_1;                    // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVectorDouble_Y_1;                    // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVectorDouble_Z_1;                    // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0278(0x0010)(ConstParm, ReferenceParm)
	double                                        CallFunc_D_Add_FloatFloat_ReturnValue_1;           // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_D_LineTraceSingleForObjects_OutHit;       // 0x0290(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_D_LineTraceSingleForObjects_ReturnValue;  // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_MakeVectorDouble_ReturnValue_2;           // 0x0328(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_342[0x2];                                      // 0x0342(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x034C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0358(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0390(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0398(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x03AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x03B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x03C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_Conv_VectorToVectorDouble_ReturnValue;    // 0x03E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x03F8(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_D_LineTraceSingleForObjects_OutHit_1;     // 0x040C(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_D_LineTraceSingleForObjects_ReturnValue_1; // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A1[0x3];                                      // 0x04A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_FloatToDouble_ReturnValue_5;         // 0x04A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x04B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B2[0x2];                                      // 0x04B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x04BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x04C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x04D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x04E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0500(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0508(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x051C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0528(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_534[0x4];                                      // 0x0534(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_MakeVectorDouble_ReturnValue_3;           // 0x0538(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0550(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_D_Subtract_VectorVector_ReturnValue_2;    // 0x0560(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_Conv_VectorToVectorDouble_ReturnValue_1;  // 0x0578(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_FloatToDouble_ReturnValue_6;         // 0x0590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Multiply_VectorFloat_ReturnValue_2;     // 0x0598(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_2;                          // 0x05B0(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_D_LineTraceSingleForObjects_OutHit_2;     // 0x05C0(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_D_LineTraceSingleForObjects_ReturnValue_2; // 0x0654(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_2;            // 0x0655(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_2;         // 0x0656(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_657[0x1];                                      // 0x0657(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_2;                    // 0x0658(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_2;                // 0x065C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_2;                // 0x0660(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_2;             // 0x066C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_2;                  // 0x0678(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_2;            // 0x0684(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_2;                 // 0x0690(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_2;                // 0x0698(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_2;            // 0x06A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_2;             // 0x06A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_2;                 // 0x06B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_2;               // 0x06B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_2;              // 0x06BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_2;                // 0x06C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D4[0x4];                                      // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_Conv_VectorToVectorDouble_ReturnValue_2;  // 0x06D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Subtract_VectorVector_ReturnValue_3;    // 0x06F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_对圆柱体类型的合法点检测) == 0x000008, "Wrong alignment on GA_Base_C_对圆柱体类型的合法点检测");
static_assert(sizeof(GA_Base_C_对圆柱体类型的合法点检测) == 0x000708, "Wrong size on GA_Base_C_对圆柱体类型的合法点检测");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 施法者半高) == 0x000000, "Member 'GA_Base_C_对圆柱体类型的合法点检测::施法者半高' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 施法者半径) == 0x000004, "Member 'GA_Base_C_对圆柱体类型的合法点检测::施法者半径' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 目标半高) == 0x000008, "Member 'GA_Base_C_对圆柱体类型的合法点检测::目标半高' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 目标半径) == 0x00000C, "Member 'GA_Base_C_对圆柱体类型的合法点检测::目标半径' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 起点) == 0x000010, "Member 'GA_Base_C_对圆柱体类型的合法点检测::起点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 终点) == 0x000028, "Member 'GA_Base_C_对圆柱体类型的合法点检测::终点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 合法点) == 0x000040, "Member 'GA_Base_C_对圆柱体类型的合法点检测::合法点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, DebugLine) == 0x000058, "Member 'GA_Base_C_对圆柱体类型的合法点检测::DebugLine' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 碰撞中途点B) == 0x000060, "Member 'GA_Base_C_对圆柱体类型的合法点检测::碰撞中途点B' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 碰撞中途点A) == 0x000078, "Member 'GA_Base_C_对圆柱体类型的合法点检测::碰撞中途点A' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 目标对象半径) == 0x000090, "Member 'GA_Base_C_对圆柱体类型的合法点检测::目标对象半径' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 目标对象半高) == 0x000094, "Member 'GA_Base_C_对圆柱体类型的合法点检测::目标对象半高' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 施法者胶囊体半径) == 0x000098, "Member 'GA_Base_C_对圆柱体类型的合法点检测::施法者胶囊体半径' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 施法者胶囊体半高) == 0x00009C, "Member 'GA_Base_C_对圆柱体类型的合法点检测::施法者胶囊体半高' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 目标终点) == 0x0000A0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::目标终点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 目标原点) == 0x0000B8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::目标原点' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, 目标方向) == 0x0000D0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::目标方向' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, ___object_Variable) == 0x0000E8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::___object_Variable' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, ___object_Variable_1) == 0x0000F8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::___object_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, ___object_Variable_2) == 0x000108, "Member 'GA_Base_C_对圆柱体类型的合法点检测::___object_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_Subtract_VectorVector_ReturnValue) == 0x000118, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_Normal_ReturnValue) == 0x000130, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Conv_FloatToDouble_ReturnValue) == 0x000148, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Conv_FloatToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_Multiply_VectorFloat_ReturnValue) == 0x000150, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000168, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_Add_VectorVector_ReturnValue) == 0x000170, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Conv_FloatToDouble_ReturnValue_1) == 0x000188, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Conv_FloatToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakVectorDouble_X) == 0x000190, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakVectorDouble_X' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakVectorDouble_Y) == 0x000198, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakVectorDouble_Y' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakVectorDouble_Z) == 0x0001A0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakVectorDouble_Z' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_Add_FloatFloat_ReturnValue) == 0x0001A8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Conv_FloatToDouble_ReturnValue_2) == 0x0001B0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Conv_FloatToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_MakeVectorDouble_ReturnValue) == 0x0001B8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_MakeVectorDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_Multiply_VectorFloat_ReturnValue_1) == 0x0001D0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001E8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001EC, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_MakeVector_ReturnValue) == 0x0001F0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001FC, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Conv_FloatToDouble_ReturnValue_3) == 0x000200, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Conv_FloatToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_MakeVectorDouble_ReturnValue_1) == 0x000208, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_MakeVectorDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000220, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_Subtract_VectorVector_ReturnValue_1) == 0x000228, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Conv_FloatToDouble_ReturnValue_4) == 0x000240, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Conv_FloatToDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_Add_VectorVector_ReturnValue_1) == 0x000248, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakVectorDouble_X_1) == 0x000260, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakVectorDouble_X_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakVectorDouble_Y_1) == 0x000268, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakVectorDouble_Y_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakVectorDouble_Z_1) == 0x000270, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakVectorDouble_Z_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, K2Node_MakeArray_Array) == 0x000278, "Member 'GA_Base_C_对圆柱体类型的合法点检测::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_Add_FloatFloat_ReturnValue_1) == 0x000288, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_LineTraceSingleForObjects_OutHit) == 0x000290, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_LineTraceSingleForObjects_ReturnValue) == 0x000324, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_MakeVectorDouble_ReturnValue_2) == 0x000328, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_MakeVectorDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_bBlockingHit) == 0x000340, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_bInitialOverlap) == 0x000341, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_Time) == 0x000344, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_Distance) == 0x000348, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_Location) == 0x00034C, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_ImpactPoint) == 0x000358, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_Normal) == 0x000364, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_ImpactNormal) == 0x000370, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_PhysMat) == 0x000380, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_HitActor) == 0x000388, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_HitComponent) == 0x000390, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_HitBoneName) == 0x000398, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_HitItem) == 0x0003A4, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_FaceIndex) == 0x0003A8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_TraceStart) == 0x0003AC, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_TraceEnd) == 0x0003B8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Add_VectorVector_ReturnValue) == 0x0003C4, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_MakeVector_ReturnValue_1) == 0x0003D0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Conv_VectorToVectorDouble_ReturnValue) == 0x0003E0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Conv_VectorToVectorDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, K2Node_MakeArray_Array_1) == 0x0003F8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000408, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_LineTraceSingleForObjects_OutHit_1) == 0x00040C, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_LineTraceSingleForObjects_OutHit_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_LineTraceSingleForObjects_ReturnValue_1) == 0x0004A0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_LineTraceSingleForObjects_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0004A4, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Conv_FloatToDouble_ReturnValue_5) == 0x0004A8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Conv_FloatToDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0004B0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0004B1, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_Time_1) == 0x0004B4, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_Distance_1) == 0x0004B8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_Location_1) == 0x0004BC, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0004C8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_Normal_1) == 0x0004D4, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0004E0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_PhysMat_1) == 0x0004F0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_HitActor_1) == 0x0004F8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_HitComponent_1) == 0x000500, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_HitBoneName_1) == 0x000508, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_HitItem_1) == 0x000514, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_FaceIndex_1) == 0x000518, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_TraceStart_1) == 0x00051C, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_TraceEnd_1) == 0x000528, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_MakeVectorDouble_ReturnValue_3) == 0x000538, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_MakeVectorDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000550, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_Subtract_VectorVector_ReturnValue_2) == 0x000560, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Conv_VectorToVectorDouble_ReturnValue_1) == 0x000578, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Conv_VectorToVectorDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Conv_FloatToDouble_ReturnValue_6) == 0x000590, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Conv_FloatToDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_Multiply_VectorFloat_ReturnValue_2) == 0x000598, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, K2Node_MakeArray_Array_2) == 0x0005B0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_LineTraceSingleForObjects_OutHit_2) == 0x0005C0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_LineTraceSingleForObjects_OutHit_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_LineTraceSingleForObjects_ReturnValue_2) == 0x000654, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_LineTraceSingleForObjects_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_bBlockingHit_2) == 0x000655, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_bBlockingHit_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_bInitialOverlap_2) == 0x000656, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_bInitialOverlap_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_Time_2) == 0x000658, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_Time_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_Distance_2) == 0x00065C, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_Distance_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_Location_2) == 0x000660, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_Location_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_ImpactPoint_2) == 0x00066C, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_ImpactPoint_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_Normal_2) == 0x000678, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_Normal_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_ImpactNormal_2) == 0x000684, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_ImpactNormal_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_PhysMat_2) == 0x000690, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_PhysMat_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_HitActor_2) == 0x000698, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_HitActor_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_HitComponent_2) == 0x0006A0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_HitComponent_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_HitBoneName_2) == 0x0006A8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_HitBoneName_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_HitItem_2) == 0x0006B4, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_HitItem_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_FaceIndex_2) == 0x0006B8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_FaceIndex_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_TraceStart_2) == 0x0006BC, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_TraceStart_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_BreakHitResult_TraceEnd_2) == 0x0006C8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_BreakHitResult_TraceEnd_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_Conv_VectorToVectorDouble_ReturnValue_2) == 0x0006D8, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_Conv_VectorToVectorDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_对圆柱体类型的合法点检测, CallFunc_D_Subtract_VectorVector_ReturnValue_3) == 0x0006F0, "Member 'GA_Base_C_对圆柱体类型的合法点检测::CallFunc_D_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");

// Function GA_Base.GA_Base_C.进入瞄准模式
// 0x0010 (0x0010 - 0x0000)
struct GA_Base_C_进入瞄准模式 final
{
public:
	bool                                          瞄准键进入;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EAimViewState                                 瞄准镜头类型;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          isWalk;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_进入瞄准模式) == 0x000008, "Wrong alignment on GA_Base_C_进入瞄准模式");
static_assert(sizeof(GA_Base_C_进入瞄准模式) == 0x000010, "Wrong size on GA_Base_C_进入瞄准模式");
static_assert(offsetof(GA_Base_C_进入瞄准模式, 瞄准键进入) == 0x000000, "Member 'GA_Base_C_进入瞄准模式::瞄准键进入' has a wrong offset!");
static_assert(offsetof(GA_Base_C_进入瞄准模式, 瞄准镜头类型) == 0x000001, "Member 'GA_Base_C_进入瞄准模式::瞄准镜头类型' has a wrong offset!");
static_assert(offsetof(GA_Base_C_进入瞄准模式, isWalk) == 0x000002, "Member 'GA_Base_C_进入瞄准模式::isWalk' has a wrong offset!");
static_assert(offsetof(GA_Base_C_进入瞄准模式, CallFunc__________) == 0x000008, "Member 'GA_Base_C_进入瞄准模式::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.退出瞄准模式
// 0x0008 (0x0008 - 0x0000)
struct GA_Base_C_退出瞄准模式 final
{
public:
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_退出瞄准模式) == 0x000008, "Wrong alignment on GA_Base_C_退出瞄准模式");
static_assert(sizeof(GA_Base_C_退出瞄准模式) == 0x000008, "Wrong size on GA_Base_C_退出瞄准模式");
static_assert(offsetof(GA_Base_C_退出瞄准模式, CallFunc__________) == 0x000000, "Member 'GA_Base_C_退出瞄准模式::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置黑板Rotator
// 0x0040 (0x0040 - 0x0000)
struct GA_Base_C_设置黑板Rotator final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FRotator                               值;                                                // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置黑板Rotator) == 0x000008, "Wrong alignment on GA_Base_C_设置黑板Rotator");
static_assert(sizeof(GA_Base_C_设置黑板Rotator) == 0x000040, "Wrong size on GA_Base_C_设置黑板Rotator");
static_assert(offsetof(GA_Base_C_设置黑板Rotator, 角色) == 0x000000, "Member 'GA_Base_C_设置黑板Rotator::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Rotator, key) == 0x000008, "Member 'GA_Base_C_设置黑板Rotator::key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Rotator, 值) == 0x000018, "Member 'GA_Base_C_设置黑板Rotator::值' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Rotator, CallFunc_GetEntityId_self_CastInput) == 0x000028, "Member 'GA_Base_C_设置黑板Rotator::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置黑板Rotator, CallFunc_GetEntityId_ReturnValue) == 0x000038, "Member 'GA_Base_C_设置黑板Rotator::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.修改材质效果
// 0x0038 (0x0038 - 0x0000)
struct GA_Base_C_修改材质效果 final
{
public:
	TScriptInterface<class IBPI_CreatureInterface_C> Entity;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          IsGroup;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                材质效果;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_修改材质效果) == 0x000008, "Wrong alignment on GA_Base_C_修改材质效果");
static_assert(sizeof(GA_Base_C_修改材质效果) == 0x000038, "Wrong size on GA_Base_C_修改材质效果");
static_assert(offsetof(GA_Base_C_修改材质效果, Entity) == 0x000000, "Member 'GA_Base_C_修改材质效果::Entity' has a wrong offset!");
static_assert(offsetof(GA_Base_C_修改材质效果, IsGroup) == 0x000010, "Member 'GA_Base_C_修改材质效果::IsGroup' has a wrong offset!");
static_assert(offsetof(GA_Base_C_修改材质效果, 材质效果) == 0x000018, "Member 'GA_Base_C_修改材质效果::材质效果' has a wrong offset!");
static_assert(offsetof(GA_Base_C_修改材质效果, CallFunc_GetEntityId_ReturnValue) == 0x000020, "Member 'GA_Base_C_修改材质效果::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_修改材质效果, CallFunc_GetPathName_ReturnValue) == 0x000028, "Member 'GA_Base_C_修改材质效果::CallFunc_GetPathName_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置子弹目标
// 0x0038 (0x0038 - 0x0000)
struct GA_Base_C_设置子弹目标 final
{
public:
	class ATsBaseCharacter_C*                     Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         TargetId;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CreatureInterface_C> CallFunc_GetEntityId_self_CastInput;            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetEntityId_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置子弹目标) == 0x000008, "Wrong alignment on GA_Base_C_设置子弹目标");
static_assert(sizeof(GA_Base_C_设置子弹目标) == 0x000038, "Wrong size on GA_Base_C_设置子弹目标");
static_assert(offsetof(GA_Base_C_设置子弹目标, Attacker) == 0x000000, "Member 'GA_Base_C_设置子弹目标::Attacker' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置子弹目标, Key) == 0x000008, "Member 'GA_Base_C_设置子弹目标::Key' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置子弹目标, TargetId) == 0x000018, "Member 'GA_Base_C_设置子弹目标::TargetId' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置子弹目标, CallFunc_GetEntityId_self_CastInput) == 0x000020, "Member 'GA_Base_C_设置子弹目标::CallFunc_GetEntityId_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置子弹目标, CallFunc_GetEntityId_ReturnValue) == 0x000030, "Member 'GA_Base_C_设置子弹目标::CallFunc_GetEntityId_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.给对象添加标签
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_给对象添加标签 final
{
public:
	class ATsBaseCharacter_C*                     Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           tag;                                               // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_给对象添加标签) == 0x000008, "Wrong alignment on GA_Base_C_给对象添加标签");
static_assert(sizeof(GA_Base_C_给对象添加标签) == 0x000018, "Wrong size on GA_Base_C_给对象添加标签");
static_assert(offsetof(GA_Base_C_给对象添加标签, Target) == 0x000000, "Member 'GA_Base_C_给对象添加标签::Target' has a wrong offset!");
static_assert(offsetof(GA_Base_C_给对象添加标签, tag) == 0x000008, "Member 'GA_Base_C_给对象添加标签::tag' has a wrong offset!");

// Function GA_Base.GA_Base_C.给对象移除标签
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_给对象移除标签 final
{
public:
	class ATsBaseCharacter_C*                     Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           tag;                                               // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_给对象移除标签) == 0x000008, "Wrong alignment on GA_Base_C_给对象移除标签");
static_assert(sizeof(GA_Base_C_给对象移除标签) == 0x000018, "Wrong size on GA_Base_C_给对象移除标签");
static_assert(offsetof(GA_Base_C_给对象移除标签, Target) == 0x000000, "Member 'GA_Base_C_给对象移除标签::Target' has a wrong offset!");
static_assert(offsetof(GA_Base_C_给对象移除标签, tag) == 0x000008, "Member 'GA_Base_C_给对象移除标签::tag' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置角色Pawn通道碰撞响应
// 0x0010 (0x0010 - 0x0000)
struct GA_Base_C_设置角色Pawn通道碰撞响应 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPawnChannel                                  pawnChannel;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            newResponse;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置角色Pawn通道碰撞响应) == 0x000008, "Wrong alignment on GA_Base_C_设置角色Pawn通道碰撞响应");
static_assert(sizeof(GA_Base_C_设置角色Pawn通道碰撞响应) == 0x000010, "Wrong size on GA_Base_C_设置角色Pawn通道碰撞响应");
static_assert(offsetof(GA_Base_C_设置角色Pawn通道碰撞响应, 角色) == 0x000000, "Member 'GA_Base_C_设置角色Pawn通道碰撞响应::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色Pawn通道碰撞响应, pawnChannel) == 0x000008, "Member 'GA_Base_C_设置角色Pawn通道碰撞响应::pawnChannel' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色Pawn通道碰撞响应, newResponse) == 0x000009, "Member 'GA_Base_C_设置角色Pawn通道碰撞响应::newResponse' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置角色位置
// 0x0078 (0x0078 - 0x0000)
struct GA_Base_C_设置角色位置 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          sweep;                                             // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          teleport;                                          // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 context;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          CallFunc_D_K2_GetActorLocation_ReturnValue;        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_D_Subtract_VectorVector_ReturnValue;      // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetActorLocationWithContext_ReturnValue;  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_设置角色位置) == 0x000008, "Wrong alignment on GA_Base_C_设置角色位置");
static_assert(sizeof(GA_Base_C_设置角色位置) == 0x000078, "Wrong size on GA_Base_C_设置角色位置");
static_assert(offsetof(GA_Base_C_设置角色位置, 角色) == 0x000000, "Member 'GA_Base_C_设置角色位置::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置, location) == 0x000008, "Member 'GA_Base_C_设置角色位置::location' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置, sweep) == 0x000020, "Member 'GA_Base_C_设置角色位置::sweep' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置, teleport) == 0x000021, "Member 'GA_Base_C_设置角色位置::teleport' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置, context) == 0x000028, "Member 'GA_Base_C_设置角色位置::context' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置, ReturnValue) == 0x000038, "Member 'GA_Base_C_设置角色位置::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'GA_Base_C_设置角色位置::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置, CallFunc_D_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'GA_Base_C_设置角色位置::CallFunc_D_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置, CallFunc_D_Subtract_VectorVector_ReturnValue) == 0x000058, "Member 'GA_Base_C_设置角色位置::CallFunc_D_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置, CallFunc_SetActorLocationWithContext_ReturnValue) == 0x000070, "Member 'GA_Base_C_设置角色位置::CallFunc_SetActorLocationWithContext_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置角色旋转
// 0x0030 (0x0030 - 0x0000)
struct GA_Base_C_设置角色旋转 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               rotation;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          sweep;                                             // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 context;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetActorRotationWithContext_ReturnValue;  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_设置角色旋转) == 0x000008, "Wrong alignment on GA_Base_C_设置角色旋转");
static_assert(sizeof(GA_Base_C_设置角色旋转) == 0x000030, "Wrong size on GA_Base_C_设置角色旋转");
static_assert(offsetof(GA_Base_C_设置角色旋转, 角色) == 0x000000, "Member 'GA_Base_C_设置角色旋转::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色旋转, rotation) == 0x000008, "Member 'GA_Base_C_设置角色旋转::rotation' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色旋转, sweep) == 0x000014, "Member 'GA_Base_C_设置角色旋转::sweep' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色旋转, context) == 0x000018, "Member 'GA_Base_C_设置角色旋转::context' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色旋转, ReturnValue) == 0x000028, "Member 'GA_Base_C_设置角色旋转::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色旋转, CallFunc_SetActorRotationWithContext_ReturnValue) == 0x000029, "Member 'GA_Base_C_设置角色旋转::CallFunc_SetActorRotationWithContext_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置角色变换
// 0x0220 (0x0220 - 0x0000)
struct GA_Base_C_设置角色变换 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransformDouble                       Transform;                                         // 0x0010(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          sweep;                                             // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 context;                                           // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FVectorDouble                          CallFunc_BreakTransformDouble_Location;            // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransformDouble_Rotation;            // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransformDouble_Scale;               // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00B0(0x0018)()
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_1;    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00D0(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0128(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0140(0x0040)(HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue_1;              // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_2;          // 0x0198(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x01B0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01F0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0200(0x0018)()
};
static_assert(alignof(GA_Base_C_设置角色变换) == 0x000010, "Wrong alignment on GA_Base_C_设置角色变换");
static_assert(sizeof(GA_Base_C_设置角色变换) == 0x000220, "Wrong size on GA_Base_C_设置角色变换");
static_assert(offsetof(GA_Base_C_设置角色变换, 角色) == 0x000000, "Member 'GA_Base_C_设置角色变换::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, Transform) == 0x000010, "Member 'GA_Base_C_设置角色变换::Transform' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, sweep) == 0x000050, "Member 'GA_Base_C_设置角色变换::sweep' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, context) == 0x000058, "Member 'GA_Base_C_设置角色变换::context' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_BreakTransformDouble_Location) == 0x000068, "Member 'GA_Base_C_设置角色变换::CallFunc_BreakTransformDouble_Location' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_BreakTransformDouble_Rotation) == 0x000080, "Member 'GA_Base_C_设置角色变换::CallFunc_BreakTransformDouble_Rotation' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_BreakTransformDouble_Scale) == 0x00008C, "Member 'GA_Base_C_设置角色变换::CallFunc_BreakTransformDouble_Scale' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_GetObjectName_ReturnValue) == 0x000098, "Member 'GA_Base_C_设置角色变换::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x0000A8, "Member 'GA_Base_C_设置角色变换::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_Conv_StringToText_ReturnValue) == 0x0000B0, "Member 'GA_Base_C_设置角色变换::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_EqualEqual_VectorVector_ReturnValue_1) == 0x0000C8, "Member 'GA_Base_C_设置角色变换::CallFunc_EqualEqual_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, K2Node_MakeStruct_FormatArgumentData) == 0x0000D0, "Member 'GA_Base_C_设置角色变换::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_BooleanOR_ReturnValue) == 0x000110, "Member 'GA_Base_C_设置角色变换::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_Conv_VectorToString_ReturnValue) == 0x000118, "Member 'GA_Base_C_设置角色变换::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000128, "Member 'GA_Base_C_设置角色变换::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, K2Node_MakeStruct_FormatArgumentData_1) == 0x000140, "Member 'GA_Base_C_设置角色变换::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc__________) == 0x000180, "Member 'GA_Base_C_设置角色变换::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_GetObjectName_ReturnValue_1) == 0x000188, "Member 'GA_Base_C_设置角色变换::CallFunc_GetObjectName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_Conv_StringToText_ReturnValue_2) == 0x000198, "Member 'GA_Base_C_设置角色变换::CallFunc_Conv_StringToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, K2Node_MakeStruct_FormatArgumentData_2) == 0x0001B0, "Member 'GA_Base_C_设置角色变换::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, K2Node_MakeArray_Array) == 0x0001F0, "Member 'GA_Base_C_设置角色变换::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色变换, CallFunc_Format_ReturnValue) == 0x000200, "Member 'GA_Base_C_设置角色变换::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置角色位置和旋转
// 0x0040 (0x0040 - 0x0000)
struct GA_Base_C_设置角色位置和旋转 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               rotation;                                          // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          sweep;                                             // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 context;                                           // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_设置角色位置和旋转) == 0x000008, "Wrong alignment on GA_Base_C_设置角色位置和旋转");
static_assert(sizeof(GA_Base_C_设置角色位置和旋转) == 0x000040, "Wrong size on GA_Base_C_设置角色位置和旋转");
static_assert(offsetof(GA_Base_C_设置角色位置和旋转, 角色) == 0x000000, "Member 'GA_Base_C_设置角色位置和旋转::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置和旋转, location) == 0x000008, "Member 'GA_Base_C_设置角色位置和旋转::location' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置和旋转, rotation) == 0x000020, "Member 'GA_Base_C_设置角色位置和旋转::rotation' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置和旋转, sweep) == 0x00002C, "Member 'GA_Base_C_设置角色位置和旋转::sweep' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色位置和旋转, context) == 0x000030, "Member 'GA_Base_C_设置角色位置和旋转::context' has a wrong offset!");

// Function GA_Base.GA_Base_C.叠加角色世界旋转
// 0x0028 (0x0028 - 0x0000)
struct GA_Base_C_叠加角色世界旋转 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               rotation;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          sweep;                                             // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          teleport;                                          // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 context;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_叠加角色世界旋转) == 0x000008, "Wrong alignment on GA_Base_C_叠加角色世界旋转");
static_assert(sizeof(GA_Base_C_叠加角色世界旋转) == 0x000028, "Wrong size on GA_Base_C_叠加角色世界旋转");
static_assert(offsetof(GA_Base_C_叠加角色世界旋转, 角色) == 0x000000, "Member 'GA_Base_C_叠加角色世界旋转::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_叠加角色世界旋转, rotation) == 0x000008, "Member 'GA_Base_C_叠加角色世界旋转::rotation' has a wrong offset!");
static_assert(offsetof(GA_Base_C_叠加角色世界旋转, sweep) == 0x000014, "Member 'GA_Base_C_叠加角色世界旋转::sweep' has a wrong offset!");
static_assert(offsetof(GA_Base_C_叠加角色世界旋转, teleport) == 0x000015, "Member 'GA_Base_C_叠加角色世界旋转::teleport' has a wrong offset!");
static_assert(offsetof(GA_Base_C_叠加角色世界旋转, context) == 0x000018, "Member 'GA_Base_C_叠加角色世界旋转::context' has a wrong offset!");

// Function GA_Base.GA_Base_C.叠加角色世界位置
// 0x0038 (0x0038 - 0x0000)
struct GA_Base_C_叠加角色世界位置 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          sweep;                                             // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          teleport;                                          // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 context;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_叠加角色世界位置) == 0x000008, "Wrong alignment on GA_Base_C_叠加角色世界位置");
static_assert(sizeof(GA_Base_C_叠加角色世界位置) == 0x000038, "Wrong size on GA_Base_C_叠加角色世界位置");
static_assert(offsetof(GA_Base_C_叠加角色世界位置, 角色) == 0x000000, "Member 'GA_Base_C_叠加角色世界位置::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_叠加角色世界位置, location) == 0x000008, "Member 'GA_Base_C_叠加角色世界位置::location' has a wrong offset!");
static_assert(offsetof(GA_Base_C_叠加角色世界位置, sweep) == 0x000020, "Member 'GA_Base_C_叠加角色世界位置::sweep' has a wrong offset!");
static_assert(offsetof(GA_Base_C_叠加角色世界位置, teleport) == 0x000021, "Member 'GA_Base_C_叠加角色世界位置::teleport' has a wrong offset!");
static_assert(offsetof(GA_Base_C_叠加角色世界位置, context) == 0x000028, "Member 'GA_Base_C_叠加角色世界位置::context' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置角色传送
// 0x0048 (0x0048 - 0x0000)
struct GA_Base_C_设置角色传送 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotator;                                           // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 context;                                           // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_设置角色传送) == 0x000008, "Wrong alignment on GA_Base_C_设置角色传送");
static_assert(sizeof(GA_Base_C_设置角色传送) == 0x000048, "Wrong size on GA_Base_C_设置角色传送");
static_assert(offsetof(GA_Base_C_设置角色传送, 角色) == 0x000000, "Member 'GA_Base_C_设置角色传送::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色传送, location) == 0x000008, "Member 'GA_Base_C_设置角色传送::location' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色传送, Rotator) == 0x000020, "Member 'GA_Base_C_设置角色传送::Rotator' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色传送, context) == 0x000030, "Member 'GA_Base_C_设置角色传送::context' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色传送, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'GA_Base_C_设置角色传送::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.设置角色地面移动
// 0x0030 (0x0030 - 0x0000)
struct GA_Base_C_设置角色地面移动 final
{
public:
	class ATsBaseCharacter_C*                     角色;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 context;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_设置角色地面移动) == 0x000008, "Wrong alignment on GA_Base_C_设置角色地面移动");
static_assert(sizeof(GA_Base_C_设置角色地面移动) == 0x000030, "Wrong size on GA_Base_C_设置角色地面移动");
static_assert(offsetof(GA_Base_C_设置角色地面移动, 角色) == 0x000000, "Member 'GA_Base_C_设置角色地面移动::角色' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色地面移动, Velocity) == 0x000008, "Member 'GA_Base_C_设置角色地面移动::Velocity' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色地面移动, DeltaSeconds) == 0x000014, "Member 'GA_Base_C_设置角色地面移动::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色地面移动, context) == 0x000018, "Member 'GA_Base_C_设置角色地面移动::context' has a wrong offset!");
static_assert(offsetof(GA_Base_C_设置角色地面移动, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'GA_Base_C_设置角色地面移动::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.伴生物获取召唤者对象
// 0x0030 (0x0030 - 0x0000)
struct GA_Base_C_伴生物获取召唤者对象 final
{
public:
	class ATsBaseCharacter_C*                     对象;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          是否找到对象;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_____ID___ID;                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSummonerEntityId_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc_____ID_______;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_____ID___________;                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_伴生物获取召唤者对象) == 0x000008, "Wrong alignment on GA_Base_C_伴生物获取召唤者对象");
static_assert(sizeof(GA_Base_C_伴生物获取召唤者对象) == 0x000030, "Wrong size on GA_Base_C_伴生物获取召唤者对象");
static_assert(offsetof(GA_Base_C_伴生物获取召唤者对象, 对象) == 0x000000, "Member 'GA_Base_C_伴生物获取召唤者对象::对象' has a wrong offset!");
static_assert(offsetof(GA_Base_C_伴生物获取召唤者对象, 是否找到对象) == 0x000008, "Member 'GA_Base_C_伴生物获取召唤者对象::是否找到对象' has a wrong offset!");
static_assert(offsetof(GA_Base_C_伴生物获取召唤者对象, CallFunc__________) == 0x000010, "Member 'GA_Base_C_伴生物获取召唤者对象::CallFunc__________' has a wrong offset!");
static_assert(offsetof(GA_Base_C_伴生物获取召唤者对象, CallFunc_____ID___ID) == 0x000018, "Member 'GA_Base_C_伴生物获取召唤者对象::CallFunc_____ID___ID' has a wrong offset!");
static_assert(offsetof(GA_Base_C_伴生物获取召唤者对象, CallFunc_GetSummonerEntityId_ReturnValue) == 0x00001C, "Member 'GA_Base_C_伴生物获取召唤者对象::CallFunc_GetSummonerEntityId_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Base_C_伴生物获取召唤者对象, CallFunc_____ID_______) == 0x000020, "Member 'GA_Base_C_伴生物获取召唤者对象::CallFunc_____ID_______' has a wrong offset!");
static_assert(offsetof(GA_Base_C_伴生物获取召唤者对象, CallFunc_____ID___________) == 0x000028, "Member 'GA_Base_C_伴生物获取召唤者对象::CallFunc_____ID___________' has a wrong offset!");

// Function GA_Base.GA_Base_C.RemoveBuff
// 0x0010 (0x0010 - 0x0000)
struct GA_Base_C_RemoveBuff final
{
public:
	int64                                         buffId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_RemoveBuff) == 0x000008, "Wrong alignment on GA_Base_C_RemoveBuff");
static_assert(sizeof(GA_Base_C_RemoveBuff) == 0x000010, "Wrong size on GA_Base_C_RemoveBuff");
static_assert(offsetof(GA_Base_C_RemoveBuff, buffId) == 0x000000, "Member 'GA_Base_C_RemoveBuff::buffId' has a wrong offset!");
static_assert(offsetof(GA_Base_C_RemoveBuff, CallFunc__________) == 0x000008, "Member 'GA_Base_C_RemoveBuff::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.RemoveTag
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_RemoveTag final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_RemoveTag) == 0x000008, "Wrong alignment on GA_Base_C_RemoveTag");
static_assert(sizeof(GA_Base_C_RemoveTag) == 0x000018, "Wrong size on GA_Base_C_RemoveTag");
static_assert(offsetof(GA_Base_C_RemoveTag, tag) == 0x000000, "Member 'GA_Base_C_RemoveTag::tag' has a wrong offset!");
static_assert(offsetof(GA_Base_C_RemoveTag, CallFunc__________) == 0x000010, "Member 'GA_Base_C_RemoveTag::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.AddTag
// 0x0018 (0x0018 - 0x0000)
struct GA_Base_C_AddTag final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     CallFunc__________;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_AddTag) == 0x000008, "Wrong alignment on GA_Base_C_AddTag");
static_assert(sizeof(GA_Base_C_AddTag) == 0x000018, "Wrong size on GA_Base_C_AddTag");
static_assert(offsetof(GA_Base_C_AddTag, tag) == 0x000000, "Member 'GA_Base_C_AddTag::tag' has a wrong offset!");
static_assert(offsetof(GA_Base_C_AddTag, CallFunc__________) == 0x000010, "Member 'GA_Base_C_AddTag::CallFunc__________' has a wrong offset!");

// Function GA_Base.GA_Base_C.Apply Buff with Level
// 0x0008 (0x0008 - 0x0000)
struct GA_Base_C_Apply_Buff_with_Level final
{
public:
	int64                                         buffId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_Apply_Buff_with_Level) == 0x000008, "Wrong alignment on GA_Base_C_Apply_Buff_with_Level");
static_assert(sizeof(GA_Base_C_Apply_Buff_with_Level) == 0x000008, "Wrong size on GA_Base_C_Apply_Buff_with_Level");
static_assert(offsetof(GA_Base_C_Apply_Buff_with_Level, buffId) == 0x000000, "Member 'GA_Base_C_Apply_Buff_with_Level::buffId' has a wrong offset!");

// Function GA_Base.GA_Base_C.随机召唤
// 0x0060 (0x0060 - 0x0000)
struct GA_Base_C_随机召唤 final
{
public:
	int32                                         召唤者Id;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransformDouble                       Transform;                                         // 0x0010(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	int32                                         SkillId_0;                                         // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVisivle;                                         // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_随机召唤) == 0x000010, "Wrong alignment on GA_Base_C_随机召唤");
static_assert(sizeof(GA_Base_C_随机召唤) == 0x000060, "Wrong size on GA_Base_C_随机召唤");
static_assert(offsetof(GA_Base_C_随机召唤, 召唤者Id) == 0x000000, "Member 'GA_Base_C_随机召唤::召唤者Id' has a wrong offset!");
static_assert(offsetof(GA_Base_C_随机召唤, Index_0) == 0x000004, "Member 'GA_Base_C_随机召唤::Index_0' has a wrong offset!");
static_assert(offsetof(GA_Base_C_随机召唤, Transform) == 0x000010, "Member 'GA_Base_C_随机召唤::Transform' has a wrong offset!");
static_assert(offsetof(GA_Base_C_随机召唤, SkillId_0) == 0x000050, "Member 'GA_Base_C_随机召唤::SkillId_0' has a wrong offset!");
static_assert(offsetof(GA_Base_C_随机召唤, IsVisivle) == 0x000054, "Member 'GA_Base_C_随机召唤::IsVisivle' has a wrong offset!");

// Function GA_Base.GA_Base_C.获取随机召唤物
// 0x0010 (0x0010 - 0x0000)
struct GA_Base_C_获取随机召唤物 final
{
public:
	int32                                         召唤者;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         实体Id;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSummonRandomEntity_ReturnValue;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Base_C_获取随机召唤物) == 0x000004, "Wrong alignment on GA_Base_C_获取随机召唤物");
static_assert(sizeof(GA_Base_C_获取随机召唤物) == 0x000010, "Wrong size on GA_Base_C_获取随机召唤物");
static_assert(offsetof(GA_Base_C_获取随机召唤物, 召唤者) == 0x000000, "Member 'GA_Base_C_获取随机召唤物::召唤者' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取随机召唤物, Index_0) == 0x000004, "Member 'GA_Base_C_获取随机召唤物::Index_0' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取随机召唤物, 实体Id) == 0x000008, "Member 'GA_Base_C_获取随机召唤物::实体Id' has a wrong offset!");
static_assert(offsetof(GA_Base_C_获取随机召唤物, CallFunc_GetSummonRandomEntity_ReturnValue) == 0x00000C, "Member 'GA_Base_C_获取随机召唤物::CallFunc_GetSummonRandomEntity_ReturnValue' has a wrong offset!");

// Function GA_Base.GA_Base_C.K2_CanActivateAbility
// 0x0078 (0x0078 - 0x0000)
struct GA_Base_C_K2_CanActivateAbility final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0050(0x0020)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Base_C_K2_CanActivateAbility) == 0x000008, "Wrong alignment on GA_Base_C_K2_CanActivateAbility");
static_assert(sizeof(GA_Base_C_K2_CanActivateAbility) == 0x000078, "Wrong size on GA_Base_C_K2_CanActivateAbility");
static_assert(offsetof(GA_Base_C_K2_CanActivateAbility, ActorInfo) == 0x000000, "Member 'GA_Base_C_K2_CanActivateAbility::ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_Base_C_K2_CanActivateAbility, RelevantTags) == 0x000050, "Member 'GA_Base_C_K2_CanActivateAbility::RelevantTags' has a wrong offset!");
static_assert(offsetof(GA_Base_C_K2_CanActivateAbility, ReturnValue) == 0x000070, "Member 'GA_Base_C_K2_CanActivateAbility::ReturnValue' has a wrong offset!");

}

