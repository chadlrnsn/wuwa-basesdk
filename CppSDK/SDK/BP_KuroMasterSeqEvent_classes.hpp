#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroMasterSeqEvent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KuroMasterSeqEvent.BP_KuroMasterSeqEvent_C
// 0x0038 (0x02E8 - 0x02B0)
class ABP_KuroMasterSeqEvent_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ModifiedNearClipPlane;                             // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnScreenShotFade;                                  // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         DelayMerge;                                        // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Icon透明度;                                        // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Icon遮罩透明度;                                    // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_KuroMasterSeqEvent(int32 EntryPoint);
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void 禁用动态模糊();
	void 启用动态模糊();
	void 主触发切镜(bool shouldBlend, float blendTime, EViewTargetBlendFunction blendFunction, float blendExp);
	void 副触发切镜();
	void 调整镜头裁剪距离(int32 NearClip);
	void 恢复镜头裁剪距离();
	void 开关人物飘带(bool enable);
	void 执行流程行为(const class FString& key);
	void 开始叠化();
	void 触发切镜();
	void 打开章节提示(int32 ChapterState, int32 ChapterId);
	void 展示游戏Logo(float time);
	void 显示预览图(const class FString& MaleAssetPath, const class FString& FemaleAssetPath, const class FString& maleSpineName, const class FString& femaleSpineName, bool needLoop);
	void 显示预览图_数组_(const class FString& MaleAssetPath, const class FString& FemaleAssetPath, TArray<struct FSpineThingsInfo>& maleSpineArray, TArray<struct FSpineThingsInfo>& femaleSpineArray);
	void 关闭预览图();
	void 播放预览图动画(const class FString& seqName);
	void 执行实体帧事件(const class FString& Key, int32 EntityId);
	void 播放Spine动画(const class FString& SpineName, bool needLoop);
	void 播放Spine动画_性别_(const class FString& maleSpineName1, const class FString& femaleSpineName1, bool needLoop);
	void 播放Spine动画_数组_(TArray<struct FSpineThingsInfo>& maleSpineArray, TArray<struct FSpineThingsInfo>& femaleSpineArray);
	void 关闭Spine动画(const class FString& spineName);
	void 关闭Spine动画_数组_(TArray<class FString>& spineArray);
	void 背景Icon(bool 显示, class UTexture2D* Icon);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KuroMasterSeqEvent_C">();
	}
	static class ABP_KuroMasterSeqEvent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KuroMasterSeqEvent_C>();
	}
};
static_assert(alignof(ABP_KuroMasterSeqEvent_C) == 0x000008, "Wrong alignment on ABP_KuroMasterSeqEvent_C");
static_assert(sizeof(ABP_KuroMasterSeqEvent_C) == 0x0002E8, "Wrong size on ABP_KuroMasterSeqEvent_C");
static_assert(offsetof(ABP_KuroMasterSeqEvent_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_KuroMasterSeqEvent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_KuroMasterSeqEvent_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_KuroMasterSeqEvent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_KuroMasterSeqEvent_C, ModifiedNearClipPlane) == 0x0002C0, "Member 'ABP_KuroMasterSeqEvent_C::ModifiedNearClipPlane' has a wrong offset!");
static_assert(offsetof(ABP_KuroMasterSeqEvent_C, OnScreenShotFade) == 0x0002C8, "Member 'ABP_KuroMasterSeqEvent_C::OnScreenShotFade' has a wrong offset!");
static_assert(offsetof(ABP_KuroMasterSeqEvent_C, DelayMerge) == 0x0002D8, "Member 'ABP_KuroMasterSeqEvent_C::DelayMerge' has a wrong offset!");
static_assert(offsetof(ABP_KuroMasterSeqEvent_C, Icon透明度) == 0x0002DC, "Member 'ABP_KuroMasterSeqEvent_C::Icon透明度' has a wrong offset!");
static_assert(offsetof(ABP_KuroMasterSeqEvent_C, Icon遮罩透明度) == 0x0002E0, "Member 'ABP_KuroMasterSeqEvent_C::Icon遮罩透明度' has a wrong offset!");

}

