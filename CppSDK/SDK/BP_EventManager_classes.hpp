#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventManager

#include "Basic.hpp"

#include "ECaughtResultType_structs.hpp"
#include "ECharacterState_structs.hpp"
#include "SHitInformation_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_ManagerBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventManager.BP_EventManager_C
// 0x01E0 (0x0228 - 0x0048)
class UBP_EventManager_C final : public UBP_ManagerBase_C
{
public:
	TMulticastInlineDelegate<void(uint8 生命周期类型, class UObject* 界面实例)> 界面生命周期改变; // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ATsBaseCharacter_C* 角色, const struct FSHitInformation& 受击数据)> 当有角色受击时; // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class FName inID)> 当解密界面打开时;                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* 删除的实体)> 删除实体;                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              WorldDoneNotify;                                   // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 实体ID, class AActor* Entity)> 增加实体;                   // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              当换人完成时;                                      // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 BulletId, int32 EntityId)> 子弹命中前;                       // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ATsBaseCharacter_C* 角色, const struct FGameplayTag& 部位Tag, float 变化前血量比例, float 变化后血量比例)> 角色部位血量变化时; // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ATsBaseCharacter_C* 角色, const struct FGameplayTag& 部位Tag, class ATsBaseCharacter_C* 攻击者)> 角色部位弱点打击时; // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ATsBaseCharacter_C* 角色, int32 index)> AI巡逻达到样条点; // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              被控物广播;                                        // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 RoleEntityID, int32 CaughtEntityID, const class FString& CaughtID, ECaughtResultType Result)> CaughtEntity; // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ATsBaseCharacter_C* 角色, ECharacterState 老状态, ECharacterState 新状态, bool 主控)> 角色状态切换时; // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 对策事件ID, const struct FSHitInformation& 受击数据)> 当触发对策事件时; // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ATsBaseCharacter_C* 角色)> 当有角色死亡时;                 // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(bool 是否进入战斗)> 小队战斗状态改变时;                      // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ATsBaseCharacter_C* 目标)> 小队技能目标改变时;             // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 RoleEntityId, int32 CaughtEntityId, const class FString& CaughtId)> 抓取目标成功时; // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 材质ID)>  材质播放结束时;                                   // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              当编队更新时;                                      // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnEnterPhotograph;                                 // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnExitPhotograph;                                  // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* 被控物, class AActor* 水面)> 被控物撞到水面时; // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 EntityId)> 开始吸取污染物;                                   // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 EntityId)> 停止吸取污染物;                                   // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* fishingBoat)> 当捕鱼船创建时;                        // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const struct FVectorDouble& ImpactPoint, class UBP_SceneBattleInteract_C* Config, const struct FVectorDouble& OriginPoint, int32 Id)> 子弹撞到水面时; // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ATsBaseCharacter_C* 角色)> 当有角色复活时;                 // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const struct FVectorDouble& OriginPoint, class UBP_SceneBattleInteract_C* Config, int32 Id)> 武器交互场景时; // 0x0218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventManager_C">();
	}
	static class UBP_EventManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EventManager_C>();
	}
};
static_assert(alignof(UBP_EventManager_C) == 0x000008, "Wrong alignment on UBP_EventManager_C");
static_assert(sizeof(UBP_EventManager_C) == 0x000228, "Wrong size on UBP_EventManager_C");
static_assert(offsetof(UBP_EventManager_C, 界面生命周期改变) == 0x000048, "Member 'UBP_EventManager_C::界面生命周期改变' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 当有角色受击时) == 0x000058, "Member 'UBP_EventManager_C::当有角色受击时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 当解密界面打开时) == 0x000068, "Member 'UBP_EventManager_C::当解密界面打开时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 删除实体) == 0x000078, "Member 'UBP_EventManager_C::删除实体' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, WorldDoneNotify) == 0x000088, "Member 'UBP_EventManager_C::WorldDoneNotify' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 增加实体) == 0x000098, "Member 'UBP_EventManager_C::增加实体' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 当换人完成时) == 0x0000A8, "Member 'UBP_EventManager_C::当换人完成时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 子弹命中前) == 0x0000B8, "Member 'UBP_EventManager_C::子弹命中前' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 角色部位血量变化时) == 0x0000C8, "Member 'UBP_EventManager_C::角色部位血量变化时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 角色部位弱点打击时) == 0x0000D8, "Member 'UBP_EventManager_C::角色部位弱点打击时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, AI巡逻达到样条点) == 0x0000E8, "Member 'UBP_EventManager_C::AI巡逻达到样条点' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 被控物广播) == 0x0000F8, "Member 'UBP_EventManager_C::被控物广播' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, CaughtEntity) == 0x000108, "Member 'UBP_EventManager_C::CaughtEntity' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 角色状态切换时) == 0x000118, "Member 'UBP_EventManager_C::角色状态切换时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 当触发对策事件时) == 0x000128, "Member 'UBP_EventManager_C::当触发对策事件时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 当有角色死亡时) == 0x000138, "Member 'UBP_EventManager_C::当有角色死亡时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 小队战斗状态改变时) == 0x000148, "Member 'UBP_EventManager_C::小队战斗状态改变时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 小队技能目标改变时) == 0x000158, "Member 'UBP_EventManager_C::小队技能目标改变时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 抓取目标成功时) == 0x000168, "Member 'UBP_EventManager_C::抓取目标成功时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 材质播放结束时) == 0x000178, "Member 'UBP_EventManager_C::材质播放结束时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 当编队更新时) == 0x000188, "Member 'UBP_EventManager_C::当编队更新时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, OnEnterPhotograph) == 0x000198, "Member 'UBP_EventManager_C::OnEnterPhotograph' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, OnExitPhotograph) == 0x0001A8, "Member 'UBP_EventManager_C::OnExitPhotograph' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 被控物撞到水面时) == 0x0001B8, "Member 'UBP_EventManager_C::被控物撞到水面时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 开始吸取污染物) == 0x0001C8, "Member 'UBP_EventManager_C::开始吸取污染物' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 停止吸取污染物) == 0x0001D8, "Member 'UBP_EventManager_C::停止吸取污染物' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 当捕鱼船创建时) == 0x0001E8, "Member 'UBP_EventManager_C::当捕鱼船创建时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 子弹撞到水面时) == 0x0001F8, "Member 'UBP_EventManager_C::子弹撞到水面时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 当有角色复活时) == 0x000208, "Member 'UBP_EventManager_C::当有角色复活时' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, 武器交互场景时) == 0x000218, "Member 'UBP_EventManager_C::武器交互场景时' has a wrong offset!");

}

