#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroDevice

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class KuroDevice.DeviceHandle
// 0x0030 (0x0060 - 0x0030)
class UDeviceHandle final : public UObject
{
public:
	TMulticastInlineDelegate<void(bool bIsConnected, int32 PlatformUserId, int32 ControllerId, const TArray<class FString>& PidAndVidArray)> OnConnectionChanged; // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TArray<class FString>                         PidAndVidArray;                                    // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         DevicePathArray;                                   // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void Clear();
	TArray<class FString> GetPidAndVidArray();
	void Initialize();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DeviceHandle">();
	}
	static class UDeviceHandle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeviceHandle>();
	}
};
static_assert(alignof(UDeviceHandle) == 0x000008, "Wrong alignment on UDeviceHandle");
static_assert(sizeof(UDeviceHandle) == 0x000060, "Wrong size on UDeviceHandle");
static_assert(offsetof(UDeviceHandle, OnConnectionChanged) == 0x000030, "Member 'UDeviceHandle::OnConnectionChanged' has a wrong offset!");
static_assert(offsetof(UDeviceHandle, PidAndVidArray) == 0x000040, "Member 'UDeviceHandle::PidAndVidArray' has a wrong offset!");
static_assert(offsetof(UDeviceHandle, DevicePathArray) == 0x000050, "Member 'UDeviceHandle::DevicePathArray' has a wrong offset!");

// Class KuroDevice.KuroDeviceBPLibrary
// 0x0000 (0x0030 - 0x0030)
class UKuroDeviceBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool FindAllDeviceVidAndPid(TArray<class FString>* DevicePathList);
	static class UDeviceHandle* NewDeviceHandle(class UObject* Outer_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroDeviceBPLibrary">();
	}
	static class UKuroDeviceBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroDeviceBPLibrary>();
	}
};
static_assert(alignof(UKuroDeviceBPLibrary) == 0x000008, "Wrong alignment on UKuroDeviceBPLibrary");
static_assert(sizeof(UKuroDeviceBPLibrary) == 0x000030, "Wrong size on UKuroDeviceBPLibrary");

}

