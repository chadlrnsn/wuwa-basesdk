#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsAnimNotifyStateCurveMove

#include "Basic.hpp"

#include "SSkillBehaviorCondition_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EPositionDatumTarget_structs.hpp"
#include "SSkillBehaviorAction_structs.hpp"
#include "EOffsetDirectionDatum_structs.hpp"
#include "Engine_structs.hpp"
#include "EMovementProcessDirection_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsAnimNotifyStateCurveMove.TsAnimNotifyStateCurveMove_C
// 0x0360 (0x03A8 - 0x0048)
class UTsAnimNotifyStateCurveMove_C final : public UKuroAnimNotifyState
{
public:
	TArray<struct FSSkillBehaviorCondition>       技能条件;                                          // 0x0048(0x0010)(Edit, BlueprintVisible)
	class FName                                   技能条件公式;                                      // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          无视障碍阻挡;                                      // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        运动轨迹曲线;                                      // 0x0068(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          持续更新目标位置;                                  // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPositionDatumTarget                          位置基准目标;                                      // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   基于目标骨骼位置;                                  // 0x008C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   目标参数;                                          // 0x0098(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOffsetDirectionDatum                         偏移方向基准;                                      // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                目标位置偏移;                                      // 0x00A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          位置修正;                                          // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSkillBehaviorAction                  位置修正配置;                                      // 0x00B8(0x02C0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UCurveFloat*                            运动位置曲线;                                      // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSplinePoint>                   运动轨迹曲线关键点;                                // 0x0380(0x0010)(Edit, BlueprintVisible)
	TArray<struct FInterpCurvePointFloat>         运动轨迹曲线插值ReparamTable;                      // 0x0390(0x0010)(Edit, BlueprintVisible)
	EMovementProcessDirection                     运动过程朝向;                                      // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMode;                                         // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          自动更新运动轨迹曲线关键点;                        // 0x03A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	bool K2_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	bool K2_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	bool K2_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);

	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsAnimNotifyStateCurveMove_C">();
	}
	static class UTsAnimNotifyStateCurveMove_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsAnimNotifyStateCurveMove_C>();
	}
};
static_assert(alignof(UTsAnimNotifyStateCurveMove_C) == 0x000008, "Wrong alignment on UTsAnimNotifyStateCurveMove_C");
static_assert(sizeof(UTsAnimNotifyStateCurveMove_C) == 0x0003A8, "Wrong size on UTsAnimNotifyStateCurveMove_C");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 技能条件) == 0x000048, "Member 'UTsAnimNotifyStateCurveMove_C::技能条件' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 技能条件公式) == 0x000058, "Member 'UTsAnimNotifyStateCurveMove_C::技能条件公式' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 无视障碍阻挡) == 0x000064, "Member 'UTsAnimNotifyStateCurveMove_C::无视障碍阻挡' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 运动轨迹曲线) == 0x000068, "Member 'UTsAnimNotifyStateCurveMove_C::运动轨迹曲线' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 持续更新目标位置) == 0x000088, "Member 'UTsAnimNotifyStateCurveMove_C::持续更新目标位置' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 位置基准目标) == 0x000089, "Member 'UTsAnimNotifyStateCurveMove_C::位置基准目标' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 基于目标骨骼位置) == 0x00008C, "Member 'UTsAnimNotifyStateCurveMove_C::基于目标骨骼位置' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 目标参数) == 0x000098, "Member 'UTsAnimNotifyStateCurveMove_C::目标参数' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 偏移方向基准) == 0x0000A4, "Member 'UTsAnimNotifyStateCurveMove_C::偏移方向基准' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 目标位置偏移) == 0x0000A8, "Member 'UTsAnimNotifyStateCurveMove_C::目标位置偏移' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 位置修正) == 0x0000B4, "Member 'UTsAnimNotifyStateCurveMove_C::位置修正' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 位置修正配置) == 0x0000B8, "Member 'UTsAnimNotifyStateCurveMove_C::位置修正配置' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 运动位置曲线) == 0x000378, "Member 'UTsAnimNotifyStateCurveMove_C::运动位置曲线' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 运动轨迹曲线关键点) == 0x000380, "Member 'UTsAnimNotifyStateCurveMove_C::运动轨迹曲线关键点' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 运动轨迹曲线插值ReparamTable) == 0x000390, "Member 'UTsAnimNotifyStateCurveMove_C::运动轨迹曲线插值ReparamTable' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 运动过程朝向) == 0x0003A0, "Member 'UTsAnimNotifyStateCurveMove_C::运动过程朝向' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, DebugMode) == 0x0003A1, "Member 'UTsAnimNotifyStateCurveMove_C::DebugMode' has a wrong offset!");
static_assert(offsetof(UTsAnimNotifyStateCurveMove_C, 自动更新运动轨迹曲线关键点) == 0x0003A2, "Member 'UTsAnimNotifyStateCurveMove_C::自动更新运动轨迹曲线关键点' has a wrong offset!");

}

