#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ME1JiancuxiongMd00001

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "TsBaseCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ME1JiancuxiongMd00001.BP_ME1JiancuxiongMd00001_C
// 0x0060 (0x07B0 - 0x0750)
class ABP_ME1JiancuxiongMd00001_C final : public ATsBaseCharacter_C
{
public:
	class UKuroAdjustableBoxComponent*            Root;                                              // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001RCalf;                                       // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001LCalf;                                       // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001Spine2;                                      // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001LForearm;                                    // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001RForearm;                                    // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001Spine1;                                      // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001Head;                                        // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         SocketNames;                                       // 0x0790(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Size;                                              // 0x07A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ME1JiancuxiongMd00001_C">();
	}
	static class ABP_ME1JiancuxiongMd00001_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ME1JiancuxiongMd00001_C>();
	}
};
static_assert(alignof(ABP_ME1JiancuxiongMd00001_C) == 0x000010, "Wrong alignment on ABP_ME1JiancuxiongMd00001_C");
static_assert(sizeof(ABP_ME1JiancuxiongMd00001_C) == 0x0007B0, "Wrong size on ABP_ME1JiancuxiongMd00001_C");
static_assert(offsetof(ABP_ME1JiancuxiongMd00001_C, Root) == 0x000750, "Member 'ABP_ME1JiancuxiongMd00001_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_ME1JiancuxiongMd00001_C, Bip001RCalf) == 0x000758, "Member 'ABP_ME1JiancuxiongMd00001_C::Bip001RCalf' has a wrong offset!");
static_assert(offsetof(ABP_ME1JiancuxiongMd00001_C, Bip001LCalf) == 0x000760, "Member 'ABP_ME1JiancuxiongMd00001_C::Bip001LCalf' has a wrong offset!");
static_assert(offsetof(ABP_ME1JiancuxiongMd00001_C, Bip001Spine2) == 0x000768, "Member 'ABP_ME1JiancuxiongMd00001_C::Bip001Spine2' has a wrong offset!");
static_assert(offsetof(ABP_ME1JiancuxiongMd00001_C, Bip001LForearm) == 0x000770, "Member 'ABP_ME1JiancuxiongMd00001_C::Bip001LForearm' has a wrong offset!");
static_assert(offsetof(ABP_ME1JiancuxiongMd00001_C, Bip001RForearm) == 0x000778, "Member 'ABP_ME1JiancuxiongMd00001_C::Bip001RForearm' has a wrong offset!");
static_assert(offsetof(ABP_ME1JiancuxiongMd00001_C, Bip001Spine1) == 0x000780, "Member 'ABP_ME1JiancuxiongMd00001_C::Bip001Spine1' has a wrong offset!");
static_assert(offsetof(ABP_ME1JiancuxiongMd00001_C, Bip001Head) == 0x000788, "Member 'ABP_ME1JiancuxiongMd00001_C::Bip001Head' has a wrong offset!");
static_assert(offsetof(ABP_ME1JiancuxiongMd00001_C, SocketNames) == 0x000790, "Member 'ABP_ME1JiancuxiongMd00001_C::SocketNames' has a wrong offset!");
static_assert(offsetof(ABP_ME1JiancuxiongMd00001_C, Size) == 0x0007A0, "Member 'ABP_ME1JiancuxiongMd00001_C::Size' has a wrong offset!");

}

