#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_VisionCommon

#include "Basic.hpp"

#include "KuroAnim_structs.hpp"
#include "Engine_structs.hpp"
#include "EMovementDirection_structs.hpp"


namespace SDK::Params
{

// Function ABP_VisionCommon.ABP_VisionCommon_C.ExecuteUbergraph_ABP_VisionCommon
// 0x0088 (0x0088 - 0x0000)
struct ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ABPLogicParams_C*                   CallFunc_SpawnObject_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_4;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_5;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_10;       // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_11;       // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitBones                              K2Node_MakeStruct_HitBones;                        // 0x0030(0x0010)()
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Section;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFK_Shake_AssestData_C*                 CallFunc_SpawnObject_ReturnValue_1;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddMaterialControllerData_ReturnValue;    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_6;          // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFK_Shake_AssestData_C*                 K2Node_DynamicCast_AsFK_Shake_Assest_Data;         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_12;       // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon) == 0x000008, "Wrong alignment on ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon");
static_assert(sizeof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon) == 0x000088, "Wrong size on ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, EntryPoint) == 0x000000, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_SpawnObject_ReturnValue) == 0x000008, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000011, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000012, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000013, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000014, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000015, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000016, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000017, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x000019, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x00001A, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_BooleanAND_ReturnValue_1) == 0x00001B, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x00001C, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x00001D, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_BooleanOR_ReturnValue) == 0x00001E, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_BooleanOR_ReturnValue_1) == 0x00001F, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_BooleanOR_ReturnValue_2) == 0x000020, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x000021, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_NotEqual_ByteByte_ReturnValue_4) == 0x000022, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_NotEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_IsValid_ReturnValue) == 0x000023, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_NotEqual_ByteByte_ReturnValue_5) == 0x000024, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_NotEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x000025, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_10) == 0x000026, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_11) == 0x000027, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_BooleanOR_ReturnValue_3) == 0x000028, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, K2Node_MakeStruct_HitBones) == 0x000030, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::K2Node_MakeStruct_HitBones' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, K2Node_Event_DeltaTimeX) == 0x000040, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000048, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, K2Node_DynamicCast_AsTs_Base_Character) == 0x000050, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::K2Node_DynamicCast_AsTs_Base_Character' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, K2Node_CustomEvent_Section) == 0x00005C, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::K2Node_CustomEvent_Section' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000060, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_SpawnObject_ReturnValue_1) == 0x000068, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_SpawnObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_AddMaterialControllerData_ReturnValue) == 0x000070, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_AddMaterialControllerData_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000074, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_NotEqual_ByteByte_ReturnValue_6) == 0x000075, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_NotEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_BooleanAND_ReturnValue_2) == 0x000076, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_IsValid_ReturnValue_1) == 0x000077, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, K2Node_DynamicCast_AsFK_Shake_Assest_Data) == 0x000078, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::K2Node_DynamicCast_AsFK_Shake_Assest_Data' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_12) == 0x000081, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon, CallFunc_IsValid_ReturnValue_2) == 0x000082, "Member 'ABP_VisionCommon_C_ExecuteUbergraph_ABP_VisionCommon::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function ABP_VisionCommon.ABP_VisionCommon_C.PlayShakeFX
// 0x0004 (0x0004 - 0x0000)
struct ABP_VisionCommon_C_PlayShakeFX final
{
public:
	int32                                         Section;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_VisionCommon_C_PlayShakeFX) == 0x000004, "Wrong alignment on ABP_VisionCommon_C_PlayShakeFX");
static_assert(sizeof(ABP_VisionCommon_C_PlayShakeFX) == 0x000004, "Wrong size on ABP_VisionCommon_C_PlayShakeFX");
static_assert(offsetof(ABP_VisionCommon_C_PlayShakeFX, Section) == 0x000000, "Member 'ABP_VisionCommon_C_PlayShakeFX::Section' has a wrong offset!");

// Function ABP_VisionCommon.ABP_VisionCommon_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_VisionCommon_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_VisionCommon_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_VisionCommon_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_VisionCommon_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_VisionCommon_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_VisionCommon_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_VisionCommon_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_VisionCommon.ABP_VisionCommon_C.受击状态更新
// 0x0024 (0x0024 - 0x0000)
struct ABP_VisionCommon_C_受击状态更新 final
{
public:
	float                                         CallFunc_GetToughDecreaseValue_ReturnValue;        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetBeHitBone_ReturnValue;                 // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_VisionCommon_C_受击状态更新) == 0x000004, "Wrong alignment on ABP_VisionCommon_C_受击状态更新");
static_assert(sizeof(ABP_VisionCommon_C_受击状态更新) == 0x000024, "Wrong size on ABP_VisionCommon_C_受击状态更新");
static_assert(offsetof(ABP_VisionCommon_C_受击状态更新, CallFunc_GetToughDecreaseValue_ReturnValue) == 0x000000, "Member 'ABP_VisionCommon_C_受击状态更新::CallFunc_GetToughDecreaseValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_受击状态更新, CallFunc_GetBeHitBone_ReturnValue) == 0x000004, "Member 'ABP_VisionCommon_C_受击状态更新::CallFunc_GetBeHitBone_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_受击状态更新, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000010, "Member 'ABP_VisionCommon_C_受击状态更新::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_受击状态更新, K2Node_SwitchName_CmpSuccess) == 0x000011, "Member 'ABP_VisionCommon_C_受击状态更新::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_受击状态更新, CallFunc_Array_Add_ReturnValue) == 0x000014, "Member 'ABP_VisionCommon_C_受击状态更新::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_受击状态更新, CallFunc_MapRangeClamped_ReturnValue) == 0x000018, "Member 'ABP_VisionCommon_C_受击状态更新::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_受击状态更新, CallFunc_Multiply_IntFloat_ReturnValue) == 0x00001C, "Member 'ABP_VisionCommon_C_受击状态更新::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_受击状态更新, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'ABP_VisionCommon_C_受击状态更新::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function ABP_VisionCommon.ABP_VisionCommon_C.移动状态更新
// 0x0002 (0x0002 - 0x0000)
struct ABP_VisionCommon_C_移动状态更新 final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovementDirection                            CallFunc_GetMonsterMoveDirection_ReturnValue;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_VisionCommon_C_移动状态更新) == 0x000001, "Wrong alignment on ABP_VisionCommon_C_移动状态更新");
static_assert(sizeof(ABP_VisionCommon_C_移动状态更新) == 0x000002, "Wrong size on ABP_VisionCommon_C_移动状态更新");
static_assert(offsetof(ABP_VisionCommon_C_移动状态更新, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'ABP_VisionCommon_C_移动状态更新::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_移动状态更新, CallFunc_GetMonsterMoveDirection_ReturnValue) == 0x000001, "Member 'ABP_VisionCommon_C_移动状态更新::CallFunc_GetMonsterMoveDirection_ReturnValue' has a wrong offset!");

// Function ABP_VisionCommon.ABP_VisionCommon_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_VisionCommon_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_VisionCommon_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_VisionCommon_C_AnimGraph");
static_assert(sizeof(ABP_VisionCommon_C_AnimGraph) == 0x000010, "Wrong size on ABP_VisionCommon_C_AnimGraph");
static_assert(offsetof(ABP_VisionCommon_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_VisionCommon_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_VisionCommon.ABP_VisionCommon_C.HitFk
// 0x0020 (0x0020 - 0x0000)
struct ABP_VisionCommon_C_HitFk final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HitFk_0;                                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_VisionCommon_C_HitFk) == 0x000008, "Wrong alignment on ABP_VisionCommon_C_HitFk");
static_assert(sizeof(ABP_VisionCommon_C_HitFk) == 0x000020, "Wrong size on ABP_VisionCommon_C_HitFk");
static_assert(offsetof(ABP_VisionCommon_C_HitFk, InPose) == 0x000000, "Member 'ABP_VisionCommon_C_HitFk::InPose' has a wrong offset!");
static_assert(offsetof(ABP_VisionCommon_C_HitFk, HitFk_0) == 0x000010, "Member 'ABP_VisionCommon_C_HitFk::HitFk_0' has a wrong offset!");

}

