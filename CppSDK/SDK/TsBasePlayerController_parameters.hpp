#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsBasePlayerController

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function TsBasePlayerController.TsBasePlayerController_C.SetIsPrintKeyName
// 0x0001 (0x0001 - 0x0000)
struct TsBasePlayerController_C_SetIsPrintKeyName final
{
public:
	bool                                          bPrintKeyName;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TsBasePlayerController_C_SetIsPrintKeyName) == 0x000001, "Wrong alignment on TsBasePlayerController_C_SetIsPrintKeyName");
static_assert(sizeof(TsBasePlayerController_C_SetIsPrintKeyName) == 0x000001, "Wrong size on TsBasePlayerController_C_SetIsPrintKeyName");
static_assert(offsetof(TsBasePlayerController_C_SetIsPrintKeyName, bPrintKeyName) == 0x000000, "Member 'TsBasePlayerController_C_SetIsPrintKeyName::bPrintKeyName' has a wrong offset!");

// Function TsBasePlayerController.TsBasePlayerController_C.OnReleaseAnyKey
// 0x0020 (0x0020 - 0x0000)
struct TsBasePlayerController_C_OnReleaseAnyKey final
{
public:
	struct FKey                                   key;                                               // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(TsBasePlayerController_C_OnReleaseAnyKey) == 0x000008, "Wrong alignment on TsBasePlayerController_C_OnReleaseAnyKey");
static_assert(sizeof(TsBasePlayerController_C_OnReleaseAnyKey) == 0x000020, "Wrong size on TsBasePlayerController_C_OnReleaseAnyKey");
static_assert(offsetof(TsBasePlayerController_C_OnReleaseAnyKey, key) == 0x000000, "Member 'TsBasePlayerController_C_OnReleaseAnyKey::key' has a wrong offset!");

// Function TsBasePlayerController.TsBasePlayerController_C.IsInTouch
// 0x0008 (0x0008 - 0x0000)
struct TsBasePlayerController_C_IsInTouch final
{
public:
	float                                         touchId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TsBasePlayerController_C_IsInTouch) == 0x000004, "Wrong alignment on TsBasePlayerController_C_IsInTouch");
static_assert(sizeof(TsBasePlayerController_C_IsInTouch) == 0x000008, "Wrong size on TsBasePlayerController_C_IsInTouch");
static_assert(offsetof(TsBasePlayerController_C_IsInTouch, touchId) == 0x000000, "Member 'TsBasePlayerController_C_IsInTouch::touchId' has a wrong offset!");
static_assert(offsetof(TsBasePlayerController_C_IsInTouch, ReturnValue) == 0x000004, "Member 'TsBasePlayerController_C_IsInTouch::ReturnValue' has a wrong offset!");

// Function TsBasePlayerController.TsBasePlayerController_C.OnPressAnyKey
// 0x0020 (0x0020 - 0x0000)
struct TsBasePlayerController_C_OnPressAnyKey final
{
public:
	struct FKey                                   key;                                               // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsBasePlayerController_C_OnPressAnyKey) == 0x000008, "Wrong alignment on TsBasePlayerController_C_OnPressAnyKey");
static_assert(sizeof(TsBasePlayerController_C_OnPressAnyKey) == 0x000020, "Wrong size on TsBasePlayerController_C_OnPressAnyKey");
static_assert(offsetof(TsBasePlayerController_C_OnPressAnyKey, key) == 0x000000, "Member 'TsBasePlayerController_C_OnPressAnyKey::key' has a wrong offset!");

// Function TsBasePlayerController.TsBasePlayerController_C.OnTouchMove
// 0x0010 (0x0010 - 0x0000)
struct TsBasePlayerController_C_OnTouchMove final
{
public:
	ETouchIndex                                   touchIndex;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                position;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsBasePlayerController_C_OnTouchMove) == 0x000004, "Wrong alignment on TsBasePlayerController_C_OnTouchMove");
static_assert(sizeof(TsBasePlayerController_C_OnTouchMove) == 0x000010, "Wrong size on TsBasePlayerController_C_OnTouchMove");
static_assert(offsetof(TsBasePlayerController_C_OnTouchMove, touchIndex) == 0x000000, "Member 'TsBasePlayerController_C_OnTouchMove::touchIndex' has a wrong offset!");
static_assert(offsetof(TsBasePlayerController_C_OnTouchMove, position) == 0x000004, "Member 'TsBasePlayerController_C_OnTouchMove::position' has a wrong offset!");

// Function TsBasePlayerController.TsBasePlayerController_C.OnTouchEnd
// 0x0010 (0x0010 - 0x0000)
struct TsBasePlayerController_C_OnTouchEnd final
{
public:
	ETouchIndex                                   touchIndex;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                position;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsBasePlayerController_C_OnTouchEnd) == 0x000004, "Wrong alignment on TsBasePlayerController_C_OnTouchEnd");
static_assert(sizeof(TsBasePlayerController_C_OnTouchEnd) == 0x000010, "Wrong size on TsBasePlayerController_C_OnTouchEnd");
static_assert(offsetof(TsBasePlayerController_C_OnTouchEnd, touchIndex) == 0x000000, "Member 'TsBasePlayerController_C_OnTouchEnd::touchIndex' has a wrong offset!");
static_assert(offsetof(TsBasePlayerController_C_OnTouchEnd, position) == 0x000004, "Member 'TsBasePlayerController_C_OnTouchEnd::position' has a wrong offset!");

// Function TsBasePlayerController.TsBasePlayerController_C.OnTouchBegin
// 0x0010 (0x0010 - 0x0000)
struct TsBasePlayerController_C_OnTouchBegin final
{
public:
	ETouchIndex                                   touchIndex;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                position;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsBasePlayerController_C_OnTouchBegin) == 0x000004, "Wrong alignment on TsBasePlayerController_C_OnTouchBegin");
static_assert(sizeof(TsBasePlayerController_C_OnTouchBegin) == 0x000010, "Wrong size on TsBasePlayerController_C_OnTouchBegin");
static_assert(offsetof(TsBasePlayerController_C_OnTouchBegin, touchIndex) == 0x000000, "Member 'TsBasePlayerController_C_OnTouchBegin::touchIndex' has a wrong offset!");
static_assert(offsetof(TsBasePlayerController_C_OnTouchBegin, position) == 0x000004, "Member 'TsBasePlayerController_C_OnTouchBegin::position' has a wrong offset!");

// Function TsBasePlayerController.TsBasePlayerController_C.GetAxisHandle
// 0x0018 (0x0018 - 0x0000)
struct TsBasePlayerController_C_GetAxisHandle final
{
public:
	class FString                                 actionName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash)
	class UTsAxisHandle_C*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsBasePlayerController_C_GetAxisHandle) == 0x000008, "Wrong alignment on TsBasePlayerController_C_GetAxisHandle");
static_assert(sizeof(TsBasePlayerController_C_GetAxisHandle) == 0x000018, "Wrong size on TsBasePlayerController_C_GetAxisHandle");
static_assert(offsetof(TsBasePlayerController_C_GetAxisHandle, actionName) == 0x000000, "Member 'TsBasePlayerController_C_GetAxisHandle::actionName' has a wrong offset!");
static_assert(offsetof(TsBasePlayerController_C_GetAxisHandle, ReturnValue) == 0x000010, "Member 'TsBasePlayerController_C_GetAxisHandle::ReturnValue' has a wrong offset!");

// Function TsBasePlayerController.TsBasePlayerController_C.RemoveAxisHandle
// 0x0010 (0x0010 - 0x0000)
struct TsBasePlayerController_C_RemoveAxisHandle final
{
public:
	class FString                                 axisName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsBasePlayerController_C_RemoveAxisHandle) == 0x000008, "Wrong alignment on TsBasePlayerController_C_RemoveAxisHandle");
static_assert(sizeof(TsBasePlayerController_C_RemoveAxisHandle) == 0x000010, "Wrong size on TsBasePlayerController_C_RemoveAxisHandle");
static_assert(offsetof(TsBasePlayerController_C_RemoveAxisHandle, axisName) == 0x000000, "Member 'TsBasePlayerController_C_RemoveAxisHandle::axisName' has a wrong offset!");

// Function TsBasePlayerController.TsBasePlayerController_C.RemoveActionHandle
// 0x0010 (0x0010 - 0x0000)
struct TsBasePlayerController_C_RemoveActionHandle final
{
public:
	class FString                                 actionName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(TsBasePlayerController_C_RemoveActionHandle) == 0x000008, "Wrong alignment on TsBasePlayerController_C_RemoveActionHandle");
static_assert(sizeof(TsBasePlayerController_C_RemoveActionHandle) == 0x000010, "Wrong size on TsBasePlayerController_C_RemoveActionHandle");
static_assert(offsetof(TsBasePlayerController_C_RemoveActionHandle, actionName) == 0x000000, "Member 'TsBasePlayerController_C_RemoveActionHandle::actionName' has a wrong offset!");

// Function TsBasePlayerController.TsBasePlayerController_C.GetActionHandle
// 0x0018 (0x0018 - 0x0000)
struct TsBasePlayerController_C_GetActionHandle final
{
public:
	class FString                                 actionName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UTsActionHandle_C*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsBasePlayerController_C_GetActionHandle) == 0x000008, "Wrong alignment on TsBasePlayerController_C_GetActionHandle");
static_assert(sizeof(TsBasePlayerController_C_GetActionHandle) == 0x000018, "Wrong size on TsBasePlayerController_C_GetActionHandle");
static_assert(offsetof(TsBasePlayerController_C_GetActionHandle, actionName) == 0x000000, "Member 'TsBasePlayerController_C_GetActionHandle::actionName' has a wrong offset!");
static_assert(offsetof(TsBasePlayerController_C_GetActionHandle, ReturnValue) == 0x000010, "Member 'TsBasePlayerController_C_GetActionHandle::ReturnValue' has a wrong offset!");

// Function TsBasePlayerController.TsBasePlayerController_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct TsBasePlayerController_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsBasePlayerController_C_ReceiveTick) == 0x000004, "Wrong alignment on TsBasePlayerController_C_ReceiveTick");
static_assert(sizeof(TsBasePlayerController_C_ReceiveTick) == 0x000004, "Wrong size on TsBasePlayerController_C_ReceiveTick");
static_assert(offsetof(TsBasePlayerController_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'TsBasePlayerController_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function TsBasePlayerController.TsBasePlayerController_C.ExecuteUbergraph_TsBasePlayerController
// 0x0008 (0x0008 - 0x0000)
struct TsBasePlayerController_C_ExecuteUbergraph_TsBasePlayerController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TsBasePlayerController_C_ExecuteUbergraph_TsBasePlayerController) == 0x000004, "Wrong alignment on TsBasePlayerController_C_ExecuteUbergraph_TsBasePlayerController");
static_assert(sizeof(TsBasePlayerController_C_ExecuteUbergraph_TsBasePlayerController) == 0x000008, "Wrong size on TsBasePlayerController_C_ExecuteUbergraph_TsBasePlayerController");
static_assert(offsetof(TsBasePlayerController_C_ExecuteUbergraph_TsBasePlayerController, EntryPoint) == 0x000000, "Member 'TsBasePlayerController_C_ExecuteUbergraph_TsBasePlayerController::EntryPoint' has a wrong offset!");
static_assert(offsetof(TsBasePlayerController_C_ExecuteUbergraph_TsBasePlayerController, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'TsBasePlayerController_C_ExecuteUbergraph_TsBasePlayerController::K2Node_Event_DeltaSeconds' has a wrong offset!");

}

