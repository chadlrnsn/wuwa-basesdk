#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroDynamicAtlas

#include "Basic.hpp"

#include "KuroDynamicAtlas_classes.hpp"
#include "KuroDynamicAtlas_parameters.hpp"


namespace SDK
{

// Function KuroDynamicAtlas.DynamicAtlasBlueprintLibrary.AddTextureAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InAtlasTag                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FSoftObjectPath>&   InSoftObjectPath                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FDynamicAtlasSlotManagedHandle>& ManagedHandle)>CompleteCallback                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicAtlasBlueprintLibrary::AddTextureAsync(const class FString& InAtlasTag, const TArray<struct FSoftObjectPath>& InSoftObjectPath, TDelegate<void(const TArray<struct FDynamicAtlasSlotManagedHandle>& ManagedHandle)> CompleteCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicAtlasBlueprintLibrary", "AddTextureAsync");

	Params::DynamicAtlasBlueprintLibrary_AddTextureAsync Parms{};

	Parms.InAtlasTag = std::move(InAtlasTag);
	Parms.InSoftObjectPath = std::move(InSoftObjectPath);
	Parms.CompleteCallback = CompleteCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroDynamicAtlas.DynamicAtlasBlueprintLibrary.CleanAllAtlas
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InAtlasTag                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicAtlasBlueprintLibrary::CleanAllAtlas(const class FString& InAtlasTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicAtlasBlueprintLibrary", "CleanAllAtlas");

	Params::DynamicAtlasBlueprintLibrary_CleanAllAtlas Parms{};

	Parms.InAtlasTag = std::move(InAtlasTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroDynamicAtlas.DynamicAtlasBlueprintLibrary.HasOverrideSetting
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InAtlasTag                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicAtlasBlueprintLibrary::HasOverrideSetting(const class FString& InAtlasTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicAtlasBlueprintLibrary", "HasOverrideSetting");

	Params::DynamicAtlasBlueprintLibrary_HasOverrideSetting Parms{};

	Parms.InAtlasTag = std::move(InAtlasTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroDynamicAtlas.DynamicAtlasBlueprintLibrary.RebuildAllAtlas
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InAtlasTag                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicAtlasBlueprintLibrary::RebuildAllAtlas(const class FString& InAtlasTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicAtlasBlueprintLibrary", "RebuildAllAtlas");

	Params::DynamicAtlasBlueprintLibrary_RebuildAllAtlas Parms{};

	Parms.InAtlasTag = std::move(InAtlasTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroDynamicAtlas.DynamicAtlasBlueprintLibrary.SetOverrideSetting
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    InAtlasTag                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDynamicTextureAtlasSetting*     InSetting                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void UDynamicAtlasBlueprintLibrary::SetOverrideSetting(const class FString& InAtlasTag, struct FDynamicTextureAtlasSetting* InSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicAtlasBlueprintLibrary", "SetOverrideSetting");

	Params::DynamicAtlasBlueprintLibrary_SetOverrideSetting Parms{};

	Parms.InAtlasTag = std::move(InAtlasTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InSetting != nullptr)
		*InSetting = std::move(Parms.InSetting);
}

}

