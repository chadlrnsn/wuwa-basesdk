#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsTaskWander

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "TsTaskAbortImmediatelyBase_classes.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsTaskWander.TsTaskWander_C
// 0x00A8 (0x0160 - 0x00B8)
class UTsTaskWander_C final : public UTsTaskAbortImmediatelyBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_TsTaskWander_C;                     // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         RandomRadius;                                      // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinWanderDistance;                                 // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxNavigationMillisecond;                          // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxStopTime;                                       // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlinkTime;                                         // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UsePatrolPointPriority;                            // 0x00D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        ShowMaterialDa;                                    // 0x00D8(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        HideMaterialDa;                                    // 0x00F8(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        HideEffectDa;                                      // 0x0118(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        ShowEffectDa;                                      // 0x0138(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          MoveStateForWanderOrReset;                         // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ExecuteUbergraph_TsTaskWander(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsTaskWander_C">();
	}
	static class UTsTaskWander_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsTaskWander_C>();
	}
};
static_assert(alignof(UTsTaskWander_C) == 0x000008, "Wrong alignment on UTsTaskWander_C");
static_assert(sizeof(UTsTaskWander_C) == 0x000160, "Wrong size on UTsTaskWander_C");
static_assert(offsetof(UTsTaskWander_C, UberGraphFrame_TsTaskWander_C) == 0x0000B8, "Member 'UTsTaskWander_C::UberGraphFrame_TsTaskWander_C' has a wrong offset!");
static_assert(offsetof(UTsTaskWander_C, RandomRadius) == 0x0000C0, "Member 'UTsTaskWander_C::RandomRadius' has a wrong offset!");
static_assert(offsetof(UTsTaskWander_C, MinWanderDistance) == 0x0000C4, "Member 'UTsTaskWander_C::MinWanderDistance' has a wrong offset!");
static_assert(offsetof(UTsTaskWander_C, MaxNavigationMillisecond) == 0x0000C8, "Member 'UTsTaskWander_C::MaxNavigationMillisecond' has a wrong offset!");
static_assert(offsetof(UTsTaskWander_C, MaxStopTime) == 0x0000CC, "Member 'UTsTaskWander_C::MaxStopTime' has a wrong offset!");
static_assert(offsetof(UTsTaskWander_C, BlinkTime) == 0x0000D0, "Member 'UTsTaskWander_C::BlinkTime' has a wrong offset!");
static_assert(offsetof(UTsTaskWander_C, Debug) == 0x0000D4, "Member 'UTsTaskWander_C::Debug' has a wrong offset!");
static_assert(offsetof(UTsTaskWander_C, UsePatrolPointPriority) == 0x0000D5, "Member 'UTsTaskWander_C::UsePatrolPointPriority' has a wrong offset!");
static_assert(offsetof(UTsTaskWander_C, ShowMaterialDa) == 0x0000D8, "Member 'UTsTaskWander_C::ShowMaterialDa' has a wrong offset!");
static_assert(offsetof(UTsTaskWander_C, HideMaterialDa) == 0x0000F8, "Member 'UTsTaskWander_C::HideMaterialDa' has a wrong offset!");
static_assert(offsetof(UTsTaskWander_C, HideEffectDa) == 0x000118, "Member 'UTsTaskWander_C::HideEffectDa' has a wrong offset!");
static_assert(offsetof(UTsTaskWander_C, ShowEffectDa) == 0x000138, "Member 'UTsTaskWander_C::ShowEffectDa' has a wrong offset!");
static_assert(offsetof(UTsTaskWander_C, MoveStateForWanderOrReset) == 0x000158, "Member 'UTsTaskWander_C::MoveStateForWanderOrReset' has a wrong offset!");

}

