#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplitScreen

#include "Basic.hpp"

#include "BP_SplitScreen_classes.hpp"
#include "BP_SplitScreen_parameters.hpp"


namespace SDK
{

// Function BP_SplitScreen.BP_SplitScreen_C.ExecuteUbergraph_BP_SplitScreen
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplitScreen_C::ExecuteUbergraph_BP_SplitScreen(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_C", "ExecuteUbergraph_BP_SplitScreen");

	Params::BP_SplitScreen_C_ExecuteUbergraph_BP_SplitScreen Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplitScreen.BP_SplitScreen_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplitScreen_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_C", "ReceiveTick");

	Params::BP_SplitScreen_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplitScreen.BP_SplitScreen_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SplitScreen_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplitScreen.BP_SplitScreen_C.Start
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplitScreen_C::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_C", "Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplitScreen.BP_SplitScreen_C.End
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplitScreen_C::End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_C", "End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplitScreen.BP_SplitScreen_C.InitKuroMaterialController
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UKuroMaterialControllerComponent* KuroMaterialControllerComponent                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UChildActorComponent*             CharacterActorComponent                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPointLightComponent*             PointLightComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   PointLight_Location                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              PointLight_ToonLightColor                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              EyeLightSimulation_TongKong                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              EyeLightSimulation_YanBai                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              EyeLightSimulation_Color                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   E_LinkPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Channel0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Channel1                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Channel2                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32*                                  returnHandle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplitScreen_C::InitKuroMaterialController(class UKuroMaterialControllerComponent* KuroMaterialControllerComponent, class UChildActorComponent* CharacterActorComponent, class UPointLightComponent* PointLightComponent, const struct FVector& PointLight_Location, const struct FLinearColor& PointLight_ToonLightColor, const struct FLinearColor& EyeLightSimulation_TongKong, const struct FLinearColor& EyeLightSimulation_YanBai, const struct FLinearColor& EyeLightSimulation_Color, float E_LinkPos, bool Channel0, bool Channel1, bool Channel2, int32* returnHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_C", "InitKuroMaterialController");

	Params::BP_SplitScreen_C_InitKuroMaterialController Parms{};

	Parms.KuroMaterialControllerComponent = KuroMaterialControllerComponent;
	Parms.CharacterActorComponent = CharacterActorComponent;
	Parms.PointLightComponent = PointLightComponent;
	Parms.PointLight_Location = std::move(PointLight_Location);
	Parms.PointLight_ToonLightColor = std::move(PointLight_ToonLightColor);
	Parms.EyeLightSimulation_TongKong = std::move(EyeLightSimulation_TongKong);
	Parms.EyeLightSimulation_YanBai = std::move(EyeLightSimulation_YanBai);
	Parms.EyeLightSimulation_Color = std::move(EyeLightSimulation_Color);
	Parms.E_LinkPos = E_LinkPos;
	Parms.Channel0 = Channel0;
	Parms.Channel1 = Channel1;
	Parms.Channel2 = Channel2;

	UObject::ProcessEvent(Func, &Parms);

	if (returnHandle != nullptr)
		*returnHandle = Parms.returnHandle;
}


// Function BP_SplitScreen.BP_SplitScreen_C.Reset
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplitScreen_C::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplitScreen_C", "Reset");

	UObject::ProcessEvent(Func, nullptr);
}

}

