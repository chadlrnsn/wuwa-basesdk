#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VortexCloud

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VortexCloud.BP_VortexCloud_C
// 0x0078 (0x0338 - 0x02C0)
class ABP_VortexCloud_C final : public AKuroEditorTickActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_StromCloud_ES3;                                 // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_VortexCloud;                                    // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Updata;                                            // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DMI_VortexCloud_0;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_VortexCloud_1;                                 // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            VortexCloudMesh;                                   // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scaler;                                            // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      MI_VortexCloud_0;                                  // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WorldOffsetIntensity;                              // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlowMap_DistortIntansity;                          // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlowMap_Speed;                                     // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AKuroPostProcessVolume*                 Current_PostProcess;                               // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GlobalGI_C*                         BP_Global_GI;                                      // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Android;                                        // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Haidao;                                         // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Is_PC_Or_Android();
	void Set_VortexParameters();
	void Set_Current_Post_Process_Weight();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void EditorTick(float DeltaSeconds);
	void ExecuteUbergraph_BP_VortexCloud(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VortexCloud_C">();
	}
	static class ABP_VortexCloud_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VortexCloud_C>();
	}
};
static_assert(alignof(ABP_VortexCloud_C) == 0x000008, "Wrong alignment on ABP_VortexCloud_C");
static_assert(sizeof(ABP_VortexCloud_C) == 0x000338, "Wrong size on ABP_VortexCloud_C");
static_assert(offsetof(ABP_VortexCloud_C, UberGraphFrame) == 0x0002C0, "Member 'ABP_VortexCloud_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, SM_StromCloud_ES3) == 0x0002C8, "Member 'ABP_VortexCloud_C::SM_StromCloud_ES3' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, SM_VortexCloud) == 0x0002D0, "Member 'ABP_VortexCloud_C::SM_VortexCloud' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, DefaultSceneRoot) == 0x0002D8, "Member 'ABP_VortexCloud_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, Updata) == 0x0002E0, "Member 'ABP_VortexCloud_C::Updata' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, DMI_VortexCloud_0) == 0x0002E8, "Member 'ABP_VortexCloud_C::DMI_VortexCloud_0' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, DMI_VortexCloud_1) == 0x0002F0, "Member 'ABP_VortexCloud_C::DMI_VortexCloud_1' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, VortexCloudMesh) == 0x0002F8, "Member 'ABP_VortexCloud_C::VortexCloudMesh' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, Scaler) == 0x000300, "Member 'ABP_VortexCloud_C::Scaler' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, MI_VortexCloud_0) == 0x000308, "Member 'ABP_VortexCloud_C::MI_VortexCloud_0' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, WorldOffsetIntensity) == 0x000310, "Member 'ABP_VortexCloud_C::WorldOffsetIntensity' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, FlowMap_DistortIntansity) == 0x000314, "Member 'ABP_VortexCloud_C::FlowMap_DistortIntansity' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, FlowMap_Speed) == 0x000318, "Member 'ABP_VortexCloud_C::FlowMap_Speed' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, Current_PostProcess) == 0x000320, "Member 'ABP_VortexCloud_C::Current_PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, BP_Global_GI) == 0x000328, "Member 'ABP_VortexCloud_C::BP_Global_GI' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, Is_Android) == 0x000330, "Member 'ABP_VortexCloud_C::Is_Android' has a wrong offset!");
static_assert(offsetof(ABP_VortexCloud_C, Is_Haidao) == 0x000331, "Member 'ABP_VortexCloud_C::Is_Haidao' has a wrong offset!");

}

