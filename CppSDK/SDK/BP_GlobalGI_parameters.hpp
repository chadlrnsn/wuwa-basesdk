#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalGI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SD_KuroTraceCloudData_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "E_Cloud_Presents_structs.hpp"


namespace SDK::Params
{

// Function BP_GlobalGI.BP_GlobalGI_C.ExecuteUbergraph_BP_GlobalGI
// 0x0040 (0x0040 - 0x0000)
struct BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CurrentTime;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_InName;                               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ULevel*                                 K2Node_Event_InUILevel;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTime_1;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTime;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AKuroImposterUpdater*                   K2Node_DynamicCast_AsKuro_Imposter_Updater;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEditor_ReturnValue;                     // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI) == 0x000008, "Wrong alignment on BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI");
static_assert(sizeof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI) == 0x000040, "Wrong size on BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, EntryPoint) == 0x000000, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, K2Node_Event_CurrentTime) == 0x000004, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::K2Node_Event_CurrentTime' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, K2Node_Event_InName) == 0x000008, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::K2Node_Event_InName' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, K2Node_Event_InUILevel) == 0x000018, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::K2Node_Event_InUILevel' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, K2Node_Event_DeltaTime_1) == 0x000020, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::K2Node_Event_DeltaTime_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, K2Node_Event_DeltaTime) == 0x000024, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, K2Node_DynamicCast_AsKuro_Imposter_Updater) == 0x000028, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::K2Node_DynamicCast_AsKuro_Imposter_Updater' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000034, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, CallFunc_Conv_IntToByte_ReturnValue) == 0x000038, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, CallFunc_GetValidValue_ReturnValue) == 0x000039, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI, CallFunc_IsEditor_ReturnValue) == 0x00003A, "Member 'BP_GlobalGI_C_ExecuteUbergraph_BP_GlobalGI::CallFunc_IsEditor_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.OnKuroTickEditor
// 0x0004 (0x0004 - 0x0000)
struct BP_GlobalGI_C_OnKuroTickEditor final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_OnKuroTickEditor) == 0x000004, "Wrong alignment on BP_GlobalGI_C_OnKuroTickEditor");
static_assert(sizeof(BP_GlobalGI_C_OnKuroTickEditor) == 0x000004, "Wrong size on BP_GlobalGI_C_OnKuroTickEditor");
static_assert(offsetof(BP_GlobalGI_C_OnKuroTickEditor, DeltaTime) == 0x000000, "Member 'BP_GlobalGI_C_OnKuroTickEditor::DeltaTime' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.OnKuroTick
// 0x0004 (0x0004 - 0x0000)
struct BP_GlobalGI_C_OnKuroTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_OnKuroTick) == 0x000004, "Wrong alignment on BP_GlobalGI_C_OnKuroTick");
static_assert(sizeof(BP_GlobalGI_C_OnKuroTick) == 0x000004, "Wrong size on BP_GlobalGI_C_OnKuroTick");
static_assert(offsetof(BP_GlobalGI_C_OnKuroTick, DeltaTime) == 0x000000, "Member 'BP_GlobalGI_C_OnKuroTick::DeltaTime' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.OnKuroStartUiScene
// 0x0018 (0x0018 - 0x0000)
struct BP_GlobalGI_C_OnKuroStartUiScene final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class ULevel*                                 InUILevel;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_OnKuroStartUiScene) == 0x000008, "Wrong alignment on BP_GlobalGI_C_OnKuroStartUiScene");
static_assert(sizeof(BP_GlobalGI_C_OnKuroStartUiScene) == 0x000018, "Wrong size on BP_GlobalGI_C_OnKuroStartUiScene");
static_assert(offsetof(BP_GlobalGI_C_OnKuroStartUiScene, InName) == 0x000000, "Member 'BP_GlobalGI_C_OnKuroStartUiScene::InName' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_OnKuroStartUiScene, InUILevel) == 0x000010, "Member 'BP_GlobalGI_C_OnKuroStartUiScene::InUILevel' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.OnKuroSetRuntimeTime
// 0x0004 (0x0004 - 0x0000)
struct BP_GlobalGI_C_OnKuroSetRuntimeTime final
{
public:
	float                                         CurrentTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_OnKuroSetRuntimeTime) == 0x000004, "Wrong alignment on BP_GlobalGI_C_OnKuroSetRuntimeTime");
static_assert(sizeof(BP_GlobalGI_C_OnKuroSetRuntimeTime) == 0x000004, "Wrong size on BP_GlobalGI_C_OnKuroSetRuntimeTime");
static_assert(offsetof(BP_GlobalGI_C_OnKuroSetRuntimeTime, CurrentTime) == 0x000000, "Member 'BP_GlobalGI_C_OnKuroSetRuntimeTime::CurrentTime' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateCharacterGI
// 0x00F0 (0x00F0 - 0x0000)
struct BP_GlobalGI_C_UpdateCharacterGI final
{
public:
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Scene_Light_Direction_LightDir;       // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_EulerToForward_ReturnValue;               // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               K2Node_MakeStruct_Vector4;                         // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetTODCharacterLighting_FrontSideLight;   // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetTODCharacterLighting_BackSideLight;    // 0x0094(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x00A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x00C4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_2;            // 0x00D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_UpdateCharacterGI) == 0x000010, "Wrong alignment on BP_GlobalGI_C_UpdateCharacterGI");
static_assert(sizeof(BP_GlobalGI_C_UpdateCharacterGI) == 0x0000F0, "Wrong size on BP_GlobalGI_C_UpdateCharacterGI");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_GetForwardVector_ReturnValue) == 0x000000, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_Normal_ReturnValue) == 0x00000C, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_Get_Scene_Light_Direction_LightDir) == 0x000018, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_Get_Scene_Light_Direction_LightDir' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000024, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_MakeRotFromX_ReturnValue) == 0x000030, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_BreakRotator_Roll) == 0x00003C, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_BreakRotator_Pitch) == 0x000040, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_BreakRotator_Yaw) == 0x000044, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_EulerToForward_ReturnValue) == 0x000048, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_EulerToForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_Lerp_ReturnValue) == 0x000054, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_BreakVector_X) == 0x000058, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_BreakVector_Y) == 0x00005C, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_BreakVector_Z) == 0x000060, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, K2Node_MakeStruct_Vector4) == 0x000070, "Member 'BP_GlobalGI_C_UpdateCharacterGI::K2Node_MakeStruct_Vector4' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_Lerp_ReturnValue_1) == 0x000080, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_GetTODCharacterLighting_FrontSideLight) == 0x000084, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_GetTODCharacterLighting_FrontSideLight' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_GetTODCharacterLighting_BackSideLight) == 0x000094, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_GetTODCharacterLighting_BackSideLight' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x0000A4, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_LinearColorLerp_ReturnValue) == 0x0000B4, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_LinearColorLerp_ReturnValue_1) == 0x0000C4, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCharacterGI, CallFunc_LinearColorLerp_ReturnValue_2) == 0x0000D4, "Member 'BP_GlobalGI_C_UpdateCharacterGI::CallFunc_LinearColorLerp_ReturnValue_2' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateGIData
// 0x0020 (0x0020 - 0x0000)
struct BP_GlobalGI_C_UpdateGIData final
{
public:
	bool                                          Skip_Lerp_Data;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               SunPositon;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_UpdateGIData) == 0x000010, "Wrong alignment on BP_GlobalGI_C_UpdateGIData");
static_assert(sizeof(BP_GlobalGI_C_UpdateGIData) == 0x000020, "Wrong size on BP_GlobalGI_C_UpdateGIData");
static_assert(offsetof(BP_GlobalGI_C_UpdateGIData, Skip_Lerp_Data) == 0x000000, "Member 'BP_GlobalGI_C_UpdateGIData::Skip_Lerp_Data' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateGIData, SunPositon) == 0x000010, "Member 'BP_GlobalGI_C_UpdateGIData::SunPositon' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateFog
// 0x0098 (0x0098 - 0x0000)
struct BP_GlobalGI_C_UpdateFog final
{
public:
	float                                         UIWorldZOffset;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_KuroVolumeCloud_Global_C*           K2Node_DynamicCast_AsBP_Kuro_Volume_Cloud_Global;  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKuroUiSceneSystem*                     CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetCurrentUiSceneRenderingSceneName_ReturnValue; // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetUiSceneWorldPositionOffset_ReturnValue; // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeightedBlendable                     K2Node_MakeStruct_WeightedBlendable;               // 0x0080(0x0010)(NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_UpdateFog) == 0x000008, "Wrong alignment on BP_GlobalGI_C_UpdateFog");
static_assert(sizeof(BP_GlobalGI_C_UpdateFog) == 0x000098, "Wrong size on BP_GlobalGI_C_UpdateFog");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, UIWorldZOffset) == 0x000000, "Member 'BP_GlobalGI_C_UpdateFog::UIWorldZOffset' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000004, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000010, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, K2Node_DynamicCast_AsBP_Kuro_Volume_Cloud_Global) == 0x000020, "Member 'BP_GlobalGI_C_UpdateFog::K2Node_DynamicCast_AsBP_Kuro_Volume_Cloud_Global' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_GlobalGI_C_UpdateFog::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000030, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000038, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_GetCurrentUiSceneRenderingSceneName_ReturnValue) == 0x000040, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_GetCurrentUiSceneRenderingSceneName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_GetUiSceneWorldPositionOffset_ReturnValue) == 0x000054, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_GetUiSceneWorldPositionOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_BreakVector_X) == 0x000060, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_BreakVector_Y) == 0x000064, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_BreakVector_Z) == 0x000068, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000070, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_IsValid_ReturnValue_1) == 0x000078, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, K2Node_MakeStruct_WeightedBlendable) == 0x000080, "Member 'BP_GlobalGI_C_UpdateFog::K2Node_MakeStruct_WeightedBlendable' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_IsValid_ReturnValue_2) == 0x000090, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateFog, CallFunc_IsValid_ReturnValue_3) == 0x000091, "Member 'BP_GlobalGI_C_UpdateFog::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.Update Env
// 0x0010 (0x0010 - 0x0000)
struct BP_GlobalGI_C_Update_Env final
{
public:
	class AKuroWorldRainGlobalOverrider*          K2Node_DynamicCast_AsKuro_World_Rain_Global_Overrider; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_Update_Env) == 0x000008, "Wrong alignment on BP_GlobalGI_C_Update_Env");
static_assert(sizeof(BP_GlobalGI_C_Update_Env) == 0x000010, "Wrong size on BP_GlobalGI_C_Update_Env");
static_assert(offsetof(BP_GlobalGI_C_Update_Env, K2Node_DynamicCast_AsKuro_World_Rain_Global_Overrider) == 0x000000, "Member 'BP_GlobalGI_C_Update_Env::K2Node_DynamicCast_AsKuro_World_Rain_Global_Overrider' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Env, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BP_GlobalGI_C_Update_Env::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.Get2SkyboxLerpWeight
// 0x0034 (0x0034 - 0x0000)
struct BP_GlobalGI_C_Get2SkyboxLerpWeight final
{
public:
	float                                         startSetting;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndSetting;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTime;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weight;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         时间差;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_Get2SkyboxLerpWeight) == 0x000004, "Wrong alignment on BP_GlobalGI_C_Get2SkyboxLerpWeight");
static_assert(sizeof(BP_GlobalGI_C_Get2SkyboxLerpWeight) == 0x000034, "Wrong size on BP_GlobalGI_C_Get2SkyboxLerpWeight");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, startSetting) == 0x000000, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::startSetting' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, EndSetting) == 0x000004, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::EndSetting' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, CurrentTime) == 0x000008, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::CurrentTime' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, Weight) == 0x00000C, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::Weight' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, 时间差) == 0x000010, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::时间差' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000024, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, CallFunc_Abs_ReturnValue) == 0x000028, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x00002C, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get2SkyboxLerpWeight, CallFunc_Abs_ReturnValue_1) == 0x000030, "Member 'BP_GlobalGI_C_Get2SkyboxLerpWeight::CallFunc_Abs_ReturnValue_1' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateWind
// 0x0060 (0x0060 - 0x0000)
struct BP_GlobalGI_C_UpdateWind final
{
public:
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_1;   // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_UpdateWind) == 0x000004, "Wrong alignment on BP_GlobalGI_C_UpdateWind");
static_assert(sizeof(BP_GlobalGI_C_UpdateWind) == 0x000060, "Wrong size on BP_GlobalGI_C_UpdateWind");
static_assert(offsetof(BP_GlobalGI_C_UpdateWind, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000000, "Member 'BP_GlobalGI_C_UpdateWind::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateWind, CallFunc_MakeRotator_ReturnValue) == 0x000010, "Member 'BP_GlobalGI_C_UpdateWind::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateWind, CallFunc_GetRightVector_ReturnValue) == 0x00001C, "Member 'BP_GlobalGI_C_UpdateWind::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateWind, CallFunc_GetForwardVector_ReturnValue) == 0x000028, "Member 'BP_GlobalGI_C_UpdateWind::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateWind, CallFunc_Normal_ReturnValue) == 0x000034, "Member 'BP_GlobalGI_C_UpdateWind::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateWind, CallFunc_Normal_ReturnValue_1) == 0x000040, "Member 'BP_GlobalGI_C_UpdateWind::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateWind, CallFunc_Conv_VectorToLinearColor_ReturnValue_1) == 0x00004C, "Member 'BP_GlobalGI_C_UpdateWind::CallFunc_Conv_VectorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateWind, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_GlobalGI_C_UpdateWind::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.Get Scene Light Direction
// 0x0018 (0x0018 - 0x0000)
struct BP_GlobalGI_C_Get_Scene_Light_Direction final
{
public:
	struct FVector                                LightDir;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_Get_Scene_Light_Direction) == 0x000004, "Wrong alignment on BP_GlobalGI_C_Get_Scene_Light_Direction");
static_assert(sizeof(BP_GlobalGI_C_Get_Scene_Light_Direction) == 0x000018, "Wrong size on BP_GlobalGI_C_Get_Scene_Light_Direction");
static_assert(offsetof(BP_GlobalGI_C_Get_Scene_Light_Direction, LightDir) == 0x000000, "Member 'BP_GlobalGI_C_Get_Scene_Light_Direction::LightDir' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Get_Scene_Light_Direction, CallFunc_GetForwardVector_ReturnValue) == 0x00000C, "Member 'BP_GlobalGI_C_Get_Scene_Light_Direction::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateSkyLight
// 0x0010 (0x0010 - 0x0000)
struct BP_GlobalGI_C_UpdateSkyLight final
{
public:
	struct FLinearColor                           LightColor;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_UpdateSkyLight) == 0x000004, "Wrong alignment on BP_GlobalGI_C_UpdateSkyLight");
static_assert(sizeof(BP_GlobalGI_C_UpdateSkyLight) == 0x000010, "Wrong size on BP_GlobalGI_C_UpdateSkyLight");
static_assert(offsetof(BP_GlobalGI_C_UpdateSkyLight, LightColor) == 0x000000, "Member 'BP_GlobalGI_C_UpdateSkyLight::LightColor' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.CalculateLightDirection
// 0x0058 (0x0058 - 0x0000)
struct BP_GlobalGI_C_CalculateLightDirection final
{
public:
	float                                         Vertical;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Horizontal;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewParam;                                          // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetLightDirectionFromVH_Result;           // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_CalculateLightDirection) == 0x000004, "Wrong alignment on BP_GlobalGI_C_CalculateLightDirection");
static_assert(sizeof(BP_GlobalGI_C_CalculateLightDirection) == 0x000058, "Wrong size on BP_GlobalGI_C_CalculateLightDirection");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirection, Vertical) == 0x000000, "Member 'BP_GlobalGI_C_CalculateLightDirection::Vertical' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirection, Horizontal) == 0x000004, "Member 'BP_GlobalGI_C_CalculateLightDirection::Horizontal' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirection, Time) == 0x000008, "Member 'BP_GlobalGI_C_CalculateLightDirection::Time' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirection, NewParam) == 0x00000C, "Member 'BP_GlobalGI_C_CalculateLightDirection::NewParam' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirection, CallFunc_GetLightDirectionFromVH_Result) == 0x000018, "Member 'BP_GlobalGI_C_CalculateLightDirection::CallFunc_GetLightDirectionFromVH_Result' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirection, CallFunc_MapRangeClamped_ReturnValue) == 0x000024, "Member 'BP_GlobalGI_C_CalculateLightDirection::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirection, CallFunc_GetUpVector_ReturnValue) == 0x000028, "Member 'BP_GlobalGI_C_CalculateLightDirection::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirection, CallFunc_GetForwardVector_ReturnValue) == 0x000034, "Member 'BP_GlobalGI_C_CalculateLightDirection::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirection, CallFunc_RotateAngleAxis_ReturnValue) == 0x000040, "Member 'BP_GlobalGI_C_CalculateLightDirection::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirection, CallFunc_MakeRotFromX_ReturnValue) == 0x00004C, "Member 'BP_GlobalGI_C_CalculateLightDirection::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.CalculateLightDirectionWithLimit
// 0x0090 (0x0090 - 0x0000)
struct BP_GlobalGI_C_CalculateLightDirectionWithLimit final
{
public:
	float                                         V;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         H;                                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewParam;                                          // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TempAngle;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_2;         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetLightDirectionFromVH_Result;           // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_CalculateLightDirectionWithLimit) == 0x000004, "Wrong alignment on BP_GlobalGI_C_CalculateLightDirectionWithLimit");
static_assert(sizeof(BP_GlobalGI_C_CalculateLightDirectionWithLimit) == 0x000090, "Wrong size on BP_GlobalGI_C_CalculateLightDirectionWithLimit");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, V) == 0x000000, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::V' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, H) == 0x000004, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::H' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, Time) == 0x000008, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::Time' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, NewParam) == 0x00000C, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::NewParam' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, TempAngle) == 0x000018, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::TempAngle' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_InRange_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x00001D, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_MapRangeClamped_ReturnValue) == 0x000020, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000024, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_InRange_FloatFloat_ReturnValue_2) == 0x000028, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_InRange_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_GetLightDirectionFromVH_Result) == 0x00002C, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_GetLightDirectionFromVH_Result' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_GetUpVector_ReturnValue) == 0x000038, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_GetForwardVector_ReturnValue) == 0x000044, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000050, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_RotateAngleAxis_ReturnValue) == 0x000054, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_MakeRotFromX_ReturnValue) == 0x000060, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_BreakRotator_Roll) == 0x00006C, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_BreakRotator_Pitch) == 0x000070, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_BreakRotator_Yaw) == 0x000074, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_MakeRotator_ReturnValue) == 0x000078, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_Add_FloatFloat_ReturnValue) == 0x000084, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_FClamp_ReturnValue) == 0x000088, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_CalculateLightDirectionWithLimit, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00008C, "Member 'BP_GlobalGI_C_CalculateLightDirectionWithLimit::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.InitFeature
// 0x0001 (0x0001 - 0x0000)
struct BP_GlobalGI_C_InitFeature final
{
public:
	bool                                          NewLocalVar_0;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_InitFeature) == 0x000001, "Wrong alignment on BP_GlobalGI_C_InitFeature");
static_assert(sizeof(BP_GlobalGI_C_InitFeature) == 0x000001, "Wrong size on BP_GlobalGI_C_InitFeature");
static_assert(offsetof(BP_GlobalGI_C_InitFeature, NewLocalVar_0) == 0x000000, "Member 'BP_GlobalGI_C_InitFeature::NewLocalVar_0' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.GetViewLocation
// 0x0010 (0x0010 - 0x0000)
struct BP_GlobalGI_C_GetViewLocation final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Suc;                                               // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_GetViewLocation) == 0x000004, "Wrong alignment on BP_GlobalGI_C_GetViewLocation");
static_assert(sizeof(BP_GlobalGI_C_GetViewLocation) == 0x000010, "Wrong size on BP_GlobalGI_C_GetViewLocation");
static_assert(offsetof(BP_GlobalGI_C_GetViewLocation, WorldPosition) == 0x000000, "Member 'BP_GlobalGI_C_GetViewLocation::WorldPosition' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetViewLocation, Suc) == 0x00000C, "Member 'BP_GlobalGI_C_GetViewLocation::Suc' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateTime
// 0x0030 (0x0030 - 0x0000)
struct BP_GlobalGI_C_UpdateTime final
{
public:
	int32                                         ___int_Variable;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Fraction_ReturnValue;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_UpdateTime) == 0x000004, "Wrong alignment on BP_GlobalGI_C_UpdateTime");
static_assert(sizeof(BP_GlobalGI_C_UpdateTime) == 0x000030, "Wrong size on BP_GlobalGI_C_UpdateTime");
static_assert(offsetof(BP_GlobalGI_C_UpdateTime, ___int_Variable) == 0x000000, "Member 'BP_GlobalGI_C_UpdateTime::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateTime, CallFunc_Fraction_ReturnValue) == 0x000004, "Member 'BP_GlobalGI_C_UpdateTime::CallFunc_Fraction_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateTime, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_GlobalGI_C_UpdateTime::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateTime, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_GlobalGI_C_UpdateTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateTime, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_GlobalGI_C_UpdateTime::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateTime, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_GlobalGI_C_UpdateTime::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateTime, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_GlobalGI_C_UpdateTime::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateTime, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_GlobalGI_C_UpdateTime::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateTime, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000020, "Member 'BP_GlobalGI_C_UpdateTime::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateTime, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000024, "Member 'BP_GlobalGI_C_UpdateTime::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateTime, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_GlobalGI_C_UpdateTime::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateTime, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_GlobalGI_C_UpdateTime::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.Update UI Env
// 0x0004 (0x0004 - 0x0000)
struct BP_GlobalGI_C_Update_UI_Env final
{
public:
	float                                         Temp;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_Update_UI_Env) == 0x000004, "Wrong alignment on BP_GlobalGI_C_Update_UI_Env");
static_assert(sizeof(BP_GlobalGI_C_Update_UI_Env) == 0x000004, "Wrong size on BP_GlobalGI_C_Update_UI_Env");
static_assert(offsetof(BP_GlobalGI_C_Update_UI_Env, Temp) == 0x000000, "Member 'BP_GlobalGI_C_Update_UI_Env::Temp' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.Update Main Light
// 0x0010 (0x0010 - 0x0000)
struct BP_GlobalGI_C_Update_Main_Light final
{
public:
	struct FLinearColor                           LightColor;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_Update_Main_Light) == 0x000004, "Wrong alignment on BP_GlobalGI_C_Update_Main_Light");
static_assert(sizeof(BP_GlobalGI_C_Update_Main_Light) == 0x000010, "Wrong size on BP_GlobalGI_C_Update_Main_Light");
static_assert(offsetof(BP_GlobalGI_C_Update_Main_Light, LightColor) == 0x000000, "Member 'BP_GlobalGI_C_Update_Main_Light::LightColor' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.Update Light Direction
// 0x0258 (0x0258 - 0x0000)
struct BP_GlobalGI_C_Update_Light_Direction final
{
public:
	bool                                          CallFunc_IsUsingNotSeparateCache_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingParallaxCorrect_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0004(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_CalLightDirectionWithLimit_LightRotation; // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_CalLightDirectionWithLimit_LightRotation_1; // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetParallaxCorrectCachedForwardVector_ReturnValue; // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingParallaxCorrect_ReturnValue_1;     // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x00E0(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_2;           // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue_1;                    // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_2;  // 0x01C4(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_GlobalGI_C_Update_Light_Direction) == 0x000004, "Wrong alignment on BP_GlobalGI_C_Update_Light_Direction");
static_assert(sizeof(BP_GlobalGI_C_Update_Light_Direction) == 0x000258, "Wrong size on BP_GlobalGI_C_Update_Light_Direction");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_IsUsingNotSeparateCache_ReturnValue) == 0x000000, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_IsUsingNotSeparateCache_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_IsUsingParallaxCorrect_ReturnValue) == 0x000001, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_IsUsingParallaxCorrect_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000004, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000098, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Add_FloatFloat_ReturnValue) == 0x00009C, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_CalLightDirectionWithLimit_LightRotation) == 0x0000A0, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_CalLightDirectionWithLimit_LightRotation' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_CalLightDirectionWithLimit_LightRotation_1) == 0x0000AC, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_CalLightDirectionWithLimit_LightRotation_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_IsValid_ReturnValue) == 0x0000B8, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_GetParallaxCorrectCachedForwardVector_ReturnValue) == 0x0000BC, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_GetParallaxCorrectCachedForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000C8, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_IsUsingParallaxCorrect_ReturnValue_1) == 0x0000CC, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_IsUsingParallaxCorrect_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_GetForwardVector_ReturnValue) == 0x0000D0, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000DC, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x0000E0, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_DegAcos_ReturnValue) == 0x000174, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000178, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_GetForwardVector_ReturnValue_1) == 0x00017C, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_GetForwardVector_ReturnValue_2) == 0x000188, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_GetForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000194, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x000198, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_DegAcos_ReturnValue_1) == 0x00019C, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_DegAcos_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0001A0, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0001A4, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x0001A8, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0001AC, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0001B0, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0001B4, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0001B8, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0001BC, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0001C0, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Light_Direction, CallFunc_K2_SetRelativeRotation_SweepHitResult_2) == 0x0001C4, "Member 'BP_GlobalGI_C_Update_Light_Direction::CallFunc_K2_SetRelativeRotation_SweepHitResult_2' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateLightParameters
// 0x00E0 (0x00E0 - 0x0000)
struct BP_GlobalGI_C_UpdateLightParameters final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 CallFunc_Conv_LinearColorToColor_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_R;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_G;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_B;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_A;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColor_Desaturated_ReturnValue;      // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               K2Node_MakeStruct_Vector4;                         // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               K2Node_MakeStruct_Vector4_1;                       // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakColor_R_1;                           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_G_1;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_B_1;                           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_A_1;                           // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_Conv_LinearColorToColor_ReturnValue_1;    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_LinearColor_Desaturated_ReturnValue_1;    // 0x00A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0xC];                                       // 0x00B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               K2Node_MakeStruct_Vector4_2;                       // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               K2Node_MakeStruct_Vector4_3;                       // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_UpdateLightParameters) == 0x000010, "Wrong alignment on BP_GlobalGI_C_UpdateLightParameters");
static_assert(sizeof(BP_GlobalGI_C_UpdateLightParameters) == 0x0000E0, "Wrong size on BP_GlobalGI_C_UpdateLightParameters");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Conv_LinearColorToColor_ReturnValue) == 0x000004, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Conv_LinearColorToColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_BreakColor_R) == 0x000008, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_BreakColor_R' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_BreakColor_G) == 0x00000C, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_BreakColor_G' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_BreakColor_B) == 0x000010, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_BreakColor_B' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_BreakColor_A) == 0x000014, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_BreakColor_A' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000020, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_LinearColor_Desaturated_ReturnValue) == 0x000028, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_LinearColor_Desaturated_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000038, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00003C, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, K2Node_MakeStruct_Vector4) == 0x000040, "Member 'BP_GlobalGI_C_UpdateLightParameters::K2Node_MakeStruct_Vector4' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, K2Node_MakeStruct_Vector4_1) == 0x000050, "Member 'BP_GlobalGI_C_UpdateLightParameters::K2Node_MakeStruct_Vector4_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000060, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_BreakColor_R_1) == 0x000064, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_BreakColor_R_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_BreakColor_G_1) == 0x000068, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_BreakColor_G_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_BreakColor_B_1) == 0x00006C, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_BreakColor_B_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_BreakColor_A_1) == 0x000070, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_BreakColor_A_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000074, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000078, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x00007C, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000080, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Conv_LinearColorToColor_ReturnValue_1) == 0x000084, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Conv_LinearColorToColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000088, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x00008C, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x000090, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000A0, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, CallFunc_LinearColor_Desaturated_ReturnValue_1) == 0x0000A4, "Member 'BP_GlobalGI_C_UpdateLightParameters::CallFunc_LinearColor_Desaturated_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, K2Node_MakeStruct_Vector4_2) == 0x0000C0, "Member 'BP_GlobalGI_C_UpdateLightParameters::K2Node_MakeStruct_Vector4_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightParameters, K2Node_MakeStruct_Vector4_3) == 0x0000D0, "Member 'BP_GlobalGI_C_UpdateLightParameters::K2Node_MakeStruct_Vector4_3' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.GetLightDirectionFromVH
// 0x0020 (0x0020 - 0x0000)
struct BP_GlobalGI_C_GetLightDirectionFromVH final
{
public:
	float                                         Vertical;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Horizontal;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Result;                                            // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_GetLightDirectionFromVH) == 0x000004, "Wrong alignment on BP_GlobalGI_C_GetLightDirectionFromVH");
static_assert(sizeof(BP_GlobalGI_C_GetLightDirectionFromVH) == 0x000020, "Wrong size on BP_GlobalGI_C_GetLightDirectionFromVH");
static_assert(offsetof(BP_GlobalGI_C_GetLightDirectionFromVH, Vertical) == 0x000000, "Member 'BP_GlobalGI_C_GetLightDirectionFromVH::Vertical' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetLightDirectionFromVH, Horizontal) == 0x000004, "Member 'BP_GlobalGI_C_GetLightDirectionFromVH::Horizontal' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetLightDirectionFromVH, Result) == 0x000008, "Member 'BP_GlobalGI_C_GetLightDirectionFromVH::Result' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetLightDirectionFromVH, CallFunc_MakeRotator_ReturnValue) == 0x000014, "Member 'BP_GlobalGI_C_GetLightDirectionFromVH::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateLightShaft
// 0x0020 (0x0020 - 0x0000)
struct BP_GlobalGI_C_UpdateLightShaft final
{
public:
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_UpdateLightShaft) == 0x000004, "Wrong alignment on BP_GlobalGI_C_UpdateLightShaft");
static_assert(sizeof(BP_GlobalGI_C_UpdateLightShaft) == 0x000020, "Wrong size on BP_GlobalGI_C_UpdateLightShaft");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightShaft, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_GlobalGI_C_UpdateLightShaft::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightShaft, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000004, "Member 'BP_GlobalGI_C_UpdateLightShaft::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightShaft, CallFunc_SelectVector_ReturnValue) == 0x000010, "Member 'BP_GlobalGI_C_UpdateLightShaft::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightShaft, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_GlobalGI_C_UpdateLightShaft::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightShaft, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00001D, "Member 'BP_GlobalGI_C_UpdateLightShaft::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateLightShaft, CallFunc_BooleanAND_ReturnValue) == 0x00001E, "Member 'BP_GlobalGI_C_UpdateLightShaft::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.Set All Components States
// 0x0002 (0x0002 - 0x0000)
struct BP_GlobalGI_C_Set_All_Components_States final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_Set_All_Components_States) == 0x000001, "Wrong alignment on BP_GlobalGI_C_Set_All_Components_States");
static_assert(sizeof(BP_GlobalGI_C_Set_All_Components_States) == 0x000002, "Wrong size on BP_GlobalGI_C_Set_All_Components_States");
static_assert(offsetof(BP_GlobalGI_C_Set_All_Components_States, IsEnable) == 0x000000, "Member 'BP_GlobalGI_C_Set_All_Components_States::IsEnable' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Set_All_Components_States, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'BP_GlobalGI_C_Set_All_Components_States::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.InitGI
// 0x0002 (0x0002 - 0x0000)
struct BP_GlobalGI_C_InitGI final
{
public:
	EKuroFeatureLevel                             CallFunc_GetWorldFeatureLevel_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_InitGI) == 0x000001, "Wrong alignment on BP_GlobalGI_C_InitGI");
static_assert(sizeof(BP_GlobalGI_C_InitGI) == 0x000002, "Wrong size on BP_GlobalGI_C_InitGI");
static_assert(offsetof(BP_GlobalGI_C_InitGI, CallFunc_GetWorldFeatureLevel_ReturnValue) == 0x000000, "Member 'BP_GlobalGI_C_InitGI::CallFunc_GetWorldFeatureLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_InitGI, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_GlobalGI_C_InitGI::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateSkyDome
// 0x0018 (0x0018 - 0x0000)
struct BP_GlobalGI_C_UpdateSkyDome final
{
public:
	struct FLinearColor                           AtmosphereSunRotVec;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SkyDome_C*                          SkyDomeActor;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_UpdateSkyDome) == 0x000008, "Wrong alignment on BP_GlobalGI_C_UpdateSkyDome");
static_assert(sizeof(BP_GlobalGI_C_UpdateSkyDome) == 0x000018, "Wrong size on BP_GlobalGI_C_UpdateSkyDome");
static_assert(offsetof(BP_GlobalGI_C_UpdateSkyDome, AtmosphereSunRotVec) == 0x000000, "Member 'BP_GlobalGI_C_UpdateSkyDome::AtmosphereSunRotVec' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateSkyDome, SkyDomeActor) == 0x000010, "Member 'BP_GlobalGI_C_UpdateSkyDome::SkyDomeActor' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateCloudCard
// 0x00A4 (0x00A4 - 0x0000)
struct BP_GlobalGI_C_UpdateCloudCard final
{
public:
	struct FKuroCloudCardSetting                  CloudCardSetting;                                  // 0x0000(0x0094)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x0094(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_UpdateCloudCard) == 0x000004, "Wrong alignment on BP_GlobalGI_C_UpdateCloudCard");
static_assert(sizeof(BP_GlobalGI_C_UpdateCloudCard) == 0x0000A4, "Wrong size on BP_GlobalGI_C_UpdateCloudCard");
static_assert(offsetof(BP_GlobalGI_C_UpdateCloudCard, CloudCardSetting) == 0x000000, "Member 'BP_GlobalGI_C_UpdateCloudCard::CloudCardSetting' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateCloudCard, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x000094, "Member 'BP_GlobalGI_C_UpdateCloudCard::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.Update Day Night Data Layer
// 0x0090 (0x0090 - 0x0000)
struct BP_GlobalGI_C_Update_Day_Night_Data_Layer final
{
public:
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_1;            // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_2;       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_3;       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_2;            // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_3;            // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTODLightManagerSubsystem*              CallFunc_GetSubsystem_ReturnValue;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_4;            // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_5;            // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_Update_Day_Night_Data_Layer) == 0x000008, "Wrong alignment on BP_GlobalGI_C_Update_Day_Night_Data_Layer");
static_assert(sizeof(BP_GlobalGI_C_Update_Day_Night_Data_Layer) == 0x000090, "Wrong size on BP_GlobalGI_C_Update_Day_Night_Data_Layer");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_MakeLiteralName_ReturnValue) == 0x000004, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_MakeLiteralName_ReturnValue_1) == 0x000010, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_MakeLiteralName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00001C, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000024, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000025, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000026, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_BooleanAND_ReturnValue_1) == 0x000027, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000028, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_Add_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000030, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x000031, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_GetWorldDeltaSeconds_ReturnValue_2) == 0x000034, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_GetWorldDeltaSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_BooleanAND_ReturnValue_2) == 0x000038, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_GetWorldDeltaSeconds_ReturnValue_3) == 0x000040, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_GetWorldDeltaSeconds_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000044, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000048, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x00004C, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x00004D, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_MakeLiteralName_ReturnValue_2) == 0x000050, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_MakeLiteralName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_MakeLiteralName_ReturnValue_3) == 0x00005C, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_MakeLiteralName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_GetSubsystem_ReturnValue) == 0x000068, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_GetSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_MakeLiteralName_ReturnValue_4) == 0x000074, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_MakeLiteralName_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Day_Night_Data_Layer, CallFunc_MakeLiteralName_ReturnValue_5) == 0x000080, "Member 'BP_GlobalGI_C_Update_Day_Night_Data_Layer::CallFunc_MakeLiteralName_ReturnValue_5' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateMisc
// 0x0020 (0x0020 - 0x0000)
struct BP_GlobalGI_C_UpdateMisc final
{
public:
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_UpdateMisc) == 0x000004, "Wrong alignment on BP_GlobalGI_C_UpdateMisc");
static_assert(sizeof(BP_GlobalGI_C_UpdateMisc) == 0x000020, "Wrong size on BP_GlobalGI_C_UpdateMisc");
static_assert(offsetof(BP_GlobalGI_C_UpdateMisc, CallFunc_GetVectorParameterValue_ReturnValue) == 0x000000, "Member 'BP_GlobalGI_C_UpdateMisc::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateMisc, K2Node_MakeStruct_LinearColor) == 0x000010, "Member 'BP_GlobalGI_C_UpdateMisc::K2Node_MakeStruct_LinearColor' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.GetSkyboxDMI
// 0x0020 (0x0020 - 0x0000)
struct BP_GlobalGI_C_GetSkyboxDMI final
{
public:
	class UMaterialInstanceDynamic*               DMIRet;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_GetSkyboxDMI) == 0x000008, "Wrong alignment on BP_GlobalGI_C_GetSkyboxDMI");
static_assert(sizeof(BP_GlobalGI_C_GetSkyboxDMI) == 0x000020, "Wrong size on BP_GlobalGI_C_GetSkyboxDMI");
static_assert(offsetof(BP_GlobalGI_C_GetSkyboxDMI, DMIRet) == 0x000000, "Member 'BP_GlobalGI_C_GetSkyboxDMI::DMIRet' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetSkyboxDMI, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_GlobalGI_C_GetSkyboxDMI::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetSkyboxDMI, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'BP_GlobalGI_C_GetSkyboxDMI::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetSkyboxDMI, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'BP_GlobalGI_C_GetSkyboxDMI::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetSkyboxDMI, CallFunc_IsValid_ReturnValue_2) == 0x000018, "Member 'BP_GlobalGI_C_GetSkyboxDMI::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.GetStarsDMI
// 0x0020 (0x0020 - 0x0000)
struct BP_GlobalGI_C_GetStarsDMI final
{
public:
	class UMaterialInstanceDynamic*               DMIRet;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_GetStarsDMI) == 0x000008, "Wrong alignment on BP_GlobalGI_C_GetStarsDMI");
static_assert(sizeof(BP_GlobalGI_C_GetStarsDMI) == 0x000020, "Wrong size on BP_GlobalGI_C_GetStarsDMI");
static_assert(offsetof(BP_GlobalGI_C_GetStarsDMI, DMIRet) == 0x000000, "Member 'BP_GlobalGI_C_GetStarsDMI::DMIRet' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetStarsDMI, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_GlobalGI_C_GetStarsDMI::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetStarsDMI, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'BP_GlobalGI_C_GetStarsDMI::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetStarsDMI, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'BP_GlobalGI_C_GetStarsDMI::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetStarsDMI, CallFunc_IsValid_ReturnValue_2) == 0x000018, "Member 'BP_GlobalGI_C_GetStarsDMI::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.SetLevelSequenceTimeControl
// 0x0010 (0x0010 - 0x0000)
struct BP_GlobalGI_C_SetLevelSequenceTimeControl final
{
public:
	class ABP_ControlTodTime_C*                   TodTimeControl;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_SetLevelSequenceTimeControl) == 0x000008, "Wrong alignment on BP_GlobalGI_C_SetLevelSequenceTimeControl");
static_assert(sizeof(BP_GlobalGI_C_SetLevelSequenceTimeControl) == 0x000010, "Wrong size on BP_GlobalGI_C_SetLevelSequenceTimeControl");
static_assert(offsetof(BP_GlobalGI_C_SetLevelSequenceTimeControl, TodTimeControl) == 0x000000, "Member 'BP_GlobalGI_C_SetLevelSequenceTimeControl::TodTimeControl' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_SetLevelSequenceTimeControl, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_GlobalGI_C_SetLevelSequenceTimeControl::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.Update Dynamic Clouds
// 0x0018 (0x0018 - 0x0000)
struct BP_GlobalGI_C_Update_Dynamic_Clouds final
{
public:
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_Update_Dynamic_Clouds) == 0x000004, "Wrong alignment on BP_GlobalGI_C_Update_Dynamic_Clouds");
static_assert(sizeof(BP_GlobalGI_C_Update_Dynamic_Clouds) == 0x000018, "Wrong size on BP_GlobalGI_C_Update_Dynamic_Clouds");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000000, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_Conv_IntToByte_ReturnValue) == 0x00000D, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_GetValidValue_ReturnValue) == 0x00000E, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_IsValid_ReturnValue) == 0x00000F, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000010, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000011, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x000012, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000013, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000014, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_BooleanOR_ReturnValue) == 0x000015, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_BooleanOR_ReturnValue_1) == 0x000016, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Update_Dynamic_Clouds, CallFunc_BooleanOR_ReturnValue_2) == 0x000017, "Member 'BP_GlobalGI_C_Update_Dynamic_Clouds::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.EulerToForward
// 0x0040 (0x0040 - 0x0000)
struct BP_GlobalGI_C_EulerToForward final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Yaw;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  CallFunc_Quat_MakeFromEuler_ReturnValue;           // 0x0020(0x0010)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Quat_VectorForward_ReturnValue;           // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_EulerToForward) == 0x000010, "Wrong alignment on BP_GlobalGI_C_EulerToForward");
static_assert(sizeof(BP_GlobalGI_C_EulerToForward) == 0x000040, "Wrong size on BP_GlobalGI_C_EulerToForward");
static_assert(offsetof(BP_GlobalGI_C_EulerToForward, Pitch) == 0x000000, "Member 'BP_GlobalGI_C_EulerToForward::Pitch' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_EulerToForward, Yaw) == 0x000004, "Member 'BP_GlobalGI_C_EulerToForward::Yaw' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_EulerToForward, ReturnValue) == 0x000008, "Member 'BP_GlobalGI_C_EulerToForward::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_EulerToForward, CallFunc_MakeVector_ReturnValue) == 0x000014, "Member 'BP_GlobalGI_C_EulerToForward::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_EulerToForward, CallFunc_Quat_MakeFromEuler_ReturnValue) == 0x000020, "Member 'BP_GlobalGI_C_EulerToForward::CallFunc_Quat_MakeFromEuler_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_EulerToForward, CallFunc_Quat_VectorForward_ReturnValue) == 0x000030, "Member 'BP_GlobalGI_C_EulerToForward::CallFunc_Quat_VectorForward_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.Clamp Luminance
// 0x006C (0x006C - 0x0000)
struct BP_GlobalGI_C_Clamp_Luminance final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Min;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max;                                               // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_RGB2HSP_ReturnValue;                      // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_R;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_G;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_B;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_A;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_HSP2RGB_ReturnValue;                      // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_Clamp_Luminance) == 0x000004, "Wrong alignment on BP_GlobalGI_C_Clamp_Luminance");
static_assert(sizeof(BP_GlobalGI_C_Clamp_Luminance) == 0x00006C, "Wrong size on BP_GlobalGI_C_Clamp_Luminance");
static_assert(offsetof(BP_GlobalGI_C_Clamp_Luminance, InColor) == 0x000000, "Member 'BP_GlobalGI_C_Clamp_Luminance::InColor' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Clamp_Luminance, Min) == 0x000010, "Member 'BP_GlobalGI_C_Clamp_Luminance::Min' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Clamp_Luminance, Max) == 0x000014, "Member 'BP_GlobalGI_C_Clamp_Luminance::Max' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Clamp_Luminance, ReturnValue) == 0x000018, "Member 'BP_GlobalGI_C_Clamp_Luminance::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Clamp_Luminance, CallFunc_RGB2HSP_ReturnValue) == 0x000028, "Member 'BP_GlobalGI_C_Clamp_Luminance::CallFunc_RGB2HSP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Clamp_Luminance, CallFunc_BreakColor_R) == 0x000038, "Member 'BP_GlobalGI_C_Clamp_Luminance::CallFunc_BreakColor_R' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Clamp_Luminance, CallFunc_BreakColor_G) == 0x00003C, "Member 'BP_GlobalGI_C_Clamp_Luminance::CallFunc_BreakColor_G' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Clamp_Luminance, CallFunc_BreakColor_B) == 0x000040, "Member 'BP_GlobalGI_C_Clamp_Luminance::CallFunc_BreakColor_B' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Clamp_Luminance, CallFunc_BreakColor_A) == 0x000044, "Member 'BP_GlobalGI_C_Clamp_Luminance::CallFunc_BreakColor_A' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Clamp_Luminance, CallFunc_FClamp_ReturnValue) == 0x000048, "Member 'BP_GlobalGI_C_Clamp_Luminance::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Clamp_Luminance, CallFunc_MakeColor_ReturnValue) == 0x00004C, "Member 'BP_GlobalGI_C_Clamp_Luminance::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_Clamp_Luminance, CallFunc_HSP2RGB_ReturnValue) == 0x00005C, "Member 'BP_GlobalGI_C_Clamp_Luminance::CallFunc_HSP2RGB_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.GetParallaxCorrectCachedShadowDirection
// 0x0020 (0x0020 - 0x0000)
struct BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection final
{
public:
	struct FRotator                               NewParam;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_CalculateLightDirectionWithLimit_NewParam; // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection) == 0x000004, "Wrong alignment on BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection");
static_assert(sizeof(BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection) == 0x000020, "Wrong size on BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection");
static_assert(offsetof(BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection, NewParam) == 0x000000, "Member 'BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection::NewParam' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection, CallFunc_CalculateLightDirectionWithLimit_NewParam) == 0x000014, "Member 'BP_GlobalGI_C_GetParallaxCorrectCachedShadowDirection::CallFunc_CalculateLightDirectionWithLimit_NewParam' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.GetTODCharacterLighting
// 0x00B0 (0x00B0 - 0x0000)
struct BP_GlobalGI_C_GetTODCharacterLighting final
{
public:
	struct FLinearColor                           mainLight;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         mainLightIntensity;                                // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           skyLight;                                          // 0x0014(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         skyLightIntensity;                                 // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FrontSideLight;                                    // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BackSideLight;                                     // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue_1;  // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Clamp_Luminance_ReturnValue;              // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Clamp_Luminance_ReturnValue_1;            // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColor_Desaturated_ReturnValue;      // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Add_LinearColorLinearColor_ReturnValue;   // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_GetTODCharacterLighting) == 0x000004, "Wrong alignment on BP_GlobalGI_C_GetTODCharacterLighting");
static_assert(sizeof(BP_GlobalGI_C_GetTODCharacterLighting) == 0x0000B0, "Wrong size on BP_GlobalGI_C_GetTODCharacterLighting");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, mainLight) == 0x000000, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::mainLight' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, mainLightIntensity) == 0x000010, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::mainLightIntensity' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, skyLight) == 0x000014, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::skyLight' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, skyLightIntensity) == 0x000024, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::skyLightIntensity' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, FrontSideLight) == 0x000028, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::FrontSideLight' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, BackSideLight) == 0x000038, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::BackSideLight' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x000050, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, CallFunc_Multiply_LinearColorFloat_ReturnValue_1) == 0x000060, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::CallFunc_Multiply_LinearColorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, CallFunc_Clamp_Luminance_ReturnValue) == 0x000070, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::CallFunc_Clamp_Luminance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, CallFunc_Clamp_Luminance_ReturnValue_1) == 0x000080, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::CallFunc_Clamp_Luminance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, CallFunc_LinearColor_Desaturated_ReturnValue) == 0x000090, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::CallFunc_LinearColor_Desaturated_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetTODCharacterLighting, CallFunc_Add_LinearColorLinearColor_ReturnValue) == 0x0000A0, "Member 'BP_GlobalGI_C_GetTODCharacterLighting::CallFunc_Add_LinearColorLinearColor_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.GetParallaxCorrectCachedCrossFadeShadowDirection
// 0x0030 (0x0030 - 0x0000)
struct BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection final
{
public:
	struct FRotator                               NewParam;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_CalculateLightDirectionWithLimit_NewParam; // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection) == 0x000004, "Wrong alignment on BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection");
static_assert(sizeof(BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection) == 0x000030, "Wrong size on BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection");
static_assert(offsetof(BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection, NewParam) == 0x000000, "Member 'BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection::NewParam' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000010, "Member 'BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection, CallFunc_CalculateLightDirectionWithLimit_NewParam) == 0x000024, "Member 'BP_GlobalGI_C_GetParallaxCorrectCachedCrossFadeShadowDirection::CallFunc_CalculateLightDirectionWithLimit_NewParam' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.updateLightFunctions
// 0x0018 (0x0018 - 0x0000)
struct BP_GlobalGI_C_updateLightFunctions final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CallFunc_K2_GetTextureParameterValue_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_updateLightFunctions) == 0x000008, "Wrong alignment on BP_GlobalGI_C_updateLightFunctions");
static_assert(sizeof(BP_GlobalGI_C_updateLightFunctions) == 0x000018, "Wrong size on BP_GlobalGI_C_updateLightFunctions");
static_assert(offsetof(BP_GlobalGI_C_updateLightFunctions, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'BP_GlobalGI_C_updateLightFunctions::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_updateLightFunctions, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_GlobalGI_C_updateLightFunctions::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_updateLightFunctions, CallFunc_K2_GetTextureParameterValue_ReturnValue) == 0x000010, "Member 'BP_GlobalGI_C_updateLightFunctions::CallFunc_K2_GetTextureParameterValue_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.GetMilkyWayDMI
// 0x0020 (0x0020 - 0x0000)
struct BP_GlobalGI_C_GetMilkyWayDMI final
{
public:
	class UMaterialInstanceDynamic*               DMIRet;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_GetMilkyWayDMI) == 0x000008, "Wrong alignment on BP_GlobalGI_C_GetMilkyWayDMI");
static_assert(sizeof(BP_GlobalGI_C_GetMilkyWayDMI) == 0x000020, "Wrong size on BP_GlobalGI_C_GetMilkyWayDMI");
static_assert(offsetof(BP_GlobalGI_C_GetMilkyWayDMI, DMIRet) == 0x000000, "Member 'BP_GlobalGI_C_GetMilkyWayDMI::DMIRet' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetMilkyWayDMI, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_GlobalGI_C_GetMilkyWayDMI::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetMilkyWayDMI, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'BP_GlobalGI_C_GetMilkyWayDMI::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetMilkyWayDMI, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'BP_GlobalGI_C_GetMilkyWayDMI::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_GetMilkyWayDMI, CallFunc_IsValid_ReturnValue_2) == 0x000018, "Member 'BP_GlobalGI_C_GetMilkyWayDMI::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateMilkWay
// 0x0148 (0x0148 - 0x0000)
struct BP_GlobalGI_C_UpdateMilkWay final
{
public:
	class UMaterialInstanceDynamic*               MilkyWay_DMI;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKuroMilkyWaySetting                   CloudCardSetting;                                  // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x00AC(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_UpdateMilkWay) == 0x000008, "Wrong alignment on BP_GlobalGI_C_UpdateMilkWay");
static_assert(sizeof(BP_GlobalGI_C_UpdateMilkWay) == 0x000148, "Wrong size on BP_GlobalGI_C_UpdateMilkWay");
static_assert(offsetof(BP_GlobalGI_C_UpdateMilkWay, MilkyWay_DMI) == 0x000000, "Member 'BP_GlobalGI_C_UpdateMilkWay::MilkyWay_DMI' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateMilkWay, CloudCardSetting) == 0x000008, "Member 'BP_GlobalGI_C_UpdateMilkWay::CloudCardSetting' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateMilkWay, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'BP_GlobalGI_C_UpdateMilkWay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateMilkWay, CallFunc_BreakVector_X) == 0x000094, "Member 'BP_GlobalGI_C_UpdateMilkWay::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateMilkWay, CallFunc_BreakVector_Y) == 0x000098, "Member 'BP_GlobalGI_C_UpdateMilkWay::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateMilkWay, CallFunc_BreakVector_Z) == 0x00009C, "Member 'BP_GlobalGI_C_UpdateMilkWay::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateMilkWay, CallFunc_MakeRotator_ReturnValue) == 0x0000A0, "Member 'BP_GlobalGI_C_UpdateMilkWay::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateMilkWay, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0000AC, "Member 'BP_GlobalGI_C_UpdateMilkWay::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateMilkWay, CallFunc_IsValid_ReturnValue_1) == 0x000140, "Member 'BP_GlobalGI_C_UpdateMilkWay::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateMilkWay, CallFunc_IsValid_ReturnValue_2) == 0x000141, "Member 'BP_GlobalGI_C_UpdateMilkWay::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateMilkWay, CallFunc_IsValid_ReturnValue_3) == 0x000142, "Member 'BP_GlobalGI_C_UpdateMilkWay::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateBigWorld
// 0x001C (0x001C - 0x0000)
struct BP_GlobalGI_C_UpdateBigWorld final
{
public:
	float                                         CallFunc_BreakVector_X;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_UpdateBigWorld) == 0x000004, "Wrong alignment on BP_GlobalGI_C_UpdateBigWorld");
static_assert(sizeof(BP_GlobalGI_C_UpdateBigWorld) == 0x00001C, "Wrong size on BP_GlobalGI_C_UpdateBigWorld");
static_assert(offsetof(BP_GlobalGI_C_UpdateBigWorld, CallFunc_BreakVector_X) == 0x000000, "Member 'BP_GlobalGI_C_UpdateBigWorld::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateBigWorld, CallFunc_BreakVector_Y) == 0x000004, "Member 'BP_GlobalGI_C_UpdateBigWorld::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateBigWorld, CallFunc_BreakVector_Z) == 0x000008, "Member 'BP_GlobalGI_C_UpdateBigWorld::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateBigWorld, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_GlobalGI_C_UpdateBigWorld::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateBigWorld, CallFunc_BooleanXOR_ReturnValue) == 0x00000D, "Member 'BP_GlobalGI_C_UpdateBigWorld::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateBigWorld, CallFunc_SelectVector_ReturnValue) == 0x000010, "Member 'BP_GlobalGI_C_UpdateBigWorld::CallFunc_SelectVector_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.OnGlobalGITick
// 0x0020 (0x0020 - 0x0000)
struct BP_GlobalGI_C_OnGlobalGITick final
{
public:
	struct FRotator                               CallFunc_ApplyLightParameters_Conch_SceneLightRotation; // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetLumenDiffuseGIFeatureEnabled_ReturnValue; // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_ApplyLightParameters_Conch_SceneLightRotation_1; // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_OnGlobalGITick) == 0x000004, "Wrong alignment on BP_GlobalGI_C_OnGlobalGITick");
static_assert(sizeof(BP_GlobalGI_C_OnGlobalGITick) == 0x000020, "Wrong size on BP_GlobalGI_C_OnGlobalGITick");
static_assert(offsetof(BP_GlobalGI_C_OnGlobalGITick, CallFunc_ApplyLightParameters_Conch_SceneLightRotation) == 0x000000, "Member 'BP_GlobalGI_C_OnGlobalGITick::CallFunc_ApplyLightParameters_Conch_SceneLightRotation' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_OnGlobalGITick, CallFunc_GetLumenDiffuseGIFeatureEnabled_ReturnValue) == 0x00000C, "Member 'BP_GlobalGI_C_OnGlobalGITick::CallFunc_GetLumenDiffuseGIFeatureEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_OnGlobalGITick, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'BP_GlobalGI_C_OnGlobalGITick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_OnGlobalGITick, CallFunc_ApplyLightParameters_Conch_SceneLightRotation_1) == 0x000010, "Member 'BP_GlobalGI_C_OnGlobalGITick::CallFunc_ApplyLightParameters_Conch_SceneLightRotation_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_OnGlobalGITick, CallFunc_BooleanOR_ReturnValue) == 0x00001C, "Member 'BP_GlobalGI_C_OnGlobalGITick::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_OnGlobalGITick, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'BP_GlobalGI_C_OnGlobalGITick::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateEditor
// 0x00E0 (0x00E0 - 0x0000)
struct BP_GlobalGI_C_UpdateEditor final
{
public:
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_1;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_2;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_2;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_3;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_4;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_3;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_4;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_VolumetricFogFalloff_SpotLight_C*> CallFunc_GetAllActorsOfClass_OutActors;      // 0x0040(0x0010)(ReferenceParm)
	TArray<class ABP_VolumetricFogDistFalloff_RectLight_C*> CallFunc_GetAllActorsOfClass_OutActors_1; // 0x0050(0x0010)(ReferenceParm)
	class ABP_VolumetricFogFalloff_SpotLight_C*   CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_VolumetricFogDistFalloff_RectLight_C* CallFunc_Array_Get_Item_1;                       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_VolumetricFogDistFalloff_PointLight_C*> CallFunc_GetAllActorsOfClass_OutActors_2; // 0x0080(0x0010)(ReferenceParm)
	class ABP_VolumetricFogDistFalloff_PointLight_C* CallFunc_Array_Get_Item_2;                      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_DispersionLightPostprocess_C*> CallFunc_GetAllActorsOfClass_OutActors_3;        // 0x00A0(0x0010)(ReferenceParm)
	class ABP_DispersionLightPostprocess_C*       CallFunc_Array_Get_Item_3;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_LevelSequenceHalo_C*>        CallFunc_GetAllActorsOfClass_OutActors_4;          // 0x00C0(0x0010)(ReferenceParm)
	class ABP_LevelSequenceHalo_C*                CallFunc_Array_Get_Item_4;                         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_UpdateEditor) == 0x000008, "Wrong alignment on BP_GlobalGI_C_UpdateEditor");
static_assert(sizeof(BP_GlobalGI_C_UpdateEditor) == 0x0000E0, "Wrong size on BP_GlobalGI_C_UpdateEditor");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, ___int_Loop_Counter_Variable) == 0x000000, "Member 'BP_GlobalGI_C_UpdateEditor::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, ___int_Array_Index_Variable) == 0x000008, "Member 'BP_GlobalGI_C_UpdateEditor::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, ___int_Array_Index_Variable_1) == 0x00000C, "Member 'BP_GlobalGI_C_UpdateEditor::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, ___int_Loop_Counter_Variable_1) == 0x000010, "Member 'BP_GlobalGI_C_UpdateEditor::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, ___int_Loop_Counter_Variable_2) == 0x000018, "Member 'BP_GlobalGI_C_UpdateEditor::___int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Add_IntInt_ReturnValue_2) == 0x00001C, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, ___int_Array_Index_Variable_2) == 0x000020, "Member 'BP_GlobalGI_C_UpdateEditor::___int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, ___int_Loop_Counter_Variable_3) == 0x000024, "Member 'BP_GlobalGI_C_UpdateEditor::___int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Add_IntInt_ReturnValue_3) == 0x000028, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, ___int_Loop_Counter_Variable_4) == 0x00002C, "Member 'BP_GlobalGI_C_UpdateEditor::___int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Add_IntInt_ReturnValue_4) == 0x000030, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, ___int_Array_Index_Variable_3) == 0x000034, "Member 'BP_GlobalGI_C_UpdateEditor::___int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, ___int_Array_Index_Variable_4) == 0x000038, "Member 'BP_GlobalGI_C_UpdateEditor::___int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_GetAllActorsOfClass_OutActors) == 0x000040, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000050, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Array_Get_Item) == 0x000060, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Array_Length_ReturnValue_1) == 0x000074, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Less_IntInt_ReturnValue_1) == 0x000079, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_GetAllActorsOfClass_OutActors_2) == 0x000080, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_GetAllActorsOfClass_OutActors_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Array_Get_Item_2) == 0x000090, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Array_Length_ReturnValue_2) == 0x000098, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Less_IntInt_ReturnValue_2) == 0x00009C, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_GetAllActorsOfClass_OutActors_3) == 0x0000A0, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_GetAllActorsOfClass_OutActors_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Array_Get_Item_3) == 0x0000B0, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Array_Length_ReturnValue_3) == 0x0000B8, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000BC, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_GetAllActorsOfClass_OutActors_4) == 0x0000C0, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_GetAllActorsOfClass_OutActors_4' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Array_Get_Item_4) == 0x0000D0, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Array_Length_ReturnValue_4) == 0x0000D8, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateEditor, CallFunc_Less_IntInt_ReturnValue_4) == 0x0000DC, "Member 'BP_GlobalGI_C_UpdateEditor::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateOcean
// 0x0020 (0x0020 - 0x0000)
struct BP_GlobalGI_C_UpdateOcean final
{
public:
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue_1;    // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_UpdateOcean) == 0x000004, "Wrong alignment on BP_GlobalGI_C_UpdateOcean");
static_assert(sizeof(BP_GlobalGI_C_UpdateOcean) == 0x000020, "Wrong size on BP_GlobalGI_C_UpdateOcean");
static_assert(offsetof(BP_GlobalGI_C_UpdateOcean, CallFunc_GetVectorParameterValue_ReturnValue) == 0x000000, "Member 'BP_GlobalGI_C_UpdateOcean::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateOcean, CallFunc_GetVectorParameterValue_ReturnValue_1) == 0x000010, "Member 'BP_GlobalGI_C_UpdateOcean::CallFunc_GetVectorParameterValue_ReturnValue_1' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.IsPerformanceLightExist
// 0x0038 (0x0038 - 0x0000)
struct BP_GlobalGI_C_IsPerformanceLightExist final
{
public:
	class UWorld*                                 CallFunc_GetWorld_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetActorOfClass_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PerformanceDisableLight_MP4_OnlyEditor_C* CallFunc_GetActorOfClass_ReturnValue_1;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEditor_ReturnValue;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PerformanceDisableLight_C*          CallFunc_GetActorOfClass_ReturnValue_2;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalGI_C_IsPerformanceLightExist) == 0x000008, "Wrong alignment on BP_GlobalGI_C_IsPerformanceLightExist");
static_assert(sizeof(BP_GlobalGI_C_IsPerformanceLightExist) == 0x000038, "Wrong size on BP_GlobalGI_C_IsPerformanceLightExist");
static_assert(offsetof(BP_GlobalGI_C_IsPerformanceLightExist, CallFunc_GetWorld_ReturnValue) == 0x000000, "Member 'BP_GlobalGI_C_IsPerformanceLightExist::CallFunc_GetWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_IsPerformanceLightExist, CallFunc_GetActorOfClass_ReturnValue) == 0x000008, "Member 'BP_GlobalGI_C_IsPerformanceLightExist::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_IsPerformanceLightExist, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_GlobalGI_C_IsPerformanceLightExist::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_IsPerformanceLightExist, CallFunc_GetActorOfClass_ReturnValue_1) == 0x000018, "Member 'BP_GlobalGI_C_IsPerformanceLightExist::CallFunc_GetActorOfClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_IsPerformanceLightExist, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'BP_GlobalGI_C_IsPerformanceLightExist::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_IsPerformanceLightExist, CallFunc_IsEditor_ReturnValue) == 0x000021, "Member 'BP_GlobalGI_C_IsPerformanceLightExist::CallFunc_IsEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_IsPerformanceLightExist, CallFunc_GetActorOfClass_ReturnValue_2) == 0x000028, "Member 'BP_GlobalGI_C_IsPerformanceLightExist::CallFunc_GetActorOfClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_IsPerformanceLightExist, CallFunc_IsValid_ReturnValue_2) == 0x000030, "Member 'BP_GlobalGI_C_IsPerformanceLightExist::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_GlobalGI.BP_GlobalGI_C.UpdateVolumeCloudLightWeight
// 0x00C0 (0x00C0 - 0x0000)
struct BP_GlobalGI_C_UpdateVolumeCloudLightWeight final
{
public:
	bool                                          bFindValidTime;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScalarParameterValue_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSD_KuroTraceCloudData                 CallFunc_Array_Get_Item;                           // 0x0008(0x0014)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSD_KuroTraceCloudData                 CallFunc_Array_Get_Item_1;                         // 0x0028(0x0014)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSD_KuroTraceCloudData                 CallFunc_Array_Get_Item_2;                         // 0x0054(0x0014)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSD_KuroTraceCloudData                 CallFunc_Array_Get_Item_3;                         // 0x0068(0x0014)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSD_KuroTraceCloudData                 CallFunc_Array_Get_Item_4;                         // 0x0090(0x0014)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x00AC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight) == 0x000004, "Wrong alignment on BP_GlobalGI_C_UpdateVolumeCloudLightWeight");
static_assert(sizeof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight) == 0x0000C0, "Wrong size on BP_GlobalGI_C_UpdateVolumeCloudLightWeight");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, bFindValidTime) == 0x000000, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::bFindValidTime' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_GetScalarParameterValue_ReturnValue) == 0x000004, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_Array_Get_Item) == 0x000008, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_Array_Length_ReturnValue_1) == 0x000024, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_Array_Get_Item_1) == 0x000028, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_MapRangeClamped_ReturnValue) == 0x00003C, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, ___int_Array_Index_Variable) == 0x000040, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_LinearColorLerp_ReturnValue) == 0x000044, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_Array_Get_Item_2) == 0x000054, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_Array_Get_Item_3) == 0x000068, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00007C, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000080, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_Less_IntInt_ReturnValue) == 0x000084, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_SelectInt_ReturnValue) == 0x000088, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, ___int_Loop_Counter_Variable) == 0x00008C, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_Array_Get_Item_4) == 0x000090, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A4, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0000A8, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_LinearColorLerp_ReturnValue_1) == 0x0000AC, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalGI_C_UpdateVolumeCloudLightWeight, CallFunc_Add_IntInt_ReturnValue) == 0x0000BC, "Member 'BP_GlobalGI_C_UpdateVolumeCloudLightWeight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

}

