#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroGameScreenshot

#include "Basic.hpp"

#include "KuroGameScreenshot_classes.hpp"
#include "KuroGameScreenshot_parameters.hpp"


namespace SDK
{

// Function KuroGameScreenshot.GameScreenshotTask.OnIOSPhotoLibraryAuthorizationCompleted
// (Final, Native, Public)
// Parameters:
// bool                                    IsGranted                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameScreenshotTask::OnIOSPhotoLibraryAuthorizationCompleted(bool IsGranted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameScreenshotTask", "OnIOSPhotoLibraryAuthorizationCompleted");

	Params::GameScreenshotTask_OnIOSPhotoLibraryAuthorizationCompleted Parms{};

	Parms.IsGranted = IsGranted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroGameScreenshot.GameScreenshotTask.OnScreenshotCaptured
// (Final, Native, Public, HasOutParams)
// Parameters:
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FColor>&            Colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGameScreenshotTask::OnScreenshotCaptured(int32 Width, int32 Height, const TArray<struct FColor>& Colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameScreenshotTask", "OnScreenshotCaptured");

	Params::GameScreenshotTask_OnScreenshotCaptured Parms{};

	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Colors = std::move(Colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroGameScreenshot.GameScreenshotTask.OnScreenshotCompressed
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<uint8>&                    CompressedBitMap                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGameScreenshotTask::OnScreenshotCompressed(const TArray<uint8>& CompressedBitMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameScreenshotTask", "OnScreenshotCompressed");

	Params::GameScreenshotTask_OnScreenshotCompressed Parms{};

	Parms.CompressedBitMap = std::move(CompressedBitMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroGameScreenshot.GameScreenshotTask.RequestIOSPhotoLibraryAuthorization
// (Final, Native, Public, BlueprintCallable)

void UGameScreenshotTask::RequestIOSPhotoLibraryAuthorization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameScreenshotTask", "RequestIOSPhotoLibraryAuthorization");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroGameScreenshot.GameScreenshotTask.Reset
// (Final, Native, Public, BlueprintCallable)

void UGameScreenshotTask::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameScreenshotTask", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroGameScreenshot.GameScreenshotTask.TakeScreenshot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameScreenshotTask::TakeScreenshot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameScreenshotTask", "TakeScreenshot");

	Params::GameScreenshotTask_TakeScreenshot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.CompressConvertColorsToBitmap
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FColor>&            Colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<uint8>*                          BitMap                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UKuroGameScreenshotBPLibrary::CompressConvertColorsToBitmap(int32 Width, int32 Height, const TArray<struct FColor>& Colors, TArray<uint8>* BitMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroGameScreenshotBPLibrary", "CompressConvertColorsToBitmap");

	Params::KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap Parms{};

	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Colors = std::move(Colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BitMap != nullptr)
		*BitMap = std::move(Parms.BitMap);
}


// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.ConvertColorsToBitmap
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FColor>&            Colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<uint8>*                          BitMap                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UKuroGameScreenshotBPLibrary::ConvertColorsToBitmap(int32 Width, int32 Height, const TArray<struct FColor>& Colors, TArray<uint8>* BitMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroGameScreenshotBPLibrary", "ConvertColorsToBitmap");

	Params::KuroGameScreenshotBPLibrary_ConvertColorsToBitmap Parms{};

	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Colors = std::move(Colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BitMap != nullptr)
		*BitMap = std::move(Parms.BitMap);
}


// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.IsPhotoLibraryAuthorized
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroGameScreenshotBPLibrary::IsPhotoLibraryAuthorized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroGameScreenshotBPLibrary", "IsPhotoLibraryAuthorized");

	Params::KuroGameScreenshotBPLibrary_IsPhotoLibraryAuthorized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.PrepareTakeScreenshot
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InFilename                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 MinCaptureRegion                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 MaxCaptureRegion                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScreenshotResolutionX                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScreenshotResolutionY                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SaveFile                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameScreenshotTask*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameScreenshotTask* UKuroGameScreenshotBPLibrary::PrepareTakeScreenshot(class UObject* Outer_0, const class FString& InFilename, const struct FVector2D& MinCaptureRegion, const struct FVector2D& MaxCaptureRegion, float ScreenshotResolutionX, float ScreenshotResolutionY, bool SaveFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroGameScreenshotBPLibrary", "PrepareTakeScreenshot");

	Params::KuroGameScreenshotBPLibrary_PrepareTakeScreenshot Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.InFilename = std::move(InFilename);
	Parms.MinCaptureRegion = std::move(MinCaptureRegion);
	Parms.MaxCaptureRegion = std::move(MaxCaptureRegion);
	Parms.ScreenshotResolutionX = ScreenshotResolutionX;
	Parms.ScreenshotResolutionY = ScreenshotResolutionY;
	Parms.SaveFile = SaveFile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.SaveColorArrayToAndroidAlbum
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    BitMap                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UKuroGameScreenshotBPLibrary::SaveColorArrayToAndroidAlbum(int32 Width, int32 Height, const TArray<uint8>& BitMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroGameScreenshotBPLibrary", "SaveColorArrayToAndroidAlbum");

	Params::KuroGameScreenshotBPLibrary_SaveColorArrayToAndroidAlbum Parms{};

	Parms.Width = Width;
	Parms.Height = Height;
	Parms.BitMap = std::move(BitMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.SaveColorArrayToIosAlbum
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FColor>&            Colors                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UKuroGameScreenshotBPLibrary::SaveColorArrayToIosAlbum(int32 Width, int32 Height, const TArray<struct FColor>& Colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroGameScreenshotBPLibrary", "SaveColorArrayToIosAlbum");

	Params::KuroGameScreenshotBPLibrary_SaveColorArrayToIosAlbum Parms{};

	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Colors = std::move(Colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.SaveScreenshot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FColor>&            Colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UKuroGameScreenshotBPLibrary::SaveScreenshot(const class FString& FilePath, int32 Width, int32 Height, const TArray<struct FColor>& Colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroGameScreenshotBPLibrary", "SaveScreenshot");

	Params::KuroGameScreenshotBPLibrary_SaveScreenshot Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Colors = std::move(Colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

