#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroDynamicAtlas

#include "Basic.hpp"

#include "KuroDynamicAtlas_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function KuroDynamicAtlas.DynamicAtlasBlueprintLibrary.AddTextureAsync
// 0x0050 (0x0050 - 0x0000)
struct DynamicAtlasBlueprintLibrary_AddTextureAsync final
{
public:
	class FString                                 InAtlasTag;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                InSoftObjectPath;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FDynamicAtlasSlotManagedHandle>& ManagedHandle)> CompleteCallback; // 0x0020(0x0028)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicAtlasBlueprintLibrary_AddTextureAsync) == 0x000008, "Wrong alignment on DynamicAtlasBlueprintLibrary_AddTextureAsync");
static_assert(sizeof(DynamicAtlasBlueprintLibrary_AddTextureAsync) == 0x000050, "Wrong size on DynamicAtlasBlueprintLibrary_AddTextureAsync");
static_assert(offsetof(DynamicAtlasBlueprintLibrary_AddTextureAsync, InAtlasTag) == 0x000000, "Member 'DynamicAtlasBlueprintLibrary_AddTextureAsync::InAtlasTag' has a wrong offset!");
static_assert(offsetof(DynamicAtlasBlueprintLibrary_AddTextureAsync, InSoftObjectPath) == 0x000010, "Member 'DynamicAtlasBlueprintLibrary_AddTextureAsync::InSoftObjectPath' has a wrong offset!");
static_assert(offsetof(DynamicAtlasBlueprintLibrary_AddTextureAsync, CompleteCallback) == 0x000020, "Member 'DynamicAtlasBlueprintLibrary_AddTextureAsync::CompleteCallback' has a wrong offset!");
static_assert(offsetof(DynamicAtlasBlueprintLibrary_AddTextureAsync, ReturnValue) == 0x000048, "Member 'DynamicAtlasBlueprintLibrary_AddTextureAsync::ReturnValue' has a wrong offset!");

// Function KuroDynamicAtlas.DynamicAtlasBlueprintLibrary.CleanAllAtlas
// 0x0010 (0x0010 - 0x0000)
struct DynamicAtlasBlueprintLibrary_CleanAllAtlas final
{
public:
	class FString                                 InAtlasTag;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicAtlasBlueprintLibrary_CleanAllAtlas) == 0x000008, "Wrong alignment on DynamicAtlasBlueprintLibrary_CleanAllAtlas");
static_assert(sizeof(DynamicAtlasBlueprintLibrary_CleanAllAtlas) == 0x000010, "Wrong size on DynamicAtlasBlueprintLibrary_CleanAllAtlas");
static_assert(offsetof(DynamicAtlasBlueprintLibrary_CleanAllAtlas, InAtlasTag) == 0x000000, "Member 'DynamicAtlasBlueprintLibrary_CleanAllAtlas::InAtlasTag' has a wrong offset!");

// Function KuroDynamicAtlas.DynamicAtlasBlueprintLibrary.HasOverrideSetting
// 0x0018 (0x0018 - 0x0000)
struct DynamicAtlasBlueprintLibrary_HasOverrideSetting final
{
public:
	class FString                                 InAtlasTag;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicAtlasBlueprintLibrary_HasOverrideSetting) == 0x000008, "Wrong alignment on DynamicAtlasBlueprintLibrary_HasOverrideSetting");
static_assert(sizeof(DynamicAtlasBlueprintLibrary_HasOverrideSetting) == 0x000018, "Wrong size on DynamicAtlasBlueprintLibrary_HasOverrideSetting");
static_assert(offsetof(DynamicAtlasBlueprintLibrary_HasOverrideSetting, InAtlasTag) == 0x000000, "Member 'DynamicAtlasBlueprintLibrary_HasOverrideSetting::InAtlasTag' has a wrong offset!");
static_assert(offsetof(DynamicAtlasBlueprintLibrary_HasOverrideSetting, ReturnValue) == 0x000010, "Member 'DynamicAtlasBlueprintLibrary_HasOverrideSetting::ReturnValue' has a wrong offset!");

// Function KuroDynamicAtlas.DynamicAtlasBlueprintLibrary.RebuildAllAtlas
// 0x0010 (0x0010 - 0x0000)
struct DynamicAtlasBlueprintLibrary_RebuildAllAtlas final
{
public:
	class FString                                 InAtlasTag;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicAtlasBlueprintLibrary_RebuildAllAtlas) == 0x000008, "Wrong alignment on DynamicAtlasBlueprintLibrary_RebuildAllAtlas");
static_assert(sizeof(DynamicAtlasBlueprintLibrary_RebuildAllAtlas) == 0x000010, "Wrong size on DynamicAtlasBlueprintLibrary_RebuildAllAtlas");
static_assert(offsetof(DynamicAtlasBlueprintLibrary_RebuildAllAtlas, InAtlasTag) == 0x000000, "Member 'DynamicAtlasBlueprintLibrary_RebuildAllAtlas::InAtlasTag' has a wrong offset!");

// Function KuroDynamicAtlas.DynamicAtlasBlueprintLibrary.SetOverrideSetting
// 0x0048 (0x0048 - 0x0000)
struct DynamicAtlasBlueprintLibrary_SetOverrideSetting final
{
public:
	class FString                                 InAtlasTag;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDynamicTextureAtlasSetting            InSetting;                                         // 0x0010(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicAtlasBlueprintLibrary_SetOverrideSetting) == 0x000008, "Wrong alignment on DynamicAtlasBlueprintLibrary_SetOverrideSetting");
static_assert(sizeof(DynamicAtlasBlueprintLibrary_SetOverrideSetting) == 0x000048, "Wrong size on DynamicAtlasBlueprintLibrary_SetOverrideSetting");
static_assert(offsetof(DynamicAtlasBlueprintLibrary_SetOverrideSetting, InAtlasTag) == 0x000000, "Member 'DynamicAtlasBlueprintLibrary_SetOverrideSetting::InAtlasTag' has a wrong offset!");
static_assert(offsetof(DynamicAtlasBlueprintLibrary_SetOverrideSetting, InSetting) == 0x000010, "Member 'DynamicAtlasBlueprintLibrary_SetOverrideSetting::InSetting' has a wrong offset!");

}

