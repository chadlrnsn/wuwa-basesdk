#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroSDK

#include "Basic.hpp"

#include "KuroSDK_classes.hpp"
#include "KuroSDK_parameters.hpp"


namespace SDK
{

// Function KuroSDK.KuroSDKManager.BindAccount
// (Final, Native, Static, Public)

void UKuroSDKManager::BindAccount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "BindAccount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.CheckApplinksActivation
// (Final, Native, Static, Public)

void UKuroSDKManager::CheckApplinksActivation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "CheckApplinksActivation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.CheckPhotoPermission
// (Final, Native, Static, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSDKManager::CheckPhotoPermission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "CheckPhotoPermission");

	Params::KuroSDKManager_CheckPhotoPermission Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.ClearLoginInfo
// (Final, Native, Static, Public)

void UKuroSDKManager::ClearLoginInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "ClearLoginInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.ExitGame
// (Final, Native, Static, Public)

void UKuroSDKManager::ExitGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "ExitGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.Get
// (Final, Native, Static, Public)
// Parameters:
// class UKuroSDKManager*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKuroSDKManager* UKuroSDKManager::Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "Get");

	Params::KuroSDKManager_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetAdsValue
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    income                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::GetAdsValue(const class FString& income, const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetAdsValue");

	Params::KuroSDKManager_GetAdsValue Parms{};

	Parms.income = std::move(income);
	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.GetAgreementUrl
// (Final, Native, Static, Public)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UKuroSDKManager::GetAgreementUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetAgreementUrl");

	Params::KuroSDKManager_GetAgreementUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetAppChannelId
// (Final, Native, Static, Public)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UKuroSDKManager::GetAppChannelId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetAppChannelId");

	Params::KuroSDKManager_GetAppChannelId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetBasicInfo
// (Final, Native, Static, Public)
// Parameters:
// struct FBasicInfo                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBasicInfo UKuroSDKManager::GetBasicInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetBasicInfo");

	Params::KuroSDKManager_GetBasicInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetChannelId
// (Final, Native, Static, Public)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UKuroSDKManager::GetChannelId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetChannelId");

	Params::KuroSDKManager_GetChannelId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetChannelName
// (Final, Native, Static, Public)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UKuroSDKManager::GetChannelName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetChannelName");

	Params::KuroSDKManager_GetChannelName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetCurrentLoginInfo
// (Final, Native, Static, Public)
// Parameters:
// struct FLoginStruct                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLoginStruct UKuroSDKManager::GetCurrentLoginInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetCurrentLoginInfo");

	Params::KuroSDKManager_GetCurrentLoginInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetDeepLinkStr
// (Final, Native, Static, Public)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UKuroSDKManager::GetDeepLinkStr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetDeepLinkStr");

	Params::KuroSDKManager_GetDeepLinkStr Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetIsAgreeProtocol
// (Final, Native, Static, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSDKManager::GetIsAgreeProtocol()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetIsAgreeProtocol");

	Params::KuroSDKManager_GetIsAgreeProtocol Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetPackageId
// (Final, Native, Static, Public)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UKuroSDKManager::GetPackageId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetPackageId");

	Params::KuroSDKManager_GetPackageId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetPostWebViewInitState
// (Final, Native, Static, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSDKManager::GetPostWebViewInitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetPostWebViewInitState");

	Params::KuroSDKManager_GetPostWebViewInitState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetProjectId
// (Final, Native, Static, Public)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UKuroSDKManager::GetProjectId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetProjectId");

	Params::KuroSDKManager_GetProjectId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetSdkInitState
// (Final, Native, Static, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSDKManager::GetSdkInitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetSdkInitState");

	Params::KuroSDKManager_GetSdkInitState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetSdkIsQRScan
// (Final, Native, Static, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSDKManager::GetSdkIsQRScan()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetSdkIsQRScan");

	Params::KuroSDKManager_GetSdkIsQRScan Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetSdkIsShowQuitTips
// (Final, Native, Static, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSDKManager::GetSdkIsShowQuitTips()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetSdkIsShowQuitTips");

	Params::KuroSDKManager_GetSdkIsShowQuitTips Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetSdkLoginInfo
// (Final, Native, Static, Public)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UKuroSDKManager::GetSdkLoginInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetSdkLoginInfo");

	Params::KuroSDKManager_GetSdkLoginInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetSdkParams
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UKuroSDKManager::GetSdkParams(const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetSdkParams");

	Params::KuroSDKManager_GetSdkParams Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.GetSharePlatform
// (Final, Native, Static, Public)

void UKuroSDKManager::GetSharePlatform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "GetSharePlatform");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.Initialize
// (Final, Native, Static, Public)

void UKuroSDKManager::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "Initialize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.IsCustomerServiceEnable
// (Final, Native, Static, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSDKManager::IsCustomerServiceEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "IsCustomerServiceEnable");

	Params::KuroSDKManager_IsCustomerServiceEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.IsLogin
// (Final, Native, Static, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSDKManager::IsLogin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "IsLogin");

	Params::KuroSDKManager_IsLogin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.IsUserCenterEnable
// (Final, Native, Static, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSDKManager::IsUserCenterEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "IsUserCenterEnable");

	Params::KuroSDKManager_IsUserCenterEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKManager.KuroSDKEvent
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const EUKuroSDKEventType&               iKuroSDKEvent                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    sKuroSDKEventParameter                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::KuroSDKEvent(const EUKuroSDKEventType& iKuroSDKEvent, const class FString& sKuroSDKEventParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "KuroSDKEvent");

	Params::KuroSDKManager_KuroSDKEvent Parms{};

	Parms.iKuroSDKEvent = iKuroSDKEvent;
	Parms.sKuroSDKEventParameter = std::move(sKuroSDKEventParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.LogMarketingEvent
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::LogMarketingEvent(const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "LogMarketingEvent");

	Params::KuroSDKManager_LogMarketingEvent Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.OpenCustomerService
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::OpenCustomerService(const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "OpenCustomerService");

	Params::KuroSDKManager_OpenCustomerService Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.OpenDefaultWebView
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    url                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::OpenDefaultWebView(const class FString& url)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "OpenDefaultWebView");

	Params::KuroSDKManager_OpenDefaultWebView Parms{};

	Parms.url = std::move(url);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.OpenSdkQRScan
// (Final, Native, Static, Public)

void UKuroSDKManager::OpenSdkQRScan()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "OpenSdkQRScan");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.OpenWebView
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    title                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    url                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isLandscape                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    transparent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    webAccelerated                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::OpenWebView(const class FString& title, const class FString& url, bool isLandscape, bool transparent, bool webAccelerated, const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "OpenWebView");

	Params::KuroSDKManager_OpenWebView Parms{};

	Parms.title = std::move(title);
	Parms.url = std::move(url);
	Parms.isLandscape = isLandscape;
	Parms.transparent = transparent;
	Parms.webAccelerated = webAccelerated;
	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.PostSplashScreenEndSuccess
// (Final, Native, Static, Public)

void UKuroSDKManager::PostSplashScreenEndSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "PostSplashScreenEndSuccess");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.QueryProductInfo
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::QueryProductInfo(const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "QueryProductInfo");

	Params::KuroSDKManager_QueryProductInfo Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.RequestPhotoPermission
// (Final, Native, Static, Public)

void UKuroSDKManager::RequestPhotoPermission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "RequestPhotoPermission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.RequestReviewApp
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::RequestReviewApp(const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "RequestReviewApp");

	Params::KuroSDKManager_RequestReviewApp Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.SetCursor
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::SetCursor(const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "SetCursor");

	Params::KuroSDKManager_SetCursor Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.SetFont
// (Final, Native, Static, Public)
// Parameters:
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::SetFont(const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "SetFont");

	Params::KuroSDKManager_SetFont Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.SetGamePadMode
// (Final, Native, Static, Public)
// Parameters:
// bool                                    mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::SetGamePadMode(bool mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "SetGamePadMode");

	Params::KuroSDKManager_SetGamePadMode Parms{};

	Parms.mode = mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.SetIfGlobalSdk
// (Final, Native, Static, Public)
// Parameters:
// bool                                    ifGlobal                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::SetIfGlobalSdk(bool ifGlobal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "SetIfGlobalSdk");

	Params::KuroSDKManager_SetIfGlobalSdk Parms{};

	Parms.ifGlobal = ifGlobal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.SetWindowsMode
// (Final, Native, Static, Public)
// Parameters:
// bool                                    mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::SetWindowsMode(bool mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "SetWindowsMode");

	Params::KuroSDKManager_SetWindowsMode Parms{};

	Parms.mode = mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.Share
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const TArray<uint8>&                    imageData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    sKuroSDKEventParameter                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKManager::Share(const TArray<uint8>& imageData, const class FString& sKuroSDKEventParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "Share");

	Params::KuroSDKManager_Share Parms{};

	Parms.imageData = std::move(imageData);
	Parms.sKuroSDKEventParameter = std::move(sKuroSDKEventParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.ShowExitGameDialog
// (Final, Native, Static, Public)

void UKuroSDKManager::ShowExitGameDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "ShowExitGameDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKManager.Start
// (Final, Native, Static, Public)

void UKuroSDKManager::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKManager", "Start");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.ClearSdkInstance
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::ClearSdkInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "ClearSdkInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.Get
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UKuroSDKManager*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKuroSDKManager* UKuroSDKStaticLibrary::Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "Get");

	Params::KuroSDKStaticLibrary_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKStaticLibrary.GetAdsValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    income                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKStaticLibrary::GetAdsValue(const class FString& income, const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "GetAdsValue");

	Params::KuroSDKStaticLibrary_GetAdsValue Parms{};

	Parms.income = std::move(income);
	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.GetAgreementUrl
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::GetAgreementUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "GetAgreementUrl");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.GetAndroidGalleryExternalFilePath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UKuroSDKStaticLibrary::GetAndroidGalleryExternalFilePath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "GetAndroidGalleryExternalFilePath");

	Params::KuroSDKStaticLibrary_GetAndroidGalleryExternalFilePath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKStaticLibrary.GetAppChannelId
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::GetAppChannelId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "GetAppChannelId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.GetBaseDeviceInfo
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::GetBaseDeviceInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "GetBaseDeviceInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.GetChannelId
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::GetChannelId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "GetChannelId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.GetChannelName
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::GetChannelName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "GetChannelName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.GetCurrentLoginInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FLoginStruct                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLoginStruct UKuroSDKStaticLibrary::GetCurrentLoginInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "GetCurrentLoginInfo");

	Params::KuroSDKStaticLibrary_GetCurrentLoginInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKStaticLibrary.GetIsAgreeProtocol
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSDKStaticLibrary::GetIsAgreeProtocol()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "GetIsAgreeProtocol");

	Params::KuroSDKStaticLibrary_GetIsAgreeProtocol Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKStaticLibrary.GetPostWebViewInitState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSDKStaticLibrary::GetPostWebViewInitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "GetPostWebViewInitState");

	Params::KuroSDKStaticLibrary_GetPostWebViewInitState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSDK.KuroSDKStaticLibrary.GetProjectId
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::GetProjectId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "GetProjectId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.GetSdkParams
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKStaticLibrary::GetSdkParams(const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "GetSdkParams");

	Params::KuroSDKStaticLibrary_GetSdkParams Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.Initialize
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "Initialize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.IsCanQRScan
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::IsCanQRScan()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "IsCanQRScan");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.IsShowQuitTips
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::IsShowQuitTips()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "IsShowQuitTips");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.KuroSDKEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EUKuroSDKEventType&               iKuroSDKEvent                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    sKuroSDKEventParameter                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKStaticLibrary::KuroSDKEvent(const EUKuroSDKEventType& iKuroSDKEvent, const class FString& sKuroSDKEventParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "KuroSDKEvent");

	Params::KuroSDKStaticLibrary_KuroSDKEvent Parms{};

	Parms.iKuroSDKEvent = iKuroSDKEvent;
	Parms.sKuroSDKEventParameter = std::move(sKuroSDKEventParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.LogMarketingEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKStaticLibrary::LogMarketingEvent(const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "LogMarketingEvent");

	Params::KuroSDKStaticLibrary_LogMarketingEvent Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.OpenCustomerService
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKStaticLibrary::OpenCustomerService(const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "OpenCustomerService");

	Params::KuroSDKStaticLibrary_OpenCustomerService Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.OpenDefaultWebView
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    url                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKStaticLibrary::OpenDefaultWebView(const class FString& url)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "OpenDefaultWebView");

	Params::KuroSDKStaticLibrary_OpenDefaultWebView Parms{};

	Parms.url = std::move(url);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.OpenQRScan
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::OpenQRScan()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "OpenQRScan");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.OpenWebView
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    title                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    url                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isLandScape                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    transparent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    webAccelerated                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKStaticLibrary::OpenWebView(const class FString& title, const class FString& url, bool isLandScape, bool transparent, bool webAccelerated, const class FString& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "OpenWebView");

	Params::KuroSDKStaticLibrary_OpenWebView Parms{};

	Parms.title = std::move(title);
	Parms.url = std::move(url);
	Parms.isLandScape = isLandScape;
	Parms.transparent = transparent;
	Parms.webAccelerated = webAccelerated;
	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.PostSplashSuccess
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::PostSplashSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "PostSplashSuccess");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.SetIfGlobalSdk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ifGlobal                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKStaticLibrary::SetIfGlobalSdk(bool ifGlobal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "SetIfGlobalSdk");

	Params::KuroSDKStaticLibrary_SetIfGlobalSdk Parms{};

	Parms.ifGlobal = ifGlobal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.Share
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    imagePath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    sKuroSDKEventParameter                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKStaticLibrary::Share(const class FString& imagePath, const class FString& sKuroSDKEventParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "Share");

	Params::KuroSDKStaticLibrary_Share Parms{};

	Parms.imagePath = std::move(imagePath);
	Parms.sKuroSDKEventParameter = std::move(sKuroSDKEventParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.ShareTexture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    texturePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    sKuroSDKEventParameter                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSDKStaticLibrary::ShareTexture(const class FString& texturePath, const class FString& sKuroSDKEventParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "ShareTexture");

	Params::KuroSDKStaticLibrary_ShareTexture Parms{};

	Parms.texturePath = std::move(texturePath);
	Parms.sKuroSDKEventParameter = std::move(sKuroSDKEventParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSDK.KuroSDKStaticLibrary.ShowExitGameDialog
// (Final, Native, Static, Public, BlueprintCallable)

void UKuroSDKStaticLibrary::ShowExitGameDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroSDKStaticLibrary", "ShowExitGameDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

