#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroSeqEvent

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "SSeqCharacterBlend_structs.hpp"
#include "SInteractionOption_structs.hpp"
#include "SSeqCharacterBlendGroup_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "SSubtitleSettings_structs.hpp"


namespace SDK::Params
{

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.ExecuteUbergraph_BP_KuroSeqEvent
// 0x0008 (0x0008 - 0x0000)
struct BP_KuroSeqEvent_C_ExecuteUbergraph_BP_KuroSeqEvent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_ExecuteUbergraph_BP_KuroSeqEvent) == 0x000004, "Wrong alignment on BP_KuroSeqEvent_C_ExecuteUbergraph_BP_KuroSeqEvent");
static_assert(sizeof(BP_KuroSeqEvent_C_ExecuteUbergraph_BP_KuroSeqEvent) == 0x000008, "Wrong size on BP_KuroSeqEvent_C_ExecuteUbergraph_BP_KuroSeqEvent");
static_assert(offsetof(BP_KuroSeqEvent_C_ExecuteUbergraph_BP_KuroSeqEvent, EntryPoint) == 0x000000, "Member 'BP_KuroSeqEvent_C_ExecuteUbergraph_BP_KuroSeqEvent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ExecuteUbergraph_BP_KuroSeqEvent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_KuroSeqEvent_C_ExecuteUbergraph_BP_KuroSeqEvent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_KuroSeqEvent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_KuroSeqEvent_C_ReceiveTick");
static_assert(sizeof(BP_KuroSeqEvent_C_ReceiveTick) == 0x000004, "Wrong size on BP_KuroSeqEvent_C_ReceiveTick");
static_assert(offsetof(BP_KuroSeqEvent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_KuroSeqEvent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.Play Subtitle
// 0x0018 (0x0018 - 0x0000)
struct BP_KuroSeqEvent_C_Play_Subtitle final
{
public:
	struct FSSubtitleSettings                     inSubtitle;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_Play_Subtitle) == 0x000004, "Wrong alignment on BP_KuroSeqEvent_C_Play_Subtitle");
static_assert(sizeof(BP_KuroSeqEvent_C_Play_Subtitle) == 0x000018, "Wrong size on BP_KuroSeqEvent_C_Play_Subtitle");
static_assert(offsetof(BP_KuroSeqEvent_C_Play_Subtitle, inSubtitle) == 0x000000, "Member 'BP_KuroSeqEvent_C_Play_Subtitle::inSubtitle' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.JumpToSequenceNode
// 0x000C (0x000C - 0x0000)
struct BP_KuroSeqEvent_C_JumpToSequenceNode final
{
public:
	class FName                                   inSeqNodeID;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_JumpToSequenceNode) == 0x000004, "Wrong alignment on BP_KuroSeqEvent_C_JumpToSequenceNode");
static_assert(sizeof(BP_KuroSeqEvent_C_JumpToSequenceNode) == 0x00000C, "Wrong size on BP_KuroSeqEvent_C_JumpToSequenceNode");
static_assert(offsetof(BP_KuroSeqEvent_C_JumpToSequenceNode, inSeqNodeID) == 0x000000, "Member 'BP_KuroSeqEvent_C_JumpToSequenceNode::inSeqNodeID' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.JumpToOtherSeqNetwrok
// 0x0018 (0x0018 - 0x0000)
struct BP_KuroSeqEvent_C_JumpToOtherSeqNetwrok final
{
public:
	class FName                                   inRowName;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             inSeqNetworks;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_JumpToOtherSeqNetwrok) == 0x000008, "Wrong alignment on BP_KuroSeqEvent_C_JumpToOtherSeqNetwrok");
static_assert(sizeof(BP_KuroSeqEvent_C_JumpToOtherSeqNetwrok) == 0x000018, "Wrong size on BP_KuroSeqEvent_C_JumpToOtherSeqNetwrok");
static_assert(offsetof(BP_KuroSeqEvent_C_JumpToOtherSeqNetwrok, inRowName) == 0x000000, "Member 'BP_KuroSeqEvent_C_JumpToOtherSeqNetwrok::inRowName' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_JumpToOtherSeqNetwrok, inSeqNetworks) == 0x000010, "Member 'BP_KuroSeqEvent_C_JumpToOtherSeqNetwrok::inSeqNetworks' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.Interaction
// 0x0018 (0x0018 - 0x0000)
struct BP_KuroSeqEvent_C_Interaction final
{
public:
	struct FSSubtitleSettings                     inSubtitleSettings;                                // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_Interaction) == 0x000004, "Wrong alignment on BP_KuroSeqEvent_C_Interaction");
static_assert(sizeof(BP_KuroSeqEvent_C_Interaction) == 0x000018, "Wrong size on BP_KuroSeqEvent_C_Interaction");
static_assert(offsetof(BP_KuroSeqEvent_C_Interaction, inSubtitleSettings) == 0x000000, "Member 'BP_KuroSeqEvent_C_Interaction::inSubtitleSettings' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.GeneralEvent
// 0x000C (0x000C - 0x0000)
struct BP_KuroSeqEvent_C_GeneralEvent final
{
public:
	class FName                                   inEventID;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_GeneralEvent) == 0x000004, "Wrong alignment on BP_KuroSeqEvent_C_GeneralEvent");
static_assert(sizeof(BP_KuroSeqEvent_C_GeneralEvent) == 0x00000C, "Wrong size on BP_KuroSeqEvent_C_GeneralEvent");
static_assert(offsetof(BP_KuroSeqEvent_C_GeneralEvent, inEventID) == 0x000000, "Member 'BP_KuroSeqEvent_C_GeneralEvent::inEventID' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.NPC Rotate
// 0x0004 (0x0004 - 0x0000)
struct BP_KuroSeqEvent_C_NPC_Rotate final
{
public:
	float                                         角度;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_NPC_Rotate) == 0x000004, "Wrong alignment on BP_KuroSeqEvent_C_NPC_Rotate");
static_assert(sizeof(BP_KuroSeqEvent_C_NPC_Rotate) == 0x000004, "Wrong size on BP_KuroSeqEvent_C_NPC_Rotate");
static_assert(offsetof(BP_KuroSeqEvent_C_NPC_Rotate, 角度) == 0x000000, "Member 'BP_KuroSeqEvent_C_NPC_Rotate::角度' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.PlayerUIMovie
// 0x0028 (0x0028 - 0x0000)
struct BP_KuroSeqEvent_C_PlayerUIMovie final
{
public:
	class UFileMediaSource*                       MediaSource;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMove;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                inlocation;                                        // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isTotate;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               inRotation;                                        // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroSeqEvent_C_PlayerUIMovie) == 0x000008, "Wrong alignment on BP_KuroSeqEvent_C_PlayerUIMovie");
static_assert(sizeof(BP_KuroSeqEvent_C_PlayerUIMovie) == 0x000028, "Wrong size on BP_KuroSeqEvent_C_PlayerUIMovie");
static_assert(offsetof(BP_KuroSeqEvent_C_PlayerUIMovie, MediaSource) == 0x000000, "Member 'BP_KuroSeqEvent_C_PlayerUIMovie::MediaSource' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_PlayerUIMovie, IsMove) == 0x000008, "Member 'BP_KuroSeqEvent_C_PlayerUIMovie::IsMove' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_PlayerUIMovie, inlocation) == 0x00000C, "Member 'BP_KuroSeqEvent_C_PlayerUIMovie::inlocation' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_PlayerUIMovie, isTotate) == 0x000018, "Member 'BP_KuroSeqEvent_C_PlayerUIMovie::isTotate' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_PlayerUIMovie, inRotation) == 0x00001C, "Member 'BP_KuroSeqEvent_C_PlayerUIMovie::inRotation' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.MoveAfterMoviePlay
// 0x00B8 (0x00B8 - 0x0000)
struct BP_KuroSeqEvent_C_MoveAfterMoviePlay final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue_1;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0020(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroSeqEvent_C_MoveAfterMoviePlay) == 0x000008, "Wrong alignment on BP_KuroSeqEvent_C_MoveAfterMoviePlay");
static_assert(sizeof(BP_KuroSeqEvent_C_MoveAfterMoviePlay) == 0x0000B8, "Wrong size on BP_KuroSeqEvent_C_MoveAfterMoviePlay");
static_assert(offsetof(BP_KuroSeqEvent_C_MoveAfterMoviePlay, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'BP_KuroSeqEvent_C_MoveAfterMoviePlay::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_MoveAfterMoviePlay, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000008, "Member 'BP_KuroSeqEvent_C_MoveAfterMoviePlay::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_MoveAfterMoviePlay, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000010, "Member 'BP_KuroSeqEvent_C_MoveAfterMoviePlay::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_MoveAfterMoviePlay, CallFunc_GetPlayerCharacter_ReturnValue_1) == 0x000018, "Member 'BP_KuroSeqEvent_C_MoveAfterMoviePlay::CallFunc_GetPlayerCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_MoveAfterMoviePlay, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000020, "Member 'BP_KuroSeqEvent_C_MoveAfterMoviePlay::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_MoveAfterMoviePlay, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000B4, "Member 'BP_KuroSeqEvent_C_MoveAfterMoviePlay::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.DirectInteraction
// 0x0108 (0x0108 - 0x0000)
struct BP_KuroSeqEvent_C_DirectInteraction final
{
public:
	class FName                                   InteractionID;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         currStepID;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInteractionOption                    temp_interaction_option;                           // 0x0010(0x00F8)(Edit, BlueprintVisible, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_DirectInteraction) == 0x000008, "Wrong alignment on BP_KuroSeqEvent_C_DirectInteraction");
static_assert(sizeof(BP_KuroSeqEvent_C_DirectInteraction) == 0x000108, "Wrong size on BP_KuroSeqEvent_C_DirectInteraction");
static_assert(offsetof(BP_KuroSeqEvent_C_DirectInteraction, InteractionID) == 0x000000, "Member 'BP_KuroSeqEvent_C_DirectInteraction::InteractionID' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_DirectInteraction, currStepID) == 0x00000C, "Member 'BP_KuroSeqEvent_C_DirectInteraction::currStepID' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_DirectInteraction, temp_interaction_option) == 0x000010, "Member 'BP_KuroSeqEvent_C_DirectInteraction::temp_interaction_option' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.SetCharacterBinding
// 0x0060 (0x0060 - 0x0000)
struct BP_KuroSeqEvent_C_SetCharacterBinding final
{
public:
	class FString                                 InTag;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ConstParm, ReferenceParm)
	class ALevelSequenceActor*                    CallFunc_GetSequenceCameraActor_ReturnValue;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectBindingID             CallFunc_FindNamedBinding_ReturnValue;             // 0x0044(0x0018)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_SetCharacterBinding) == 0x000008, "Wrong alignment on BP_KuroSeqEvent_C_SetCharacterBinding");
static_assert(sizeof(BP_KuroSeqEvent_C_SetCharacterBinding) == 0x000060, "Wrong size on BP_KuroSeqEvent_C_SetCharacterBinding");
static_assert(offsetof(BP_KuroSeqEvent_C_SetCharacterBinding, InTag) == 0x000000, "Member 'BP_KuroSeqEvent_C_SetCharacterBinding::InTag' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_SetCharacterBinding, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_KuroSeqEvent_C_SetCharacterBinding::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_SetCharacterBinding, CallFunc_Conv_StringToName_ReturnValue) == 0x000018, "Member 'BP_KuroSeqEvent_C_SetCharacterBinding::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_SetCharacterBinding, K2Node_MakeArray_Array) == 0x000028, "Member 'BP_KuroSeqEvent_C_SetCharacterBinding::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_SetCharacterBinding, CallFunc_GetSequenceCameraActor_ReturnValue) == 0x000038, "Member 'BP_KuroSeqEvent_C_SetCharacterBinding::CallFunc_GetSequenceCameraActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_SetCharacterBinding, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_KuroSeqEvent_C_SetCharacterBinding::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_SetCharacterBinding, CallFunc_FindNamedBinding_ReturnValue) == 0x000044, "Member 'BP_KuroSeqEvent_C_SetCharacterBinding::CallFunc_FindNamedBinding_ReturnValue' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.BlendingCharacter
// 0x0110 (0x0110 - 0x0000)
struct BP_KuroSeqEvent_C_BlendingCharacter final
{
public:
	struct FSSeqCharacterBlendGroup               inSettings;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FSSeqCharacterBlend                    tSetting;                                          // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSeqCharacterBlend                    CallFunc_Array_Get_Item;                           // 0x0080(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithTag_OutActors;            // 0x00E0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_BlendingCharacter) == 0x000010, "Wrong alignment on BP_KuroSeqEvent_C_BlendingCharacter");
static_assert(sizeof(BP_KuroSeqEvent_C_BlendingCharacter) == 0x000110, "Wrong size on BP_KuroSeqEvent_C_BlendingCharacter");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, inSettings) == 0x000000, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::inSettings' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, tSetting) == 0x000010, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::tSetting' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, ___int_Array_Index_Variable) == 0x000070, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, CallFunc_Array_Get_Item) == 0x000080, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, CallFunc_GetAllActorsWithTag_OutActors) == 0x0000E0, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::CallFunc_GetAllActorsWithTag_OutActors' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, CallFunc_Array_Length_ReturnValue_1) == 0x0000F0, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000F4, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, CallFunc_Conv_IntToBool_ReturnValue) == 0x0000F5, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, CallFunc_Array_Add_ReturnValue) == 0x0000F8, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, ___int_Loop_Counter_Variable) == 0x0000FC, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, CallFunc_Less_IntInt_ReturnValue) == 0x000100, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendingCharacter, CallFunc_Add_IntInt_ReturnValue) == 0x000104, "Member 'BP_KuroSeqEvent_C_BlendingCharacter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.BlendHelper
// 0x0250 (0x0250 - 0x0000)
struct BP_KuroSeqEvent_C_BlendHelper final
{
public:
	float                                         tempLerpAlpha;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSeqCharacterBlend                    tempSetting;                                       // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         tempIndex;                                         // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGlobalTimeDilation_ReturnValue;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0090(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SafeDivide_ReturnValue;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x013C(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0xF];                                      // 0x01D1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSeqCharacterBlend                    CallFunc_Array_Get_Item;                           // 0x01E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroSeqEvent_C_BlendHelper) == 0x000010, "Wrong alignment on BP_KuroSeqEvent_C_BlendHelper");
static_assert(sizeof(BP_KuroSeqEvent_C_BlendHelper) == 0x000250, "Wrong size on BP_KuroSeqEvent_C_BlendHelper");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, tempLerpAlpha) == 0x000000, "Member 'BP_KuroSeqEvent_C_BlendHelper::tempLerpAlpha' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, tempSetting) == 0x000010, "Member 'BP_KuroSeqEvent_C_BlendHelper::tempSetting' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, tempIndex) == 0x000070, "Member 'BP_KuroSeqEvent_C_BlendHelper::tempIndex' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, ___int_Loop_Counter_Variable) == 0x000074, "Member 'BP_KuroSeqEvent_C_BlendHelper::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, ___int_Array_Index_Variable) == 0x00007C, "Member 'BP_KuroSeqEvent_C_BlendHelper::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_GetGlobalTimeDilation_ReturnValue) == 0x000080, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_GetGlobalTimeDilation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_Conv_IntToBool_ReturnValue) == 0x000088, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00008C, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_GetTransform_ReturnValue) == 0x000090, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_BreakTransform_Location) == 0x0000C0, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_BreakTransform_Rotation) == 0x0000CC, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_BreakTransform_Scale) == 0x0000D8, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000E4, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_SafeDivide_ReturnValue) == 0x0000E8, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_BreakTransform_Location_1) == 0x0000EC, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_BreakTransform_Rotation_1) == 0x0000F8, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_BreakTransform_Scale_1) == 0x000104, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000110, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_RLerp_ReturnValue) == 0x000114, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000120, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_Vector_Distance_ReturnValue) == 0x000124, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_Add_FloatFloat_ReturnValue) == 0x000128, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_Less_FloatFloat_ReturnValue) == 0x00012C, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_VLerp_ReturnValue) == 0x000130, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x00013C, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0001D0, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_Array_Get_Item) == 0x0001E0, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_Array_Length_ReturnValue_1) == 0x000240, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_BlendHelper, CallFunc_Less_IntInt_ReturnValue) == 0x000244, "Member 'BP_KuroSeqEvent_C_BlendHelper::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.Set Motion Blur
// 0x0001 (0x0001 - 0x0000)
struct BP_KuroSeqEvent_C_Set_Motion_Blur final
{
public:
	bool                                          启用;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroSeqEvent_C_Set_Motion_Blur) == 0x000001, "Wrong alignment on BP_KuroSeqEvent_C_Set_Motion_Blur");
static_assert(sizeof(BP_KuroSeqEvent_C_Set_Motion_Blur) == 0x000001, "Wrong size on BP_KuroSeqEvent_C_Set_Motion_Blur");
static_assert(offsetof(BP_KuroSeqEvent_C_Set_Motion_Blur, 启用) == 0x000000, "Member 'BP_KuroSeqEvent_C_Set_Motion_Blur::启用' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.ChangeWeather
// 0x000C (0x000C - 0x0000)
struct BP_KuroSeqEvent_C_ChangeWeather final
{
public:
	int32                                         天气Id;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          继承;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         过渡时间;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_ChangeWeather) == 0x000004, "Wrong alignment on BP_KuroSeqEvent_C_ChangeWeather");
static_assert(sizeof(BP_KuroSeqEvent_C_ChangeWeather) == 0x00000C, "Wrong size on BP_KuroSeqEvent_C_ChangeWeather");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeWeather, 天气Id) == 0x000000, "Member 'BP_KuroSeqEvent_C_ChangeWeather::天气Id' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeWeather, 继承) == 0x000004, "Member 'BP_KuroSeqEvent_C_ChangeWeather::继承' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeWeather, 过渡时间) == 0x000008, "Member 'BP_KuroSeqEvent_C_ChangeWeather::过渡时间' has a wrong offset!");

// Function BP_KuroSeqEvent.BP_KuroSeqEvent_C.ChangeTimeOfDay
// 0x0030 (0x0030 - 0x0000)
struct BP_KuroSeqEvent_C_ChangeTimeOfDay final
{
public:
	bool                                          继承;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         小时;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         分钟;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         过渡帧数;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         最终小时;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         最终分钟;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_2;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_3;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroSeqEvent_C_ChangeTimeOfDay) == 0x000004, "Wrong alignment on BP_KuroSeqEvent_C_ChangeTimeOfDay");
static_assert(sizeof(BP_KuroSeqEvent_C_ChangeTimeOfDay) == 0x000030, "Wrong size on BP_KuroSeqEvent_C_ChangeTimeOfDay");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeTimeOfDay, 继承) == 0x000000, "Member 'BP_KuroSeqEvent_C_ChangeTimeOfDay::继承' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeTimeOfDay, 小时) == 0x000004, "Member 'BP_KuroSeqEvent_C_ChangeTimeOfDay::小时' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeTimeOfDay, 分钟) == 0x000008, "Member 'BP_KuroSeqEvent_C_ChangeTimeOfDay::分钟' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeTimeOfDay, 过渡帧数) == 0x00000C, "Member 'BP_KuroSeqEvent_C_ChangeTimeOfDay::过渡帧数' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeTimeOfDay, 最终小时) == 0x000010, "Member 'BP_KuroSeqEvent_C_ChangeTimeOfDay::最终小时' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeTimeOfDay, 最终分钟) == 0x000014, "Member 'BP_KuroSeqEvent_C_ChangeTimeOfDay::最终分钟' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeTimeOfDay, CallFunc_Multiply_IntInt_ReturnValue) == 0x000018, "Member 'BP_KuroSeqEvent_C_ChangeTimeOfDay::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeTimeOfDay, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x00001C, "Member 'BP_KuroSeqEvent_C_ChangeTimeOfDay::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeTimeOfDay, CallFunc_Multiply_IntInt_ReturnValue_2) == 0x000020, "Member 'BP_KuroSeqEvent_C_ChangeTimeOfDay::CallFunc_Multiply_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeTimeOfDay, CallFunc_Multiply_IntInt_ReturnValue_3) == 0x000024, "Member 'BP_KuroSeqEvent_C_ChangeTimeOfDay::CallFunc_Multiply_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeTimeOfDay, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_KuroSeqEvent_C_ChangeTimeOfDay::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroSeqEvent_C_ChangeTimeOfDay, CallFunc_Add_IntInt_ReturnValue_1) == 0x00002C, "Member 'BP_KuroSeqEvent_C_ChangeTimeOfDay::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

}

