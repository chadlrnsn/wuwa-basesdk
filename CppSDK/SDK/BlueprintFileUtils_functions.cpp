#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlueprintFileUtils

#include "Basic.hpp"

#include "BlueprintFileUtils_classes.hpp"
#include "BlueprintFileUtils_parameters.hpp"


namespace SDK
{

// Function BlueprintFileUtils.BlueprintFileUtilsBPLibrary.CopyFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DestFilename                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SrcFilename                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplace                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEvenIfReadOnly                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintFileUtilsBPLibrary::CopyFile(const class FString& DestFilename, const class FString& SrcFilename, bool bReplace, bool bEvenIfReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintFileUtilsBPLibrary", "CopyFile");

	Params::BlueprintFileUtilsBPLibrary_CopyFile Parms{};

	Parms.DestFilename = std::move(DestFilename);
	Parms.SrcFilename = std::move(SrcFilename);
	Parms.bReplace = bReplace;
	Parms.bEvenIfReadOnly = bEvenIfReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BlueprintFileUtils.BlueprintFileUtilsBPLibrary.DeleteDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMustExist                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDeleteRecursively                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintFileUtilsBPLibrary::DeleteDirectory(const class FString& Directory, bool bMustExist, bool bDeleteRecursively)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintFileUtilsBPLibrary", "DeleteDirectory");

	Params::BlueprintFileUtilsBPLibrary_DeleteDirectory Parms{};

	Parms.Directory = std::move(Directory);
	Parms.bMustExist = bMustExist;
	Parms.bDeleteRecursively = bDeleteRecursively;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BlueprintFileUtils.BlueprintFileUtilsBPLibrary.DeleteFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMustExist                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEvenIfReadOnly                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintFileUtilsBPLibrary::DeleteFile(const class FString& Filename, bool bMustExist, bool bEvenIfReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintFileUtilsBPLibrary", "DeleteFile");

	Params::BlueprintFileUtilsBPLibrary_DeleteFile Parms{};

	Parms.Filename = std::move(Filename);
	Parms.bMustExist = bMustExist;
	Parms.bEvenIfReadOnly = bEvenIfReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BlueprintFileUtils.BlueprintFileUtilsBPLibrary.DirectoryExists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintFileUtilsBPLibrary::DirectoryExists(const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintFileUtilsBPLibrary", "DirectoryExists");

	Params::BlueprintFileUtilsBPLibrary_DirectoryExists Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BlueprintFileUtils.BlueprintFileUtilsBPLibrary.FileExists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintFileUtilsBPLibrary::FileExists(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintFileUtilsBPLibrary", "FileExists");

	Params::BlueprintFileUtilsBPLibrary_FileExists Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BlueprintFileUtils.BlueprintFileUtilsBPLibrary.FindFiles
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FoundFiles                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FString&                    FileExtension                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintFileUtilsBPLibrary::FindFiles(const class FString& Directory, TArray<class FString>* FoundFiles, const class FString& FileExtension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintFileUtilsBPLibrary", "FindFiles");

	Params::BlueprintFileUtilsBPLibrary_FindFiles Parms{};

	Parms.Directory = std::move(Directory);
	Parms.FileExtension = std::move(FileExtension);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FoundFiles != nullptr)
		*FoundFiles = std::move(Parms.FoundFiles);

	return Parms.ReturnValue;
}


// Function BlueprintFileUtils.BlueprintFileUtilsBPLibrary.FindRecursive
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    StartDirectory                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FoundPaths                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FString&                    Wildcard                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFindFiles                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFindDirectories                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintFileUtilsBPLibrary::FindRecursive(const class FString& StartDirectory, TArray<class FString>* FoundPaths, const class FString& Wildcard, bool bFindFiles, bool bFindDirectories)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintFileUtilsBPLibrary", "FindRecursive");

	Params::BlueprintFileUtilsBPLibrary_FindRecursive Parms{};

	Parms.StartDirectory = std::move(StartDirectory);
	Parms.Wildcard = std::move(Wildcard);
	Parms.bFindFiles = bFindFiles;
	Parms.bFindDirectories = bFindDirectories;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FoundPaths != nullptr)
		*FoundPaths = std::move(Parms.FoundPaths);

	return Parms.ReturnValue;
}


// Function BlueprintFileUtils.BlueprintFileUtilsBPLibrary.GetUserDirectory
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBlueprintFileUtilsBPLibrary::GetUserDirectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintFileUtilsBPLibrary", "GetUserDirectory");

	Params::BlueprintFileUtilsBPLibrary_GetUserDirectory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BlueprintFileUtils.BlueprintFileUtilsBPLibrary.MakeDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateTree                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintFileUtilsBPLibrary::MakeDirectory(const class FString& Path, bool bCreateTree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintFileUtilsBPLibrary", "MakeDirectory");

	Params::BlueprintFileUtilsBPLibrary_MakeDirectory Parms{};

	Parms.Path = std::move(Path);
	Parms.bCreateTree = bCreateTree;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BlueprintFileUtils.BlueprintFileUtilsBPLibrary.MoveFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DestFilename                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SrcFilename                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplace                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEvenIfReadOnly                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintFileUtilsBPLibrary::MoveFile(const class FString& DestFilename, const class FString& SrcFilename, bool bReplace, bool bEvenIfReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintFileUtilsBPLibrary", "MoveFile");

	Params::BlueprintFileUtilsBPLibrary_MoveFile Parms{};

	Parms.DestFilename = std::move(DestFilename);
	Parms.SrcFilename = std::move(SrcFilename);
	Parms.bReplace = bReplace;
	Parms.bEvenIfReadOnly = bEvenIfReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

