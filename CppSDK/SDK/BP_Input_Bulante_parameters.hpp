#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Input_Bulante

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "sInputCommand_structs.hpp"


namespace SDK::Params
{

// Function BP_Input_Bulante.BP_Input_Bulante_C.ExecuteUbergraph_BP_Input_Bulante
// 0x0004 (0x0004 - 0x0000)
struct BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante) == 0x000004, "Wrong alignment on BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante");
static_assert(sizeof(BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante) == 0x000004, "Wrong size on BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante");
static_assert(offsetof(BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante, EntryPoint) == 0x000000, "Member 'BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante::EntryPoint' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.攻击按下
// 0x05A0 (0x05A0 - 0x0000)
struct BP_Input_Bulante_C_攻击按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0050(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0080(0x0020)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Variable;                                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetCommonSkillCanBeInterrupt_ReturnValue; // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EE[0x2];                                       // 0x00EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x0110(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0130(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_1;                                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTagCount_ReturnValue;                  // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x01A8(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x01C8(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x01E8(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x01FC(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable_1;          // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_212[0x2];                                      // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_2;                                 // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_1;                     // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x021C(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4; // 0x0230(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_1; // 0x0250(0x0010)(ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A[0x2];                                      // 0x026A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_3;                                 // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_6;           // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x0280(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_2;                    // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5; // 0x02B0(0x0020)()
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6; // 0x02D8(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x02F8(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7; // 0x0310(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_2; // 0x0330(0x0010)(ReferenceParm)
	int32                                         ___int_Variable_4;                                 // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x0344(0x000C)(NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_7;           // 0x0350(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0360(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0375(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0376(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_377[0x1];                                      // 0x0377(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable_2;                     // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_2;                         // 0x037C(0x000C)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_6;         // 0x0388(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x039D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x039E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x039F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8; // 0x03A0(0x0020)()
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_7;         // 0x03C4(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x03D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_8;         // 0x03EC(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable_2;          // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9; // 0x0408(0x0020)()
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0429(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42A[0x2];                                      // 0x042A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_5;                                 // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1; // 0x0430(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1; // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2; // 0x0448(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2; // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_459[0x3];                                      // 0x0459(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_9;         // 0x045C(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3; // 0x0470(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3; // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4; // 0x0488(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4; // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5; // 0x04A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5; // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x04B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x04B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue_1;           // 0x04B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x04B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B5[0x3];                                      // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x04B8(0x0010)(ReferenceParm)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C9[0x3];                                      // 0x04C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_3;                         // 0x04CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_6; // 0x04D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_6; // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x04E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x04EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue_2;           // 0x04EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x04EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x04ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EE[0x2];                                      // 0x04EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x04F0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_4;                         // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0504(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_505[0x3];                                      // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10; // 0x0508(0x0020)()
	TArray<int32>                                 K2Node_MakeArray_Array_2;                          // 0x0528(0x0010)(ReferenceParm)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_7; // 0x0538(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_7; // 0x0548(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549[0x3];                                      // 0x0549(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_5;                         // 0x054C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_2;         // 0x0550(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551[0x7];                                      // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0558(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_569[0x7];                                      // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1;  // 0x0570(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_581[0x7];                                      // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2;  // 0x0588(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x0598(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_攻击按下) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_攻击按下");
static_assert(sizeof(BP_Input_Bulante_C_攻击按下) == 0x0005A0, "Wrong size on BP_Input_Bulante_C_攻击按下");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, time) == 0x000000, "Member 'BP_Input_Bulante_C_攻击按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_攻击按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x00002C, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue) == 0x000040, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000050, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue) == 0x000068, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Loop_Counter_Variable) == 0x000078, "Member 'BP_Input_Bulante_C_攻击按下::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000080, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Add_IntInt_ReturnValue) == 0x0000A0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___bool_True_if_break_was_hit_Variable) == 0x0000A4, "Member 'BP_Input_Bulante_C_攻击按下::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Not_PreBool_ReturnValue) == 0x0000A5, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000A8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0000B8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000C8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000D8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Variable) == 0x0000E8, "Member 'BP_Input_Bulante_C_攻击按下::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x0000EC, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_GetCommonSkillCanBeInterrupt_ReturnValue) == 0x0000ED, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_GetCommonSkillCanBeInterrupt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_3) == 0x0000F0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000100, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x000110, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000130, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Length_ReturnValue) == 0x000140, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_4) == 0x000148, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Array_Index_Variable) == 0x000158, "Member 'BP_Input_Bulante_C_攻击按下::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000160, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Variable_1) == 0x000170, "Member 'BP_Input_Bulante_C_攻击按下::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_5) == 0x000178, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_GetTagCount_ReturnValue) == 0x000188, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_GetTagCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000190, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Less_IntInt_ReturnValue) == 0x0001A0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x0001A8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x0001C8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x0001E8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x0001FC, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___bool_True_if_break_was_hit_Variable_1) == 0x000210, "Member 'BP_Input_Bulante_C_攻击按下::___bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_1) == 0x000211, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Variable_2) == 0x000214, "Member 'BP_Input_Bulante_C_攻击按下::___int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Array_Index_Variable_1) == 0x000218, "Member 'BP_Input_Bulante_C_攻击按下::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Get_Item) == 0x00021C, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Loop_Counter_Variable_1) == 0x000228, "Member 'BP_Input_Bulante_C_攻击按下::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4) == 0x000230, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_1) == 0x000250, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_1) == 0x000260, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Length_ReturnValue_1) == 0x000264, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_1) == 0x000268, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanAND_ReturnValue) == 0x000269, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Variable_3) == 0x00026C, "Member 'BP_Input_Bulante_C_攻击按下::___int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_6) == 0x000270, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x000280, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000298, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Loop_Counter_Variable_2) == 0x0002A8, "Member 'BP_Input_Bulante_C_攻击按下::___int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5) == 0x0002B0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_2) == 0x0002D0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_2) == 0x0002D4, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6) == 0x0002D8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x0002F8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7) == 0x000310, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_2) == 0x000330, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Variable_4) == 0x000340, "Member 'BP_Input_Bulante_C_攻击按下::___int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Get_Item_1) == 0x000344, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_7) == 0x000350, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000360, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Length_ReturnValue_2) == 0x000370, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_3) == 0x000374, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanAND_ReturnValue_1) == 0x000375, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CanResponseInput_ReturnValue) == 0x000376, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Array_Index_Variable_2) == 0x000378, "Member 'BP_Input_Bulante_C_攻击按下::___int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Get_Item_2) == 0x00037C, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_6) == 0x000388, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00039C, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00039D, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x00039E, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanAND_ReturnValue_2) == 0x00039F, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8) == 0x0003A0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanOR_ReturnValue) == 0x0003C0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_7) == 0x0003C4, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0003D8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0003E8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_8) == 0x0003EC, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___bool_True_if_break_was_hit_Variable_2) == 0x000400, "Member 'BP_Input_Bulante_C_攻击按下::___bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9) == 0x000408, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_2) == 0x000428, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanAND_ReturnValue_3) == 0x000429, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Variable_5) == 0x00042C, "Member 'BP_Input_Bulante_C_攻击按下::___int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1) == 0x000430, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1) == 0x000440, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2) == 0x000448, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2) == 0x000458, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_9) == 0x00045C, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3) == 0x000470, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3) == 0x000480, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4) == 0x000488, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4) == 0x000498, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5) == 0x0004A0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5) == 0x0004B0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0004B1, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0004B2, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue_1) == 0x0004B3, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanAND_ReturnValue_4) == 0x0004B4, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, K2Node_MakeArray_Array) == 0x0004B8, "Member 'BP_Input_Bulante_C_攻击按下::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanOR_ReturnValue_1) == 0x0004C8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Get_Item_3) == 0x0004CC, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0004D0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_6) == 0x0004D8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_6) == 0x0004E8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x0004E9, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x0004EA, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue_2) == 0x0004EB, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanAND_ReturnValue_5) == 0x0004EC, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanOR_ReturnValue_2) == 0x0004ED, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, K2Node_MakeArray_Array_1) == 0x0004F0, "Member 'BP_Input_Bulante_C_攻击按下::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Get_Item_4) == 0x000500, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000504, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10) == 0x000508, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, K2Node_MakeArray_Array_2) == 0x000528, "Member 'BP_Input_Bulante_C_攻击按下::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_7) == 0x000538, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_7) == 0x000548, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Get_Item_5) == 0x00054C, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_2) == 0x000550, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000558, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000568, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000570, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000580, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x000588, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x000598, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.攻击长按
// 0x04E8 (0x04E8 - 0x0000)
struct BP_Input_Bulante_C_攻击长按 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_IsClosed_Variable;                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_Has_Been_Initd_Variable;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0048(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0068(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_1;        // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable;                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x0088(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x00A8(0x0020)()
	int32                                         ___int_Variable;                                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_2;        // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x00D0(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x00F0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0128(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4; // 0x0140(0x0020)()
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_1;                                 // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTagCount_ReturnValue;                  // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x01B4(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_2;                                 // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5; // 0x01D8(0x0020)()
	int32                                         ___int_Array_Index_Variable_1;                     // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_1; // 0x0200(0x0010)(ReferenceParm)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x0210(0x000C)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x021C(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_3;                                 // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0238(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0248(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25A[0x2];                                      // 0x025A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x025C(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6; // 0x0270(0x0020)()
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x0294(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7; // 0x02B0(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8; // 0x02D0(0x0020)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x02F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0309(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x030A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x030B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_6;         // 0x0310(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9; // 0x0328(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10; // 0x0348(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1; // 0x0368(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1; // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_379[0x3];                                      // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_7;         // 0x037C(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2; // 0x0390(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2; // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_8;         // 0x03A4(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3; // 0x03B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3; // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4; // 0x03D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4; // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5; // 0x03E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5; // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_6; // 0x0400(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_6; // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_7; // 0x0418(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_7; // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0430(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_8; // 0x0448(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_8; // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0459(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_1;          // 0x045A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x045B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x045C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x045D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x045E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x045F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue_1;           // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0461(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0462(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_463[0x5];                                      // 0x0463(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_11; // 0x0468(0x0020)()
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x0488(0x0010)(ReferenceParm)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_9; // 0x0498(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_9; // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A9[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_3;                         // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x04B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1;  // 0x04D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_攻击长按) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_攻击长按");
static_assert(sizeof(BP_Input_Bulante_C_攻击长按) == 0x0004E8, "Wrong size on BP_Input_Bulante_C_攻击长按");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, time) == 0x000000, "Member 'BP_Input_Bulante_C_攻击长按::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_攻击长按::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue) == 0x00002C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___bool_IsClosed_Variable) == 0x000040, "Member 'BP_Input_Bulante_C_攻击长按::___bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___bool_Has_Been_Initd_Variable) == 0x000041, "Member 'BP_Input_Bulante_C_攻击长按::___bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x000042, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000048, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000068, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_GetSkillAcceptInput_ReturnValue_1) == 0x00007C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_GetSkillAcceptInput_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Array_Index_Variable) == 0x000080, "Member 'BP_Input_Bulante_C_攻击长按::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x000088, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x0000A8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Variable) == 0x0000C8, "Member 'BP_Input_Bulante_C_攻击长按::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_GetSkillAcceptInput_ReturnValue_2) == 0x0000CC, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_GetSkillAcceptInput_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x0000D0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x0000F0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_Length_ReturnValue) == 0x000100, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Conv_IntToString_ReturnValue) == 0x000108, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Concat_StrStr_ReturnValue) == 0x000118, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000128, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4) == 0x000140, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000160, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000170, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Variable_1) == 0x000180, "Member 'BP_Input_Bulante_C_攻击长按::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000188, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_GetTagCount_ReturnValue) == 0x000198, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_GetTagCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0001A0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Less_IntInt_ReturnValue) == 0x0001B0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x0001B4, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Loop_Counter_Variable) == 0x0001C8, "Member 'BP_Input_Bulante_C_攻击长按::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Variable_2) == 0x0001CC, "Member 'BP_Input_Bulante_C_攻击长按::___int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Add_IntInt_ReturnValue) == 0x0001D0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5) == 0x0001D8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Array_Index_Variable_1) == 0x0001F8, "Member 'BP_Input_Bulante_C_攻击长按::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BreakGameplayTagContainer_GameplayTags_1) == 0x000200, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BreakGameplayTagContainer_GameplayTags_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_Get_Item) == 0x000210, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_Get_Item_1) == 0x00021C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_Length_ReturnValue_1) == 0x000228, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Less_IntInt_ReturnValue_1) == 0x00022C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Variable_3) == 0x000230, "Member 'BP_Input_Bulante_C_攻击长按::___int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___bool_True_if_break_was_hit_Variable) == 0x000234, "Member 'BP_Input_Bulante_C_攻击长按::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000238, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000248, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Not_PreBool_ReturnValue) == 0x000258, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BooleanAND_ReturnValue) == 0x000259, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x00025C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6) == 0x000270, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Loop_Counter_Variable_1) == 0x000290, "Member 'BP_Input_Bulante_C_攻击长按::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x000294, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Less_IntInt_ReturnValue_2) == 0x0002A8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Add_IntInt_ReturnValue_1) == 0x0002AC, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7) == 0x0002B0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8) == 0x0002D0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0002F0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0002F8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000308, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000309, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_IsMovingOnGround_ReturnValue) == 0x00030A, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BooleanAND_ReturnValue_1) == 0x00030B, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BooleanOR_ReturnValue) == 0x00030C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_6) == 0x000310, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9) == 0x000328, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10) == 0x000348, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1) == 0x000368, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1) == 0x000378, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_7) == 0x00037C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2) == 0x000390, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2) == 0x0003A0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_8) == 0x0003A4, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3) == 0x0003B8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3) == 0x0003C8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4) == 0x0003D0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4) == 0x0003E0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5) == 0x0003E8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5) == 0x0003F8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_6) == 0x000400, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_6) == 0x000410, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_7) == 0x000418, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_7) == 0x000428, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, K2Node_MakeArray_Array) == 0x000430, "Member 'BP_Input_Bulante_C_攻击长按::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_Get_Item_2) == 0x000440, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_8) == 0x000448, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_8) == 0x000458, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000459, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___bool_True_if_break_was_hit_Variable_1) == 0x00045A, "Member 'BP_Input_Bulante_C_攻击长按::___bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Not_PreBool_ReturnValue_1) == 0x00045B, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BooleanAND_ReturnValue_2) == 0x00045C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CanResponseInput_ReturnValue) == 0x00045D, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00045E, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00045F, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_IsMovingOnGround_ReturnValue_1) == 0x000460, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_IsMovingOnGround_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BooleanAND_ReturnValue_3) == 0x000461, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BooleanOR_ReturnValue_1) == 0x000462, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_11) == 0x000468, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, K2Node_MakeArray_Array_1) == 0x000488, "Member 'BP_Input_Bulante_C_攻击长按::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_9) == 0x000498, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_9) == 0x0004A8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_Get_Item_3) == 0x0004AC, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x0004B0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x0004B8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x0004C8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x0004D0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x0004E0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.攻击抬起
// 0x0188 (0x0188 - 0x0000)
struct BP_Input_Bulante_C_攻击抬起 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0018(0x0020)()
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0038(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0050(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x0068(0x0020)()
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x0090(0x0020)()
	int32                                         ___int_Loop_Counter_Variable;                      // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ___int_Variable;                                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x00C4(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x00E0(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_113[0x1];                                      // 0x0113(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_1;                                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1; // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1; // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable;                       // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x0130(0x000C)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2; // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2; // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0158(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_攻击抬起) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_攻击抬起");
static_assert(sizeof(BP_Input_Bulante_C_攻击抬起) == 0x000188, "Wrong size on BP_Input_Bulante_C_攻击抬起");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, time) == 0x000000, "Member 'BP_Input_Bulante_C_攻击抬起::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_攻击抬起::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc______ReturnValue) == 0x000038, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000050, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x000068, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_CanResponseInput_ReturnValue) == 0x000088, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x000090, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, ___int_Loop_Counter_Variable) == 0x0000B0, "Member 'BP_Input_Bulante_C_攻击抬起::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Less_IntInt_ReturnValue) == 0x0000B4, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B5, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Add_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_IsMovingOnGround_ReturnValue) == 0x0000BC, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000BD, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_BooleanAND_ReturnValue) == 0x0000BE, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_BooleanOR_ReturnValue) == 0x0000BF, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, ___int_Variable) == 0x0000C0, "Member 'BP_Input_Bulante_C_攻击抬起::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_CreateSkillCommand_ReturnValue) == 0x0000C4, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, ___bool_True_if_break_was_hit_Variable) == 0x0000D8, "Member 'BP_Input_Bulante_C_攻击抬起::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x0000E0, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000100, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000110, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Not_PreBool_ReturnValue) == 0x000111, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_BooleanAND_ReturnValue_1) == 0x000112, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, ___int_Variable_1) == 0x000114, "Member 'BP_Input_Bulante_C_攻击抬起::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1) == 0x000118, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1) == 0x000128, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, ___int_Array_Index_Variable) == 0x00012C, "Member 'BP_Input_Bulante_C_攻击抬起::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Array_Get_Item) == 0x000130, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2) == 0x000140, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2) == 0x000150, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, K2Node_MakeArray_Array) == 0x000158, "Member 'BP_Input_Bulante_C_攻击抬起::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Array_Get_Item_1) == 0x000168, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00016C, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000170, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000180, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.技能1按下
// 0x0178 (0x0178 - 0x0000)
struct BP_Input_Bulante_C_技能1按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc___1___ReturnValue;                        // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0040(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0060(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0074(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x0090(0x0020)()
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x00B4(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x00E8(0x0020)()
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1; // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1; // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x0128(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2; // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2; // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3; // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3; // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_技能1按下) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_技能1按下");
static_assert(sizeof(BP_Input_Bulante_C_技能1按下) == 0x000178, "Wrong size on BP_Input_Bulante_C_技能1按下");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, time) == 0x000000, "Member 'BP_Input_Bulante_C_技能1按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_技能1按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc___1___ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc___1___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x00002C, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000040, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000060, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000074, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_CanResponseInput_ReturnValue) == 0x000088, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x000090, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x0000B0, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x0000B4, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000C8, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0000D0, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0000E0, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000E1, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x0000E2, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000E3, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x0000E8, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_BooleanAND_ReturnValue) == 0x000108, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_BooleanOR_ReturnValue) == 0x000109, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1) == 0x000110, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1) == 0x000120, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x000128, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2) == 0x000148, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2) == 0x000158, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3) == 0x000160, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3) == 0x000170, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.技能1抬起
// 0x0080 (0x0080 - 0x0000)
struct BP_Input_Bulante_C_技能1抬起 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc___1___ReturnValue;                        // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0030(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0050(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_技能1抬起) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_技能1抬起");
static_assert(sizeof(BP_Input_Bulante_C_技能1抬起) == 0x000080, "Wrong size on BP_Input_Bulante_C_技能1抬起");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, time) == 0x000000, "Member 'BP_Input_Bulante_C_技能1抬起::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_技能1抬起::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc___1___ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc___1___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_CanResponseInput_ReturnValue) == 0x00002C, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000030, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_CreateSkillCommand_ReturnValue) == 0x000050, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000068, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000078, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000079, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_IsMovingOnGround_ReturnValue) == 0x00007A, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00007B, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_BooleanAND_ReturnValue) == 0x00007C, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_BooleanOR_ReturnValue) == 0x00007D, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.大招按下
// 0x0098 (0x0098 - 0x0000)
struct BP_Input_Bulante_C_大招按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0030(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_1;   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0050(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0084(0x0014)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Input_Bulante_C_大招按下) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_大招按下");
static_assert(sizeof(BP_Input_Bulante_C_大招按下) == 0x000098, "Wrong size on BP_Input_Bulante_C_大招按下");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, time) == 0x000000, "Member 'BP_Input_Bulante_C_大招按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_大招按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x00002C, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000030, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_CanResponseInput_ReturnValue) == 0x000044, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue_1) == 0x000048, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000050, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000070, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000080, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc______ReturnValue) == 0x000084, "Member 'BP_Input_Bulante_C_大招按下::CallFunc______ReturnValue' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.跳跃按下
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Input_Bulante_C_跳跃按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0018(0x0020)()
	bool                                          CallFunc_CanJumpPress_ReturnValue;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0054(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x007C(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1;  // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2;  // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_跳跃按下) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_跳跃按下");
static_assert(sizeof(BP_Input_Bulante_C_跳跃按下) == 0x0000C0, "Wrong size on BP_Input_Bulante_C_跳跃按下");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, time) == 0x000000, "Member 'BP_Input_Bulante_C_跳跃按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_跳跃按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_CanJumpPress_ReturnValue) == 0x000038, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_CanJumpPress_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000040, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000050, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc______ReturnValue) == 0x000054, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000068, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000078, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x00007C, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000090, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x0000A0, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x0000A8, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x0000B8, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.闪避按下
// 0x0068 (0x0068 - 0x0000)
struct BP_Input_Bulante_C_闪避按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0018(0x0020)()
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0038(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_闪避按下) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_闪避按下");
static_assert(sizeof(BP_Input_Bulante_C_闪避按下) == 0x000068, "Wrong size on BP_Input_Bulante_C_闪避按下");
static_assert(offsetof(BP_Input_Bulante_C_闪避按下, time) == 0x000000, "Member 'BP_Input_Bulante_C_闪避按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_闪避按下, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_闪避按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_闪避按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_闪避按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_闪避按下, CallFunc______ReturnValue) == 0x000038, "Member 'BP_Input_Bulante_C_闪避按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000050, "Member 'BP_Input_Bulante_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000060, "Member 'BP_Input_Bulante_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");

}

