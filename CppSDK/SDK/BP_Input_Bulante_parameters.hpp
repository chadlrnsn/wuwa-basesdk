#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Input_Bulante

#include "Basic.hpp"

#include "sInputCommand_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_Input_Bulante.BP_Input_Bulante_C.ExecuteUbergraph_BP_Input_Bulante
// 0x0004 (0x0004 - 0x0000)
struct BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante) == 0x000004, "Wrong alignment on BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante");
static_assert(sizeof(BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante) == 0x000004, "Wrong size on BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante");
static_assert(offsetof(BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante, EntryPoint) == 0x000000, "Member 'BP_Input_Bulante_C_ExecuteUbergraph_BP_Input_Bulante::EntryPoint' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.攻击按下
// 0x05E8 (0x05E8 - 0x0000)
struct BP_Input_Bulante_C_攻击按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x001C(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0038(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0070(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0088(0x0020)()
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCommonSkillCanBeInterrupt_ReturnValue; // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Variable;                                   // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x00F8(0x0020)()
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0128(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTagCount_ReturnValue;                  // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x0180(0x0020)()
	int32                                         ___int_Variable_1;                                 // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x01C8(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x01E0(0x0020)()
	int32                                         ___int_Variable_2;                                 // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x0204(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4; // 0x0218(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5; // 0x0238(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_1; // 0x0258(0x0010)(ReferenceParm)
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_2; // 0x0268(0x0010)(ReferenceParm)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x0278(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_3;                                 // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_6;           // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x02A8(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x02C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_1;          // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DA[0x6];                                      // 0x02DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6; // 0x02E0(0x0020)()
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_302[0x2];                                      // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable_1;                     // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x0308(0x000C)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x0314(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_2;                    // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7; // 0x0330(0x0020)()
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_4;                                 // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_7;           // 0x0360(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_6;         // 0x0370(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0388(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8; // 0x0398(0x0020)()
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x03B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x03BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x03BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x03BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BE[0x2];                                      // 0x03BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_7;         // 0x03C0(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x03D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_5;                                 // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9; // 0x03F0(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_8;         // 0x0410(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1; // 0x0428(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1; // 0x0438(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2; // 0x0440(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2; // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_451[0x3];                                      // 0x0451(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_9;         // 0x0454(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3; // 0x0468(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3; // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4; // 0x0480(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4; // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_2;          // 0x0491(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_492[0x6];                                      // 0x0492(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5; // 0x0498(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5; // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x04A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x04AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4AB[0x5];                                      // 0x04AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10; // 0x04B0(0x0020)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x04D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue_1;           // 0x04D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x04D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x04D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D5[0x3];                                      // 0x04D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_6; // 0x04D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_6; // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x04F0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0504(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_505[0x3];                                      // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable_2;                     // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_3;                         // 0x050C(0x000C)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0519(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue_2;           // 0x051A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x051B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x051C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51D[0x3];                                      // 0x051D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x0520(0x0010)(ReferenceParm)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_7; // 0x0530(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_7; // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_541[0x3];                                      // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_4;                         // 0x0544(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0548(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_11; // 0x0550(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_8; // 0x0570(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_8; // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_581[0x7];                                      // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_2;                          // 0x0588(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_5;                         // 0x0598(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_2;         // 0x059C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59D[0x3];                                      // 0x059D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x05A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B1[0x7];                                      // 0x05B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x05B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x05C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C9[0x7];                                      // 0x05C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2; // 0x05D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x05E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_攻击按下) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_攻击按下");
static_assert(sizeof(BP_Input_Bulante_C_攻击按下) == 0x0005E8, "Wrong size on BP_Input_Bulante_C_攻击按下");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, time) == 0x000000, "Member 'BP_Input_Bulante_C_攻击按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_攻击按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Loop_Counter_Variable) == 0x000018, "Member 'BP_Input_Bulante_C_攻击按下::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc______ReturnValue) == 0x00001C, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___bool_True_if_break_was_hit_Variable) == 0x000034, "Member 'BP_Input_Bulante_C_攻击按下::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Not_PreBool_ReturnValue) == 0x000035, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000038, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue) == 0x000050, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000070, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000088, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000A8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000B8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_GetCommonSkillCanBeInterrupt_ReturnValue) == 0x0000C8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_GetCommonSkillCanBeInterrupt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0000D0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Variable) == 0x0000E0, "Member 'BP_Input_Bulante_C_攻击按下::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000E8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x0000F8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000118, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000128, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000138, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Length_ReturnValue) == 0x000148, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x00014C, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_GetTagCount_ReturnValue) == 0x000150, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_GetTagCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Less_IntInt_ReturnValue) == 0x000154, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_4) == 0x000158, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Array_Index_Variable) == 0x000168, "Member 'BP_Input_Bulante_C_攻击按下::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000170, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x000180, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Variable_1) == 0x0001A0, "Member 'BP_Input_Bulante_C_攻击按下::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_5) == 0x0001A8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0001B8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x0001C8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x0001E0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Variable_2) == 0x000200, "Member 'BP_Input_Bulante_C_攻击按下::___int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x000204, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4) == 0x000218, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5) == 0x000238, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_1) == 0x000258, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_2) == 0x000268, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Get_Item) == 0x000278, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Length_ReturnValue_1) == 0x000284, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Length_ReturnValue_2) == 0x000288, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_1) == 0x00028C, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Loop_Counter_Variable_1) == 0x000290, "Member 'BP_Input_Bulante_C_攻击按下::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Variable_3) == 0x000294, "Member 'BP_Input_Bulante_C_攻击按下::___int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_6) == 0x000298, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x0002A8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0002C0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_2) == 0x0002D0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_1) == 0x0002D4, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanAND_ReturnValue) == 0x0002D8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___bool_True_if_break_was_hit_Variable_1) == 0x0002D9, "Member 'BP_Input_Bulante_C_攻击按下::___bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6) == 0x0002E0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_1) == 0x000300, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanAND_ReturnValue_1) == 0x000301, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Array_Index_Variable_1) == 0x000304, "Member 'BP_Input_Bulante_C_攻击按下::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Get_Item_1) == 0x000308, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x000314, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Loop_Counter_Variable_2) == 0x000328, "Member 'BP_Input_Bulante_C_攻击按下::___int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7) == 0x000330, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_3) == 0x000350, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_2) == 0x000354, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Variable_4) == 0x000358, "Member 'BP_Input_Bulante_C_攻击按下::___int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Conv_IntToString_ReturnValue_7) == 0x000360, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Conv_IntToString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_6) == 0x000370, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000388, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8) == 0x000398, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CanResponseInput_ReturnValue) == 0x0003B8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0003B9, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0003BA, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x0003BB, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanAND_ReturnValue_2) == 0x0003BC, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanOR_ReturnValue) == 0x0003BD, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_7) == 0x0003C0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0003D8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0003E8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Variable_5) == 0x0003EC, "Member 'BP_Input_Bulante_C_攻击按下::___int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9) == 0x0003F0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_8) == 0x000410, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1) == 0x000428, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1) == 0x000438, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2) == 0x000440, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2) == 0x000450, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_9) == 0x000454, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3) == 0x000468, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3) == 0x000478, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4) == 0x000480, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4) == 0x000490, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___bool_True_if_break_was_hit_Variable_2) == 0x000491, "Member 'BP_Input_Bulante_C_攻击按下::___bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5) == 0x000498, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5) == 0x0004A8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_2) == 0x0004A9, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanAND_ReturnValue_3) == 0x0004AA, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10) == 0x0004B0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0004D0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0004D1, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue_1) == 0x0004D2, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanAND_ReturnValue_4) == 0x0004D3, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanOR_ReturnValue_1) == 0x0004D4, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_6) == 0x0004D8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_6) == 0x0004E8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, K2Node_MakeArray_Array) == 0x0004F0, "Member 'BP_Input_Bulante_C_攻击按下::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Get_Item_2) == 0x000500, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000504, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, ___int_Array_Index_Variable_2) == 0x000508, "Member 'BP_Input_Bulante_C_攻击按下::___int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Get_Item_3) == 0x00050C, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000518, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000519, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue_2) == 0x00051A, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanAND_ReturnValue_5) == 0x00051B, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_BooleanOR_ReturnValue_2) == 0x00051C, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, K2Node_MakeArray_Array_1) == 0x000520, "Member 'BP_Input_Bulante_C_攻击按下::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_7) == 0x000530, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_7) == 0x000540, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Get_Item_4) == 0x000544, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000548, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_11) == 0x000550, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_8) == 0x000570, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_8) == 0x000580, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, K2Node_MakeArray_Array_2) == 0x000588, "Member 'BP_Input_Bulante_C_攻击按下::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_Get_Item_5) == 0x000598, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_2) == 0x00059C, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x0005A0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x0005B0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x0005B8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x0005C8, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x0005D0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x0005E0, "Member 'BP_Input_Bulante_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.攻击长按
// 0x0528 (0x0528 - 0x0000)
struct BP_Input_Bulante_C_攻击长按 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0030(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_1;        // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0048(0x0020)()
	bool                                          ___bool_IsClosed_Variable;                         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x006C(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_Has_Been_Initd_Variable;                   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x0088(0x0020)()
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_2;        // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x00B0(0x0020)()
	int32                                         ___int_Variable;                                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x00D8(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x00F8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0130(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4; // 0x0148(0x0020)()
	int32                                         CallFunc_GetTagCount_ReturnValue;                  // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_1;                                 // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x01A8(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_2;                                 // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5; // 0x01D8(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_1; // 0x01F8(0x0010)(ReferenceParm)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x0208(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6; // 0x0218(0x0020)()
	int32                                         ___int_Variable_3;                                 // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0240(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0250(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262[0x2];                                      // 0x0262(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x0268(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x027C(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_6;         // 0x0290(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7; // 0x02A8(0x0020)()
	bool                                          ___bool_True_if_break_was_hit_Variable_1;          // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x02CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x02CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x02CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x02CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CF[0x1];                                      // 0x02CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8; // 0x02D0(0x0020)()
	int32                                         ___int_Array_Index_Variable_1;                     // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x02F8(0x000C)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_7;         // 0x0310(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0328(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9; // 0x0340(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10; // 0x0360(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1; // 0x0380(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1; // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_8;         // 0x0394(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2; // 0x03A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2; // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3; // 0x03C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3; // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4; // 0x03D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4; // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5; // 0x03F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5; // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_6; // 0x0408(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_6; // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_7; // 0x0420(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_7; // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_8; // 0x0438(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_8; // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_11; // 0x0450(0x0020)()
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0470(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue_1;           // 0x0485(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0486(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0487(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0489(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x048A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48B[0x5];                                      // 0x048B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_9; // 0x0490(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_9; // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_12; // 0x04A8(0x0020)()
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x04C8(0x0010)(ReferenceParm)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_10; // 0x04D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_10; // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_3;                         // 0x04EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F1[0x7];                                      // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x04F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0508(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x0510(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_攻击长按) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_攻击长按");
static_assert(sizeof(BP_Input_Bulante_C_攻击长按) == 0x000528, "Wrong size on BP_Input_Bulante_C_攻击长按");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, time) == 0x000000, "Member 'BP_Input_Bulante_C_攻击长按::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_攻击长按::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x00002C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue) == 0x000030, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_GetSkillAcceptInput_ReturnValue_1) == 0x000044, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_GetSkillAcceptInput_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000048, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___bool_IsClosed_Variable) == 0x000068, "Member 'BP_Input_Bulante_C_攻击长按::___bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x00006C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___bool_Has_Been_Initd_Variable) == 0x000080, "Member 'BP_Input_Bulante_C_攻击长按::___bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x000088, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___bool_True_if_break_was_hit_Variable) == 0x0000A8, "Member 'BP_Input_Bulante_C_攻击长按::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_GetSkillAcceptInput_ReturnValue_2) == 0x0000A9, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_GetSkillAcceptInput_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Not_PreBool_ReturnValue) == 0x0000AA, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x0000B0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Variable) == 0x0000D0, "Member 'BP_Input_Bulante_C_攻击长按::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Array_Index_Variable) == 0x0000D4, "Member 'BP_Input_Bulante_C_攻击长按::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x0000D8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x0000F8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_Length_ReturnValue) == 0x000108, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Conv_IntToString_ReturnValue) == 0x000110, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Concat_StrStr_ReturnValue) == 0x000120, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000130, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4) == 0x000148, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_GetTagCount_ReturnValue) == 0x000168, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_GetTagCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Less_IntInt_ReturnValue) == 0x00016C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000170, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000180, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Variable_1) == 0x000190, "Member 'BP_Input_Bulante_C_攻击长按::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000198, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x0001A8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0001C0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Variable_2) == 0x0001D0, "Member 'BP_Input_Bulante_C_攻击长按::___int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5) == 0x0001D8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BreakGameplayTagContainer_GameplayTags_1) == 0x0001F8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BreakGameplayTagContainer_GameplayTags_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_Get_Item) == 0x000208, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_Length_ReturnValue_1) == 0x000214, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6) == 0x000218, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Variable_3) == 0x000238, "Member 'BP_Input_Bulante_C_攻击长按::___int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Loop_Counter_Variable) == 0x00023C, "Member 'BP_Input_Bulante_C_攻击长按::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000240, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000250, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Less_IntInt_ReturnValue_1) == 0x000260, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BooleanAND_ReturnValue) == 0x000261, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Add_IntInt_ReturnValue) == 0x000264, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x000268, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x00027C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_6) == 0x000290, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7) == 0x0002A8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___bool_True_if_break_was_hit_Variable_1) == 0x0002C8, "Member 'BP_Input_Bulante_C_攻击长按::___bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Not_PreBool_ReturnValue_1) == 0x0002C9, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0002CA, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0002CB, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_IsMovingOnGround_ReturnValue) == 0x0002CC, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BooleanAND_ReturnValue_1) == 0x0002CD, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BooleanOR_ReturnValue) == 0x0002CE, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8) == 0x0002D0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Array_Index_Variable_1) == 0x0002F0, "Member 'BP_Input_Bulante_C_攻击长按::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, ___int_Loop_Counter_Variable_1) == 0x0002F4, "Member 'BP_Input_Bulante_C_攻击长按::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_Get_Item_1) == 0x0002F8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Less_IntInt_ReturnValue_2) == 0x000304, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Add_IntInt_ReturnValue_1) == 0x000308, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BooleanAND_ReturnValue_2) == 0x00030C, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_7) == 0x000310, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000328, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000338, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9) == 0x000340, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10) == 0x000360, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1) == 0x000380, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1) == 0x000390, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_8) == 0x000394, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2) == 0x0003A8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2) == 0x0003B8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3) == 0x0003C0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3) == 0x0003D0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4) == 0x0003D8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4) == 0x0003E8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5) == 0x0003F0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5) == 0x000400, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_6) == 0x000408, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_6) == 0x000418, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_7) == 0x000420, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_7) == 0x000430, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_8) == 0x000438, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_8) == 0x000448, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_11) == 0x000450, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, K2Node_MakeArray_Array) == 0x000470, "Member 'BP_Input_Bulante_C_攻击长按::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_Get_Item_2) == 0x000480, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000484, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_IsMovingOnGround_ReturnValue_1) == 0x000485, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_IsMovingOnGround_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000486, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000487, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BooleanAND_ReturnValue_3) == 0x000488, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_BooleanOR_ReturnValue_1) == 0x000489, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_CanResponseInput_ReturnValue) == 0x00048A, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_9) == 0x000490, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_9) == 0x0004A0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_12) == 0x0004A8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, K2Node_MakeArray_Array_1) == 0x0004C8, "Member 'BP_Input_Bulante_C_攻击长按::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_10) == 0x0004D8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_10) == 0x0004E8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_Get_Item_3) == 0x0004EC, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x0004F0, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x0004F8, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000508, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000510, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000520, "Member 'BP_Input_Bulante_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.攻击抬起
// 0x0188 (0x0188 - 0x0000)
struct BP_Input_Bulante_C_攻击抬起 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable;                                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0038(0x0020)()
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x0058(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0078(0x0010)(ReferenceParm)
	int32                                         ___int_Array_Index_Variable;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x0090(0x000C)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_1;                                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x00A8(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x00C8(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_103[0x5];                                      // 0x0103(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0108(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1; // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1; // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x0138(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2; // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2; // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_攻击抬起) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_攻击抬起");
static_assert(sizeof(BP_Input_Bulante_C_攻击抬起) == 0x000188, "Wrong size on BP_Input_Bulante_C_攻击抬起");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, time) == 0x000000, "Member 'BP_Input_Bulante_C_攻击抬起::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_攻击抬起::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_CanResponseInput_ReturnValue) == 0x00002C, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, ___int_Variable) == 0x000030, "Member 'BP_Input_Bulante_C_攻击抬起::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000038, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x000058, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000078, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, ___int_Array_Index_Variable) == 0x000088, "Member 'BP_Input_Bulante_C_攻击抬起::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Array_Length_ReturnValue) == 0x00008C, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Array_Get_Item) == 0x000090, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00009C, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00009D, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_IsMovingOnGround_ReturnValue) == 0x00009E, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_BooleanAND_ReturnValue) == 0x00009F, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_BooleanOR_ReturnValue) == 0x0000A0, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, ___int_Variable_1) == 0x0000A4, "Member 'BP_Input_Bulante_C_攻击抬起::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x0000A8, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_CreateSkillCommand_ReturnValue) == 0x0000C8, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, ___int_Loop_Counter_Variable) == 0x0000DC, "Member 'BP_Input_Bulante_C_攻击抬起::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Less_IntInt_ReturnValue) == 0x0000E0, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0000E8, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0000F8, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Add_IntInt_ReturnValue) == 0x0000FC, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, ___bool_True_if_break_was_hit_Variable) == 0x000100, "Member 'BP_Input_Bulante_C_攻击抬起::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Not_PreBool_ReturnValue) == 0x000101, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_BooleanAND_ReturnValue_1) == 0x000102, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, K2Node_MakeArray_Array) == 0x000108, "Member 'BP_Input_Bulante_C_攻击抬起::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Array_Get_Item_1) == 0x000118, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1) == 0x000120, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1) == 0x000130, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000131, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x000138, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2) == 0x000158, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2) == 0x000168, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000170, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_攻击抬起, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000180, "Member 'BP_Input_Bulante_C_攻击抬起::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.技能1按下
// 0x0178 (0x0178 - 0x0000)
struct BP_Input_Bulante_C_技能1按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc___1___ReturnValue;                        // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0040(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0060(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0074(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x0090(0x0020)()
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x00B4(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x00E8(0x0020)()
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1; // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1; // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x0128(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2; // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2; // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3; // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3; // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_技能1按下) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_技能1按下");
static_assert(sizeof(BP_Input_Bulante_C_技能1按下) == 0x000178, "Wrong size on BP_Input_Bulante_C_技能1按下");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, time) == 0x000000, "Member 'BP_Input_Bulante_C_技能1按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_技能1按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc___1___ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc___1___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x00002C, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000040, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000060, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000074, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_CanResponseInput_ReturnValue) == 0x000088, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x000090, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x0000B0, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x0000B4, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000C8, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0000D0, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0000E0, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000E1, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x0000E2, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000E3, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x0000E8, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_BooleanAND_ReturnValue) == 0x000108, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_BooleanOR_ReturnValue) == 0x000109, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1) == 0x000110, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1) == 0x000120, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x000128, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2) == 0x000148, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2) == 0x000158, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3) == 0x000160, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3) == 0x000170, "Member 'BP_Input_Bulante_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_3' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.技能1抬起
// 0x0080 (0x0080 - 0x0000)
struct BP_Input_Bulante_C_技能1抬起 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc___1___ReturnValue;                        // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0030(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0050(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_技能1抬起) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_技能1抬起");
static_assert(sizeof(BP_Input_Bulante_C_技能1抬起) == 0x000080, "Wrong size on BP_Input_Bulante_C_技能1抬起");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, time) == 0x000000, "Member 'BP_Input_Bulante_C_技能1抬起::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_技能1抬起::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc___1___ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc___1___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_CanResponseInput_ReturnValue) == 0x00002C, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000030, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_CreateSkillCommand_ReturnValue) == 0x000050, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000068, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000078, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000079, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_IsMovingOnGround_ReturnValue) == 0x00007A, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00007B, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_BooleanAND_ReturnValue) == 0x00007C, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_技能1抬起, CallFunc_BooleanOR_ReturnValue) == 0x00007D, "Member 'BP_Input_Bulante_C_技能1抬起::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.大招按下
// 0x0098 (0x0098 - 0x0000)
struct BP_Input_Bulante_C_大招按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0030(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_1;   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0050(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0084(0x0014)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Input_Bulante_C_大招按下) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_大招按下");
static_assert(sizeof(BP_Input_Bulante_C_大招按下) == 0x000098, "Wrong size on BP_Input_Bulante_C_大招按下");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, time) == 0x000000, "Member 'BP_Input_Bulante_C_大招按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_大招按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x00002C, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000030, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_CanResponseInput_ReturnValue) == 0x000044, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue_1) == 0x000048, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000050, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000070, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000080, "Member 'BP_Input_Bulante_C_大招按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_大招按下, CallFunc______ReturnValue) == 0x000084, "Member 'BP_Input_Bulante_C_大招按下::CallFunc______ReturnValue' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.跳跃按下
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Input_Bulante_C_跳跃按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0018(0x0020)()
	bool                                          CallFunc_CanJumpPress_ReturnValue;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0054(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x007C(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2; // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_跳跃按下) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_跳跃按下");
static_assert(sizeof(BP_Input_Bulante_C_跳跃按下) == 0x0000C0, "Wrong size on BP_Input_Bulante_C_跳跃按下");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, time) == 0x000000, "Member 'BP_Input_Bulante_C_跳跃按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_跳跃按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_CanJumpPress_ReturnValue) == 0x000038, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_CanJumpPress_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000040, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000050, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc______ReturnValue) == 0x000054, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000068, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000078, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x00007C, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000090, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x0000A0, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x0000A8, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_跳跃按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x0000B8, "Member 'BP_Input_Bulante_C_跳跃按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");

// Function BP_Input_Bulante.BP_Input_Bulante_C.闪避按下
// 0x0068 (0x0068 - 0x0000)
struct BP_Input_Bulante_C_闪避按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0018(0x0020)()
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0038(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Bulante_C_闪避按下) == 0x000008, "Wrong alignment on BP_Input_Bulante_C_闪避按下");
static_assert(sizeof(BP_Input_Bulante_C_闪避按下) == 0x000068, "Wrong size on BP_Input_Bulante_C_闪避按下");
static_assert(offsetof(BP_Input_Bulante_C_闪避按下, time) == 0x000000, "Member 'BP_Input_Bulante_C_闪避按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_闪避按下, ReturnValue) == 0x000004, "Member 'BP_Input_Bulante_C_闪避按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_闪避按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000018, "Member 'BP_Input_Bulante_C_闪避按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_闪避按下, CallFunc______ReturnValue) == 0x000038, "Member 'BP_Input_Bulante_C_闪避按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000050, "Member 'BP_Input_Bulante_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Bulante_C_闪避按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000060, "Member 'BP_Input_Bulante_C_闪避按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");

}

