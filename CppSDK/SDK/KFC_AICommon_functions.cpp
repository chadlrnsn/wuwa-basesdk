#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KFC_AICommon

#include "Basic.hpp"

#include "KFC_AICommon_classes.hpp"
#include "KFC_AICommon_parameters.hpp"


namespace SDK
{

// Function KFC_AICommon.KFC_AICommon_C.获取自身距离目标角度
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           目标角色                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           原点角色                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   返回角度                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::获取自身距离目标角度(class AActor* 目标角色, class AActor* 原点角色, class UObject* __WorldContext, float* 返回角度)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "获取自身距离目标角度");

	Params::KFC_AICommon_C_获取自身距离目标角度 Parms{};

	Parms.目标角色 = 目标角色;
	Parms.原点角色 = 原点角色;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (返回角度 != nullptr)
		*返回角度 = Parms.返回角度;
}


// Function KFC_AICommon.KFC_AICommon_C.目标距离计算
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AI对象                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           目标对象                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   到目标的距离                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    返回是否超过目标                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UKFC_AICommon_C::目标距离计算(class AActor* AI对象, class AActor* 目标对象, class UObject* __WorldContext, float* 到目标的距离, bool* 返回是否超过目标)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "目标距离计算");

	Params::KFC_AICommon_C_目标距离计算 Parms{};

	Parms.AI对象 = AI对象;
	Parms.目标对象 = 目标对象;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (到目标的距离 != nullptr)
		*到目标的距离 = Parms.到目标的距离;

	if (返回是否超过目标 != nullptr)
		*返回是否超过目标 = Parms.返回是否超过目标;
}


// Function KFC_AICommon.KFC_AICommon_C.更新动画属性（性能消耗大仅限进行测试开发）
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       As_Base_Character                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          速度向量                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          加速度                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          移动输入向量                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    是否正在移动                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    是否有移动输入                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   速度                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   瞄准旋转速率                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           移动模式                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::更新动画属性_性能消耗大仅限进行测试开发_(class ACharacter* As_Base_Character, class UObject* __WorldContext, struct FVector* 速度向量, struct FVector* 加速度, struct FVector* 移动输入向量, bool* 是否正在移动, bool* 是否有移动输入, float* 速度, float* 瞄准旋转速率, EMovementMode* 移动模式)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "更新动画属性（性能消耗大仅限进行测试开发）");

	Params::KFC_AICommon_C_更新动画属性_性能消耗大仅限进行测试开发_ Parms{};

	Parms.As_Base_Character = As_Base_Character;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (速度向量 != nullptr)
		*速度向量 = std::move(Parms.速度向量);

	if (加速度 != nullptr)
		*加速度 = std::move(Parms.加速度);

	if (移动输入向量 != nullptr)
		*移动输入向量 = std::move(Parms.移动输入向量);

	if (是否正在移动 != nullptr)
		*是否正在移动 = Parms.是否正在移动;

	if (是否有移动输入 != nullptr)
		*是否有移动输入 = Parms.是否有移动输入;

	if (速度 != nullptr)
		*速度 = Parms.速度;

	if (瞄准旋转速率 != nullptr)
		*瞄准旋转速率 = Parms.瞄准旋转速率;

	if (移动模式 != nullptr)
		*移动模式 = Parms.移动模式;
}


// Function KFC_AICommon.KFC_AICommon_C.播放特写镜头动画
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             剧情ID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDataTable*                       剧情资源表                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   演员Actor数组                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>                     演员身份数组                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::播放特写镜头动画(class FName 剧情ID, class UDataTable* 剧情资源表, TArray<class AActor*>& 演员Actor数组, TArray<class FName>& 演员身份数组, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "播放特写镜头动画");

	Params::KFC_AICommon_C_播放特写镜头动画 Parms{};

	Parms.剧情ID = 剧情ID;
	Parms.剧情资源表 = 剧情资源表;
	Parms.演员Actor数组 = std::move(演员Actor数组);
	Parms.演员身份数组 = std::move(演员身份数组);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	演员Actor数组 = std::move(Parms.演员Actor数组);
	演员身份数组 = std::move(Parms.演员身份数组);
}


// Function KFC_AICommon.KFC_AICommon_C.游荡强制转向结束
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATsBaseCharacter_C*               BaseCharacter                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    结束自动朝向                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UKFC_AICommon_C::游荡强制转向结束(class ATsBaseCharacter_C* BaseCharacter, class UObject* __WorldContext, bool* 结束自动朝向)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "游荡强制转向结束");

	Params::KFC_AICommon_C_游荡强制转向结束 Parms{};

	Parms.BaseCharacter = BaseCharacter;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (结束自动朝向 != nullptr)
		*结束自动朝向 = Parms.结束自动朝向;
}


// Function KFC_AICommon.KFC_AICommon_C.导航强制转向开始
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATsBaseCharacter_C*               自身base对象                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   旋转速度                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          导航坐标                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    导航强制转向中                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UKFC_AICommon_C::导航强制转向开始(class ATsBaseCharacter_C* 自身base对象, float 旋转速度, const struct FVector& 导航坐标, class UObject* __WorldContext, bool* 导航强制转向中)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "导航强制转向开始");

	Params::KFC_AICommon_C_导航强制转向开始 Parms{};

	Parms.自身base对象 = 自身base对象;
	Parms.旋转速度 = 旋转速度;
	Parms.导航坐标 = std::move(导航坐标);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (导航强制转向中 != nullptr)
		*导航强制转向中 = Parms.导航强制转向中;
}


// Function KFC_AICommon.KFC_AICommon_C.停止移动
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATsBaseCharacter_C*               Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::停止移动(class ATsBaseCharacter_C* Character, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "停止移动");

	Params::KFC_AICommon_C_停止移动 Parms{};

	Parms.Character = Character;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function KFC_AICommon.KFC_AICommon_C.游荡强制转向开始
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATsBaseCharacter_C*               自身Character                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   旋转速度                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ATsBaseCharacter_C*               仇恨对象                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    自动朝向开始                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UKFC_AICommon_C::游荡强制转向开始(class ATsBaseCharacter_C* 自身Character, float 旋转速度, class ATsBaseCharacter_C* 仇恨对象, class UObject* __WorldContext, bool* 自动朝向开始)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "游荡强制转向开始");

	Params::KFC_AICommon_C_游荡强制转向开始 Parms{};

	Parms.自身Character = 自身Character;
	Parms.旋转速度 = 旋转速度;
	Parms.仇恨对象 = 仇恨对象;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (自动朝向开始 != nullptr)
		*自动朝向开始 = Parms.自动朝向开始;
}


// Function KFC_AICommon.KFC_AICommon_C.设置黑板Int
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATsBaseCharacter_C*               角色                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   值                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::设置黑板Int(class ATsBaseCharacter_C* 角色, const class FString& Key, int32 值, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "设置黑板Int");

	Params::KFC_AICommon_C_设置黑板Int Parms{};

	Parms.角色 = 角色;
	Parms.Key = std::move(Key);
	Parms.值 = 值;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function KFC_AICommon.KFC_AICommon_C.获取黑板 Int
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseCharacter*                   角色                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   值                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::获取黑板_Int(class ABaseCharacter* 角色, const class FString& Key, class UObject* __WorldContext, int32* 值)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "获取黑板 Int");

	Params::KFC_AICommon_C_获取黑板_Int Parms{};

	Parms.角色 = 角色;
	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (值 != nullptr)
		*值 = Parms.值;
}


// Function KFC_AICommon.KFC_AICommon_C.获取自身距离坐标角度
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVectorDouble                    目标坐标                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           原点角色                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   返回角度                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::获取自身距离坐标角度(const struct FVectorDouble& 目标坐标, class AActor* 原点角色, class UObject* __WorldContext, float* 返回角度)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "获取自身距离坐标角度");

	Params::KFC_AICommon_C_获取自身距离坐标角度 Parms{};

	Parms.目标坐标 = std::move(目标坐标);
	Parms.原点角色 = 原点角色;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (返回角度 != nullptr)
		*返回角度 = Parms.返回角度;
}


// Function KFC_AICommon.KFC_AICommon_C.使用技能关卡封装
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    外部方向输入清0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ATsBaseCharacter_C*               自身Character                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             技能随机结果                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           技能目标                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::使用技能关卡封装(bool 外部方向输入清0, class ATsBaseCharacter_C* 自身Character, class FName 技能随机结果, class AActor* 技能目标, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "使用技能关卡封装");

	Params::KFC_AICommon_C_使用技能关卡封装 Parms{};

	Parms.外部方向输入清0 = 外部方向输入清0;
	Parms.自身Character = 自身Character;
	Parms.技能随机结果 = 技能随机结果;
	Parms.技能目标 = 技能目标;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function KFC_AICommon.KFC_AICommon_C.获取自身距离目标角度2D
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           目标角色                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           原点角色                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   返回角度                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::获取自身距离目标角度2D(class AActor* 目标角色, class AActor* 原点角色, class UObject* __WorldContext, float* 返回角度)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "获取自身距离目标角度2D");

	Params::KFC_AICommon_C_获取自身距离目标角度2D Parms{};

	Parms.目标角色 = 目标角色;
	Parms.原点角色 = 原点角色;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (返回角度 != nullptr)
		*返回角度 = Parms.返回角度;
}


// Function KFC_AICommon.KFC_AICommon_C.忽略 Z
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          InVec                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutVec                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::忽略_Z(const struct FVector& InVec, class UObject* __WorldContext, struct FVector* OutVec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "忽略 Z");

	Params::KFC_AICommon_C_忽略_Z Parms{};

	Parms.InVec = std::move(InVec);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutVec != nullptr)
		*OutVec = std::move(Parms.OutVec);
}


// Function KFC_AICommon.KFC_AICommon_C.阵营判断
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECamp                                   自身阵营                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECamp                                   目标阵营                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDataTable*                       阵营关系数据                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERelation                               关系                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   关系整数                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::阵营判断(ECamp 自身阵营, ECamp 目标阵营, class UDataTable* 阵营关系数据, class UObject* __WorldContext, ERelation* 关系, int32* 关系整数)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "阵营判断");

	Params::KFC_AICommon_C_阵营判断 Parms{};

	Parms.自身阵营 = 自身阵营;
	Parms.目标阵营 = 目标阵营;
	Parms.阵营关系数据 = 阵营关系数据;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (关系 != nullptr)
		*关系 = Parms.关系;

	if (关系整数 != nullptr)
		*关系整数 = Parms.关系整数;
}


// Function KFC_AICommon.KFC_AICommon_C.GetPathToTarget
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InEndPos                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InStartPos                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  OutPathpoint                                           (Parm, OutParm)

void UKFC_AICommon_C::GetPathToTarget(const struct FVector& InEndPos, const struct FVector& InStartPos, class UObject* __WorldContext, TArray<struct FVector>* OutPathpoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "GetPathToTarget");

	Params::KFC_AICommon_C_GetPathToTarget Parms{};

	Parms.InEndPos = std::move(InEndPos);
	Parms.InStartPos = std::move(InStartPos);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutPathpoint != nullptr)
		*OutPathpoint = std::move(Parms.OutPathpoint);
}


// Function KFC_AICommon.KFC_AICommon_C.在原点左边
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVectorDouble                    原点                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    目标点                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    原点朝向的点                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    在原点左边_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UKFC_AICommon_C::在原点左边(const struct FVectorDouble& 原点, const struct FVectorDouble& 目标点, const struct FVectorDouble& 原点朝向的点, class UObject* __WorldContext, bool* 在原点左边_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "在原点左边");

	Params::KFC_AICommon_C_在原点左边 Parms{};

	Parms.原点 = std::move(原点);
	Parms.目标点 = std::move(目标点);
	Parms.原点朝向的点 = std::move(原点朝向的点);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (在原点左边_0 != nullptr)
		*在原点左边_0 = Parms.在原点左边_0;
}


// Function KFC_AICommon.KFC_AICommon_C.Get Pos in Path
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSPointsRow>              InRow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    bXDir                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bYDir                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  OutPoints                                              (Parm, OutParm)

void UKFC_AICommon_C::Get_Pos_in_Path(TArray<struct FSPointsRow>& InRow, bool bXDir, bool bYDir, class UObject* __WorldContext, TArray<struct FVector>* OutPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "Get Pos in Path");

	Params::KFC_AICommon_C_Get_Pos_in_Path Parms{};

	Parms.InRow = std::move(InRow);
	Parms.bXDir = bXDir;
	Parms.bYDir = bYDir;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	InRow = std::move(Parms.InRow);

	if (OutPoints != nullptr)
		*OutPoints = std::move(Parms.OutPoints);
}


// Function KFC_AICommon.KFC_AICommon_C.忽略胶囊体距离
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ATsBaseCharacter_C*               比较对象1                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ATsBaseCharacter_C*               比较对象2                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   距离                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::忽略胶囊体距离(class ATsBaseCharacter_C* 比较对象1, class ATsBaseCharacter_C* 比较对象2, class UObject* __WorldContext, float* 距离)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "忽略胶囊体距离");

	Params::KFC_AICommon_C_忽略胶囊体距离 Parms{};

	Parms.比较对象1 = 比较对象1;
	Parms.比较对象2 = 比较对象2;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (距离 != nullptr)
		*距离 = Parms.距离;
}


// Function KFC_AICommon.KFC_AICommon_C.怪物通用
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::怪物通用(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "怪物通用");

	Params::KFC_AICommon_C_怪物通用 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function KFC_AICommon.KFC_AICommon_C.高度差计算
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ATsBaseCharacter_C*               原点目标                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ATsBaseCharacter_C*               比较目标                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   高度差                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::高度差计算(class ATsBaseCharacter_C* 原点目标, class ATsBaseCharacter_C* 比较目标, class UObject* __WorldContext, float* 高度差)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "高度差计算");

	Params::KFC_AICommon_C_高度差计算 Parms{};

	Parms.原点目标 = 原点目标;
	Parms.比较目标 = 比较目标;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (高度差 != nullptr)
		*高度差 = Parms.高度差;
}


// Function KFC_AICommon.KFC_AICommon_C.导航强制转向结束
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    导航强制转向中                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UKFC_AICommon_C::导航强制转向结束(class UObject* __WorldContext, bool* 导航强制转向中)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "导航强制转向结束");

	Params::KFC_AICommon_C_导航强制转向结束 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (导航强制转向中 != nullptr)
		*导航强制转向中 = Parms.导航强制转向中;
}


// Function KFC_AICommon.KFC_AICommon_C.距离中值
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   最大距离                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   最小距离                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   距离中值_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::距离中值(float 最大距离, float 最小距离, class UObject* __WorldContext, float* 距离中值_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "距离中值");

	Params::KFC_AICommon_C_距离中值 Parms{};

	Parms.最大距离 = 最大距离;
	Parms.最小距离 = 最小距离;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (距离中值_0 != nullptr)
		*距离中值_0 = Parms.距离中值_0;
}


// Function KFC_AICommon.KFC_AICommon_C.向量偏转角度长度仰角的坐标
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   长度                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   旋转                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   仰角                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    原点                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    目标点                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ThreeD旋转                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    坐标点                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::向量偏转角度长度仰角的坐标(float 长度, float 旋转, float 仰角, const struct FVectorDouble& 原点, const struct FVectorDouble& 目标点, bool ThreeD旋转, class UObject* __WorldContext, struct FVectorDouble* 坐标点)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "向量偏转角度长度仰角的坐标");

	Params::KFC_AICommon_C_向量偏转角度长度仰角的坐标 Parms{};

	Parms.长度 = 长度;
	Parms.旋转 = 旋转;
	Parms.仰角 = 仰角;
	Parms.原点 = std::move(原点);
	Parms.目标点 = std::move(目标点);
	Parms.ThreeD旋转 = ThreeD旋转;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (坐标点 != nullptr)
		*坐标点 = std::move(Parms.坐标点);
}


// Function KFC_AICommon.KFC_AICommon_C.传送坐标可靠性判断
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVectorDouble                    起始坐标                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    被验证坐标                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ATsBaseCharacter_C*               自身                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    坐标点可靠                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVectorDouble                    可靠坐标                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   返回坐标距离目标距离                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::传送坐标可靠性判断(const struct FVectorDouble& 起始坐标, const struct FVectorDouble& 被验证坐标, class ATsBaseCharacter_C* 自身, class UObject* __WorldContext, bool* 坐标点可靠, struct FVectorDouble* 可靠坐标, float* 返回坐标距离目标距离)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "传送坐标可靠性判断");

	Params::KFC_AICommon_C_传送坐标可靠性判断 Parms{};

	Parms.起始坐标 = std::move(起始坐标);
	Parms.被验证坐标 = std::move(被验证坐标);
	Parms.自身 = 自身;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (坐标点可靠 != nullptr)
		*坐标点可靠 = Parms.坐标点可靠;

	if (可靠坐标 != nullptr)
		*可靠坐标 = std::move(Parms.可靠坐标);

	if (返回坐标距离目标距离 != nullptr)
		*返回坐标距离目标距离 = Parms.返回坐标距离目标距离;
}


// Function KFC_AICommon.KFC_AICommon_C.设置黑板Long
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATsBaseCharacter_C*               角色                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int64                                   值                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::设置黑板Long(class ATsBaseCharacter_C* 角色, const class FString& Key, int64 值, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "设置黑板Long");

	Params::KFC_AICommon_C_设置黑板Long Parms{};

	Parms.角色 = 角色;
	Parms.Key = std::move(Key);
	Parms.值 = 值;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function KFC_AICommon.KFC_AICommon_C.获取黑板Long
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATsBaseCharacter_C*               角色                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64                                   值                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UKFC_AICommon_C::获取黑板Long(class ATsBaseCharacter_C* 角色, const class FString& Key, class UObject* __WorldContext, int64* 值)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "获取黑板Long");

	Params::KFC_AICommon_C_获取黑板Long Parms{};

	Parms.角色 = 角色;
	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (值 != nullptr)
		*值 = Parms.值;
}


// Function KFC_AICommon.KFC_AICommon_C.获取黑板EntityId
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATsBaseCharacter_C*               角色                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   值                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UKFC_AICommon_C::获取黑板EntityId(class ATsBaseCharacter_C* 角色, const class FString& Key, class UObject* __WorldContext, int32* 值)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "获取黑板EntityId");

	Params::KFC_AICommon_C_获取黑板EntityId Parms{};

	Parms.角色 = 角色;
	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (值 != nullptr)
		*值 = Parms.值;
}


// Function KFC_AICommon.KFC_AICommon_C.设置黑板EntityId
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATsBaseCharacter_C*               角色                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   值                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::设置黑板EntityId(class ATsBaseCharacter_C* 角色, const class FString& Key, int32 值, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "设置黑板EntityId");

	Params::KFC_AICommon_C_设置黑板EntityId Parms{};

	Parms.角色 = 角色;
	Parms.Key = std::move(Key);
	Parms.值 = 值;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function KFC_AICommon.KFC_AICommon_C.开启交互事件
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   交互事件ID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::开启交互事件(int32 交互事件ID, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "开启交互事件");

	Params::KFC_AICommon_C_开启交互事件 Parms{};

	Parms.交互事件ID = 交互事件ID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function KFC_AICommon.KFC_AICommon_C.创建 CD计时器回调
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIC_AICommon_C*                  AIC自身对象                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   cd_Id                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TDelegate<void(bool bContent)>          事件                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::创建_CD计时器回调(class AAIC_AICommon_C* AIC自身对象, int32 cd_Id, const TDelegate<void(bool bContent)> 事件, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "创建 CD计时器回调");

	Params::KFC_AICommon_C_创建_CD计时器回调 Parms{};

	Parms.AIC自身对象 = AIC自身对象;
	Parms.cd_Id = cd_Id;
	Parms.事件 = 事件;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function KFC_AICommon.KFC_AICommon_C.抛物线位移函数
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   激发时长                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   激发力度                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   发射角度                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   返回高度                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   返回位置                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   高度速度                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   距离速度                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::抛物线位移函数(float 激发时长, float 激发力度, float 发射角度, class UObject* __WorldContext, float* 返回高度, float* 返回位置, float* 高度速度, float* 距离速度)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "抛物线位移函数");

	Params::KFC_AICommon_C_抛物线位移函数 Parms{};

	Parms.激发时长 = 激发时长;
	Parms.激发力度 = 激发力度;
	Parms.发射角度 = 发射角度;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (返回高度 != nullptr)
		*返回高度 = Parms.返回高度;

	if (返回位置 != nullptr)
		*返回位置 = Parms.返回位置;

	if (高度速度 != nullptr)
		*高度速度 = Parms.高度速度;

	if (距离速度 != nullptr)
		*距离速度 = Parms.距离速度;
}


// Function KFC_AICommon.KFC_AICommon_C.获取自身对于目标仰角
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ACharacter*                       目标对象                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       原点对象                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    忽略胶囊体                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   返回角度                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::获取自身对于目标仰角(class ACharacter* 目标对象, class ACharacter* 原点对象, bool 忽略胶囊体, class UObject* __WorldContext, float* 返回角度)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "获取自身对于目标仰角");

	Params::KFC_AICommon_C_获取自身对于目标仰角 Parms{};

	Parms.目标对象 = 目标对象;
	Parms.原点对象 = 原点对象;
	Parms.忽略胶囊体 = 忽略胶囊体;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (返回角度 != nullptr)
		*返回角度 = Parms.返回角度;
}


// Function KFC_AICommon.KFC_AICommon_C.获取 Base属性值
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATsBaseCharacter_C*               目标                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   属性id                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   属性值                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::获取_Base属性值(class ATsBaseCharacter_C* 目标, int32 属性id, class UObject* __WorldContext, float* 属性值)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "获取 Base属性值");

	Params::KFC_AICommon_C_获取_Base属性值 Parms{};

	Parms.目标 = 目标;
	Parms.属性id = 属性id;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (属性值 != nullptr)
		*属性值 = Parms.属性值;
}


// Function KFC_AICommon.KFC_AICommon_C.获取Current属性值
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABaseCharacter*                   目标                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   属性id                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   属性值                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::获取Current属性值(class ABaseCharacter* 目标, int32 属性id, class UObject* __WorldContext, float* 属性值)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "获取Current属性值");

	Params::KFC_AICommon_C_获取Current属性值 Parms{};

	Parms.目标 = 目标;
	Parms.属性id = 属性id;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (属性值 != nullptr)
		*属性值 = Parms.属性值;
}


// Function KFC_AICommon.KFC_AICommon_C.忽略 Z Double
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVectorDouble                    InVec                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    OutVec                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::忽略_Z_Double(const struct FVectorDouble& InVec, class UObject* __WorldContext, struct FVectorDouble* OutVec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "忽略 Z Double");

	Params::KFC_AICommon_C_忽略_Z_Double Parms{};

	Parms.InVec = std::move(InVec);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutVec != nullptr)
		*OutVec = std::move(Parms.OutVec);
}


// Function KFC_AICommon.KFC_AICommon_C.获取黑板坐标
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATsBaseCharacter_C*               角色                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVectorDouble                    位置                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::获取黑板坐标(class ATsBaseCharacter_C* 角色, const class FString& Key, class UObject* __WorldContext, struct FVectorDouble* 位置)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KFC_AICommon_C", "获取黑板坐标");

	Params::KFC_AICommon_C_获取黑板坐标 Parms{};

	Parms.角色 = 角色;
	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (位置 != nullptr)
		*位置 = std::move(Parms.位置);
}


// Function KFC_AICommon.KFC_AICommon_C.怪物通用转向
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         目标旋转体                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TargetInterpSpeed_Const_                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ActorInterpSpeed_Smooth_                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ATsBaseCharacter_C*               旋转对象                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKFC_AICommon_C::怪物通用转向(const struct FRotator& 目标旋转体, float TargetInterpSpeed_Const_, float ActorInterpSpeed_Smooth_, class ATsBaseCharacter_C* 旋转对象, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KFC_AICommon_C", "怪物通用转向");

	Params::KFC_AICommon_C_怪物通用转向 Parms{};

	Parms.目标旋转体 = std::move(目标旋转体);
	Parms.TargetInterpSpeed_Const_ = TargetInterpSpeed_Const_;
	Parms.ActorInterpSpeed_Smooth_ = ActorInterpSpeed_Smooth_;
	Parms.旋转对象 = 旋转对象;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KFC_AICommon.KFC_AICommon_C.是否需要移动
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ATsBaseCharacter_C*               BaseCharacter                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    是否正在移动                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    是否有移动输入                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UKFC_AICommon_C::是否需要移动(class ATsBaseCharacter_C* BaseCharacter, bool 是否正在移动, bool 是否有移动输入, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KFC_AICommon_C", "是否需要移动");

	Params::KFC_AICommon_C_是否需要移动 Parms{};

	Parms.BaseCharacter = BaseCharacter;
	Parms.是否正在移动 = 是否正在移动;
	Parms.是否有移动输入 = 是否有移动输入;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function KFC_AICommon.KFC_AICommon_C.创建AIC监听
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          AIC自身对象                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// TDelegate<void(bool bContent)>          Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UKuroBooleanEventBinder*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

class UKuroBooleanEventBinder* UKFC_AICommon_C::创建AIC监听(class UObject* AIC自身对象, const TDelegate<void(bool bContent)>& Event, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KFC_AICommon_C", "创建AIC监听");

	Params::KFC_AICommon_C_创建AIC监听 Parms{};

	Parms.AIC自身对象 = AIC自身对象;
	Parms.Event = Event;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function KFC_AICommon.KFC_AICommon_C.创建仇恨感知监听
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          AIC自身对象                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// TDelegate<void(TArray<class AActor*>& AddActor, TArray<class AActor*>& RemoveActor, TArray<int32>& RemoveActorIds, int32 Num)>Event1                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UKuroPerceptionEventBinder*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

class UKuroPerceptionEventBinder* UKFC_AICommon_C::创建仇恨感知监听(class UObject* AIC自身对象, const TDelegate<void(TArray<class AActor*>& AddActor, TArray<class AActor*>& RemoveActor, TArray<int32>& RemoveActorIds, int32 Num)>& Event1, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KFC_AICommon_C", "创建仇恨感知监听");

	Params::KFC_AICommon_C_创建仇恨感知监听 Parms{};

	Parms.AIC自身对象 = AIC自身对象;
	Parms.Event1 = Event1;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function KFC_AICommon.KFC_AICommon_C.创建物件破坏监听
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          AIC自身对象                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// TDelegate<void(class AActor* Actor, bool bContent)>Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UKuroActorEventBinder*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

class UKuroActorEventBinder* UKFC_AICommon_C::创建物件破坏监听(class UObject* AIC自身对象, const TDelegate<void(class AActor* Actor, bool bContent)>& Event, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KFC_AICommon_C", "创建物件破坏监听");

	Params::KFC_AICommon_C_创建物件破坏监听 Parms{};

	Parms.AIC自身对象 = AIC自身对象;
	Parms.Event = Event;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

