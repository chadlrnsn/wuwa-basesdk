#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HHA_Ocean

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HHA_Ocean.BP_HHA_Ocean_C
// 0x00A0 (0x0350 - 0x02B0)
class ABP_HHA_Ocean_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CurTime;                                           // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_Ocean_Data_C*                       ZhongWu_12;                                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_Ocean_Data_C*                       YeWan_0;                                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeLerp;                                          // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_Ocean_Data_C*                       OceanData;                                         // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               OceanMaterial;                                     // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Timer;                                             // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EditorOceanLerpMaterial;                           // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SetTex_Noon;                                       // 0x02F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SetTex_Night;                                      // 0x02F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F7[0x1];                                      // 0x02F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AStaticMeshActor*                       OceanMeshActor_0;                                  // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       OceanMeshActor_1;                                  // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       OceanMeshActor_2;                                  // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       OceanMeshActor_3;                                  // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShaderTimer;                                       // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           RippleTimer;                                       // 0x031C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RipplePos;                                         // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         RippleIndex;                                       // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMobliePlatform;                                   // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRipple;                                           // 0x0345(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDrawDebugSphere;                                  // 0x0346(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_347[0x1];                                      // 0x0347(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         fTODEnableRange;                                   // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void WaterRipple();
	void UserConstructionScript();
	void CustomEvent_0(class AActor* 被控物, class AActor* 水面);
	void BndEvt__BP_HHA_Ocean_OceanMeshActor_3_K2Node_ComponentBoundEvent_3_ActorBeginOverlapSignature__DelegateSignature(class AActor* OverlappedActor, class AActor* OtherActor);
	void BndEvt__BP_HHA_Ocean_OceanMeshActor_2_K2Node_ComponentBoundEvent_2_ActorBeginOverlapSignature__DelegateSignature(class AActor* OverlappedActor, class AActor* OtherActor);
	void BndEvt__BP_HHA_Ocean_OceanMeshActor_1_K2Node_ComponentBoundEvent_1_ActorBeginOverlapSignature__DelegateSignature(class AActor* OverlappedActor, class AActor* OtherActor);
	void BndEvt__BP_HHA_Ocean_OceanMeshActor_0_K2Node_ComponentBoundEvent_0_ActorBeginOverlapSignature__DelegateSignature(class AActor* OverlappedActor, class AActor* OtherActor);
	void ReceiveTick(float DeltaSeconds);
	void EditorTick();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_HHA_Ocean(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HHA_Ocean_C">();
	}
	static class ABP_HHA_Ocean_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HHA_Ocean_C>();
	}
};
static_assert(alignof(ABP_HHA_Ocean_C) == 0x000008, "Wrong alignment on ABP_HHA_Ocean_C");
static_assert(sizeof(ABP_HHA_Ocean_C) == 0x000350, "Wrong size on ABP_HHA_Ocean_C");
static_assert(offsetof(ABP_HHA_Ocean_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_HHA_Ocean_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_HHA_Ocean_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, CurTime) == 0x0002C0, "Member 'ABP_HHA_Ocean_C::CurTime' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, ZhongWu_12) == 0x0002C8, "Member 'ABP_HHA_Ocean_C::ZhongWu_12' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, YeWan_0) == 0x0002D0, "Member 'ABP_HHA_Ocean_C::YeWan_0' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, TimeLerp) == 0x0002D8, "Member 'ABP_HHA_Ocean_C::TimeLerp' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, OceanData) == 0x0002E0, "Member 'ABP_HHA_Ocean_C::OceanData' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, OceanMaterial) == 0x0002E8, "Member 'ABP_HHA_Ocean_C::OceanMaterial' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, Timer) == 0x0002F0, "Member 'ABP_HHA_Ocean_C::Timer' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, EditorOceanLerpMaterial) == 0x0002F4, "Member 'ABP_HHA_Ocean_C::EditorOceanLerpMaterial' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, SetTex_Noon) == 0x0002F5, "Member 'ABP_HHA_Ocean_C::SetTex_Noon' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, SetTex_Night) == 0x0002F6, "Member 'ABP_HHA_Ocean_C::SetTex_Night' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, OceanMeshActor_0) == 0x0002F8, "Member 'ABP_HHA_Ocean_C::OceanMeshActor_0' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, OceanMeshActor_1) == 0x000300, "Member 'ABP_HHA_Ocean_C::OceanMeshActor_1' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, OceanMeshActor_2) == 0x000308, "Member 'ABP_HHA_Ocean_C::OceanMeshActor_2' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, OceanMeshActor_3) == 0x000310, "Member 'ABP_HHA_Ocean_C::OceanMeshActor_3' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, ShaderTimer) == 0x000318, "Member 'ABP_HHA_Ocean_C::ShaderTimer' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, RippleTimer) == 0x00031C, "Member 'ABP_HHA_Ocean_C::RippleTimer' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, RipplePos) == 0x000330, "Member 'ABP_HHA_Ocean_C::RipplePos' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, RippleIndex) == 0x000340, "Member 'ABP_HHA_Ocean_C::RippleIndex' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, bMobliePlatform) == 0x000344, "Member 'ABP_HHA_Ocean_C::bMobliePlatform' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, bRipple) == 0x000345, "Member 'ABP_HHA_Ocean_C::bRipple' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, bDrawDebugSphere) == 0x000346, "Member 'ABP_HHA_Ocean_C::bDrawDebugSphere' has a wrong offset!");
static_assert(offsetof(ABP_HHA_Ocean_C, fTODEnableRange) == 0x000348, "Member 'ABP_HHA_Ocean_C::fTODEnableRange' has a wrong offset!");

}

