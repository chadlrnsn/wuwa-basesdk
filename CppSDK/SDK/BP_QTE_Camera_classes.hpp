#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QTE_Camera

#include "Basic.hpp"

#include "SCameraModifier_Settings_structs.hpp"
#include "Engine_classes.hpp"
#include "ECameraAnsEffectiveClientType_structs.hpp"
#include "SBaseCurve_structs.hpp"
#include "SCameraModifier_Condition_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_QTE_Camera.BP_QTE_Camera_C
// 0x0190 (0x01C8 - 0x0038)
class UBP_QTE_Camera_C final : public UPrimaryDataAsset
{
public:
	struct FSCameraModifier_Settings              相机配置;                                          // 0x0038(0x0118)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendInTime;                                       // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendOutTime;                                      // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BreakBlendOutTime;                                 // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSBaseCurve                            BlendInCurve;                                      // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSBaseCurve                            BlendOutCurve;                                     // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         设置QTE位置_角度_有目标_;                          // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         设置QTE位置_距离_有目标_;                          // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         设置QTE位置_高度_有目标_;                          // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         设置QTE位置_角度_无目标_;                          // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         设置QTE位置_距离_无目标_;                          // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         设置QTE位置_高度_无目标_;                          // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         使用QTE次级镜头_与目标高度差_;                     // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         使用QTE次级镜头_当前臂长_;                         // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QTE次级镜头臂长add;                                // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag;                                               // 0x0194(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	ECameraAnsEffectiveClientType                 生效客户端类型;                                    // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CameraAttachSocket;                                // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FSCameraModifier_Condition>     条件;                                              // 0x01B8(0x0010)(Edit, BlueprintVisible)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_QTE_Camera_C">();
	}
	static class UBP_QTE_Camera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_QTE_Camera_C>();
	}
};
static_assert(alignof(UBP_QTE_Camera_C) == 0x000008, "Wrong alignment on UBP_QTE_Camera_C");
static_assert(sizeof(UBP_QTE_Camera_C) == 0x0001C8, "Wrong size on UBP_QTE_Camera_C");
static_assert(offsetof(UBP_QTE_Camera_C, 相机配置) == 0x000038, "Member 'UBP_QTE_Camera_C::相机配置' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, Duration) == 0x000150, "Member 'UBP_QTE_Camera_C::Duration' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, BlendInTime) == 0x000154, "Member 'UBP_QTE_Camera_C::BlendInTime' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, BlendOutTime) == 0x000158, "Member 'UBP_QTE_Camera_C::BlendOutTime' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, BreakBlendOutTime) == 0x00015C, "Member 'UBP_QTE_Camera_C::BreakBlendOutTime' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, BlendInCurve) == 0x000160, "Member 'UBP_QTE_Camera_C::BlendInCurve' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, BlendOutCurve) == 0x000168, "Member 'UBP_QTE_Camera_C::BlendOutCurve' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, 设置QTE位置_角度_有目标_) == 0x000170, "Member 'UBP_QTE_Camera_C::设置QTE位置_角度_有目标_' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, 设置QTE位置_距离_有目标_) == 0x000174, "Member 'UBP_QTE_Camera_C::设置QTE位置_距离_有目标_' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, 设置QTE位置_高度_有目标_) == 0x000178, "Member 'UBP_QTE_Camera_C::设置QTE位置_高度_有目标_' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, 设置QTE位置_角度_无目标_) == 0x00017C, "Member 'UBP_QTE_Camera_C::设置QTE位置_角度_无目标_' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, 设置QTE位置_距离_无目标_) == 0x000180, "Member 'UBP_QTE_Camera_C::设置QTE位置_距离_无目标_' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, 设置QTE位置_高度_无目标_) == 0x000184, "Member 'UBP_QTE_Camera_C::设置QTE位置_高度_无目标_' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, 使用QTE次级镜头_与目标高度差_) == 0x000188, "Member 'UBP_QTE_Camera_C::使用QTE次级镜头_与目标高度差_' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, 使用QTE次级镜头_当前臂长_) == 0x00018C, "Member 'UBP_QTE_Camera_C::使用QTE次级镜头_当前臂长_' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, QTE次级镜头臂长add) == 0x000190, "Member 'UBP_QTE_Camera_C::QTE次级镜头臂长add' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, Tag) == 0x000194, "Member 'UBP_QTE_Camera_C::Tag' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, 生效客户端类型) == 0x0001A0, "Member 'UBP_QTE_Camera_C::生效客户端类型' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, CameraAttachSocket) == 0x0001A8, "Member 'UBP_QTE_Camera_C::CameraAttachSocket' has a wrong offset!");
static_assert(offsetof(UBP_QTE_Camera_C, 条件) == 0x0001B8, "Member 'UBP_QTE_Camera_C::条件' has a wrong offset!");

}

