#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_MonsterCommon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "KuroAnim_structs.hpp"


namespace SDK::Params
{

// Function ABP_MonsterCommon.ABP_MonsterCommon_C.ExecuteUbergraph_ABP_MonsterCommon
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_4;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_5;          // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_6;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitBones                              K2Node_MakeStruct_HitBones;                        // 0x0020(0x0010)()
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Section;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFK_Shake_AssestData_C*                 CallFunc_SpawnObject_ReturnValue;                  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFK_Shake_AssestData_C*                 K2Node_DynamicCast_AsFK_Shake_Assest_Data;         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_10;       // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_7;          // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_11;       // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_12;       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character_1;          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ABPLogicParams_C*                   CallFunc_SpawnObject_ReturnValue_1;                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon) == 0x000008, "Wrong alignment on ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon");
static_assert(sizeof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon) == 0x0000C0, "Wrong size on ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, EntryPoint) == 0x000000, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000004, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000005, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000006, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000007, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000008, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000009, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_Not_PreBool_ReturnValue) == 0x00000B, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x00000C, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_BooleanAND_ReturnValue_1) == 0x00000D, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_BooleanAND_ReturnValue_2) == 0x00000E, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x00000F, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000010, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_BooleanOR_ReturnValue) == 0x000011, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000012, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_BooleanOR_ReturnValue_1) == 0x000013, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_BooleanOR_ReturnValue_2) == 0x000014, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_NotEqual_ByteByte_ReturnValue_4) == 0x000015, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_NotEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_Not_PreBool_ReturnValue_1) == 0x000016, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_BooleanAND_ReturnValue_3) == 0x000017, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x000018, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_BooleanAND_ReturnValue_4) == 0x000019, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_BooleanAND_ReturnValue_5) == 0x00001A, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_NotEqual_ByteByte_ReturnValue_5) == 0x00001B, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_NotEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_NotEqual_ByteByte_ReturnValue_6) == 0x00001C, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_NotEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x00001D, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x00001E, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_BooleanOR_ReturnValue_3) == 0x00001F, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, K2Node_MakeStruct_HitBones) == 0x000020, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::K2Node_MakeStruct_HitBones' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_BooleanOR_ReturnValue_4) == 0x000030, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_SelectFloat_ReturnValue) == 0x000034, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_BooleanOR_ReturnValue_5) == 0x000038, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000040, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, K2Node_DynamicCast_AsTs_Base_Character) == 0x000048, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::K2Node_DynamicCast_AsTs_Base_Character' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, K2Node_CustomEvent_Section) == 0x000054, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::K2Node_CustomEvent_Section' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x000058, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_SpawnObject_ReturnValue) == 0x000060, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, K2Node_DynamicCast_AsFK_Shake_Assest_Data) == 0x000070, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::K2Node_DynamicCast_AsFK_Shake_Assest_Data' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, K2Node_DynamicCast_bSuccess_1) == 0x000078, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_10) == 0x000079, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_NotEqual_ByteByte_ReturnValue_7) == 0x00007A, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_NotEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_11) == 0x00007B, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, K2Node_MakeArray_Array) == 0x000080, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_IsValid_ReturnValue_1) == 0x000090, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_IsValid_ReturnValue_2) == 0x000091, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x000098, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_EqualEqual_ByteByte_ReturnValue_12) == 0x0000A0, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_EqualEqual_ByteByte_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, K2Node_DynamicCast_AsTs_Base_Character_1) == 0x0000A8, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::K2Node_DynamicCast_AsTs_Base_Character_1' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, K2Node_DynamicCast_bSuccess_2) == 0x0000B0, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon, CallFunc_SpawnObject_ReturnValue_1) == 0x0000B8, "Member 'ABP_MonsterCommon_C_ExecuteUbergraph_ABP_MonsterCommon::CallFunc_SpawnObject_ReturnValue_1' has a wrong offset!");

// Function ABP_MonsterCommon.ABP_MonsterCommon_C.PlayShakeFX
// 0x0004 (0x0004 - 0x0000)
struct ABP_MonsterCommon_C_PlayShakeFX final
{
public:
	int32                                         Section;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_MonsterCommon_C_PlayShakeFX) == 0x000004, "Wrong alignment on ABP_MonsterCommon_C_PlayShakeFX");
static_assert(sizeof(ABP_MonsterCommon_C_PlayShakeFX) == 0x000004, "Wrong size on ABP_MonsterCommon_C_PlayShakeFX");
static_assert(offsetof(ABP_MonsterCommon_C_PlayShakeFX, Section) == 0x000000, "Member 'ABP_MonsterCommon_C_PlayShakeFX::Section' has a wrong offset!");

// Function ABP_MonsterCommon.ABP_MonsterCommon_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_MonsterCommon_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MonsterCommon_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_MonsterCommon_C_AnimGraph");
static_assert(sizeof(ABP_MonsterCommon_C_AnimGraph) == 0x000010, "Wrong size on ABP_MonsterCommon_C_AnimGraph");
static_assert(offsetof(ABP_MonsterCommon_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_MonsterCommon_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_MonsterCommon.ABP_MonsterCommon_C.IKAndFk
// 0x0020 (0x0020 - 0x0000)
struct ABP_MonsterCommon_C_IKAndFk final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              IKAndFk_0;                                         // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_MonsterCommon_C_IKAndFk) == 0x000008, "Wrong alignment on ABP_MonsterCommon_C_IKAndFk");
static_assert(sizeof(ABP_MonsterCommon_C_IKAndFk) == 0x000020, "Wrong size on ABP_MonsterCommon_C_IKAndFk");
static_assert(offsetof(ABP_MonsterCommon_C_IKAndFk, InPose) == 0x000000, "Member 'ABP_MonsterCommon_C_IKAndFk::InPose' has a wrong offset!");
static_assert(offsetof(ABP_MonsterCommon_C_IKAndFk, IKAndFk_0) == 0x000010, "Member 'ABP_MonsterCommon_C_IKAndFk::IKAndFk_0' has a wrong offset!");

}

