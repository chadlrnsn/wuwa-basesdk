#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeatherController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WeatherController.BP_WeatherController_C
// 0x0050 (0x0310 - 0x02C0)
class ABP_WeatherController_C final : public AKuroEditorTickActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   SurfaceRipple;                                     // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   RainDrop;                                          // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_GlobalGI_C*                         GlobalGI;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          GlobalGI_Legality;                                 // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RainIntensity;                                     // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity;                                           // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInCave;                                          // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          PostCharacterPos;                                  // 0x02F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnRep_GlobalGI();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void EditorTick(float DeltaSeconds);
	void TracingCave();
	void ExecuteUbergraph_BP_WeatherController(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeatherController_C">();
	}
	static class ABP_WeatherController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WeatherController_C>();
	}
};
static_assert(alignof(ABP_WeatherController_C) == 0x000008, "Wrong alignment on ABP_WeatherController_C");
static_assert(sizeof(ABP_WeatherController_C) == 0x000310, "Wrong size on ABP_WeatherController_C");
static_assert(offsetof(ABP_WeatherController_C, UberGraphFrame) == 0x0002C0, "Member 'ABP_WeatherController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WeatherController_C, SurfaceRipple) == 0x0002C8, "Member 'ABP_WeatherController_C::SurfaceRipple' has a wrong offset!");
static_assert(offsetof(ABP_WeatherController_C, RainDrop) == 0x0002D0, "Member 'ABP_WeatherController_C::RainDrop' has a wrong offset!");
static_assert(offsetof(ABP_WeatherController_C, DefaultSceneRoot) == 0x0002D8, "Member 'ABP_WeatherController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WeatherController_C, GlobalGI) == 0x0002E0, "Member 'ABP_WeatherController_C::GlobalGI' has a wrong offset!");
static_assert(offsetof(ABP_WeatherController_C, GlobalGI_Legality) == 0x0002E8, "Member 'ABP_WeatherController_C::GlobalGI_Legality' has a wrong offset!");
static_assert(offsetof(ABP_WeatherController_C, RainIntensity) == 0x0002EC, "Member 'ABP_WeatherController_C::RainIntensity' has a wrong offset!");
static_assert(offsetof(ABP_WeatherController_C, Gravity) == 0x0002F0, "Member 'ABP_WeatherController_C::Gravity' has a wrong offset!");
static_assert(offsetof(ABP_WeatherController_C, IsInCave) == 0x0002F4, "Member 'ABP_WeatherController_C::IsInCave' has a wrong offset!");
static_assert(offsetof(ABP_WeatherController_C, PostCharacterPos) == 0x0002F8, "Member 'ABP_WeatherController_C::PostCharacterPos' has a wrong offset!");

}

