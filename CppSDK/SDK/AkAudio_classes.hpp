#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AkAudio

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"
#include "WwiseResourceLoader_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class AkAudio.AkSpotReflector
// 0x0038 (0x02E8 - 0x02B0)
class AAkSpotReflector final : public AActor
{
public:
	class UAkAuxBus*                              EarlyReflectionAuxBus;                             // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EarlyReflectionAuxBusName;                         // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAcousticTexture*                     AcousticTexture;                                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceScalingFactor;                             // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SameRoomOnly;                                      // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRoomOverride;                                // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DA[0x6];                                      // 0x02DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RoomOverride;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSpotReflector">();
	}
	static class AAkSpotReflector* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkSpotReflector>();
	}
};
static_assert(alignof(AAkSpotReflector) == 0x000008, "Wrong alignment on AAkSpotReflector");
static_assert(sizeof(AAkSpotReflector) == 0x0002E8, "Wrong size on AAkSpotReflector");
static_assert(offsetof(AAkSpotReflector, EarlyReflectionAuxBus) == 0x0002B0, "Member 'AAkSpotReflector::EarlyReflectionAuxBus' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, EarlyReflectionAuxBusName) == 0x0002B8, "Member 'AAkSpotReflector::EarlyReflectionAuxBusName' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, AcousticTexture) == 0x0002C8, "Member 'AAkSpotReflector::AcousticTexture' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, DistanceScalingFactor) == 0x0002D0, "Member 'AAkSpotReflector::DistanceScalingFactor' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, Level) == 0x0002D4, "Member 'AAkSpotReflector::Level' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, SameRoomOnly) == 0x0002D8, "Member 'AAkSpotReflector::SameRoomOnly' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, EnableRoomOverride) == 0x0002D9, "Member 'AAkSpotReflector::EnableRoomOverride' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, RoomOverride) == 0x0002E0, "Member 'AAkSpotReflector::RoomOverride' has a wrong offset!");

// Class AkAudio.AkPortalComponent
// 0x00C0 (0x02E0 - 0x0220)
class UAkPortalComponent final : public USceneComponent
{
public:
	bool                                          bDynamic;                                          // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkAcousticPortalState                        InitialState;                                      // 0x0219(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A[0x2];                                      // 0x021A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ObstructionRefreshInterval;                        // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ObstructionCollisionChannel;                       // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0xBF];                                     // 0x0221(0x00BF)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClosePortal();
	void OpenPortal();

	EAkAcousticPortalState GetCurrentState() const;
	class UPrimitiveComponent* GetPrimitiveParent() const;
	bool PortalPlacementValid() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkPortalComponent">();
	}
	static class UAkPortalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkPortalComponent>();
	}
};
static_assert(alignof(UAkPortalComponent) == 0x000010, "Wrong alignment on UAkPortalComponent");
static_assert(sizeof(UAkPortalComponent) == 0x0002E0, "Wrong size on UAkPortalComponent");
static_assert(offsetof(UAkPortalComponent, bDynamic) == 0x000218, "Member 'UAkPortalComponent::bDynamic' has a wrong offset!");
static_assert(offsetof(UAkPortalComponent, InitialState) == 0x000219, "Member 'UAkPortalComponent::InitialState' has a wrong offset!");
static_assert(offsetof(UAkPortalComponent, ObstructionRefreshInterval) == 0x00021C, "Member 'UAkPortalComponent::ObstructionRefreshInterval' has a wrong offset!");
static_assert(offsetof(UAkPortalComponent, ObstructionCollisionChannel) == 0x000220, "Member 'UAkPortalComponent::ObstructionCollisionChannel' has a wrong offset!");

// Class AkAudio.AkAudioType
// 0x0028 (0x0058 - 0x0030)
class UAkAudioType : public UObject
{
public:
	bool                                          bAutoLoad;                                         // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        UserData;                                          // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoadData();
	void UnloadData(bool bAsync);

	int32 GetWwiseShortID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAudioType">();
	}
	static class UAkAudioType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAudioType>();
	}
};
static_assert(alignof(UAkAudioType) == 0x000008, "Wrong alignment on UAkAudioType");
static_assert(sizeof(UAkAudioType) == 0x000058, "Wrong size on UAkAudioType");
static_assert(offsetof(UAkAudioType, bAutoLoad) == 0x000030, "Member 'UAkAudioType::bAutoLoad' has a wrong offset!");
static_assert(offsetof(UAkAudioType, UserData) == 0x000038, "Member 'UAkAudioType::UserData' has a wrong offset!");

// Class AkAudio.AkGroupValue
// 0x0028 (0x0080 - 0x0058)
class UAkGroupValue : public UAkAudioType
{
public:
	struct FWwiseGroupValueCookedData             GroupValueCookedData;                              // 0x0058(0x0018)(Edit, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        GroupShortID;                                      // 0x0070(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkGroupValue">();
	}
	static class UAkGroupValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkGroupValue>();
	}
};
static_assert(alignof(UAkGroupValue) == 0x000008, "Wrong alignment on UAkGroupValue");
static_assert(sizeof(UAkGroupValue) == 0x000080, "Wrong size on UAkGroupValue");
static_assert(offsetof(UAkGroupValue, GroupValueCookedData) == 0x000058, "Member 'UAkGroupValue::GroupValueCookedData' has a wrong offset!");
static_assert(offsetof(UAkGroupValue, GroupShortID) == 0x000070, "Member 'UAkGroupValue::GroupShortID' has a wrong offset!");

// Class AkAudio.AkStateValue
// 0x0000 (0x0080 - 0x0080)
class UAkStateValue final : public UAkGroupValue
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkStateValue">();
	}
	static class UAkStateValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkStateValue>();
	}
};
static_assert(alignof(UAkStateValue) == 0x000008, "Wrong alignment on UAkStateValue");
static_assert(sizeof(UAkStateValue) == 0x000080, "Wrong size on UAkStateValue");

// Class AkAudio.AkAcousticPortal
// 0x0010 (0x02F8 - 0x02E8)
class AAkAcousticPortal final : public AVolume
{
public:
	class UAkPortalComponent*                     Portal;                                            // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkAcousticPortalState                        InitialState;                                      // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRequiresStateMigration;                           // 0x02F1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClosePortal();
	void OpenPortal();

	EAkAcousticPortalState GetCurrentState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAcousticPortal">();
	}
	static class AAkAcousticPortal* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkAcousticPortal>();
	}
};
static_assert(alignof(AAkAcousticPortal) == 0x000008, "Wrong alignment on AAkAcousticPortal");
static_assert(sizeof(AAkAcousticPortal) == 0x0002F8, "Wrong size on AAkAcousticPortal");
static_assert(offsetof(AAkAcousticPortal, Portal) == 0x0002E8, "Member 'AAkAcousticPortal::Portal' has a wrong offset!");
static_assert(offsetof(AAkAcousticPortal, InitialState) == 0x0002F0, "Member 'AAkAcousticPortal::InitialState' has a wrong offset!");
static_assert(offsetof(AAkAcousticPortal, bRequiresStateMigration) == 0x0002F1, "Member 'AAkAcousticPortal::bRequiresStateMigration' has a wrong offset!");

// Class AkAudio.AkAcousticTexture
// 0x0010 (0x0068 - 0x0058)
class UAkAcousticTexture final : public UAkAudioType
{
public:
	struct FWwiseAcousticTextureCookedData        AcousticTextureCookedData;                         // 0x0058(0x0010)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAcousticTexture">();
	}
	static class UAkAcousticTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAcousticTexture>();
	}
};
static_assert(alignof(UAkAcousticTexture) == 0x000008, "Wrong alignment on UAkAcousticTexture");
static_assert(sizeof(UAkAcousticTexture) == 0x000068, "Wrong size on UAkAcousticTexture");
static_assert(offsetof(UAkAcousticTexture, AcousticTextureCookedData) == 0x000058, "Member 'UAkAcousticTexture::AcousticTextureCookedData' has a wrong offset!");

// Class AkAudio.AkAcousticTextureSetComponent
// 0x0010 (0x0230 - 0x0220)
class UAkAcousticTextureSetComponent : public USceneComponent
{
public:
	uint8                                         Pad_218[0x18];                                     // 0x0218(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAcousticTextureSetComponent">();
	}
	static class UAkAcousticTextureSetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAcousticTextureSetComponent>();
	}
};
static_assert(alignof(UAkAcousticTextureSetComponent) == 0x000010, "Wrong alignment on UAkAcousticTextureSetComponent");
static_assert(sizeof(UAkAcousticTextureSetComponent) == 0x000230, "Wrong size on UAkAcousticTextureSetComponent");

// Class AkAudio.AkAmbientSound
// 0x0040 (0x02F0 - 0x02B0)
class AAkAmbientSound final : public AActor
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x02B0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopWhenOwnerIsDestroyed;                          // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C2[0x2E];                                     // 0x02C2(0x002E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartAmbientSound();
	void StopAmbientSound();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAmbientSound">();
	}
	static class AAkAmbientSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkAmbientSound>();
	}
};
static_assert(alignof(AAkAmbientSound) == 0x000008, "Wrong alignment on AAkAmbientSound");
static_assert(sizeof(AAkAmbientSound) == 0x0002F0, "Wrong size on AAkAmbientSound");
static_assert(offsetof(AAkAmbientSound, AkAudioEvent) == 0x0002B0, "Member 'AAkAmbientSound::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(AAkAmbientSound, AkComponent) == 0x0002B8, "Member 'AAkAmbientSound::AkComponent' has a wrong offset!");
static_assert(offsetof(AAkAmbientSound, StopWhenOwnerIsDestroyed) == 0x0002C0, "Member 'AAkAmbientSound::StopWhenOwnerIsDestroyed' has a wrong offset!");
static_assert(offsetof(AAkAmbientSound, AutoPost) == 0x0002C1, "Member 'AAkAmbientSound::AutoPost' has a wrong offset!");

// Class AkAudio.AkAndroidInitializationSettings
// 0x00F8 (0x0128 - 0x0030)
class UAkAndroidInitializationSettings final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0038(0x0078)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00B0(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAndroidAdvancedInitializationSettings AdvancedSettings;                                  // 0x00D0(0x0058)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAndroidInitializationSettings">();
	}
	static class UAkAndroidInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAndroidInitializationSettings>();
	}
};
static_assert(alignof(UAkAndroidInitializationSettings) == 0x000008, "Wrong alignment on UAkAndroidInitializationSettings");
static_assert(sizeof(UAkAndroidInitializationSettings) == 0x000128, "Wrong size on UAkAndroidInitializationSettings");
static_assert(offsetof(UAkAndroidInitializationSettings, CommonSettings) == 0x000038, "Member 'UAkAndroidInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkAndroidInitializationSettings, CommunicationSettings) == 0x0000B0, "Member 'UAkAndroidInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkAndroidInitializationSettings, AdvancedSettings) == 0x0000D0, "Member 'UAkAndroidInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkPlatformInfo
// 0x0048 (0x0078 - 0x0030)
class UAkPlatformInfo : public UObject
{
public:
	uint8                                         Pad_30[0x48];                                      // 0x0030(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkPlatformInfo">();
	}
	static class UAkPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkPlatformInfo>();
	}
};
static_assert(alignof(UAkPlatformInfo) == 0x000008, "Wrong alignment on UAkPlatformInfo");
static_assert(sizeof(UAkPlatformInfo) == 0x000078, "Wrong size on UAkPlatformInfo");

// Class AkAudio.AkAndroidPlatformInfo
// 0x0000 (0x0078 - 0x0078)
class UAkAndroidPlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAndroidPlatformInfo">();
	}
	static class UAkAndroidPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAndroidPlatformInfo>();
	}
};
static_assert(alignof(UAkAndroidPlatformInfo) == 0x000008, "Wrong alignment on UAkAndroidPlatformInfo");
static_assert(sizeof(UAkAndroidPlatformInfo) == 0x000078, "Wrong size on UAkAndroidPlatformInfo");

// Class AkAudio.AkAudioBank
// 0x0008 (0x0060 - 0x0058)
class UAkAudioBank final : public UAkAudioType
{
public:
	bool                                          AutoLoad;                                          // 0x0058(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAudioBank">();
	}
	static class UAkAudioBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAudioBank>();
	}
};
static_assert(alignof(UAkAudioBank) == 0x000008, "Wrong alignment on UAkAudioBank");
static_assert(sizeof(UAkAudioBank) == 0x000060, "Wrong size on UAkAudioBank");
static_assert(offsetof(UAkAudioBank, AutoLoad) == 0x000058, "Member 'UAkAudioBank::AutoLoad' has a wrong offset!");

// Class AkAudio.AkAudioEvent
// 0x0080 (0x00D8 - 0x0058)
class UAkAudioEvent final : public UAkAudioType
{
public:
	float                                         MaxAttenuationRadius;                              // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInfinite;                                        // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDuration;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDuration;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWwiseLocalizedEventCookedData         EventCookedData;                                   // 0x0068(0x0060)(Edit, Transient, EditConst, NativeAccessSpecifierPublic)
	class UAkAudioBank*                           RequiredBank;                                      // 0x00C8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 D_PostAtLocation(const struct FVectorDouble& Location, const struct FRotator& Orientation, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& Callback, const int32 CallbackMask, const class UObject* WorldContextObject);
	int32 ExecuteAction(const EAkActionOnEventType ActionType, const class AActor* Actor, const int32 PlayingID, const int32 TransitionDuration, const EAkCurveInterpolation FadeCurve);
	int32 PostAtLocation(const struct FVector& Location, const struct FRotator& Orientation, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& Callback, const int32 CallbackMask, const class UObject* WorldContextObject);
	int32 PostOnActor(const class AActor* Actor, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& Delegate, const int32 CallbackMask, const bool bStopWhenAttachedObjectDestroyed);
	int32 PostOnActorAndWait(const class AActor* Actor, const bool bStopWhenAttachedObjectDestroyed, const struct FLatentActionInfo& LatentActionInfo);
	int32 PostOnComponent(class UAkComponent* Component, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& Delegate, const int32 CallbackMask, const bool bStopWhenAttachedObjectDestroyed);
	int32 PostOnComponentAndWait(class UAkComponent* Component, const bool bStopWhenAttachedObjectDestroyed, const struct FLatentActionInfo& LatentActionInfo);
	int32 PostOnGameObject(class UAkGameObject* GameObject, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& Delegate, const int32 CallbackMask);
	int32 PostOnGameObjectAndWait(class UAkGameObject* GameObject, const struct FLatentActionInfo& LatentActionInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAudioEvent">();
	}
	static class UAkAudioEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAudioEvent>();
	}
};
static_assert(alignof(UAkAudioEvent) == 0x000008, "Wrong alignment on UAkAudioEvent");
static_assert(sizeof(UAkAudioEvent) == 0x0000D8, "Wrong size on UAkAudioEvent");
static_assert(offsetof(UAkAudioEvent, MaxAttenuationRadius) == 0x000058, "Member 'UAkAudioEvent::MaxAttenuationRadius' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, IsInfinite) == 0x00005C, "Member 'UAkAudioEvent::IsInfinite' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, MinimumDuration) == 0x000060, "Member 'UAkAudioEvent::MinimumDuration' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, MaximumDuration) == 0x000064, "Member 'UAkAudioEvent::MaximumDuration' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, EventCookedData) == 0x000068, "Member 'UAkAudioEvent::EventCookedData' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, RequiredBank) == 0x0000C8, "Member 'UAkAudioEvent::RequiredBank' has a wrong offset!");

// Class AkAudio.AkGameObject
// 0x0020 (0x0240 - 0x0220)
#pragma pack(push, 0x1)
class alignas(0x10) UAkGameObject : public USceneComponent
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230[0x8];                                      // 0x0230(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 PostAkEvent(class UAkAudioEvent* AkEvent, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const class FString& InEventName);
	void PostAkEventAsync(const class UObject* WorldContextObject, class UAkAudioEvent* AkEvent, int32* PlayingID, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const struct FLatentActionInfo& LatentInfo);
	int32 PostAssociatedAkEvent(int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback);
	void PostAssociatedAkEventAsync(const class UObject* WorldContextObject, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const struct FLatentActionInfo& LatentInfo, int32* PlayingID);
	void Stop();

	void GetRTPCValue(class UAkRtpc* RTPCValue, ERTPCValueType InputValueType, float* Value, ERTPCValueType* OutputValueType, const class FString& RTPC, int32 PlayingID) const;
	void SetRTPCValue(class UAkRtpc* RTPCValue, float Value, int32 InterpolationTimeMs, const class FString& RTPC) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkGameObject">();
	}
	static class UAkGameObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkGameObject>();
	}
};
#pragma pack(pop)
static_assert(alignof(UAkGameObject) == 0x000010, "Wrong alignment on UAkGameObject");
static_assert(sizeof(UAkGameObject) == 0x000240, "Wrong size on UAkGameObject");
static_assert(offsetof(UAkGameObject, AkAudioEvent) == 0x000218, "Member 'UAkGameObject::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(UAkGameObject, EventName) == 0x000220, "Member 'UAkGameObject::EventName' has a wrong offset!");

// Class AkAudio.AkComponent
// 0x0160 (0x03A0 - 0x0240)
class UAkComponent : public UAkGameObject
{
public:
	bool                                          StopWhenOwnerDestroyed;                            // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttenuationScalingFactor;                          // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseReverbVolumes;                                 // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOcclusion;                                  // 0x0241(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242[0x15E];                                    // 0x0242(0x015E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PostTrigger(class UAkTrigger* TriggerValue, const class FString& Trigger);
	void SetAttenuationScalingFactor(float Value);
	void SetListeners(const TArray<class UAkComponent*>& Listeners);
	void SetLocationOffsets(const TArray<struct FVector>& Offsets);
	void SetOutputBusVolume(float BusVolume);
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);
	void SetSwitch(class UAkSwitchValue* SwitchValue, const class FString& SwitchGroup, const class FString& SwitchState);
	void UseReverbVolumes(bool inUseReverbVolumes);

	float GetAttenuationRadius() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkComponent">();
	}
	static class UAkComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkComponent>();
	}
};
static_assert(alignof(UAkComponent) == 0x000010, "Wrong alignment on UAkComponent");
static_assert(sizeof(UAkComponent) == 0x0003A0, "Wrong size on UAkComponent");
static_assert(offsetof(UAkComponent, StopWhenOwnerDestroyed) == 0x000238, "Member 'UAkComponent::StopWhenOwnerDestroyed' has a wrong offset!");
static_assert(offsetof(UAkComponent, AttenuationScalingFactor) == 0x00023C, "Member 'UAkComponent::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(UAkComponent, bUseReverbVolumes) == 0x000240, "Member 'UAkComponent::bUseReverbVolumes' has a wrong offset!");
static_assert(offsetof(UAkComponent, bEnableOcclusion) == 0x000241, "Member 'UAkComponent::bEnableOcclusion' has a wrong offset!");

// Class AkAudio.AkAudioInputComponent
// 0x0030 (0x03D0 - 0x03A0)
class UAkAudioInputComponent : public UAkComponent
{
public:
	uint8                                         Pad_3A0[0x30];                                     // 0x03A0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 PostAssociatedAudioInputEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAudioInputComponent">();
	}
	static class UAkAudioInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAudioInputComponent>();
	}
};
static_assert(alignof(UAkAudioInputComponent) == 0x000010, "Wrong alignment on UAkAudioInputComponent");
static_assert(sizeof(UAkAudioInputComponent) == 0x0003D0, "Wrong size on UAkAudioInputComponent");

// Class AkAudio.AkAuxBus
// 0x0070 (0x00C8 - 0x0058)
class UAkAuxBus final : public UAkAudioType
{
public:
	struct FWwiseLocalizedAuxBusCookedData        AuxBusCookedData;                                  // 0x0058(0x0060)(Edit, Transient, NativeAccessSpecifierPublic)
	class UAkAudioBank*                           RequiredBank;                                      // 0x00B8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAuxBus">();
	}
	static class UAkAuxBus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAuxBus>();
	}
};
static_assert(alignof(UAkAuxBus) == 0x000008, "Wrong alignment on UAkAuxBus");
static_assert(sizeof(UAkAuxBus) == 0x0000C8, "Wrong size on UAkAuxBus");
static_assert(offsetof(UAkAuxBus, AuxBusCookedData) == 0x000058, "Member 'UAkAuxBus::AuxBusCookedData' has a wrong offset!");
static_assert(offsetof(UAkAuxBus, RequiredBank) == 0x0000B8, "Member 'UAkAuxBus::RequiredBank' has a wrong offset!");

// Class AkAudio.AkCheckBox
// 0x0A88 (0x0C10 - 0x0188)
class UAkCheckBox final : public UContentWidget
{
public:
	uint8                                         Pad_188[0x3A0];                                    // 0x0188(0x03A0)(Fixing Size After Last Property [ Dumper-7 ])
	ECheckBoxState                                CheckedState;                                      // 0x0528(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             CheckedStateDelegate;                              // 0x0530(0x0028)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FCheckBoxStyle                         WidgetStyle;                                       // 0x0558(0x05E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0B38(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x0B39(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B3A[0x6];                                      // 0x0B3A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkBoolPropertyToControl               ThePropertyToControl;                              // 0x0B40(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FAkWwiseItemToControl                  ItemToControl;                                     // 0x0B50(0x0040)(Edit, Config, EditConst, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bIsChecked)> AkOnCheckStateChanged;                             // 0x0B90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGuid& ItemDroppedID)> OnItemDropped;                                     // 0x0BA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& PropertyDropped)> OnPropertyDropped;                                 // 0x0BB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC0[0x50];                                     // 0x0BC0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAkBoolProperty(const class FString& ItemProperty);
	void SetAkItemId(const struct FGuid& ItemId);
	void SetCheckedState(ECheckBoxState InCheckedState);
	void SetIsChecked(bool InIsChecked);

	const struct FGuid GetAkItemId() const;
	const class FString GetAkProperty() const;
	ECheckBoxState GetCheckedState() const;
	bool IsChecked() const;
	bool IsPressed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCheckBox">();
	}
	static class UAkCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkCheckBox>();
	}
};
static_assert(alignof(UAkCheckBox) == 0x000008, "Wrong alignment on UAkCheckBox");
static_assert(sizeof(UAkCheckBox) == 0x000C10, "Wrong size on UAkCheckBox");
static_assert(offsetof(UAkCheckBox, CheckedState) == 0x000528, "Member 'UAkCheckBox::CheckedState' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, CheckedStateDelegate) == 0x000530, "Member 'UAkCheckBox::CheckedStateDelegate' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, WidgetStyle) == 0x000558, "Member 'UAkCheckBox::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, HorizontalAlignment) == 0x000B38, "Member 'UAkCheckBox::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, IsFocusable) == 0x000B39, "Member 'UAkCheckBox::IsFocusable' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, ThePropertyToControl) == 0x000B40, "Member 'UAkCheckBox::ThePropertyToControl' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, ItemToControl) == 0x000B50, "Member 'UAkCheckBox::ItemToControl' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, AkOnCheckStateChanged) == 0x000B90, "Member 'UAkCheckBox::AkOnCheckStateChanged' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, OnItemDropped) == 0x000BA0, "Member 'UAkCheckBox::OnItemDropped' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, OnPropertyDropped) == 0x000BB0, "Member 'UAkCheckBox::OnPropertyDropped' has a wrong offset!");

// Class AkAudio.AkAssetData
// 0x0028 (0x0058 - 0x0030)
class UAkAssetData final : public UObject
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAssetData">();
	}
	static class UAkAssetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAssetData>();
	}
};
static_assert(alignof(UAkAssetData) == 0x000008, "Wrong alignment on UAkAssetData");
static_assert(sizeof(UAkAssetData) == 0x000058, "Wrong size on UAkAssetData");

// Class AkAudio.AkAssetPlatformData
// 0x0008 (0x0038 - 0x0030)
class UAkAssetPlatformData final : public UObject
{
public:
	class UAkAssetData*                           CurrentAssetData;                                  // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAssetPlatformData">();
	}
	static class UAkAssetPlatformData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAssetPlatformData>();
	}
};
static_assert(alignof(UAkAssetPlatformData) == 0x000008, "Wrong alignment on UAkAssetPlatformData");
static_assert(sizeof(UAkAssetPlatformData) == 0x000038, "Wrong size on UAkAssetPlatformData");
static_assert(offsetof(UAkAssetPlatformData, CurrentAssetData) == 0x000030, "Member 'UAkAssetPlatformData::CurrentAssetData' has a wrong offset!");

// Class AkAudio.AkMediaAssetData
// 0x0010 (0x0040 - 0x0030)
class UAkMediaAssetData final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMediaAssetData">();
	}
	static class UAkMediaAssetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMediaAssetData>();
	}
};
static_assert(alignof(UAkMediaAssetData) == 0x000008, "Wrong alignment on UAkMediaAssetData");
static_assert(sizeof(UAkMediaAssetData) == 0x000040, "Wrong size on UAkMediaAssetData");

// Class AkAudio.AkMediaAsset
// 0x0050 (0x0080 - 0x0030)
class UAkMediaAsset : public UObject
{
public:
	TMap<class FString, class UAkMediaAssetData*> MediaAssetDataPerPlatform;                         // 0x0030(0x0050)(Edit, Transient, EditConst, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMediaAsset">();
	}
	static class UAkMediaAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMediaAsset>();
	}
};
static_assert(alignof(UAkMediaAsset) == 0x000008, "Wrong alignment on UAkMediaAsset");
static_assert(sizeof(UAkMediaAsset) == 0x000080, "Wrong size on UAkMediaAsset");
static_assert(offsetof(UAkMediaAsset, MediaAssetDataPerPlatform) == 0x000030, "Member 'UAkMediaAsset::MediaAssetDataPerPlatform' has a wrong offset!");

// Class AkAudio.AkLocalizedMediaAsset
// 0x0000 (0x0080 - 0x0080)
class UAkLocalizedMediaAsset final : public UAkMediaAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLocalizedMediaAsset">();
	}
	static class UAkLocalizedMediaAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLocalizedMediaAsset>();
	}
};
static_assert(alignof(UAkLocalizedMediaAsset) == 0x000008, "Wrong alignment on UAkLocalizedMediaAsset");
static_assert(sizeof(UAkLocalizedMediaAsset) == 0x000080, "Wrong size on UAkLocalizedMediaAsset");

// Class AkAudio.AkExternalMediaAsset
// 0x0000 (0x0080 - 0x0080)
class UAkExternalMediaAsset final : public UAkMediaAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkExternalMediaAsset">();
	}
	static class UAkExternalMediaAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkExternalMediaAsset>();
	}
};
static_assert(alignof(UAkExternalMediaAsset) == 0x000008, "Wrong alignment on UAkExternalMediaAsset");
static_assert(sizeof(UAkExternalMediaAsset) == 0x000080, "Wrong size on UAkExternalMediaAsset");

// Class AkAudio.AkFolder
// 0x0000 (0x0058 - 0x0058)
class UAkFolder final : public UAkAudioType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkFolder">();
	}
	static class UAkFolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkFolder>();
	}
};
static_assert(alignof(UAkFolder) == 0x000008, "Wrong alignment on UAkFolder");
static_assert(sizeof(UAkFolder) == 0x000058, "Wrong size on UAkFolder");

// Class AkAudio.DrawPortalComponent
// 0x0000 (0x0500 - 0x0500)
class UDrawPortalComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DrawPortalComponent">();
	}
	static class UDrawPortalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDrawPortalComponent>();
	}
};
static_assert(alignof(UDrawPortalComponent) == 0x000010, "Wrong alignment on UDrawPortalComponent");
static_assert(sizeof(UDrawPortalComponent) == 0x000500, "Wrong size on UDrawPortalComponent");

// Class AkAudio.DrawRoomComponent
// 0x0000 (0x0500 - 0x0500)
class UDrawRoomComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DrawRoomComponent">();
	}
	static class UDrawRoomComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDrawRoomComponent>();
	}
};
static_assert(alignof(UDrawRoomComponent) == 0x000010, "Wrong alignment on UDrawRoomComponent");
static_assert(sizeof(UDrawRoomComponent) == 0x000500, "Wrong size on UDrawRoomComponent");

// Class AkAudio.AkEffectShareSet
// 0x0068 (0x00C0 - 0x0058)
class UAkEffectShareSet final : public UAkAudioType
{
public:
	struct FWwiseLocalizedShareSetCookedData      ShareSetCookedData;                                // 0x0058(0x0060)(Edit, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkEffectShareSet">();
	}
	static class UAkEffectShareSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkEffectShareSet>();
	}
};
static_assert(alignof(UAkEffectShareSet) == 0x000008, "Wrong alignment on UAkEffectShareSet");
static_assert(sizeof(UAkEffectShareSet) == 0x0000C0, "Wrong size on UAkEffectShareSet");
static_assert(offsetof(UAkEffectShareSet, ShareSetCookedData) == 0x000058, "Member 'UAkEffectShareSet::ShareSetCookedData' has a wrong offset!");

// Class AkAudio.AkGameplayStatics
// 0x0000 (0x0030 - 0x0030)
class UAkGameplayStatics final : public UBlueprintFunctionLibrary
{
public:
	static void AddOutput(const struct FAkOutputSettings& in_Settings, struct FAkOutputDeviceID* out_DeviceID, TArray<class UAkComponent*>& in_ListenerIDs);
	static void AddOutputCaptureMarker(const class FString& MarkerText);
	static void CancelEventCallback(const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback);
	static void ClearBanks();
	static void ClearSoundBanksAndMedia();
	static int32 D_PostEventAtLocation(class UAkAudioEvent* AkEvent, const struct FVectorDouble& Location, const struct FRotator& Orientation, const class FString& EventName, class UObject* WorldContextObject);
	static void D_SetMultiplePositions(class UAkComponent* GameObjectAkComponent, const TArray<struct FTransformDouble>& Positions, EAkMultiPositionType MultiPositionType);
	static void ExecuteActionOnEvent(class UAkAudioEvent* AkEvent, EAkActionOnEventType ActionType, class AActor* Actor, int32 TransitionDuration, EAkCurveInterpolation FadeCurve, int32 PlayingID);
	static void ExecuteActionOnPlayingID(EAkActionOnEventType ActionType, int32 PlayingID, int32 TransitionDuration, EAkCurveInterpolation FadeCurve);
	static class UObject* GetAkAudioTypeUserData(const class UAkAudioType* Instance, const class UClass* Type);
	static class UAkComponent* GetAkComponent(class USceneComponent* AttachToComponent, bool* ComponentCreated, class FName AttachPointName, const struct FVector& Location, EAttachLocation LocationType);
	static TArray<class FString> GetAvailableAudioCultures();
	static class FString GetCurrentAudioCulture();
	static void GetRTPCValue(class UAkRtpc* RTPCValue, int32 PlayingID, ERTPCValueType InputValueType, float* Value, ERTPCValueType* OutputValueType, class AActor* Actor, class FName RTPC);
	static int32 GetSourcePlayPosition(int32 PlayingID);
	static void GetSpeakerAngles(TArray<float>* SpeakerAngles, float* HeightAngle, const class FString& DeviceShareSet);
	static bool IsAudioEventActive(const class UAkAudioEvent* AudioEvent);
	static bool IsEditor();
	static bool IsGame(class UObject* WorldContextObject);
	static void LoadBankByName(const class FString& BankName);
	static void LoadInitBank();
	static int32 PostAndWaitForEndOfEvent(class UAkAudioEvent* AkEvent, class AActor* Actor, bool bStopWhenAttachedToDestroyed, const struct FLatentActionInfo& LatentInfo);
	static void PostAndWaitForEndOfEventAsync(class UAkAudioEvent* AkEvent, class AActor* Actor, int32* PlayingID, bool bStopWhenAttachedToDestroyed, const struct FLatentActionInfo& LatentInfo);
	static int32 PostEvent(class UAkAudioEvent* AkEvent, class AActor* Actor, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, bool bStopWhenAttachedToDestroyed, const class FString& EventName);
	static int32 PostEventAtLocation(class UAkAudioEvent* AkEvent, const struct FVector& Location, const struct FRotator& Orientation, const class FString& EventName, class UObject* WorldContextObject);
	static void PostEventAtLocationByName(const class FString& EventName, const struct FVector& Location, const struct FRotator& Orientation, class UObject* WorldContextObject);
	static int32 PostEventByDummyGameObj(class UAkAudioEvent* in_pAkEvent, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback);
	static void PostEventByName(const class FString& EventName, class AActor* Actor, bool bStopWhenAttachedToDestroyed);
	static void PostTrigger(class UAkTrigger* TriggerValue, class AActor* Actor, class FName Trigger);
	static void ReloadAudioAssetData();
	static void RemoveOutput(const struct FAkOutputDeviceID& in_OutputDeviceId);
	static void RenderAudio();
	static void ReplaceMainOutput(const struct FAkOutputSettings& MainOutputSettings);
	static void ResetRTPCValue(class UAkRtpc* RTPCValue, int32 InterpolationTimeMs, class AActor* Actor, class FName RTPC);
	static bool SetActorMixerEffect(const struct FAkUniqueID& InAudioNodeID, const int32 InEffectIndex, const class UAkEffectShareSet* InEffectShareSet);
	static bool SetAuxBusEffect(const class UAkAuxBus* InAuxBus, const int32 InEffectIndex, const class UAkEffectShareSet* InEffectShareSet);
	static void SetBusConfig(const class FString& BusName, EAkChannelConfiguration ChannelConfiguration);
	static bool SetBusEffectByID(const struct FAkUniqueID& InBusID, const int32 InEffectIndex, const class UAkEffectShareSet* InEffectShareSet);
	static bool SetBusEffectByName(const class FString& InBusName, const int32 InEffectIndex, const class UAkEffectShareSet* InEffectShareSet);
	static void SetCurrentAudioCulture(const class FString& AudioCulture, const struct FLatentActionInfo& LatentInfo, class UObject* WorldContextObject);
	static void SetCurrentAudioCultureAsync(const class FString& AudioCulture, const TDelegate<void(bool Succeeded)>& Completed);
	static void SetDistanceProbe(class AActor* Listener, class AActor* DistanceProbe);
	static void SetGameObjectToPortalObstruction(class UAkComponent* GameObjectAkComponent, class UAkPortalComponent* PortalComponent, float ObstructionValue);
	static void SetMultiplePositions(class UAkComponent* GameObjectAkComponent, const TArray<struct FTransform>& Positions, EAkMultiPositionType MultiPositionType);
	static void SetOutputBusVolume(float BusVolume, class AActor* Actor);
	static bool SetOutputDeviceEffect(const struct FAkOutputDeviceID& InDeviceID, const int32 InEffectIndex, const class UAkEffectShareSet* InEffectShareSet);
	static void SetPanningRule(EPanningRule PanRule);
	static void SetPortalObstructionAndOcclusion(class UAkPortalComponent* PortalComponent, float ObstructionValue, float OcclusionValue);
	static void SetPortalToPortalObstruction(class UAkPortalComponent* PortalComponent0, class UAkPortalComponent* PortalComponent1, float ObstructionValue);
	static void SetReflectionsOrder(int32 Order, bool RefreshPaths);
	static void SetRTPCValue(class UAkRtpc* RTPCValue, float Value, int32 InterpolationTimeMs, class AActor* Actor, class FName RTPC);
	static void SetSpeakerAngles(const TArray<float>& SpeakerAngles, float HeightAngle, const class FString& DeviceShareSet);
	static void SetState(class UAkStateValue* StateValue, class FName StateGroup, class FName State);
	static void SetSwitch(class UAkSwitchValue* SwitchValue, class AActor* Actor, class FName SwitchGroup, class FName SwitchState);
	static class UAkComponent* SpawnAkComponentAtLocation(class UObject* WorldContextObject, class UAkAudioEvent* AkEvent, const struct FVector& Location, const struct FRotator& Orientation, bool AutoPost, const class FString& EventName, bool AutoDestroy);
	static void StartAllAmbientSounds(class UObject* WorldContextObject);
	static void StartOutputCapture(const class FString& Filename);
	static void StartProfilerCapture(const class FString& Filename);
	static void StopActor(class AActor* Actor);
	static void StopAll();
	static void StopAllAmbientSounds(class UObject* WorldContextObject);
	static void StopOutputCapture();
	static void StopProfilerCapture();
	static void Suspend(bool bValue);
	static void UnloadBankByName(const class FString& BankName);
	static void UnloadInitBank();
	static void UseEarlyReflections(class AActor* Actor, class UAkAuxBus* AuxBus, int32 Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, const class FString& AuxBusName);
	static void UseReverbVolumes(bool inUseReverbVolumes, class AActor* Actor);
	static void WakeupFromSuspend();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkGameplayStatics">();
	}
	static class UAkGameplayStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkGameplayStatics>();
	}
};
static_assert(alignof(UAkGameplayStatics) == 0x000008, "Wrong alignment on UAkGameplayStatics");
static_assert(sizeof(UAkGameplayStatics) == 0x000030, "Wrong size on UAkGameplayStatics");

// Class AkAudio.AkCallbackInfo
// 0x0008 (0x0038 - 0x0030)
class UAkCallbackInfo : public UObject
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCallbackInfo">();
	}
	static class UAkCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkCallbackInfo>();
	}
};
static_assert(alignof(UAkCallbackInfo) == 0x000008, "Wrong alignment on UAkCallbackInfo");
static_assert(sizeof(UAkCallbackInfo) == 0x000038, "Wrong size on UAkCallbackInfo");
static_assert(offsetof(UAkCallbackInfo, AkComponent) == 0x000030, "Member 'UAkCallbackInfo::AkComponent' has a wrong offset!");

// Class AkAudio.AkEventCallbackInfo
// 0x0008 (0x0040 - 0x0038)
class UAkEventCallbackInfo : public UAkCallbackInfo
{
public:
	int32                                         PlayingID;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventID;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkEventCallbackInfo">();
	}
	static class UAkEventCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkEventCallbackInfo>();
	}
};
static_assert(alignof(UAkEventCallbackInfo) == 0x000008, "Wrong alignment on UAkEventCallbackInfo");
static_assert(sizeof(UAkEventCallbackInfo) == 0x000040, "Wrong size on UAkEventCallbackInfo");
static_assert(offsetof(UAkEventCallbackInfo, PlayingID) == 0x000038, "Member 'UAkEventCallbackInfo::PlayingID' has a wrong offset!");
static_assert(offsetof(UAkEventCallbackInfo, EventID) == 0x00003C, "Member 'UAkEventCallbackInfo::EventID' has a wrong offset!");

// Class AkAudio.AkMIDIEventCallbackInfo
// 0x0010 (0x0050 - 0x0040)
class UAkMIDIEventCallbackInfo final : public UAkEventCallbackInfo
{
public:
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetCc(struct FAkMidiCc* AsCc);
	uint8 GetChannel();
	bool GetChannelAftertouch(struct FAkMidiChannelAftertouch* AsChannelAftertouch);
	bool GetGeneric(struct FAkMidiGeneric* AsGeneric);
	bool GetNoteAftertouch(struct FAkMidiNoteAftertouch* AsNoteAftertouch);
	bool GetNoteOff(struct FAkMidiNoteOnOff* AsNoteOff);
	bool GetNoteOn(struct FAkMidiNoteOnOff* AsNoteOn);
	bool GetPitchBend(struct FAkMidiPitchBend* AsPitchBend);
	bool GetProgramChange(struct FAkMidiProgramChange* AsProgramChange);
	EAkMidiEventType GetType();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMIDIEventCallbackInfo">();
	}
	static class UAkMIDIEventCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMIDIEventCallbackInfo>();
	}
};
static_assert(alignof(UAkMIDIEventCallbackInfo) == 0x000008, "Wrong alignment on UAkMIDIEventCallbackInfo");
static_assert(sizeof(UAkMIDIEventCallbackInfo) == 0x000050, "Wrong size on UAkMIDIEventCallbackInfo");

// Class AkAudio.AkMarkerCallbackInfo
// 0x0018 (0x0058 - 0x0040)
class UAkMarkerCallbackInfo final : public UAkEventCallbackInfo
{
public:
	int32                                         Identifier;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Position;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMarkerCallbackInfo">();
	}
	static class UAkMarkerCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMarkerCallbackInfo>();
	}
};
static_assert(alignof(UAkMarkerCallbackInfo) == 0x000008, "Wrong alignment on UAkMarkerCallbackInfo");
static_assert(sizeof(UAkMarkerCallbackInfo) == 0x000058, "Wrong size on UAkMarkerCallbackInfo");
static_assert(offsetof(UAkMarkerCallbackInfo, Identifier) == 0x000040, "Member 'UAkMarkerCallbackInfo::Identifier' has a wrong offset!");
static_assert(offsetof(UAkMarkerCallbackInfo, Position) == 0x000044, "Member 'UAkMarkerCallbackInfo::Position' has a wrong offset!");
static_assert(offsetof(UAkMarkerCallbackInfo, Label) == 0x000048, "Member 'UAkMarkerCallbackInfo::Label' has a wrong offset!");

// Class AkAudio.AkDurationCallbackInfo
// 0x0018 (0x0058 - 0x0040)
class UAkDurationCallbackInfo final : public UAkEventCallbackInfo
{
public:
	float                                         Duration;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EstimatedDuration;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioNodeID;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MediaID;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStreaming;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkDurationCallbackInfo">();
	}
	static class UAkDurationCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkDurationCallbackInfo>();
	}
};
static_assert(alignof(UAkDurationCallbackInfo) == 0x000008, "Wrong alignment on UAkDurationCallbackInfo");
static_assert(sizeof(UAkDurationCallbackInfo) == 0x000058, "Wrong size on UAkDurationCallbackInfo");
static_assert(offsetof(UAkDurationCallbackInfo, Duration) == 0x000040, "Member 'UAkDurationCallbackInfo::Duration' has a wrong offset!");
static_assert(offsetof(UAkDurationCallbackInfo, EstimatedDuration) == 0x000044, "Member 'UAkDurationCallbackInfo::EstimatedDuration' has a wrong offset!");
static_assert(offsetof(UAkDurationCallbackInfo, AudioNodeID) == 0x000048, "Member 'UAkDurationCallbackInfo::AudioNodeID' has a wrong offset!");
static_assert(offsetof(UAkDurationCallbackInfo, MediaID) == 0x00004C, "Member 'UAkDurationCallbackInfo::MediaID' has a wrong offset!");
static_assert(offsetof(UAkDurationCallbackInfo, bStreaming) == 0x000050, "Member 'UAkDurationCallbackInfo::bStreaming' has a wrong offset!");

// Class AkAudio.AkMusicSyncCallbackInfo
// 0x0040 (0x0078 - 0x0038)
class UAkMusicSyncCallbackInfo final : public UAkCallbackInfo
{
public:
	int32                                         PlayingID;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAkSegmentInfo                         SegmentInfo;                                       // 0x003C(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EAkCallbackType                               MusicSyncType;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserCueName;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMusicSyncCallbackInfo">();
	}
	static class UAkMusicSyncCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMusicSyncCallbackInfo>();
	}
};
static_assert(alignof(UAkMusicSyncCallbackInfo) == 0x000008, "Wrong alignment on UAkMusicSyncCallbackInfo");
static_assert(sizeof(UAkMusicSyncCallbackInfo) == 0x000078, "Wrong size on UAkMusicSyncCallbackInfo");
static_assert(offsetof(UAkMusicSyncCallbackInfo, PlayingID) == 0x000038, "Member 'UAkMusicSyncCallbackInfo::PlayingID' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncCallbackInfo, SegmentInfo) == 0x00003C, "Member 'UAkMusicSyncCallbackInfo::SegmentInfo' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncCallbackInfo, MusicSyncType) == 0x000060, "Member 'UAkMusicSyncCallbackInfo::MusicSyncType' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncCallbackInfo, UserCueName) == 0x000068, "Member 'UAkMusicSyncCallbackInfo::UserCueName' has a wrong offset!");

// Class AkAudio.AkGeometryComponent
// 0x0190 (0x03C0 - 0x0230)
class UAkGeometryComponent final : public UAkAcousticTextureSetComponent
{
public:
	EAkMeshType                                   MeshType;                                          // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LOD;                                               // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeldingThreshold;                                  // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UMaterialInterface*, struct FAkGeometrySurfaceOverride> StaticMeshSurfaceOverride;                         // 0x0240(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAkGeometrySurfaceOverride             CollisionMeshSurfaceOverride;                      // 0x0290(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableDiffraction;                                // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDiffractionOnBoundaryEdges;                 // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA[0x6];                                      // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AssociatedRoom;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0x10];                                     // 0x02B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkGeometryData                        GeometryData;                                      // 0x02C8(0x0050)(NativeAccessSpecifierPrivate)
	TMap<int32, double>                           SurfaceAreas;                                      // 0x0318(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_368[0x58];                                     // 0x0368(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConvertMesh();
	void RemoveGeometry();
	void SendGeometry();
	void UpdateGeometry();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkGeometryComponent">();
	}
	static class UAkGeometryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkGeometryComponent>();
	}
};
static_assert(alignof(UAkGeometryComponent) == 0x000010, "Wrong alignment on UAkGeometryComponent");
static_assert(sizeof(UAkGeometryComponent) == 0x0003C0, "Wrong size on UAkGeometryComponent");
static_assert(offsetof(UAkGeometryComponent, MeshType) == 0x000230, "Member 'UAkGeometryComponent::MeshType' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, LOD) == 0x000234, "Member 'UAkGeometryComponent::LOD' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, WeldingThreshold) == 0x000238, "Member 'UAkGeometryComponent::WeldingThreshold' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, StaticMeshSurfaceOverride) == 0x000240, "Member 'UAkGeometryComponent::StaticMeshSurfaceOverride' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, CollisionMeshSurfaceOverride) == 0x000290, "Member 'UAkGeometryComponent::CollisionMeshSurfaceOverride' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, bEnableDiffraction) == 0x0002A8, "Member 'UAkGeometryComponent::bEnableDiffraction' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, bEnableDiffractionOnBoundaryEdges) == 0x0002A9, "Member 'UAkGeometryComponent::bEnableDiffractionOnBoundaryEdges' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, AssociatedRoom) == 0x0002B0, "Member 'UAkGeometryComponent::AssociatedRoom' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, GeometryData) == 0x0002C8, "Member 'UAkGeometryComponent::GeometryData' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, SurfaceAreas) == 0x000318, "Member 'UAkGeometryComponent::SurfaceAreas' has a wrong offset!");

// Class AkAudio.AkHololensInitializationSettings
// 0x00F8 (0x0128 - 0x0030)
class UAkHololensInitializationSettings final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0038(0x0078)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00B0(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkHololensAdvancedInitializationSettings AdvancedSettings;                                  // 0x00D0(0x0054)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkHololensInitializationSettings">();
	}
	static class UAkHololensInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkHololensInitializationSettings>();
	}
};
static_assert(alignof(UAkHololensInitializationSettings) == 0x000008, "Wrong alignment on UAkHololensInitializationSettings");
static_assert(sizeof(UAkHololensInitializationSettings) == 0x000128, "Wrong size on UAkHololensInitializationSettings");
static_assert(offsetof(UAkHololensInitializationSettings, CommonSettings) == 0x000038, "Member 'UAkHololensInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkHololensInitializationSettings, CommunicationSettings) == 0x0000B0, "Member 'UAkHololensInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkHololensInitializationSettings, AdvancedSettings) == 0x0000D0, "Member 'UAkHololensInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkHololensPlatformInfo
// 0x0000 (0x0078 - 0x0078)
class UAkHololensPlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkHololensPlatformInfo">();
	}
	static class UAkHololensPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkHololensPlatformInfo>();
	}
};
static_assert(alignof(UAkHololensPlatformInfo) == 0x000008, "Wrong alignment on UAkHololensPlatformInfo");
static_assert(sizeof(UAkHololensPlatformInfo) == 0x000078, "Wrong size on UAkHololensPlatformInfo");

// Class AkAudio.AkInitBank
// 0x0050 (0x00A8 - 0x0058)
class UAkInitBank final : public UAkAudioType
{
public:
	struct FWwiseInitBankCookedData               InitBankCookedData;                                // 0x0058(0x0048)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkInitBank">();
	}
	static class UAkInitBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkInitBank>();
	}
};
static_assert(alignof(UAkInitBank) == 0x000008, "Wrong alignment on UAkInitBank");
static_assert(sizeof(UAkInitBank) == 0x0000A8, "Wrong size on UAkInitBank");
static_assert(offsetof(UAkInitBank, InitBankCookedData) == 0x000058, "Member 'UAkInitBank::InitBankCookedData' has a wrong offset!");

// Class AkAudio.AkIOSInitializationSettings
// 0x0100 (0x0130 - 0x0030)
class UAkIOSInitializationSettings final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0038(0x0078)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAudioSession                        AudioSession;                                      // 0x00B0(0x000C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00C0(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;                                  // 0x00E0(0x0050)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkIOSInitializationSettings">();
	}
	static class UAkIOSInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkIOSInitializationSettings>();
	}
};
static_assert(alignof(UAkIOSInitializationSettings) == 0x000008, "Wrong alignment on UAkIOSInitializationSettings");
static_assert(sizeof(UAkIOSInitializationSettings) == 0x000130, "Wrong size on UAkIOSInitializationSettings");
static_assert(offsetof(UAkIOSInitializationSettings, CommonSettings) == 0x000038, "Member 'UAkIOSInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkIOSInitializationSettings, AudioSession) == 0x0000B0, "Member 'UAkIOSInitializationSettings::AudioSession' has a wrong offset!");
static_assert(offsetof(UAkIOSInitializationSettings, CommunicationSettings) == 0x0000C0, "Member 'UAkIOSInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkIOSInitializationSettings, AdvancedSettings) == 0x0000E0, "Member 'UAkIOSInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.MovieSceneAkAudioEventSection
// 0x0090 (0x0188 - 0x00F8)
class UMovieSceneAkAudioEventSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_F8[0x28];                                      // 0x00F8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Event;                                             // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          RetriggerEvent;                                    // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScrubTailLengthMs;                                 // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          StopAtSectionEnd;                                  // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0138(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxSourceDuration;                                 // 0x0148(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MaxDurationSourceID;                               // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0160(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         FadeOutMs;                                         // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_174[0x14];                                     // 0x0174(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkAudioEventSection">();
	}
	static class UMovieSceneAkAudioEventSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkAudioEventSection>();
	}
};
static_assert(alignof(UMovieSceneAkAudioEventSection) == 0x000008, "Wrong alignment on UMovieSceneAkAudioEventSection");
static_assert(sizeof(UMovieSceneAkAudioEventSection) == 0x000188, "Wrong size on UMovieSceneAkAudioEventSection");
static_assert(offsetof(UMovieSceneAkAudioEventSection, Event) == 0x000120, "Member 'UMovieSceneAkAudioEventSection::Event' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, RetriggerEvent) == 0x000128, "Member 'UMovieSceneAkAudioEventSection::RetriggerEvent' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, ScrubTailLengthMs) == 0x00012C, "Member 'UMovieSceneAkAudioEventSection::ScrubTailLengthMs' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, StopAtSectionEnd) == 0x000130, "Member 'UMovieSceneAkAudioEventSection::StopAtSectionEnd' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, EventName) == 0x000138, "Member 'UMovieSceneAkAudioEventSection::EventName' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, MaxSourceDuration) == 0x000148, "Member 'UMovieSceneAkAudioEventSection::MaxSourceDuration' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, MaxDurationSourceID) == 0x000150, "Member 'UMovieSceneAkAudioEventSection::MaxDurationSourceID' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, ExternalSources) == 0x000160, "Member 'UMovieSceneAkAudioEventSection::ExternalSources' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, FadeOutMs) == 0x000170, "Member 'UMovieSceneAkAudioEventSection::FadeOutMs' has a wrong offset!");

// Class AkAudio.AkIOSPlatformInfo
// 0x0000 (0x0078 - 0x0078)
class UAkIOSPlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkIOSPlatformInfo">();
	}
	static class UAkIOSPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkIOSPlatformInfo>();
	}
};
static_assert(alignof(UAkIOSPlatformInfo) == 0x000008, "Wrong alignment on UAkIOSPlatformInfo");
static_assert(sizeof(UAkIOSPlatformInfo) == 0x000078, "Wrong size on UAkIOSPlatformInfo");

// Class AkAudio.AkItemBoolPropertiesConv
// 0x0000 (0x0030 - 0x0030)
class UAkItemBoolPropertiesConv final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_FAkBoolPropertyToControlToString(const struct FAkBoolPropertyToControl& INAkBoolPropertyToControl);
	static class FText Conv_FAkBoolPropertyToControlToText(const struct FAkBoolPropertyToControl& INAkBoolPropertyToControl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkItemBoolPropertiesConv">();
	}
	static class UAkItemBoolPropertiesConv* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkItemBoolPropertiesConv>();
	}
};
static_assert(alignof(UAkItemBoolPropertiesConv) == 0x000008, "Wrong alignment on UAkItemBoolPropertiesConv");
static_assert(sizeof(UAkItemBoolPropertiesConv) == 0x000030, "Wrong size on UAkItemBoolPropertiesConv");

// Class AkAudio.AkItemBoolProperties
// 0x0040 (0x01B0 - 0x0170)
class UAkItemBoolProperties final : public UWidget
{
public:
	TMulticastInlineDelegate<void(const class FString& PropertySelected)> OnSelectionChanged;                                // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& PropertyDragged)> OnPropertyDragged;                                 // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x20];                                     // 0x0190(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSearchText(const class FString& newText);

	class FString GetSearchText() const;
	class FString GetSelectedProperty() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkItemBoolProperties">();
	}
	static class UAkItemBoolProperties* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkItemBoolProperties>();
	}
};
static_assert(alignof(UAkItemBoolProperties) == 0x000008, "Wrong alignment on UAkItemBoolProperties");
static_assert(sizeof(UAkItemBoolProperties) == 0x0001B0, "Wrong size on UAkItemBoolProperties");
static_assert(offsetof(UAkItemBoolProperties, OnSelectionChanged) == 0x000170, "Member 'UAkItemBoolProperties::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UAkItemBoolProperties, OnPropertyDragged) == 0x000180, "Member 'UAkItemBoolProperties::OnPropertyDragged' has a wrong offset!");

// Class AkAudio.AkItemPropertiesConv
// 0x0000 (0x0030 - 0x0030)
class UAkItemPropertiesConv final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_FAkPropertyToControlToString(const struct FAkPropertyToControl& INAkPropertyToControl);
	static class FText Conv_FAkPropertyToControlToText(const struct FAkPropertyToControl& INAkPropertyToControl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkItemPropertiesConv">();
	}
	static class UAkItemPropertiesConv* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkItemPropertiesConv>();
	}
};
static_assert(alignof(UAkItemPropertiesConv) == 0x000008, "Wrong alignment on UAkItemPropertiesConv");
static_assert(sizeof(UAkItemPropertiesConv) == 0x000030, "Wrong size on UAkItemPropertiesConv");

// Class AkAudio.AkItemProperties
// 0x0040 (0x01B0 - 0x0170)
class UAkItemProperties final : public UWidget
{
public:
	TMulticastInlineDelegate<void(const class FString& PropertySelected)> OnSelectionChanged;                                // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& PropertyDragged)> OnPropertyDragged;                                 // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x20];                                     // 0x0190(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSearchText(const class FString& newText);

	class FString GetSearchText() const;
	class FString GetSelectedProperty() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkItemProperties">();
	}
	static class UAkItemProperties* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkItemProperties>();
	}
};
static_assert(alignof(UAkItemProperties) == 0x000008, "Wrong alignment on UAkItemProperties");
static_assert(sizeof(UAkItemProperties) == 0x0001B0, "Wrong size on UAkItemProperties");
static_assert(offsetof(UAkItemProperties, OnSelectionChanged) == 0x000170, "Member 'UAkItemProperties::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UAkItemProperties, OnPropertyDragged) == 0x000180, "Member 'UAkItemProperties::OnPropertyDragged' has a wrong offset!");

// Class AkAudio.AkLateReverbComponent
// 0x0080 (0x02A0 - 0x0220)
class UAkLateReverbComponent final : public USceneComponent
{
public:
	bool                                          bEnable;                                           // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SendLevel;                                         // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeRate;                                          // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoAssignAuxBus;                                  // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              AuxBus;                                            // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuxBusName;                                        // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              AuxBusManual;                                      // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_258[0x48];                                     // 0x0258(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AssociateAkTextureSetComponent(class UAkAcousticTextureSetComponent* textureSetComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLateReverbComponent">();
	}
	static class UAkLateReverbComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLateReverbComponent>();
	}
};
static_assert(alignof(UAkLateReverbComponent) == 0x000010, "Wrong alignment on UAkLateReverbComponent");
static_assert(sizeof(UAkLateReverbComponent) == 0x0002A0, "Wrong size on UAkLateReverbComponent");
static_assert(offsetof(UAkLateReverbComponent, bEnable) == 0x000218, "Member 'UAkLateReverbComponent::bEnable' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, SendLevel) == 0x00021C, "Member 'UAkLateReverbComponent::SendLevel' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, FadeRate) == 0x000220, "Member 'UAkLateReverbComponent::FadeRate' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, Priority) == 0x000224, "Member 'UAkLateReverbComponent::Priority' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, AutoAssignAuxBus) == 0x000228, "Member 'UAkLateReverbComponent::AutoAssignAuxBus' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, AuxBus) == 0x000230, "Member 'UAkLateReverbComponent::AuxBus' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, AuxBusName) == 0x000238, "Member 'UAkLateReverbComponent::AuxBusName' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, AuxBusManual) == 0x000250, "Member 'UAkLateReverbComponent::AuxBusManual' has a wrong offset!");

// Class AkAudio.AkLinuxInitializationSettings
// 0x00F0 (0x0120 - 0x0030)
class UAkLinuxInitializationSettings final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0038(0x0078)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00B0(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;                                  // 0x00D0(0x0050)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLinuxInitializationSettings">();
	}
	static class UAkLinuxInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLinuxInitializationSettings>();
	}
};
static_assert(alignof(UAkLinuxInitializationSettings) == 0x000008, "Wrong alignment on UAkLinuxInitializationSettings");
static_assert(sizeof(UAkLinuxInitializationSettings) == 0x000120, "Wrong size on UAkLinuxInitializationSettings");
static_assert(offsetof(UAkLinuxInitializationSettings, CommonSettings) == 0x000038, "Member 'UAkLinuxInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkLinuxInitializationSettings, CommunicationSettings) == 0x0000B0, "Member 'UAkLinuxInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkLinuxInitializationSettings, AdvancedSettings) == 0x0000D0, "Member 'UAkLinuxInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkLinuxPlatformInfo
// 0x0000 (0x0078 - 0x0078)
class UAkLinuxPlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLinuxPlatformInfo">();
	}
	static class UAkLinuxPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLinuxPlatformInfo>();
	}
};
static_assert(alignof(UAkLinuxPlatformInfo) == 0x000008, "Wrong alignment on UAkLinuxPlatformInfo");
static_assert(sizeof(UAkLinuxPlatformInfo) == 0x000078, "Wrong size on UAkLinuxPlatformInfo");

// Class AkAudio.AkMacInitializationSettings
// 0x00F0 (0x0120 - 0x0030)
class UAkMacInitializationSettings final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0038(0x0078)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00B0(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;                                  // 0x00D0(0x0050)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMacInitializationSettings">();
	}
	static class UAkMacInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMacInitializationSettings>();
	}
};
static_assert(alignof(UAkMacInitializationSettings) == 0x000008, "Wrong alignment on UAkMacInitializationSettings");
static_assert(sizeof(UAkMacInitializationSettings) == 0x000120, "Wrong size on UAkMacInitializationSettings");
static_assert(offsetof(UAkMacInitializationSettings, CommonSettings) == 0x000038, "Member 'UAkMacInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkMacInitializationSettings, CommunicationSettings) == 0x0000B0, "Member 'UAkMacInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkMacInitializationSettings, AdvancedSettings) == 0x0000D0, "Member 'UAkMacInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkMacPlatformInfo
// 0x0000 (0x0078 - 0x0078)
class UAkMacPlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMacPlatformInfo">();
	}
	static class UAkMacPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMacPlatformInfo>();
	}
};
static_assert(alignof(UAkMacPlatformInfo) == 0x000008, "Wrong alignment on UAkMacPlatformInfo");
static_assert(sizeof(UAkMacPlatformInfo) == 0x000078, "Wrong size on UAkMacPlatformInfo");

// Class AkAudio.AkOpenHarmonyInitializationSettings
// 0x00F8 (0x0128 - 0x0030)
class UAkOpenHarmonyInitializationSettings final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0038(0x0078)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00B0(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkOpenHarmonyAdvancedInitializationSettings AdvancedSettings;                                  // 0x00D0(0x0058)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkOpenHarmonyInitializationSettings">();
	}
	static class UAkOpenHarmonyInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkOpenHarmonyInitializationSettings>();
	}
};
static_assert(alignof(UAkOpenHarmonyInitializationSettings) == 0x000008, "Wrong alignment on UAkOpenHarmonyInitializationSettings");
static_assert(sizeof(UAkOpenHarmonyInitializationSettings) == 0x000128, "Wrong size on UAkOpenHarmonyInitializationSettings");
static_assert(offsetof(UAkOpenHarmonyInitializationSettings, CommonSettings) == 0x000038, "Member 'UAkOpenHarmonyInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkOpenHarmonyInitializationSettings, CommunicationSettings) == 0x0000B0, "Member 'UAkOpenHarmonyInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkOpenHarmonyInitializationSettings, AdvancedSettings) == 0x0000D0, "Member 'UAkOpenHarmonyInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkOpenHarmonyPlatformInfo
// 0x0000 (0x0078 - 0x0078)
class UAkOpenHarmonyPlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkOpenHarmonyPlatformInfo">();
	}
	static class UAkOpenHarmonyPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkOpenHarmonyPlatformInfo>();
	}
};
static_assert(alignof(UAkOpenHarmonyPlatformInfo) == 0x000008, "Wrong alignment on UAkOpenHarmonyPlatformInfo");
static_assert(sizeof(UAkOpenHarmonyPlatformInfo) == 0x000078, "Wrong size on UAkOpenHarmonyPlatformInfo");

// Class AkAudio.AkPlatformInitialisationSettingsBase
// 0x0000 (0x0030 - 0x0030)
class IAkPlatformInitialisationSettingsBase final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkPlatformInitialisationSettingsBase">();
	}
	static class IAkPlatformInitialisationSettingsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAkPlatformInitialisationSettingsBase>();
	}
};
static_assert(alignof(IAkPlatformInitialisationSettingsBase) == 0x000008, "Wrong alignment on IAkPlatformInitialisationSettingsBase");
static_assert(sizeof(IAkPlatformInitialisationSettingsBase) == 0x000030, "Wrong size on IAkPlatformInitialisationSettingsBase");

// Class AkAudio.AkPS5InitializationSettings
// 0x00F8 (0x0128 - 0x0030)
class UAkPS5InitializationSettings : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkCommonInitializationSettings        CommonSettings;                                    // 0x0038(0x0070)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00A8(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkPS5AdvancedInitializationSettings   AdvancedSettings;                                  // 0x00C8(0x005C)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkPS5InitializationSettings">();
	}
	static class UAkPS5InitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkPS5InitializationSettings>();
	}
};
static_assert(alignof(UAkPS5InitializationSettings) == 0x000008, "Wrong alignment on UAkPS5InitializationSettings");
static_assert(sizeof(UAkPS5InitializationSettings) == 0x000128, "Wrong size on UAkPS5InitializationSettings");
static_assert(offsetof(UAkPS5InitializationSettings, CommonSettings) == 0x000038, "Member 'UAkPS5InitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkPS5InitializationSettings, CommunicationSettings) == 0x0000A8, "Member 'UAkPS5InitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkPS5InitializationSettings, AdvancedSettings) == 0x0000C8, "Member 'UAkPS5InitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkDPXInitializationSettings
// 0x0000 (0x0128 - 0x0128)
class UAkDPXInitializationSettings final : public UAkPS5InitializationSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkDPXInitializationSettings">();
	}
	static class UAkDPXInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkDPXInitializationSettings>();
	}
};
static_assert(alignof(UAkDPXInitializationSettings) == 0x000008, "Wrong alignment on UAkDPXInitializationSettings");
static_assert(sizeof(UAkDPXInitializationSettings) == 0x000128, "Wrong size on UAkDPXInitializationSettings");

// Class AkAudio.AkPS5PlatformInfo
// 0x0000 (0x0078 - 0x0078)
class UAkPS5PlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkPS5PlatformInfo">();
	}
	static class UAkPS5PlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkPS5PlatformInfo>();
	}
};
static_assert(alignof(UAkPS5PlatformInfo) == 0x000008, "Wrong alignment on UAkPS5PlatformInfo");
static_assert(sizeof(UAkPS5PlatformInfo) == 0x000078, "Wrong size on UAkPS5PlatformInfo");

// Class AkAudio.AkReverbVolume
// 0x0038 (0x0320 - 0x02E8)
class AAkReverbVolume final : public AVolume
{
public:
	bool                                          bEnabled;                                          // 0x02E8(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              AuxBus;                                            // 0x02F0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuxBusName;                                        // 0x02F8(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendLevel;                                         // 0x0308(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeRate;                                          // 0x030C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0310(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkLateReverbComponent*                 LateReverbComponent;                               // 0x0318(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkReverbVolume">();
	}
	static class AAkReverbVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkReverbVolume>();
	}
};
static_assert(alignof(AAkReverbVolume) == 0x000008, "Wrong alignment on AAkReverbVolume");
static_assert(sizeof(AAkReverbVolume) == 0x000320, "Wrong size on AAkReverbVolume");
static_assert(offsetof(AAkReverbVolume, bEnabled) == 0x0002E8, "Member 'AAkReverbVolume::bEnabled' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, AuxBus) == 0x0002F0, "Member 'AAkReverbVolume::AuxBus' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, AuxBusName) == 0x0002F8, "Member 'AAkReverbVolume::AuxBusName' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, SendLevel) == 0x000308, "Member 'AAkReverbVolume::SendLevel' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, FadeRate) == 0x00030C, "Member 'AAkReverbVolume::FadeRate' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, Priority) == 0x000310, "Member 'AAkReverbVolume::Priority' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, LateReverbComponent) == 0x000318, "Member 'AAkReverbVolume::LateReverbComponent' has a wrong offset!");

// Class AkAudio.AkRoomComponent
// 0x0030 (0x0270 - 0x0240)
class UAkRoomComponent final : public UAkGameObject
{
public:
	bool                                          bEnable;                                           // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDynamic;                                          // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A[0x2];                                      // 0x023A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Priority;                                          // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallOcclusion;                                     // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuxSendLevel;                                      // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0xF];                                      // 0x0249(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAcousticTextureSetComponent*         GeometryComponent;                                 // 0x0258(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_260[0x10];                                     // 0x0260(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetGeometryComponent(class UAkAcousticTextureSetComponent* textureSetComponent);

	class UPrimitiveComponent* GetPrimitiveParent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkRoomComponent">();
	}
	static class UAkRoomComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkRoomComponent>();
	}
};
static_assert(alignof(UAkRoomComponent) == 0x000010, "Wrong alignment on UAkRoomComponent");
static_assert(sizeof(UAkRoomComponent) == 0x000270, "Wrong size on UAkRoomComponent");
static_assert(offsetof(UAkRoomComponent, bEnable) == 0x000238, "Member 'UAkRoomComponent::bEnable' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, bDynamic) == 0x000239, "Member 'UAkRoomComponent::bDynamic' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, Priority) == 0x00023C, "Member 'UAkRoomComponent::Priority' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, WallOcclusion) == 0x000240, "Member 'UAkRoomComponent::WallOcclusion' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, AuxSendLevel) == 0x000244, "Member 'UAkRoomComponent::AuxSendLevel' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, AutoPost) == 0x000248, "Member 'UAkRoomComponent::AutoPost' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, GeometryComponent) == 0x000258, "Member 'UAkRoomComponent::GeometryComponent' has a wrong offset!");

// Class AkAudio.AkRtpc
// 0x0010 (0x0068 - 0x0058)
class UAkRtpc final : public UAkAudioType
{
public:
	struct FWwiseGameParameterCookedData          GameParameterCookedData;                           // 0x0058(0x0010)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkRtpc">();
	}
	static class UAkRtpc* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkRtpc>();
	}
};
static_assert(alignof(UAkRtpc) == 0x000008, "Wrong alignment on UAkRtpc");
static_assert(sizeof(UAkRtpc) == 0x000068, "Wrong size on UAkRtpc");
static_assert(offsetof(UAkRtpc, GameParameterCookedData) == 0x000058, "Member 'UAkRtpc::GameParameterCookedData' has a wrong offset!");

// Class AkAudio.AkSettings
// 0x0348 (0x0378 - 0x0030)
class UAkSettings final : public UObject
{
public:
	uint8                                         MaxSimultaneousReverbVolumes;                      // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFilePath                              WwiseProjectPath;                                  // 0x0038(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         WwiseSoundDataFolder;                              // 0x0048(0x0010)(NativeAccessSpecifierPublic)
	struct FDirectoryPath                         GeneratedSoundBanksFolder;                         // 0x0058(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         WwiseStagingDirectory;                             // 0x0068(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                          bSoundBanksTransfered;                             // 0x0078(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetsMigrated;                                   // 0x0079(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectMigrated;                                  // 0x007A(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoConnectToWAAPI;                               // 0x007B(0x0001)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DefaultOcclusionCollisionChannel;                  // 0x007C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DefaultFitToGeometryCollisionChannel;              // 0x007D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSoftObjectPtr<class UPhysicalMaterial>, struct FAkGeometrySurfacePropertiesToMap> AkGeometryMap;                                     // 0x0080(0x0050)(Edit, EditFixedSize, Config, NativeAccessSpecifierPublic)
	float                                         GlobalDecayAbsorption;                             // 0x00D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkAuxBus>               DefaultReverbAuxBus;                               // 0x00D8(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<float, TSoftObjectPtr<class UAkAuxBus>>  EnvironmentDecayAuxBusMap;                         // 0x0108(0x0050)(Edit, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 HFDampingName;                                     // 0x0158(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DecayEstimateName;                                 // 0x0168(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TimeToFirstReflectionName;                         // 0x0178(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkRtpc>                 HFDampingRTPC;                                     // 0x0188(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkRtpc>                 DecayEstimateRTPC;                                 // 0x01B8(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkRtpc>                 TimeToFirstReflectionRTPC;                         // 0x01E8(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           AudioInputEvent;                                   // 0x0218(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FAkAcousticTextureParams> AcousticTextureParamsMap;                          // 0x0248(0x0050)(Config, NativeAccessSpecifierPublic)
	bool                                          SplitSwitchContainerMedia;                         // 0x0298(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SplitMediaPerFolder;                               // 0x0299(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseEventBasedPackaging;                            // 0x029A(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B[0x5];                                      // 0x029B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CommandletCommitMessage;                           // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            UnrealCultureToWwiseCulture;                       // 0x02B0(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	class FString                                 DefaultAssetCreationPath;                          // 0x0300(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkInitBank>             InitBank;                                          // 0x0310(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkUnrealAudioRouting                         AudioRouting;                                      // 0x0340(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWwiseSoundEngineEnabled;                          // 0x0344(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWwiseAudioLinkEnabled;                            // 0x0345(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAkAudioMixerEnabled;                              // 0x0346(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AskedToUseNewAssetManagement;                      // 0x0347(0x0001)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMultiCoreRendering;                         // 0x0348(0x0001)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MigratedEnableMultiCoreRendering;                  // 0x0349(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FixupRedirectorsDuringMigration;                   // 0x034A(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34B[0x5];                                      // 0x034B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         WwiseWindowsInstallationPath;                      // 0x0350(0x0010)(Config, Deprecated, NativeAccessSpecifierPublic)
	struct FFilePath                              WwiseMacInstallationPath;                          // 0x0360(0x0010)(Config, Deprecated, NativeAccessSpecifierPublic)
	uint8                                         Pad_370[0x8];                                      // 0x0370(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSettings">();
	}
	static class UAkSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSettings>();
	}
};
static_assert(alignof(UAkSettings) == 0x000008, "Wrong alignment on UAkSettings");
static_assert(sizeof(UAkSettings) == 0x000378, "Wrong size on UAkSettings");
static_assert(offsetof(UAkSettings, MaxSimultaneousReverbVolumes) == 0x000030, "Member 'UAkSettings::MaxSimultaneousReverbVolumes' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseProjectPath) == 0x000038, "Member 'UAkSettings::WwiseProjectPath' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseSoundDataFolder) == 0x000048, "Member 'UAkSettings::WwiseSoundDataFolder' has a wrong offset!");
static_assert(offsetof(UAkSettings, GeneratedSoundBanksFolder) == 0x000058, "Member 'UAkSettings::GeneratedSoundBanksFolder' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseStagingDirectory) == 0x000068, "Member 'UAkSettings::WwiseStagingDirectory' has a wrong offset!");
static_assert(offsetof(UAkSettings, bSoundBanksTransfered) == 0x000078, "Member 'UAkSettings::bSoundBanksTransfered' has a wrong offset!");
static_assert(offsetof(UAkSettings, bAssetsMigrated) == 0x000079, "Member 'UAkSettings::bAssetsMigrated' has a wrong offset!");
static_assert(offsetof(UAkSettings, bProjectMigrated) == 0x00007A, "Member 'UAkSettings::bProjectMigrated' has a wrong offset!");
static_assert(offsetof(UAkSettings, bAutoConnectToWAAPI) == 0x00007B, "Member 'UAkSettings::bAutoConnectToWAAPI' has a wrong offset!");
static_assert(offsetof(UAkSettings, DefaultOcclusionCollisionChannel) == 0x00007C, "Member 'UAkSettings::DefaultOcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkSettings, DefaultFitToGeometryCollisionChannel) == 0x00007D, "Member 'UAkSettings::DefaultFitToGeometryCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkSettings, AkGeometryMap) == 0x000080, "Member 'UAkSettings::AkGeometryMap' has a wrong offset!");
static_assert(offsetof(UAkSettings, GlobalDecayAbsorption) == 0x0000D0, "Member 'UAkSettings::GlobalDecayAbsorption' has a wrong offset!");
static_assert(offsetof(UAkSettings, DefaultReverbAuxBus) == 0x0000D8, "Member 'UAkSettings::DefaultReverbAuxBus' has a wrong offset!");
static_assert(offsetof(UAkSettings, EnvironmentDecayAuxBusMap) == 0x000108, "Member 'UAkSettings::EnvironmentDecayAuxBusMap' has a wrong offset!");
static_assert(offsetof(UAkSettings, HFDampingName) == 0x000158, "Member 'UAkSettings::HFDampingName' has a wrong offset!");
static_assert(offsetof(UAkSettings, DecayEstimateName) == 0x000168, "Member 'UAkSettings::DecayEstimateName' has a wrong offset!");
static_assert(offsetof(UAkSettings, TimeToFirstReflectionName) == 0x000178, "Member 'UAkSettings::TimeToFirstReflectionName' has a wrong offset!");
static_assert(offsetof(UAkSettings, HFDampingRTPC) == 0x000188, "Member 'UAkSettings::HFDampingRTPC' has a wrong offset!");
static_assert(offsetof(UAkSettings, DecayEstimateRTPC) == 0x0001B8, "Member 'UAkSettings::DecayEstimateRTPC' has a wrong offset!");
static_assert(offsetof(UAkSettings, TimeToFirstReflectionRTPC) == 0x0001E8, "Member 'UAkSettings::TimeToFirstReflectionRTPC' has a wrong offset!");
static_assert(offsetof(UAkSettings, AudioInputEvent) == 0x000218, "Member 'UAkSettings::AudioInputEvent' has a wrong offset!");
static_assert(offsetof(UAkSettings, AcousticTextureParamsMap) == 0x000248, "Member 'UAkSettings::AcousticTextureParamsMap' has a wrong offset!");
static_assert(offsetof(UAkSettings, SplitSwitchContainerMedia) == 0x000298, "Member 'UAkSettings::SplitSwitchContainerMedia' has a wrong offset!");
static_assert(offsetof(UAkSettings, SplitMediaPerFolder) == 0x000299, "Member 'UAkSettings::SplitMediaPerFolder' has a wrong offset!");
static_assert(offsetof(UAkSettings, UseEventBasedPackaging) == 0x00029A, "Member 'UAkSettings::UseEventBasedPackaging' has a wrong offset!");
static_assert(offsetof(UAkSettings, CommandletCommitMessage) == 0x0002A0, "Member 'UAkSettings::CommandletCommitMessage' has a wrong offset!");
static_assert(offsetof(UAkSettings, UnrealCultureToWwiseCulture) == 0x0002B0, "Member 'UAkSettings::UnrealCultureToWwiseCulture' has a wrong offset!");
static_assert(offsetof(UAkSettings, DefaultAssetCreationPath) == 0x000300, "Member 'UAkSettings::DefaultAssetCreationPath' has a wrong offset!");
static_assert(offsetof(UAkSettings, InitBank) == 0x000310, "Member 'UAkSettings::InitBank' has a wrong offset!");
static_assert(offsetof(UAkSettings, AudioRouting) == 0x000340, "Member 'UAkSettings::AudioRouting' has a wrong offset!");
static_assert(offsetof(UAkSettings, bWwiseSoundEngineEnabled) == 0x000344, "Member 'UAkSettings::bWwiseSoundEngineEnabled' has a wrong offset!");
static_assert(offsetof(UAkSettings, bWwiseAudioLinkEnabled) == 0x000345, "Member 'UAkSettings::bWwiseAudioLinkEnabled' has a wrong offset!");
static_assert(offsetof(UAkSettings, bAkAudioMixerEnabled) == 0x000346, "Member 'UAkSettings::bAkAudioMixerEnabled' has a wrong offset!");
static_assert(offsetof(UAkSettings, AskedToUseNewAssetManagement) == 0x000347, "Member 'UAkSettings::AskedToUseNewAssetManagement' has a wrong offset!");
static_assert(offsetof(UAkSettings, bEnableMultiCoreRendering) == 0x000348, "Member 'UAkSettings::bEnableMultiCoreRendering' has a wrong offset!");
static_assert(offsetof(UAkSettings, MigratedEnableMultiCoreRendering) == 0x000349, "Member 'UAkSettings::MigratedEnableMultiCoreRendering' has a wrong offset!");
static_assert(offsetof(UAkSettings, FixupRedirectorsDuringMigration) == 0x00034A, "Member 'UAkSettings::FixupRedirectorsDuringMigration' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseWindowsInstallationPath) == 0x000350, "Member 'UAkSettings::WwiseWindowsInstallationPath' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseMacInstallationPath) == 0x000360, "Member 'UAkSettings::WwiseMacInstallationPath' has a wrong offset!");

// Class AkAudio.AkSettingsPerUser
// 0x0050 (0x0080 - 0x0030)
class UAkSettingsPerUser final : public UObject
{
public:
	struct FDirectoryPath                         WwiseWindowsInstallationPath;                      // 0x0030(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	struct FFilePath                              WwiseMacInstallationPath;                          // 0x0040(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         GeneratedSoundBanksFolderUserOverride;             // 0x0050(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	class FString                                 WaapiIPAddress;                                    // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        WaapiPort;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoConnectToWAAPI;                               // 0x0074(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoSyncSelection;                                 // 0x0075(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        WaapiTranslatorTimeout;                            // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SuppressGeneratedSoundBanksPathWarnings;           // 0x007C(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SoundDataGenerationSkipLanguage;                   // 0x007D(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AskForWwiseAssetReload;                            // 0x007E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7F[0x1];                                       // 0x007F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSettingsPerUser">();
	}
	static class UAkSettingsPerUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSettingsPerUser>();
	}
};
static_assert(alignof(UAkSettingsPerUser) == 0x000008, "Wrong alignment on UAkSettingsPerUser");
static_assert(sizeof(UAkSettingsPerUser) == 0x000080, "Wrong size on UAkSettingsPerUser");
static_assert(offsetof(UAkSettingsPerUser, WwiseWindowsInstallationPath) == 0x000030, "Member 'UAkSettingsPerUser::WwiseWindowsInstallationPath' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, WwiseMacInstallationPath) == 0x000040, "Member 'UAkSettingsPerUser::WwiseMacInstallationPath' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, GeneratedSoundBanksFolderUserOverride) == 0x000050, "Member 'UAkSettingsPerUser::GeneratedSoundBanksFolderUserOverride' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, WaapiIPAddress) == 0x000060, "Member 'UAkSettingsPerUser::WaapiIPAddress' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, WaapiPort) == 0x000070, "Member 'UAkSettingsPerUser::WaapiPort' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, bAutoConnectToWAAPI) == 0x000074, "Member 'UAkSettingsPerUser::bAutoConnectToWAAPI' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, AutoSyncSelection) == 0x000075, "Member 'UAkSettingsPerUser::AutoSyncSelection' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, WaapiTranslatorTimeout) == 0x000078, "Member 'UAkSettingsPerUser::WaapiTranslatorTimeout' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, SuppressGeneratedSoundBanksPathWarnings) == 0x00007C, "Member 'UAkSettingsPerUser::SuppressGeneratedSoundBanksPathWarnings' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, SoundDataGenerationSkipLanguage) == 0x00007D, "Member 'UAkSettingsPerUser::SoundDataGenerationSkipLanguage' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, AskForWwiseAssetReload) == 0x00007E, "Member 'UAkSettingsPerUser::AskForWwiseAssetReload' has a wrong offset!");

// Class AkAudio.AkSlider
// 0x0470 (0x05E0 - 0x0170)
class UAkSlider final : public UWidget
{
public:
	float                                         Value;                                             // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             ValueDelegate;                                     // 0x0178(0x0028)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FSliderStyle                           WidgetStyle;                                       // 0x01A0(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EOrientation                                  Orientation;                                       // 0x0510(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_511[0x3];                                      // 0x0511(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SliderBarColor;                                    // 0x0514(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderHandleColor;                                 // 0x0524(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IndentHandle;                                      // 0x0534(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x0535(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_536[0x2];                                      // 0x0536(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepSize;                                          // 0x0538(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x053C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53D[0x3];                                      // 0x053D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkPropertyToControl                   ThePropertyToControl;                              // 0x0540(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FAkWwiseItemToControl                  ItemToControl;                                     // 0x0550(0x0040)(Edit, Config, EditConst, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnValueChanged;                                    // 0x0590(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGuid& ItemDroppedID)> OnItemDropped;                                     // 0x05A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& PropertyDropped)> OnPropertyDropped;                                 // 0x05B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C0[0x20];                                     // 0x05C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAkSliderItemId(const struct FGuid& ItemId);
	void SetAkSliderItemProperty(const class FString& ItemProperty);
	void SetIndentHandle(bool InValue);
	void SetLocked(bool InValue);
	void SetSliderBarColor(const struct FLinearColor& InValue);
	void SetSliderHandleColor(const struct FLinearColor& InValue);
	void SetStepSize(float InValue);
	void SetValue(float InValue);

	const struct FGuid GetAkSliderItemId() const;
	const class FString GetAkSliderItemProperty() const;
	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSlider">();
	}
	static class UAkSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSlider>();
	}
};
static_assert(alignof(UAkSlider) == 0x000008, "Wrong alignment on UAkSlider");
static_assert(sizeof(UAkSlider) == 0x0005E0, "Wrong size on UAkSlider");
static_assert(offsetof(UAkSlider, Value) == 0x000170, "Member 'UAkSlider::Value' has a wrong offset!");
static_assert(offsetof(UAkSlider, ValueDelegate) == 0x000178, "Member 'UAkSlider::ValueDelegate' has a wrong offset!");
static_assert(offsetof(UAkSlider, WidgetStyle) == 0x0001A0, "Member 'UAkSlider::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UAkSlider, Orientation) == 0x000510, "Member 'UAkSlider::Orientation' has a wrong offset!");
static_assert(offsetof(UAkSlider, SliderBarColor) == 0x000514, "Member 'UAkSlider::SliderBarColor' has a wrong offset!");
static_assert(offsetof(UAkSlider, SliderHandleColor) == 0x000524, "Member 'UAkSlider::SliderHandleColor' has a wrong offset!");
static_assert(offsetof(UAkSlider, IndentHandle) == 0x000534, "Member 'UAkSlider::IndentHandle' has a wrong offset!");
static_assert(offsetof(UAkSlider, Locked) == 0x000535, "Member 'UAkSlider::Locked' has a wrong offset!");
static_assert(offsetof(UAkSlider, StepSize) == 0x000538, "Member 'UAkSlider::StepSize' has a wrong offset!");
static_assert(offsetof(UAkSlider, IsFocusable) == 0x00053C, "Member 'UAkSlider::IsFocusable' has a wrong offset!");
static_assert(offsetof(UAkSlider, ThePropertyToControl) == 0x000540, "Member 'UAkSlider::ThePropertyToControl' has a wrong offset!");
static_assert(offsetof(UAkSlider, ItemToControl) == 0x000550, "Member 'UAkSlider::ItemToControl' has a wrong offset!");
static_assert(offsetof(UAkSlider, OnValueChanged) == 0x000590, "Member 'UAkSlider::OnValueChanged' has a wrong offset!");
static_assert(offsetof(UAkSlider, OnItemDropped) == 0x0005A0, "Member 'UAkSlider::OnItemDropped' has a wrong offset!");
static_assert(offsetof(UAkSlider, OnPropertyDropped) == 0x0005B0, "Member 'UAkSlider::OnPropertyDropped' has a wrong offset!");

// Class AkAudio.AkSpatialAudioVolume
// 0x0018 (0x0300 - 0x02E8)
class AAkSpatialAudioVolume final : public AVolume
{
public:
	class UAkSurfaceReflectorSetComponent*        SurfaceReflectorSet;                               // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkLateReverbComponent*                 LateReverb;                                        // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkRoomComponent*                       Room;                                              // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSpatialAudioVolume">();
	}
	static class AAkSpatialAudioVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkSpatialAudioVolume>();
	}
};
static_assert(alignof(AAkSpatialAudioVolume) == 0x000008, "Wrong alignment on AAkSpatialAudioVolume");
static_assert(sizeof(AAkSpatialAudioVolume) == 0x000300, "Wrong size on AAkSpatialAudioVolume");
static_assert(offsetof(AAkSpatialAudioVolume, SurfaceReflectorSet) == 0x0002E8, "Member 'AAkSpatialAudioVolume::SurfaceReflectorSet' has a wrong offset!");
static_assert(offsetof(AAkSpatialAudioVolume, LateReverb) == 0x0002F0, "Member 'AAkSpatialAudioVolume::LateReverb' has a wrong offset!");
static_assert(offsetof(AAkSpatialAudioVolume, Room) == 0x0002F8, "Member 'AAkSpatialAudioVolume::Room' has a wrong offset!");

// Class AkAudio.AkSubmixInputComponent
// 0x0050 (0x0420 - 0x03D0)
class UAkSubmixInputComponent final : public UAkAudioInputComponent
{
public:
	class USoundSubmix*                           SubmixToRecord;                                    // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D8[0x48];                                     // 0x03D8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSubmixInputComponent">();
	}
	static class UAkSubmixInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSubmixInputComponent>();
	}
};
static_assert(alignof(UAkSubmixInputComponent) == 0x000010, "Wrong alignment on UAkSubmixInputComponent");
static_assert(sizeof(UAkSubmixInputComponent) == 0x000420, "Wrong size on UAkSubmixInputComponent");
static_assert(offsetof(UAkSubmixInputComponent, SubmixToRecord) == 0x0003D0, "Member 'UAkSubmixInputComponent::SubmixToRecord' has a wrong offset!");

// Class AkAudio.AkSurfaceReflectorSetComponent
// 0x0030 (0x0260 - 0x0230)
class UAkSurfaceReflectorSetComponent final : public UAkAcousticTextureSetComponent
{
public:
	bool                                          bEnableSurfaceReflectors;                          // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkSurfacePoly>                 AcousticPolys;                                     // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEnableDiffraction;                                // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDiffractionOnBoundaryEdges;                 // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A[0x6];                                      // 0x024A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AssociatedRoom;                                    // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RemoveSurfaceReflectorSet();
	void SendSurfaceReflectorSet();
	void UpdateAcousticProperties(const TArray<struct FAkSurfacePoly>& in_AcousticPolys);
	void UpdateSurfaceReflectorSet();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSurfaceReflectorSetComponent">();
	}
	static class UAkSurfaceReflectorSetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSurfaceReflectorSetComponent>();
	}
};
static_assert(alignof(UAkSurfaceReflectorSetComponent) == 0x000010, "Wrong alignment on UAkSurfaceReflectorSetComponent");
static_assert(sizeof(UAkSurfaceReflectorSetComponent) == 0x000260, "Wrong size on UAkSurfaceReflectorSetComponent");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, bEnableSurfaceReflectors) == 0x000230, "Member 'UAkSurfaceReflectorSetComponent::bEnableSurfaceReflectors' has a wrong offset!");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, AcousticPolys) == 0x000238, "Member 'UAkSurfaceReflectorSetComponent::AcousticPolys' has a wrong offset!");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, bEnableDiffraction) == 0x000248, "Member 'UAkSurfaceReflectorSetComponent::bEnableDiffraction' has a wrong offset!");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, bEnableDiffractionOnBoundaryEdges) == 0x000249, "Member 'UAkSurfaceReflectorSetComponent::bEnableDiffractionOnBoundaryEdges' has a wrong offset!");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, AssociatedRoom) == 0x000250, "Member 'UAkSurfaceReflectorSetComponent::AssociatedRoom' has a wrong offset!");

// Class AkAudio.AkSwitchValue
// 0x0000 (0x0080 - 0x0080)
class UAkSwitchValue final : public UAkGroupValue
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSwitchValue">();
	}
	static class UAkSwitchValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSwitchValue>();
	}
};
static_assert(alignof(UAkSwitchValue) == 0x000008, "Wrong alignment on UAkSwitchValue");
static_assert(sizeof(UAkSwitchValue) == 0x000080, "Wrong size on UAkSwitchValue");

// Class AkAudio.AkTrigger
// 0x0010 (0x0068 - 0x0058)
class UAkTrigger final : public UAkAudioType
{
public:
	struct FWwiseTriggerCookedData                TriggerCookedData;                                 // 0x0058(0x0010)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkTrigger">();
	}
	static class UAkTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkTrigger>();
	}
};
static_assert(alignof(UAkTrigger) == 0x000008, "Wrong alignment on UAkTrigger");
static_assert(sizeof(UAkTrigger) == 0x000068, "Wrong size on UAkTrigger");
static_assert(offsetof(UAkTrigger, TriggerCookedData) == 0x000058, "Member 'UAkTrigger::TriggerCookedData' has a wrong offset!");

// Class AkAudio.AkTVOSInitializationSettings
// 0x0100 (0x0130 - 0x0030)
class UAkTVOSInitializationSettings final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0038(0x0078)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAudioSession                        AudioSession;                                      // 0x00B0(0x000C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00C0(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;                                  // 0x00E0(0x0050)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkTVOSInitializationSettings">();
	}
	static class UAkTVOSInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkTVOSInitializationSettings>();
	}
};
static_assert(alignof(UAkTVOSInitializationSettings) == 0x000008, "Wrong alignment on UAkTVOSInitializationSettings");
static_assert(sizeof(UAkTVOSInitializationSettings) == 0x000130, "Wrong size on UAkTVOSInitializationSettings");
static_assert(offsetof(UAkTVOSInitializationSettings, CommonSettings) == 0x000038, "Member 'UAkTVOSInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkTVOSInitializationSettings, AudioSession) == 0x0000B0, "Member 'UAkTVOSInitializationSettings::AudioSession' has a wrong offset!");
static_assert(offsetof(UAkTVOSInitializationSettings, CommunicationSettings) == 0x0000C0, "Member 'UAkTVOSInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkTVOSInitializationSettings, AdvancedSettings) == 0x0000E0, "Member 'UAkTVOSInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkTVOSPlatformInfo
// 0x0000 (0x0078 - 0x0078)
class UAkTVOSPlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkTVOSPlatformInfo">();
	}
	static class UAkTVOSPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkTVOSPlatformInfo>();
	}
};
static_assert(alignof(UAkTVOSPlatformInfo) == 0x000008, "Wrong alignment on UAkTVOSPlatformInfo");
static_assert(sizeof(UAkTVOSPlatformInfo) == 0x000078, "Wrong size on UAkTVOSPlatformInfo");

// Class AkAudio.AkWaapiCalls
// 0x0000 (0x0030 - 0x0030)
class UAkWaapiCalls final : public UBlueprintFunctionLibrary
{
public:
	static struct FAKWaapiJsonObject CallWaapi(const struct FAkWaapiUri& WaapiUri, const struct FAKWaapiJsonObject& WaapiArgs, const struct FAKWaapiJsonObject& WaapiOptions);
	static class FString Conv_FAkWaapiSubscriptionIdToString(const struct FAkWaapiSubscriptionId& INAkWaapiSubscriptionId);
	static class FText Conv_FAkWaapiSubscriptionIdToText(const struct FAkWaapiSubscriptionId& INAkWaapiSubscriptionId);
	static int32 GetSubscriptionID(const struct FAkWaapiSubscriptionId& Subscription);
	static bool RegisterWaapiConnectionLostCallback(const TDelegate<void()>& Callback);
	static bool RegisterWaapiProjectLoadedCallback(const TDelegate<void()>& Callback);
	static void SetSubscriptionID(const struct FAkWaapiSubscriptionId& Subscription, int32 id);
	static struct FAKWaapiJsonObject SubscribeToWaapi(const struct FAkWaapiUri& WaapiUri, const struct FAKWaapiJsonObject& WaapiOptions, const TDelegate<void(const struct FAkWaapiSubscriptionId& SubscriptionId, const struct FAKWaapiJsonObject& WaapiJsonObject)>& CallBack, struct FAkWaapiSubscriptionId* SubscriptionId, bool* SubscriptionDone);
	static struct FAKWaapiJsonObject Unsubscribe(const struct FAkWaapiSubscriptionId& SubscriptionId, bool* UnsubscriptionDone);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWaapiCalls">();
	}
	static class UAkWaapiCalls* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWaapiCalls>();
	}
};
static_assert(alignof(UAkWaapiCalls) == 0x000008, "Wrong alignment on UAkWaapiCalls");
static_assert(sizeof(UAkWaapiCalls) == 0x000030, "Wrong size on UAkWaapiCalls");

// Class AkAudio.SAkWaapiFieldNamesConv
// 0x0000 (0x0030 - 0x0030)
class USAkWaapiFieldNamesConv final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_FAkWaapiFieldNamesToString(const struct FAkWaapiFieldNames& INAkWaapiFieldNames);
	static class FText Conv_FAkWaapiFieldNamesToText(const struct FAkWaapiFieldNames& INAkWaapiFieldNames);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SAkWaapiFieldNamesConv">();
	}
	static class USAkWaapiFieldNamesConv* GetDefaultObj()
	{
		return GetDefaultObjImpl<USAkWaapiFieldNamesConv>();
	}
};
static_assert(alignof(USAkWaapiFieldNamesConv) == 0x000008, "Wrong alignment on USAkWaapiFieldNamesConv");
static_assert(sizeof(USAkWaapiFieldNamesConv) == 0x000030, "Wrong size on USAkWaapiFieldNamesConv");

// Class AkAudio.AkWaapiJsonManager
// 0x0000 (0x0030 - 0x0030)
class UAkWaapiJsonManager final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_FAKWaapiJsonObjectToString(const struct FAKWaapiJsonObject& INAKWaapiJsonObject);
	static class FText Conv_FAKWaapiJsonObjectToText(const struct FAKWaapiJsonObject& INAKWaapiJsonObject);
	static const TArray<struct FAKWaapiJsonObject> GetArrayField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& target);
	static bool GetBoolField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& target);
	static int32 GetIntegerField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& target);
	static float GetNumberField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& target);
	static struct FAKWaapiJsonObject GetObjectField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& target);
	static class FString GetStringField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& target);
	static struct FAKWaapiJsonObject SetArrayObjectFields(const struct FAkWaapiFieldNames& FieldName, const TArray<struct FAKWaapiJsonObject>& FieldObjectValues, const struct FAKWaapiJsonObject& target);
	static struct FAKWaapiJsonObject SetArrayStringFields(const struct FAkWaapiFieldNames& FieldName, const TArray<class FString>& FieldStringValues, const struct FAKWaapiJsonObject& target);
	static struct FAKWaapiJsonObject SetBoolField(const struct FAkWaapiFieldNames& FieldName, bool FieldValue, const struct FAKWaapiJsonObject& target);
	static struct FAKWaapiJsonObject SetNumberField(const struct FAkWaapiFieldNames& FieldName, float FieldValue, const struct FAKWaapiJsonObject& target);
	static struct FAKWaapiJsonObject SetObjectField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& FieldValue, const struct FAKWaapiJsonObject& target);
	static struct FAKWaapiJsonObject SetStringField(const struct FAkWaapiFieldNames& FieldName, const class FString& FieldValue, const struct FAKWaapiJsonObject& target);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWaapiJsonManager">();
	}
	static class UAkWaapiJsonManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWaapiJsonManager>();
	}
};
static_assert(alignof(UAkWaapiJsonManager) == 0x000008, "Wrong alignment on UAkWaapiJsonManager");
static_assert(sizeof(UAkWaapiJsonManager) == 0x000030, "Wrong size on UAkWaapiJsonManager");

// Class AkAudio.AkWaapiUriConv
// 0x0000 (0x0030 - 0x0030)
class UAkWaapiUriConv final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_FAkWaapiUriToString(const struct FAkWaapiUri& INAkWaapiUri);
	static class FText Conv_FAkWaapiUriToText(const struct FAkWaapiUri& INAkWaapiUri);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWaapiUriConv">();
	}
	static class UAkWaapiUriConv* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWaapiUriConv>();
	}
};
static_assert(alignof(UAkWaapiUriConv) == 0x000008, "Wrong alignment on UAkWaapiUriConv");
static_assert(sizeof(UAkWaapiUriConv) == 0x000030, "Wrong size on UAkWaapiUriConv");

// Class AkAudio.AkWindowsInitializationSettings
// 0x00F8 (0x0128 - 0x0030)
class UAkWindowsInitializationSettings final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0038(0x0078)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00B0(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkWindowsAdvancedInitializationSettings AdvancedSettings;                                  // 0x00D0(0x0058)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWindowsInitializationSettings">();
	}
	static class UAkWindowsInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWindowsInitializationSettings>();
	}
};
static_assert(alignof(UAkWindowsInitializationSettings) == 0x000008, "Wrong alignment on UAkWindowsInitializationSettings");
static_assert(sizeof(UAkWindowsInitializationSettings) == 0x000128, "Wrong size on UAkWindowsInitializationSettings");
static_assert(offsetof(UAkWindowsInitializationSettings, CommonSettings) == 0x000038, "Member 'UAkWindowsInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkWindowsInitializationSettings, CommunicationSettings) == 0x0000B0, "Member 'UAkWindowsInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkWindowsInitializationSettings, AdvancedSettings) == 0x0000D0, "Member 'UAkWindowsInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkWin32PlatformInfo
// 0x0000 (0x0078 - 0x0078)
class UAkWin32PlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWin32PlatformInfo">();
	}
	static class UAkWin32PlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWin32PlatformInfo>();
	}
};
static_assert(alignof(UAkWin32PlatformInfo) == 0x000008, "Wrong alignment on UAkWin32PlatformInfo");
static_assert(sizeof(UAkWin32PlatformInfo) == 0x000078, "Wrong size on UAkWin32PlatformInfo");

// Class AkAudio.AkWin64PlatformInfo
// 0x0000 (0x0078 - 0x0078)
class UAkWin64PlatformInfo : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWin64PlatformInfo">();
	}
	static class UAkWin64PlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWin64PlatformInfo>();
	}
};
static_assert(alignof(UAkWin64PlatformInfo) == 0x000008, "Wrong alignment on UAkWin64PlatformInfo");
static_assert(sizeof(UAkWin64PlatformInfo) == 0x000078, "Wrong size on UAkWin64PlatformInfo");

// Class AkAudio.AkWindowsPlatformInfo
// 0x0000 (0x0078 - 0x0078)
class UAkWindowsPlatformInfo final : public UAkWin64PlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWindowsPlatformInfo">();
	}
	static class UAkWindowsPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWindowsPlatformInfo>();
	}
};
static_assert(alignof(UAkWindowsPlatformInfo) == 0x000008, "Wrong alignment on UAkWindowsPlatformInfo");
static_assert(sizeof(UAkWindowsPlatformInfo) == 0x000078, "Wrong size on UAkWindowsPlatformInfo");

// Class AkAudio.AkWwiseTree
// 0x0040 (0x01B0 - 0x0170)
class UAkWwiseTree final : public UWidget
{
public:
	TMulticastInlineDelegate<void(const struct FGuid& ItemSelectedID)> OnSelectionChanged;                                // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGuid& ItemDraggedID, const class FString& ItemDraggedName)> OnItemDragged;                                     // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x20];                                     // 0x0190(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSearchText(const class FString& newText);

	class FString GetSearchText() const;
	struct FAkWwiseObjectDetails GetSelectedItem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWwiseTree">();
	}
	static class UAkWwiseTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWwiseTree>();
	}
};
static_assert(alignof(UAkWwiseTree) == 0x000008, "Wrong alignment on UAkWwiseTree");
static_assert(sizeof(UAkWwiseTree) == 0x0001B0, "Wrong size on UAkWwiseTree");
static_assert(offsetof(UAkWwiseTree, OnSelectionChanged) == 0x000170, "Member 'UAkWwiseTree::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UAkWwiseTree, OnItemDragged) == 0x000180, "Member 'UAkWwiseTree::OnItemDragged' has a wrong offset!");

// Class AkAudio.AkWwiseTreeSelector
// 0x0060 (0x01D0 - 0x0170)
class UAkWwiseTreeSelector final : public UWidget
{
public:
	TMulticastInlineDelegate<void(const struct FGuid& ItemSelectedID)> OnSelectionChanged;                                // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGuid& ItemDraggedID, const class FString& ItemDraggedName)> OnItemDragged;                                     // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x40];                                     // 0x0190(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWwiseTreeSelector">();
	}
	static class UAkWwiseTreeSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWwiseTreeSelector>();
	}
};
static_assert(alignof(UAkWwiseTreeSelector) == 0x000008, "Wrong alignment on UAkWwiseTreeSelector");
static_assert(sizeof(UAkWwiseTreeSelector) == 0x0001D0, "Wrong size on UAkWwiseTreeSelector");
static_assert(offsetof(UAkWwiseTreeSelector, OnSelectionChanged) == 0x000170, "Member 'UAkWwiseTreeSelector::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UAkWwiseTreeSelector, OnItemDragged) == 0x000180, "Member 'UAkWwiseTreeSelector::OnItemDragged' has a wrong offset!");

// Class AkAudio.MovieSceneAkTrack
// 0x0018 (0x0098 - 0x0080)
class UMovieSceneAkTrack : public UMovieSceneTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0080(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsAMasterTrack;                                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkTrack">();
	}
	static class UMovieSceneAkTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkTrack>();
	}
};
static_assert(alignof(UMovieSceneAkTrack) == 0x000008, "Wrong alignment on UMovieSceneAkTrack");
static_assert(sizeof(UMovieSceneAkTrack) == 0x000098, "Wrong size on UMovieSceneAkTrack");
static_assert(offsetof(UMovieSceneAkTrack, Sections) == 0x000080, "Member 'UMovieSceneAkTrack::Sections' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkTrack, bIsAMasterTrack) == 0x000090, "Member 'UMovieSceneAkTrack::bIsAMasterTrack' has a wrong offset!");

// Class AkAudio.MovieSceneAkAudioEventTrack
// 0x0008 (0x00A0 - 0x0098)
class UMovieSceneAkAudioEventTrack final : public UMovieSceneAkTrack
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkAudioEventTrack">();
	}
	static class UMovieSceneAkAudioEventTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkAudioEventTrack>();
	}
};
static_assert(alignof(UMovieSceneAkAudioEventTrack) == 0x000008, "Wrong alignment on UMovieSceneAkAudioEventTrack");
static_assert(sizeof(UMovieSceneAkAudioEventTrack) == 0x0000A0, "Wrong size on UMovieSceneAkAudioEventTrack");

// Class AkAudio.MovieSceneAkAudioRTPCSection
// 0x0168 (0x0260 - 0x00F8)
class UMovieSceneAkAudioRTPCSection final : public UMovieSceneSection
{
public:
	class UAkRtpc*                                RTPC;                                              // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 Name_0;                                            // 0x0100(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRichCurve                             FloatCurve;                                        // 0x0110(0x0080)(Protected, NativeAccessSpecifierProtected)
	struct FMovieSceneFloatChannelSerializationHelper FloatChannelSerializationHelper;                   // 0x0190(0x0030)(Protected, NativeAccessSpecifierProtected)
	struct FMovieSceneFloatChannel                RTPCChannel;                                       // 0x01C0(0x00A0)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkAudioRTPCSection">();
	}
	static class UMovieSceneAkAudioRTPCSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkAudioRTPCSection>();
	}
};
static_assert(alignof(UMovieSceneAkAudioRTPCSection) == 0x000008, "Wrong alignment on UMovieSceneAkAudioRTPCSection");
static_assert(sizeof(UMovieSceneAkAudioRTPCSection) == 0x000260, "Wrong size on UMovieSceneAkAudioRTPCSection");
static_assert(offsetof(UMovieSceneAkAudioRTPCSection, RTPC) == 0x0000F8, "Member 'UMovieSceneAkAudioRTPCSection::RTPC' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioRTPCSection, Name_0) == 0x000100, "Member 'UMovieSceneAkAudioRTPCSection::Name_0' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioRTPCSection, FloatCurve) == 0x000110, "Member 'UMovieSceneAkAudioRTPCSection::FloatCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioRTPCSection, FloatChannelSerializationHelper) == 0x000190, "Member 'UMovieSceneAkAudioRTPCSection::FloatChannelSerializationHelper' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioRTPCSection, RTPCChannel) == 0x0001C0, "Member 'UMovieSceneAkAudioRTPCSection::RTPCChannel' has a wrong offset!");

// Class AkAudio.MovieSceneAkAudioRTPCTrack
// 0x0008 (0x00A0 - 0x0098)
class UMovieSceneAkAudioRTPCTrack final : public UMovieSceneAkTrack
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkAudioRTPCTrack">();
	}
	static class UMovieSceneAkAudioRTPCTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkAudioRTPCTrack>();
	}
};
static_assert(alignof(UMovieSceneAkAudioRTPCTrack) == 0x000008, "Wrong alignment on UMovieSceneAkAudioRTPCTrack");
static_assert(sizeof(UMovieSceneAkAudioRTPCTrack) == 0x0000A0, "Wrong size on UMovieSceneAkAudioRTPCTrack");

// Class AkAudio.PostEventAsync
// 0x0078 (0x00B0 - 0x0038)
class UPostEventAsync final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(int32 PlayingID)> Completed;                                         // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x68];                                      // 0x0048(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPostEventAsync* PostEventAsync(const class UObject* WorldContextObject, class UAkAudioEvent* AkEvent, class AActor* Actor, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, bool bStopWhenAttachedToDestroyed);

	void PollPostEventFuture();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PostEventAsync">();
	}
	static class UPostEventAsync* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPostEventAsync>();
	}
};
static_assert(alignof(UPostEventAsync) == 0x000008, "Wrong alignment on UPostEventAsync");
static_assert(sizeof(UPostEventAsync) == 0x0000B0, "Wrong size on UPostEventAsync");
static_assert(offsetof(UPostEventAsync, Completed) == 0x000038, "Member 'UPostEventAsync::Completed' has a wrong offset!");

// Class AkAudio.PostEventAtLocationAsync
// 0x0050 (0x0088 - 0x0038)
class UPostEventAtLocationAsync final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(int32 PlayingID)> Completed;                                         // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x40];                                      // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPostEventAtLocationAsync* PostEventAtLocationAsync(const class UObject* WorldContextObject, class UAkAudioEvent* AkEvent, const struct FVector& Location, const struct FRotator& Orientation);

	void PollPostEventFuture();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PostEventAtLocationAsync">();
	}
	static class UPostEventAtLocationAsync* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPostEventAtLocationAsync>();
	}
};
static_assert(alignof(UPostEventAtLocationAsync) == 0x000008, "Wrong alignment on UPostEventAtLocationAsync");
static_assert(sizeof(UPostEventAtLocationAsync) == 0x000088, "Wrong size on UPostEventAtLocationAsync");
static_assert(offsetof(UPostEventAtLocationAsync, Completed) == 0x000038, "Member 'UPostEventAtLocationAsync::Completed' has a wrong offset!");

}

