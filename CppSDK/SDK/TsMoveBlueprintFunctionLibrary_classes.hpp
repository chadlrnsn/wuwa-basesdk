#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsMoveBlueprintFunctionLibrary

#include "Basic.hpp"

#include "EEnterClimb_structs.hpp"
#include "Engine_classes.hpp"
#include "EMovementDirection_structs.hpp"
#include "EExitClimb_structs.hpp"
#include "EClimbState_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsMoveBlueprintFunctionLibrary.TsMoveBlueprintFunctionLibrary_C
// 0x0000 (0x0030 - 0x0030)
class UTsMoveBlueprintFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static bool SetActorRotationWithPriority(int32 entityId, const struct FRotator& value, bool sweep, const class FString& context, class UObject* __WorldContext);
	static bool SetActorRotationWithContext(int32 entityId, const struct FRotator& rotation, bool sweep, const class FString& context, class UObject* __WorldContext);
	static void ActorTeleportToWithContext(int32 entityId, const struct FVectorDouble& location, const struct FRotator& rotation, const class FString& context, class UObject* __WorldContext);
	static void ActorKuroMoveAlongFloorWithContext(int32 entityId, const struct FVector& velocity, float deltaSeconds, const class FString& context, class UObject* __WorldContext);
	static struct FVectorDouble GetInputDirect(int32 entityId, class UObject* __WorldContext);
	static void SetInputDirect(int32 entityId, const struct FVectorDouble& direct, class UObject* __WorldContext);
	static struct FRotator GetInputRotator(int32 entityId, class UObject* __WorldContext);
	static void SetInputRotator(int32 entityId, const struct FRotator& rotator, class UObject* __WorldContext);
	static void SetCharacterHidden(int32 entityId, bool isHidden, class UObject* callObject, const class FString& reason, class UObject* __WorldContext);
	static void SetHiddenMovementMode(int32 entityId, bool isHidden, class UObject* __WorldContext);
	static bool CanResponseInput(int32 entityId, class UObject* __WorldContext);
	static bool CanJumpPress(int32 entityId, class UObject* __WorldContext);
	static bool CanWalkPress(int32 entityId, class UObject* __WorldContext);
	static float GetAimYawRate(int32 entityId, class UObject* __WorldContext);
	static struct FSMovementSetting_State GetMovementData(int32 entityId, class UObject* __WorldContext);
	static void SmoothCharacterRotation(int32 entityId, const struct FRotator& target, float speed, const class FString& context, class UObject* __WorldContext);
	static bool HasMoveInput(int32 entityId, class UObject* __WorldContext);
	static bool HasRotatorInput(int32 entityId, class UObject* __WorldContext);
	static bool IsMoving(int32 entityId, class UObject* __WorldContext);
	static bool IsJump(int32 entityId, class UObject* __WorldContext);
	static float GetSpeed(int32 entityId, class UObject* __WorldContext);
	static float GetGroundedTime(int32 entityId, class UObject* __WorldContext);
	static bool IsFallingIntoWater(int32 entityId, class UObject* __WorldContext);
	static void SetForceSpeed(int32 entityId, const struct FVectorDouble& speed, class UObject* __WorldContext);
	static void SetAddMove(int32 entityId, class UMeshComponent* mesh, const struct FVectorDouble& speed, float timeLength, class UCurveFloat* curve, class UObject* __WorldContext);
	static void StopAddMove(int32 entityId, class UMeshComponent* mesh, class UObject* __WorldContext);
	static struct FHitResult FixActorLocation(int32 entityId, const struct FVectorDouble& target, float offset, class UObject* __WorldContext);
	static void StopAllAddMove(int32 entityId, class UObject* __WorldContext);
	static void SetAddMoveWorld(int32 entityId, class UMeshComponent* mesh, const struct FVectorDouble& speed, float timeLength, class UCurveFloat* curve, class UObject* __WorldContext);
	static void SetAddMoveWorldSpeed(int32 entityId, class UMeshComponent* mesh, const struct FVectorDouble& speed, class UObject* __WorldContext);
	static void SetAddMoveOffset(int32 entityId, const struct FVectorDouble& offset, class UObject* __WorldContext);
	static void SetAddMoveRotation(int32 entityId, const struct FRotator& rotation, class UObject* __WorldContext);
	static void SetEnterWaterState(int32 entityId, bool isEnter, class UObject* __WorldContext);
	static struct FSClimbState GetClimbState(int32 entityId, class UObject* __WorldContext);
	static float GetClimbRadius(int32 entityId, class UObject* __WorldContext);
	static struct FSClimbInfo GetClimbInfo(int32 entityId, class UObject* __WorldContext);
	static void KickExitCheck(int32 entityId, class UObject* __WorldContext);
	static bool CanClimbPress(int32 entityId, class UObject* __WorldContext);
	static void OnEnterClimb(int32 entityId, class UObject* __WorldContext);
	static void OnExitClimb(int32 entityId, class UObject* __WorldContext);
	static void DealClimbUpStart(int32 entityId, class UObject* __WorldContext);
	static void FinishClimbDown(int32 entityId, class UObject* __WorldContext);
	static void DealClimbUpFinish(int32 entityId, class UObject* __WorldContext);
	static void SetClimbState(int32 entityId, EClimbState climbState, class UObject* __WorldContext);
	static void SetEnterClimbType(int32 entityId, EEnterClimb enterType, class UObject* __WorldContext);
	static void SetExitClimbType(int32 entityId, EExitClimb exitType, class UObject* __WorldContext);
	static struct FVectorDouble GetWaterLocation(int32 entityId, class UObject* __WorldContext);
	static bool GetWaterVolume(int32 entityId, class UObject* __WorldContext);
	static float GetClimbOnWallAngle(int32 entityId, class UObject* __WorldContext);
	static void SetUseDebugMovementSetting(int32 entityId, bool newSelect, class UObject* __WorldContext);
	static void SetDebugMovementSetting(int32 entityId, const struct FSMovementSetting& newSetting, class UObject* __WorldContext);
	static void SetLockedRotation(int32 entityId, bool lock, class UObject* __WorldContext);
	static bool GetLockedRotation(int32 entityId, class UObject* __WorldContext);
	static void SetFallingHorizontalMaxSpeed(int32 entityId, float speed, class UObject* __WorldContext);
	static void ClearFallingHorizontalMaxSpeed(int32 entityId, class UObject* __WorldContext);
	static bool DetectClimbWithDirect(int32 entityId, bool bSprintEnter, const struct FVectorDouble& direct, class UObject* __WorldContext);
	static void TurnToTarget(int32 entityId, class AActor* target, float speed, class UObject* __WorldContext);
	static EMovementDirection GetMonsterMoveDirection(int32 entityId, class UObject* __WorldContext);
	static class FString GetRoleBody(int32 entityId, class UObject* __WorldContext);
	static float GetRacingRightSpeed(int32 entityId, class UObject* __WorldContext);
	static void SetPendulumData(int32 entityId, float addVelocityX, float addVelocityY, float addVelocityZ, float forwardLossPercentage, float lossPercentage, float gravity, float friction, float deceleration, float accelerator, float maxSpeed, float maxFallingSpeed, class UObject* __WorldContext);
	static void Reset(int32 entityId, class UObject* __WorldContext);
	static void SetGrabPoint(int32 entityId, const struct FVectorDouble& point, class UObject* __WorldContext);
	static struct FVectorDouble GetGrabPoint(int32 entityId, class UObject* __WorldContext);
	static void SetHooked(int32 entityId, bool isHooked, class UObject* __WorldContext);
	static bool GetHooked(int32 entityId, class UObject* __WorldContext);
	static void SetSocketName(int32 entityId, const class FString& socketName, class UObject* __WorldContext);
	static void SetRopeForce(int32 entityId, float ropeForce, class UObject* __WorldContext);
	static float GetRopeForce(int32 entityId, class UObject* __WorldContext);
	static void SetDistanceRopeToActor(int32 entityId, float ropeForce, class UObject* __WorldContext);
	static float GetDistanceRopeToActor(int32 entityId, class UObject* __WorldContext);
	static void SetAirControl(int32 entityId, float airControl, class UObject* __WorldContext);
	static float GetAirControl(int32 entityId, class UObject* __WorldContext);
	static void SetUpLength(int32 entityId, float length, class UObject* __WorldContext);
	static void SetCanMoveFromInput(int32 entityId, bool canMove, class UObject* __WorldContext);
	static void UpdateAnimInfoMoveMonster(int32 entityId, class UBP_ABPLogicParams_C* animLogicParams, class UObject* __WorldContext);
	static void UpdateAnimInfoMove(int32 entityId, class UBP_ABPLogicParams_C* animLogicParams, class UObject* __WorldContext);
	static void UpdateAnimInfoMoveRoleNpc(int32 entityId, class UBP_ABPLogicParams_C* animLogicParams, class UObject* __WorldContext);
	static void TurnOffAutomaticFlightMode(int32 entityId, class UObject* __WorldContext);
	static bool HasMoveInputOrTickIntervalAndModelBuffer(int32 entityId, class UObject* __WorldContext);
	static bool SetActorLocationWithContext(int32 entityId, const struct FVectorDouble& location, bool sweep, const class FString& context, class UObject* __WorldContext);
	static void SetActorLocationAndRotationWithContext(int32 entityId, const struct FVectorDouble& location, const struct FRotator& rotation, bool sweep, const class FString& context, class UObject* __WorldContext);
	static void AddActorWorldOffsetWithContext(int32 entityId, const struct FVectorDouble& offset, bool sweep, const class FString& context, class UObject* __WorldContext);
	static void AddActorWorldRotationWithContext(int32 entityId, const struct FRotator& rotation, bool sweep, const class FString& context, class UObject* __WorldContext);
	static void AddActorLocalRotationWithContext(int32 entityId, const struct FRotator& rotation, bool sweep, const class FString& context, class UObject* __WorldContext);
	static void AddActorLocalOffsetWithContext(int32 entityId, const struct FVectorDouble& offset, bool sweep, const class FString& context, class UObject* __WorldContext);
	static struct FVectorDouble GetSwimLocation(int32 entityId, class UObject* __WorldContext);
	static struct FVectorDouble SimpleSwim(int32 entityId, float deltaSeconds, float detectedHeight, const struct FVectorDouble& currentSpeed, class UObject* __WorldContext);
	static void LeaveRoll(int32 entityId, class UObject* __WorldContext);
	static void EnterRoll(int32 entityId, float targetSpeed, float friction, float accelOnGround, float gravity, float stepUpHeight, float maxSpeed, class UObject* __WorldContext);
	static bool EnterKite(int32 entityId, class UObject* __WorldContext);
	static struct FVector GetAcceleration(int32 entityId, class UObject* __WorldContext);
	static float GetHeightAboveGround(int32 entityId, float detectedHeight, class UObject* __WorldContext);
	static void TurnOffCameraDrivenAutoFlightMode(int32 entityId, class UObject* __WorldContext);
	static void TurnOnAutomaticFlightMode(int32 entityId, class UICM_AutomaticFlight_DataBase_C* dataAsset, class UObject* __WorldContext);
	static void TurnOnCameraDrivenAutoFlightMode(int32 entityId, class UBP_CameraDrivenAutoFlightData_C* dataAsset, class UObject* __WorldContext);
	static void AddActorWorldOffsetWithContextAndReset(int32 entityId, const struct FVectorDouble& offset, bool sweep, const class FString& context, class UObject* __WorldContext);
	static bool SetActorLookAtWithContext(int32 entityId, const struct FVectorDouble& targetPoint, const class FString& context, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsMoveBlueprintFunctionLibrary_C">();
	}
	static class UTsMoveBlueprintFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTsMoveBlueprintFunctionLibrary_C>();
	}
};
static_assert(alignof(UTsMoveBlueprintFunctionLibrary_C) == 0x000008, "Wrong alignment on UTsMoveBlueprintFunctionLibrary_C");
static_assert(sizeof(UTsMoveBlueprintFunctionLibrary_C) == 0x000030, "Wrong size on UTsMoveBlueprintFunctionLibrary_C");

}

